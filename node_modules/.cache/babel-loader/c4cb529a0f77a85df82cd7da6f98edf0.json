{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-OutwardArrowsIcon');\nconst paths = {\n  horizontal: React.createElement(\"path\", {\n    d: 'M4 8h8m-1.5 2l2-2-2-2m-5 4l-2-2 2-2m-5-2.5v9m15-9v9'\n  }),\n  vertical: React.createElement(\"path\", {\n    d: 'M8 4v8m-2-1.5l2 2 2-2m-4-5l2-2 2 2m2.5-5h-9m9 15h-9'\n  }),\n  diagonal: React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: 'M11.828 4.172l-7.656 7.656m-.354-2.474v2.828h2.828m2.708-8.364h2.828v2.828'\n  }), React.createElement(\"path\", {\n    d: 'M.5 8.5v7h7m8-8v-7h-7'\n  }))\n};\nexport const outwardArrowsIconPropTypes = {\n  /**\tDetermines the kind of arrows you want to display. \\`horizontal\\` is\n      usually used for width. \\`vertical\\` is usually used for height.\n      \\`diagonal\\` is usually used for aspect ratio. */\n  kind: PropTypes.oneOf(['horizontal', 'vertical', 'diagonal']),\n  /** Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`. */\n  size: PropTypes.number,\n  /** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width. */\n  viewBox: PropTypes.string,\n  /** Sets the color of the Icon.  May not be applicable for icons that are tied\n      to specific colors (e.g. DangerIcon). */\n  color: PropTypes.oneOf(['neutral-dark', 'neutral-light', 'neutral-extra-light', 'primary', 'white', 'success', 'warning', 'secondary-one', 'secondary-two', 'secondary-three', 'secondary-five']),\n  /** Any valid SVG aspect ratio. */\n  aspectRatio: PropTypes.string,\n  /** Adds styling that makes the icon appear clickable. */\n  isClickable: PropTypes.bool,\n  /** Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false. */\n  isDisabled: PropTypes.bool,\n  /** Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onClick: PropTypes.func,\n  /** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onSelect: PropTypes.func,\n  /** Any valid React children. */\n  children: PropTypes.element,\n  /** Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library. */\n  className: PropTypes.string\n};\nexport const OutwardArrowsIcon = _ref => {\n  let {\n    className,\n    kind = 'horizontal',\n    ...passThroughs\n  } = _ref;\n  return React.createElement(Icon, {\n    ..._.omit(passThroughs, ['initialState']),\n    className: cx('&', className)\n  }, paths[kind]);\n};\nOutwardArrowsIcon.displayName = 'OutwardArrowsIcon';\nOutwardArrowsIcon.propTypes = outwardArrowsIconPropTypes;\nOutwardArrowsIcon.defaultProps = Icon.defaultProps;\nexport default OutwardArrowsIcon;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAoB,MAAM,SAAS;AAC1C,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,qBAAqB,CAAC;AAEtD,MAAMC,KAAK,GAAG;EACbC,UAAU,EAAEP;IAAMQ,CAAC,EAAC;EAAqD,EAAG;EAC5EC,QAAQ,EAAET;IAAMQ,CAAC,EAAC;EAAqD,EAAG;EAC1EE,QAAQ,EACPV,0CACCA;IAAMQ,CAAC,EAAC;EAA4E,EAAG,EACvFR;IAAMQ,CAAC,EAAC;EAAuB,EAAG;CAGpC;AASD,OAAO,MAAMG,0BAA0B,GAAG;EACzC;;;EAGAC,IAAI,EAAEX,SAAS,CAACY,KAAK,CAAC,CAAC,YAAY,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;EAE7D;;;EAGAC,IAAI,EAAEb,SAAS,CAACc,MAAM;EAEtB;EACAC,KAAK,EAAEf,SAAS,CAACgB,SAAS,CAAC,CAAChB,SAAS,CAACc,MAAM,EAAEd,SAAS,CAACiB,MAAM,CAAC,CAAC;EAEhE;EACAC,MAAM,EAAElB,SAAS,CAACgB,SAAS,CAAC,CAAChB,SAAS,CAACc,MAAM,EAAEd,SAAS,CAACiB,MAAM,CAAC,CAAC;EAEjE;;;EAGAE,OAAO,EAAEnB,SAAS,CAACiB,MAAM;EAEzB;;EAEAG,KAAK,EAAEpB,SAAS,CAACY,KAAK,CAAC,CACtB,cAAc,EACd,eAAe,EACf,qBAAqB,EACrB,SAAS,EACT,OAAO,EACP,SAAS,EACT,SAAS,EACT,eAAe,EACf,eAAe,EACf,iBAAiB,EACjB,gBAAgB,CAChB,CAAC;EAEF;EACAS,WAAW,EAAErB,SAAS,CAACiB,MAAM;EAE7B;EACAK,WAAW,EAAEtB,SAAS,CAACuB,IAAI;EAE3B;;EAEAC,UAAU,EAAExB,SAAS,CAACuB,IAAI;EAE1B;;EAEAE,OAAO,EAAEzB,SAAS,CAAC0B,IAAI;EAEvB;;EAEAC,QAAQ,EAAE3B,SAAS,CAAC0B,IAAI;EAExB;EACAE,QAAQ,EAAE5B,SAAS,CAAC6B,OAAO;EAE3B;;EAEAC,SAAS,EAAE9B,SAAS,CAACiB;CACrB;AAED,OAAO,MAAMc,iBAAiB,GAAG,QAIH;EAAA,IAJI;IACjCD,SAAS;IACTnB,IAAI,GAAG,YAAY;IACnB,GAAGqB;EAAY,CACU;EACzB,OACCjC,oBAACE,IAAI;IAAA,GACAH,CAAC,CAACmC,IAAI,CAACD,YAAY,EAAE,CAAC,cAAc,CAAC,CAAC;IAC1CF,SAAS,EAAE3B,EAAE,CAAC,GAAG,EAAE2B,SAAS;EAAC,GAE5BzB,KAAK,CAACM,IAAI,CAAC,CACN;AAET,CAAC;AAEDoB,iBAAiB,CAACG,WAAW,GAAG,mBAAmB;AAEnDH,iBAAiB,CAACI,SAAS,GAAGzB,0BAA0B;AAExDqB,iBAAiB,CAACK,YAAY,GAAGnC,IAAI,CAACmC,YAAY;AAElD,eAAeL,iBAAiB","names":["_","React","PropTypes","Icon","lucidClassNames","cx","bind","paths","horizontal","d","vertical","diagonal","outwardArrowsIconPropTypes","kind","oneOf","size","number","width","oneOfType","string","height","viewBox","color","aspectRatio","isClickable","bool","isDisabled","onClick","func","onSelect","children","element","className","OutwardArrowsIcon","passThroughs","omit","displayName","propTypes","defaultProps"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/OutwardArrowsIcon/OutwardArrowsIcon.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon, { IIconProps } from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\n\nconst cx = lucidClassNames.bind('&-OutwardArrowsIcon');\n\nconst paths = {\n\thorizontal: <path d='M4 8h8m-1.5 2l2-2-2-2m-5 4l-2-2 2-2m-5-2.5v9m15-9v9' />,\n\tvertical: <path d='M8 4v8m-2-1.5l2 2 2-2m-4-5l2-2 2 2m2.5-5h-9m9 15h-9' />,\n\tdiagonal: (\n\t\t<>\n\t\t\t<path d='M11.828 4.172l-7.656 7.656m-.354-2.474v2.828h2.828m2.708-8.364h2.828v2.828' />\n\t\t\t<path d='M.5 8.5v7h7m8-8v-7h-7' />\n\t\t</>\n\t),\n};\n\nexport interface IOutwardArrowsIconProps extends IIconProps {\n\t/**\tDetermines the kind of arrows you want to display. \\`horizontal\\` is\n\t\tusually used for width. \\`vertical\\` is usually used for height.\n\t\t\\`diagonal\\` is usually used for aspect ratio. */\n\tkind?: 'horizontal' | 'vertical' | 'diagonal';\n}\n\nexport const outwardArrowsIconPropTypes = {\n\t/**\tDetermines the kind of arrows you want to display. \\`horizontal\\` is\n\t\tusually used for width. \\`vertical\\` is usually used for height.\n\t\t\\`diagonal\\` is usually used for aspect ratio. */\n\tkind: PropTypes.oneOf(['horizontal', 'vertical', 'diagonal']),\n\n\t/** Size variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`. */\n\tsize: PropTypes.number,\n\n\t/** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n\twidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n\theight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth. */\n\tviewBox: PropTypes.string,\n\n\t/** Sets the color of the Icon.  May not be applicable for icons that are tied\n\t\tto specific colors (e.g. DangerIcon). */\n\tcolor: PropTypes.oneOf([\n\t\t'neutral-dark',\n\t\t'neutral-light',\n\t\t'neutral-extra-light',\n\t\t'primary',\n\t\t'white',\n\t\t'success',\n\t\t'warning',\n\t\t'secondary-one',\n\t\t'secondary-two',\n\t\t'secondary-three',\n\t\t'secondary-five',\n\t]),\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio: PropTypes.string,\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable: PropTypes.bool,\n\n\t/** Adds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false. */\n\tisDisabled: PropTypes.bool,\n\n\t/** Called when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonClick: PropTypes.func,\n\n\t/** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonSelect: PropTypes.func,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.element,\n\n\t/** Classes that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library. */\n\tclassName: PropTypes.string,\n};\n\nexport const OutwardArrowsIcon = ({\n\tclassName,\n\tkind = 'horizontal',\n\t...passThroughs\n}: IOutwardArrowsIconProps) => {\n\treturn (\n\t\t<Icon\n\t\t\t{..._.omit(passThroughs, ['initialState'])}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t{paths[kind]}\n\t\t</Icon>\n\t);\n};\n\nOutwardArrowsIcon.displayName = 'OutwardArrowsIcon';\n\nOutwardArrowsIcon.propTypes = outwardArrowsIconPropTypes;\n\nOutwardArrowsIcon.defaultProps = Icon.defaultProps;\n\nexport default OutwardArrowsIcon;\n"]},"metadata":{},"sourceType":"module"}