{"ast":null,"code":"import { omit } from 'lodash';\nimport * as d3Selection from 'd3-selection';\nimport React from 'react';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport DraggableLineChartD3 from './DraggableLineChartD3';\nconst cx = lucidClassNames.bind('&-DraggableLineChart');\nconst getEmptyRenderProp = preSelectText => React.createElement(\"div\", {\n  style: {\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n}, React.createElement(\"div\", {\n  className: cx('&-empty-info')\n}, preSelectText));\nconst getCleanData = data => {\n  return data.map(_ref => {\n    let {\n      x,\n      y\n    } = _ref;\n    return {\n      x,\n      y: Number.isFinite(y) ? y : 0\n    };\n  });\n};\nconst draggableLineChartDefaultProps = {\n  height: 315,\n  width: 1000,\n  margin: {\n    top: 65,\n    right: 80,\n    bottom: 65,\n    left: 80\n  }\n};\n/** TODO: Remove this constant when the component is converted to a functional component */\nconst nonPassThroughs = ['height', 'width', 'margin', 'data', 'onDragEnd', 'xAxisTicksVertical', 'dataIsCentered', 'yAxisMin', 'xAxisRenderProp', 'onPreselect', 'preSelectText', 'yAxisFormatter'].concat(['initialState', 'callbackId']);\nclass DraggableLineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.d3LineChart = null;\n  }\n  componentDidUpdate() {\n    this.d3LineChart.updateLineChart(this.props.data);\n  }\n  componentDidMount() {\n    const svg = d3Selection.select(this.ref);\n    const {\n      height,\n      width,\n      margin,\n      data,\n      onDragEnd,\n      xAxisTicksVertical,\n      dataIsCentered,\n      yAxisMin = 0,\n      xAxisRenderProp,\n      onPreselect,\n      preSelectText,\n      yAxisFormatter = null\n    } = this.props;\n    const emptyRenderProp = onPreselect && preSelectText ? () => getEmptyRenderProp(preSelectText) : undefined;\n    this.d3LineChart = new DraggableLineChartD3(svg, {\n      height: height || draggableLineChartDefaultProps.height,\n      width: width || draggableLineChartDefaultProps.width,\n      margin: margin || draggableLineChartDefaultProps.margin,\n      data: getCleanData(data),\n      onDragEnd,\n      xAxisTicksVertical,\n      dataIsCentered,\n      yAxisMin,\n      yAxisFormatter,\n      xAxisRenderProp,\n      emptyRenderProp,\n      cx,\n      onPreselect\n    });\n    this.d3LineChart.renderLineChart();\n  }\n  render() {\n    const {\n      height,\n      width,\n      className,\n      ...passThroughs\n    } = this.props;\n    return React.createElement(\"svg\", {\n      ...omit(passThroughs, nonPassThroughs),\n      ref: ref => this.ref = ref,\n      className: cx('&', className),\n      width: width,\n      height: height\n    });\n  }\n}\nDraggableLineChart.displayName = 'DraggableLineChart';\nDraggableLineChart.peek = {\n  description: `The \\`DraggableLineChart\\` is a single-lined line chart where the points on the line are draggable and will update the data real-time.`,\n  categories: ['visualizations', 'charts']\n};\nDraggableLineChart.defaultProps = draggableLineChartDefaultProps;\nexport default DraggableLineChart;","map":{"version":3,"mappings":"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","names":["omit","d3Selection","React","lucidClassNames","DraggableLineChartD3","cx","bind","getEmptyRenderProp","preSelectText","style","height","display","alignItems","justifyContent","className","getCleanData","data","map","x","y","Number","isFinite","draggableLineChartDefaultProps","width","margin","top","right","bottom","left","nonPassThroughs","concat","DraggableLineChart","Component","constructor","props","ref","createRef","d3LineChart","componentDidUpdate","updateLineChart","componentDidMount","svg","select","onDragEnd","xAxisTicksVertical","dataIsCentered","yAxisMin","xAxisRenderProp","onPreselect","yAxisFormatter","emptyRenderProp","undefined","renderLineChart","render","passThroughs","description","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/DraggableLineChart/DraggableLineChart.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport * as d3Selection from 'd3-selection';\nimport React from 'react';\nimport { Overwrite } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport DraggableLineChartD3, {\n\tIData,\n\tIDraggableLineChart,\n} from './DraggableLineChartD3';\n\nconst cx = lucidClassNames.bind('&-DraggableLineChart');\n\nconst getEmptyRenderProp = (preSelectText: string) => (\n\t<div\n\t\tstyle={{\n\t\t\theight: '100%',\n\t\t\tdisplay: 'flex',\n\t\t\talignItems: 'center',\n\t\t\tjustifyContent: 'center',\n\t\t}}\n\t>\n\t\t<div className={cx('&-empty-info')}>{preSelectText}</div>\n\t</div>\n);\n\nexport type IDraggableLineChartProps = Overwrite<\n\tReact.SVGProps<SVGGElement>,\n\tIDraggableLineChart\n>;\n\nconst getCleanData = (data: IData): IData => {\n\treturn data.map(({ x, y }) => ({ x, y: Number.isFinite(y) ? y : 0 }));\n};\n\nconst draggableLineChartDefaultProps = {\n\theight: 315,\n\twidth: 1000,\n\tmargin: { top: 65, right: 80, bottom: 65, left: 80 },\n};\n\n/** TODO: Remove this constant when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'height',\n\t'width',\n\t'margin',\n\t'data',\n\t'onDragEnd',\n\t'xAxisTicksVertical',\n\t'dataIsCentered',\n\t'yAxisMin',\n\t'xAxisRenderProp',\n\t'onPreselect',\n\t'preSelectText',\n\t'yAxisFormatter',\n].concat(['initialState', 'callbackId']);\n\nclass DraggableLineChart extends React.Component<IDraggableLineChartProps, {}> {\n\tref: any;\n\td3LineChart: any;\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t\tthis.d3LineChart = null;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.d3LineChart.updateLineChart(this.props.data);\n\t}\n\tcomponentDidMount() {\n\t\tconst svg = d3Selection.select(this.ref);\n\t\tconst {\n\t\t\theight,\n\t\t\twidth,\n\t\t\tmargin,\n\t\t\tdata,\n\t\t\tonDragEnd,\n\t\t\txAxisTicksVertical,\n\t\t\tdataIsCentered,\n\t\t\tyAxisMin = 0,\n\t\t\txAxisRenderProp,\n\t\t\tonPreselect,\n\t\t\tpreSelectText,\n\t\t\tyAxisFormatter = null,\n\t\t} = this.props;\n\t\tconst emptyRenderProp =\n\t\t\tonPreselect && preSelectText\n\t\t\t\t? () => getEmptyRenderProp(preSelectText)\n\t\t\t\t: undefined;\n\n\t\tthis.d3LineChart = new DraggableLineChartD3(svg, {\n\t\t\theight: height || draggableLineChartDefaultProps.height,\n\t\t\twidth: width || draggableLineChartDefaultProps.width,\n\t\t\tmargin: margin || draggableLineChartDefaultProps.margin,\n\t\t\tdata: getCleanData(data),\n\t\t\tonDragEnd,\n\t\t\txAxisTicksVertical,\n\t\t\tdataIsCentered,\n\t\t\tyAxisMin,\n\t\t\tyAxisFormatter,\n\t\t\txAxisRenderProp,\n\t\t\temptyRenderProp,\n\t\t\tcx,\n\t\t\tonPreselect,\n\t\t});\n\t\tthis.d3LineChart.renderLineChart();\n\t}\n\n\tstatic displayName = 'DraggableLineChart';\n\n\tstatic peek = {\n\t\tdescription: `The \\`DraggableLineChart\\` is a single-lined line chart where the points on the line are draggable and will update the data real-time.`,\n\t\tcategories: ['visualizations', 'charts'],\n\t};\n\n\tstatic defaultProps = draggableLineChartDefaultProps;\n\n\trender(): React.ReactNode {\n\t\tconst { height, width, className, ...passThroughs } = this.props;\n\n\t\treturn (\n\t\t\t<svg\n\t\t\t\t{...(omit(passThroughs, nonPassThroughs) as any)}\n\t\t\t\tref={(ref: SVGSVGElement) => (this.ref = ref)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\twidth={width}\n\t\t\t\theight={height}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default DraggableLineChart;\n"]},"metadata":{},"sourceType":"module"}