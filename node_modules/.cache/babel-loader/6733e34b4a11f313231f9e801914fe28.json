{"ast":null,"code":"/* eslint-disable react/prop-types */\nimport _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { partitionText, propsSearch } from '../../util/text-manipulation';\nimport { getFirst, findTypes, rejectTypes, addSpecialOmittedProps } from '../../util/component-types';\nimport { SearchFieldDumb as SearchField } from '../SearchField/SearchField';\nimport { DropMenuDumb as DropMenu } from '../DropMenu/DropMenu';\nimport LoadingIcon from '../Icon/LoadingIcon/LoadingIcon';\nimport CheckboxLabeled from '../CheckboxLabeled/CheckboxLabeled';\nimport Selection from '../Selection/Selection';\nimport { Validation } from '../Validation/Validation';\nimport * as reducers from './SearchableMultiSelect.reducers';\nconst {\n  any,\n  arrayOf,\n  bool,\n  func,\n  number,\n  oneOfType,\n  shape,\n  string,\n  oneOf,\n  node\n} = PropTypes;\nconst cx = lucidClassNames.bind('&-SearchableMultiSelect');\n/** SearchableMultiSelect.SelectionOption */\nconst SelectionOption = _props => null;\nSelectionOption.displayName = 'SearchableMultiSelect.Option.Selection';\nSelectionOption.propTypes = Selection.propTypes;\nSelectionOption.propName = 'Selection';\nSelectionOption.peek = {\n  description: `\n\t\tCustomizes the rendering of the Option when it is selected\n\t\tand is displayed instead of the Placeholder.\n\t`\n};\n/** SearchableMultiSelect.Option.Selected */\nconst Selected = _props => null;\nSelected.displayName = 'SearchableMultiSelect.Option.Selected';\nSelected.peek = {\n  description: `\n\t\tCustomizes the rendering of the Option when it is selected\n\t\tand is displayed instead of the Placeholder.\n\t`\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\nconst OptionGroup = _props => null;\nOptionGroup.displayName = 'SearchableMultiSelect.OptionGroup';\nOptionGroup.peek = {\n  description: `\n\t\tA special kind of \\`Option\\` that is always rendered at the top of\n\t\tthe menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n\t\tunselect.\n\t`\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\nOptionGroup.Selected = Selected;\n/** SearchableMultiSelect.SearchField */\nconst SearchFieldComponent = _props => null;\nSearchFieldComponent.displayName = 'SearchableMultiSelect.SearchField';\nSearchFieldComponent.peek = {\n  description: `\n\t\tPasses props through to the \\`Search Field\\`.\n\t`\n};\nSearchFieldComponent.propName = 'SearchField';\nSearchFieldComponent.propTypes = SearchField.propTypes;\nSearchFieldComponent.defaultProps = SearchField.defaultProps;\nconst Option = _props => null;\nOption.displayName = 'SearchableMultiSelect.Option';\nOption.peek = {\n  description: `\n\t\tA selectable option in the list.\n\t`\n};\nOption.Selection = SelectionOption;\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n  /**\n      Customizes the rendering of the Option when it is selected and is\n      displayed instead of the Placeholder.\n  */\n  Selected: any,\n  /**\n      Uses a Selection object for custom rendering of the selected option\n  */\n  Selection: any,\n  value: string,\n  filterText: string,\n  ...DropMenu.Option.propTypes\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\n/** SearchableMultiSelect */\n/** TODO: Remove these prop constants when the component is converted to a functional component */\nconst props = ['children', 'className', 'isDisabled', 'isLoading', 'maxMenuHeight', 'onSearch', 'onSelect', 'onRemoveAll', 'optionFilter', 'searchText', 'selectedIndices', 'DropMenu', 'Option', 'responsiveMode', 'hasRemoveAll', 'hasSelections', 'hasSelectAll', 'selectAllText', 'Error', 'FixedOption', 'NullOption', 'OptionGroup', 'SearchField', 'Label'];\nconst nonPassThroughs = addSpecialOmittedProps(props, true);\nconst defaultProps = {\n  isDisabled: false,\n  isLoading: false,\n  hasRemoveAll: true,\n  hasSelections: true,\n  hasSelectAll: false,\n  selectAllText: 'Select All',\n  searchText: '',\n  responsiveMode: 'large',\n  selectedIndices: [],\n  DropMenu: DropMenu.defaultProps,\n  Error: null,\n  optionFilter: propsSearch,\n  onSearch: _.noop,\n  onRemoveAll: _.noop,\n  onSelect: _.noop\n};\nclass SearchableMultiSelect extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleDropMenuSelect = (optionIndex, _ref) => {\n      let {\n        event,\n        props\n      } = _ref;\n      const {\n        onSelect\n      } = this.props;\n      event.preventDefault();\n      if (optionIndex === 0) {\n        return this.handleSelectAll({\n          event,\n          props\n        });\n      }\n      // this index is decremented to account for the \"Select All\" Option\n      if (optionIndex) {\n        return onSelect(optionIndex - 1, {\n          event,\n          props\n        });\n      }\n    };\n    this.handleSelectAll = _ref2 => {\n      let {\n        event,\n        props\n      } = _ref2;\n      // This is needed otherwise clicking the checkbox will double fire this\n      // event _and_ the `handleDropMenuSelect` handler\n      const {\n        props: {\n          selectedIndices,\n          onSelect\n        },\n        state: {\n          flattenedOptionsData\n        }\n      } = this;\n      event.preventDefault();\n      const visibleOptions = _.reject(flattenedOptionsData, 'optionProps.isHidden');\n      const [selected, unselected] = _.partition(visibleOptions, _ref3 => {\n        let {\n          optionIndex\n        } = _ref3;\n        return _.includes(selectedIndices, optionIndex);\n      });\n      const indices = _.isEmpty(unselected) ? _.map(selected, 'optionIndex') : _.map(unselected, 'optionIndex');\n      return onSelect(indices, {\n        props: props,\n        event\n      });\n    };\n    this.handleSelectionRemove = _ref4 => {\n      let {\n        event,\n        props,\n        props: {\n          callbackId: optionIndex\n        }\n      } = _ref4;\n      // We don't want to send the consumer the selection's props so we have to\n      // lookup the option they clicked and send its props along\n      const selectedOptionProps = _.get(findTypes(this.props, SearchableMultiSelect.Option), `[${optionIndex}].props`);\n      return this.props.onSelect(optionIndex, {\n        event,\n        props: selectedOptionProps\n      });\n    };\n    this.handleRemoveAll = _ref5 => {\n      let {\n        event,\n        props\n      } = _ref5;\n      this.props.onRemoveAll({\n        event,\n        props\n      });\n    };\n    this.handleSearch = (searchText, _ref6) => {\n      let {\n        event\n      } = _ref6;\n      const {\n        props,\n        props: {\n          onSearch,\n          optionFilter,\n          DropMenu: {\n            onExpand\n          }\n        }\n      } = this;\n      const options = _.map(findTypes(props, SearchableMultiSelect.Option), 'props');\n      const firstVisibleIndex = _.findIndex(options, option => {\n        return optionFilter(searchText, option);\n      });\n      const trueIndex = firstVisibleIndex === -1 ? -1 : firstVisibleIndex + 1;\n      const firstVisibleProps = options[trueIndex];\n      const dropMenuProps = this.props.DropMenu;\n      // Just an extra call to make sure the search results show up when a user\n      // is typing\n      onExpand && onExpand({\n        event,\n        props: dropMenuProps\n      });\n      return onSearch(searchText, trueIndex, {\n        event,\n        props: firstVisibleProps\n      });\n    };\n    this.renderUnderlinedChildren = (childText, searchText) => {\n      const [pre, match, post] = partitionText(childText, new RegExp(_.escapeRegExp(searchText), 'i'), searchText.length);\n      return [pre && React.createElement(\"span\", {\n        key: 'pre',\n        className: cx('&-Option-underline-pre')\n      }, pre), match && React.createElement(\"span\", {\n        key: 'match',\n        className: cx('&-Option-underline-match')\n      }, match), post && React.createElement(\"span\", {\n        key: 'post',\n        className: cx('&-Option-underline-post')\n      }, post)];\n    };\n    this.renderOption = _ref7 => {\n      let {\n        optionProps,\n        optionIndex\n      } = _ref7;\n      const {\n        searchText,\n        selectedIndices,\n        isLoading,\n        optionFilter\n      } = this.props;\n      return React.createElement(DropMenu.Option, {\n        key: 'SearchableMultiSelectOption' + optionIndex,\n        ..._.omit(optionProps, ['children', 'Selected', 'filterText']),\n        isHidden: !optionFilter(searchText, optionProps),\n        isDisabled: optionProps.isDisabled || isLoading\n      }, React.createElement(CheckboxLabeled, {\n        className: cx('&-CheckboxLabeled'),\n        callbackId: optionIndex.toString(),\n        isSelected: _.includes(selectedIndices, optionIndex)\n      }, React.createElement(CheckboxLabeled.Label, null, _.isString(optionProps.children) ? this.renderUnderlinedChildren(optionProps.children, searchText) : _.isFunction(optionProps.children) ? React.createElement(optionProps.children, {\n        searchText\n      }) : optionProps.children)));\n    };\n    this.renderOptions = () => {\n      const {\n        searchText,\n        isLoading,\n        hasSelectAll,\n        selectedIndices,\n        selectAllText\n      } = this.props;\n      const {\n        optionGroups,\n        optionGroupDataLookup,\n        ungroupedOptionData,\n        flattenedOptionsData\n      } = this.state;\n      const visibleOptions = _.reject(flattenedOptionsData, 'optionProps.isHidden');\n      const isAllOptionsHidden = _.isEmpty(visibleOptions);\n      const isEveryVisibleOptionSelected = _.every(visibleOptions, _ref8 => {\n        let {\n          optionIndex\n        } = _ref8;\n        return _.includes(selectedIndices, optionIndex);\n      });\n      const isAnyVisibleOptionSelected = _.some(visibleOptions, _ref9 => {\n        let {\n          optionIndex\n        } = _ref9;\n        return _.includes(selectedIndices, optionIndex);\n      });\n      // for each option group passed in, render a DropMenu.OptionGroup, any label will be included in it's children, render each option inside the group\n      const dropMenuOptions = [React.createElement(DropMenu.FixedOption, {\n        className: cx('&-Option-select-all'),\n        key: 'SearchableMultiSelectOption-select-all',\n        isHidden: !hasSelectAll,\n        isDisabled: isLoading\n      }, React.createElement(CheckboxLabeled, {\n        className: cx('&-CheckboxLabeled'),\n        isSelected: isEveryVisibleOptionSelected,\n        isIndeterminate: !isEveryVisibleOptionSelected && isAnyVisibleOptionSelected\n      }, React.createElement(CheckboxLabeled.Label, null, selectAllText)))].concat(_.map(optionGroups, (optionGroupProps, optionGroupIndex) => React.createElement(DropMenu.OptionGroup, {\n        key: 'SearchableMultiSelectOptionGroup' + optionGroupIndex,\n        ..._.omit(optionGroupProps, 'children', 'Selected')\n      }, optionGroupProps.children, _.map(optionGroupDataLookup[optionGroupIndex], option => this.renderOption(option)))).concat(\n      // then render all the ungrouped options at the end\n      _.map(ungroupedOptionData, option => this.renderOption(option))));\n      if (!isAllOptionsHidden || _.isEmpty(searchText)) {\n        return dropMenuOptions;\n      }\n      if (!isLoading) {\n        return React.createElement(DropMenu.Option, {\n          isDisabled: true\n        }, React.createElement(\"span\", {\n          className: cx('&-noresults')\n        }, \"No results match \\\"\", searchText, \"\\\"\"));\n      }\n      return null;\n    };\n    this.render = () => {\n      const {\n        props,\n        props: {\n          className,\n          isLoading,\n          isDisabled,\n          maxMenuHeight,\n          selectedIndices,\n          DropMenu: dropMenuProps,\n          DropMenu: {\n            optionContainerStyle\n          },\n          responsiveMode,\n          searchText,\n          hasRemoveAll,\n          hasSelections,\n          ...passThroughs\n        }\n      } = this;\n      const {\n        optionGroupDataLookup,\n        optionGroups,\n        ungroupedOptionData\n      } = this.state;\n      const searchFieldProps = _.get(getFirst(props, SearchableMultiSelect.SearchField), 'props', {});\n      const errorChildProps = _.first(_.map(findTypes(props, Validation.Error), 'props'));\n      const selectionLabel = _.get(getFirst(props, SearchableMultiSelect.SelectionLabel), 'props', {}) || React.createElement(SearchableMultiSelect.SelectionLabel, null, \"Selected\");\n      const isSmall = responsiveMode === 'small';\n      return React.createElement(\"div\", {\n        ...omit(passThroughs, nonPassThroughs),\n        className: cx('&', className)\n      }, React.createElement(DropMenu, {\n        ...dropMenuProps,\n        selectedIndices: null,\n        className: cx('&-DropMenu', {\n          '&-DropMenu-is-small': isSmall\n        }, dropMenuProps.className),\n        optionContainerStyle: _.assign({}, optionContainerStyle, !_.isNil(maxMenuHeight) ? {\n          maxHeight: maxMenuHeight\n        } : null),\n        isDisabled: isDisabled,\n        onSelect: this.handleDropMenuSelect,\n        ContextMenu: {\n          alignmentOffset: -13,\n          directonOffset: -1,\n          minWidthOffset: -28\n        }\n      }, React.createElement(DropMenu.Control, null, React.createElement(SearchField, {\n        ...searchFieldProps,\n        autoComplete: searchFieldProps.autoComplete || 'off',\n        isDisabled: isDisabled,\n        className: cx('&-search', {\n          '&-search-is-small': isSmall,\n          '&-search-is-error': errorChildProps && errorChildProps.children\n        }, searchFieldProps.className),\n        value: searchText,\n        onChange: this.handleSearch\n      })), isLoading ? React.createElement(DropMenu.Option, {\n        key: 'SearchableMultiSelectLoading',\n        className: cx('&-loading'),\n        isDisabled: true\n      }, React.createElement(LoadingIcon, null)) : null, this.renderOptions()), hasSelections && !_.isEmpty(selectedIndices) ? React.createElement(\"div\", {\n        className: cx('&-Selection-padding')\n      }, React.createElement(Selection, {\n        className: cx('&-Selection-section'),\n        isBold: true,\n        hasBackground: true,\n        kind: 'container',\n        onRemove: this.handleRemoveAll,\n        responsiveMode: responsiveMode,\n        isRemovable: hasRemoveAll\n      }, React.createElement(Selection.Label, null, selectionLabel.children ? selectionLabel.children : 'Selected'), _.map(optionGroupDataLookup, (groupedOptionsData, optionGroupIndex) => {\n        const selectedGroupedOptions = _.filter(groupedOptionsData, _ref10 => {\n          let {\n            optionIndex\n          } = _ref10;\n          return _.includes(selectedIndices, optionIndex);\n        });\n        if (!_.isEmpty(selectedGroupedOptions)) {\n          const selectedOptionGroupChildren = _.get(getFirst(optionGroups[optionGroupIndex], SearchableMultiSelect.OptionGroup.Selected), 'props.children');\n          return React.createElement(Selection, {\n            className: cx('&-Selection-group'),\n            key: 'optionGroup-' + optionGroupIndex,\n            responsiveMode: responsiveMode,\n            isRemovable: false,\n            isBold: true,\n            kind: 'container'\n          }, React.createElement(Selection.Label, null, !_.isNil(selectedOptionGroupChildren) ? selectedOptionGroupChildren : _.first(rejectTypes(optionGroups[optionGroupIndex].children, SearchableMultiSelect.Option))), _.map(selectedGroupedOptions, _ref11 => {\n            let {\n              optionIndex,\n              optionProps\n            } = _ref11;\n            const selectionProps = _.get(getFirst(optionProps, SearchableMultiSelect.Option.Selection), 'props');\n            return React.createElement(Selection, {\n              key: optionIndex,\n              ...selectionProps,\n              callbackId: optionIndex,\n              responsiveMode: responsiveMode,\n              onRemove: this.handleSelectionRemove\n            }, React.createElement(Selection.Label, null, _.get(getFirst(optionProps, SearchableMultiSelect.Option.Selected), 'props.children') || (_.isFunction(optionProps.children) ? React.createElement(optionProps.children) : optionProps.children)));\n          }));\n        }\n        return null;\n      }), _.map(selectedIndices, selectedIndex => {\n        const selectedUngroupedOptionData = _.find(ungroupedOptionData, {\n          optionIndex: selectedIndex\n        });\n        if (selectedUngroupedOptionData) {\n          const {\n            optionProps\n          } = selectedUngroupedOptionData;\n          const selectionProps = _.get(getFirst(optionProps, SearchableMultiSelect.Option.Selection), 'props');\n          return React.createElement(Selection, {\n            key: selectedIndex,\n            ...selectionProps,\n            callbackId: selectedIndex,\n            responsiveMode: responsiveMode,\n            onRemove: this.handleSelectionRemove\n          }, React.createElement(Selection.Label, null, _.get(getFirst(optionProps, SearchableMultiSelect.Option.Selected), 'props.children') || (_.isFunction(optionProps.children) ? React.createElement(optionProps.children) : optionProps.children)));\n        }\n        return null;\n      }))) : null, errorChildProps && errorChildProps.children && errorChildProps.children !== true ? React.createElement(\"div\", {\n        ...omit(errorChildProps, ['initialState', 'callbackId']),\n        className: cx('&-error-content')\n      }, errorChildProps.children) : null);\n    };\n  }\n  UNSAFE_componentWillMount() {\n    // preprocess the options data before rendering\n    const {\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    } = DropMenu.preprocessOptionData(this.props, SearchableMultiSelect);\n    this.setState({\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    });\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // only preprocess options data when it changes (via new props) - better performance than doing this each render\n    const {\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    } = DropMenu.preprocessOptionData(nextProps, SearchableMultiSelect);\n    this.setState({\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    });\n  }\n}\nSearchableMultiSelect.displayName = 'SearchableMultiSelect';\nSearchableMultiSelect.peek = {\n  description: `A control used to select multiple options from a dropdown list using a \\`SearchField\\`.`,\n  categories: ['controls', 'selectors'],\n  madeFrom: ['Checkbox', 'SearchField', 'DropMenu', 'LoadingIcon', 'Selection']\n};\nSearchableMultiSelect.defaultProps = defaultProps;\nSearchableMultiSelect.reducers = reducers;\nSearchableMultiSelect.Option = Option;\nSearchableMultiSelect.OptionGroup = OptionGroup;\nSearchableMultiSelect.SearchField = SearchFieldComponent;\nSearchableMultiSelect.NullOption = DropMenu.NullOption;\nSearchableMultiSelect.FixedOption = DropMenu.FixedOption;\nSearchableMultiSelect.DropMenu = DropMenu;\nSearchableMultiSelect.SelectionLabel = Selection.Label;\nSearchableMultiSelect.propTypes = {\n  /**\n      Should be instances of \\`SearchableMultiSelect.Option\\`. Other direct\n      child elements will not render.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Disables the control from being clicked or focused.\n  */\n  isDisabled: bool,\n  /**\n      Displays a LoadingIcon to allow for asynchronous loading of options.\n  */\n  isLoading: bool,\n  /**\n      The max height of the fly-out menu.\n  */\n  maxMenuHeight: oneOfType([number, string]),\n  onSearch: func /**\n                 Called when the user enters a value to search for; the set of visible\n                 Options will be filtered using the value.  Signature: \\`(searchText,\n                 firstVisibleIndex, {props, event}) => {}\\` \\`searchText\\` is the value\n                 from the \\`SearchField\\` and \\`firstVisibleIndex\\` is the index of the\n                 first option that will be visible after filtering.\n                 */,\n\n  /**\n      Called when an option is selected.  Signature: \\`(optionIndex, {props,\n      event}) => {}\\` \\`optionIndex\\` is the new \\`selectedIndex\\` or \\`null\\`.\n  */\n  onSelect: func,\n  /**\n      Called when the user clicks to remove all selections.  Signature:\n      \\`({props, event}) => {}\\`.\n  */\n  onRemoveAll: func,\n  /**\n      The function that will be run against each Option's props to determine\n      whether it should be visible or not. The default behavior of the function\n      is to match, ignoring case, against any text node descendant of the\n      \\`Option\\`.  Signature: \\`(searchText, optionProps) => {}\\` If \\`true\\`\n      is returned, the option will be visible. If \\`false\\`, the option will\n      not be visible.\n  */\n  optionFilter: func,\n  /**\n      The current search text to filter the list of options by.\n  */\n  searchText: string,\n  /**\n      An array of currently selected \\`SearchableMultiSelect.Option\\` indices\n      or \\`null\\` if nothing is selected.\n  */\n  selectedIndices: arrayOf(number),\n  /**\n      Object of DropMenu props which are passed through to the underlying\n      DropMenu component.\n  */\n  DropMenu: shape(DropMenu.propTypes),\n  Option: any /**\n              *Child Element* - These are menu options. Each \\`Option\\` may be passed a\n              prop called \\`isDisabled\\` to disable selection of that \\`Option\\`. Any\n              other props pass to Option will be available from the \\`onSelect\\`\n              handler.  It also support the \\`Selection\\` prop that can be used to\n              forward along props to the underlying \\`Selection\\` component.\n              */,\n\n  /**\n      Adjusts the display of this component. This should typically be driven by\n      screen size. Currently \\`small\\` and \\`large\\` are explicitly handled by\n      this component.\n  */\n  responsiveMode: oneOf(['small', 'medium', 'large']),\n  /**\n      Controls the visibility of the \"remove all\" button that's shown with the\n      selected items.\n  */\n  hasRemoveAll: bool,\n  /**\n      Controls the visibility of the \\`Selection\\` component that appears below\n      the search field.\n  */\n  hasSelections: bool,\n  /**\n      Controls whether to show a \"Select All\" option.\n  */\n  hasSelectAll: bool,\n  /**\n      The select all text.\n  */\n  selectAllText: string,\n  /**\n      In most cases this will be a string, but it also accepts any valid React\n      element. If this is a falsey value, then no error message will be\n      displayed.  If this is the literal \\`true\\`, it will add the\n      \\`-is-error\\` class to the wrapper div, but not render the\n      \\`-error-content\\` \\`div\\`.\n  */\n  Error: any,\n  FixedOption: any /**\n                   *Child Element* - A special kind of \\`Option\\` that is always rendered at the top of\n                   the menu.\n                   */,\n  NullOption: any /**\n                  *Child Element* - A special kind of \\`Option\\` that is always rendered at\n                  the top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n                  unselect.\n                  */,\n  OptionGroup: any /**\n                   *Child Element* - Used to group \\`Option\\`s within the menu. Any\n                   non-\\`Option\\`s passed in will be rendered as a label for the group.\n                   */,\n  SearchField: any /**\n                   *Child Element* - The visual Search element that the user can pass text\n                   to.\n                   */,\n  Label: any /**\n             *Child Element* - A custom label used as header text when options are\n             selected.\n             */\n};\n\nexport default buildModernHybridComponent(SearchableMultiSelect, {\n  reducers\n});\nexport { SearchableMultiSelect as SearchableMultiSelectDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","buildModernHybridComponent","partitionText","propsSearch","getFirst","findTypes","rejectTypes","addSpecialOmittedProps","SearchFieldDumb","SearchField","DropMenuDumb","DropMenu","LoadingIcon","CheckboxLabeled","Selection","Validation","reducers","any","arrayOf","bool","func","number","oneOfType","shape","string","oneOf","node","cx","bind","SelectionOption","_props","displayName","propTypes","propName","peek","description","Selected","OptionGroup","defaultProps","SearchFieldComponent","Option","value","filterText","props","nonPassThroughs","isDisabled","isLoading","hasRemoveAll","hasSelections","hasSelectAll","selectAllText","searchText","responsiveMode","selectedIndices","Error","optionFilter","onSearch","noop","onRemoveAll","onSelect","SearchableMultiSelect","Component","constructor","optionIndex","event","preventDefault","handleSelectAll","state","flattenedOptionsData","visibleOptions","reject","selected","unselected","partition","includes","indices","isEmpty","map","callbackId","selectedOptionProps","get","onExpand","options","firstVisibleIndex","findIndex","option","trueIndex","firstVisibleProps","dropMenuProps","childText","pre","match","post","RegExp","escapeRegExp","length","key","className","optionProps","isHidden","toString","isSelected","Label","isString","children","renderUnderlinedChildren","isFunction","createElement","optionGroups","optionGroupDataLookup","ungroupedOptionData","isAllOptionsHidden","isEveryVisibleOptionSelected","every","isAnyVisibleOptionSelected","some","dropMenuOptions","FixedOption","isIndeterminate","concat","optionGroupProps","optionGroupIndex","renderOption","maxMenuHeight","optionContainerStyle","passThroughs","searchFieldProps","errorChildProps","first","selectionLabel","SelectionLabel","isSmall","assign","isNil","maxHeight","handleDropMenuSelect","ContextMenu","alignmentOffset","directonOffset","minWidthOffset","Control","autoComplete","onChange","handleSearch","renderOptions","isBold","hasBackground","kind","onRemove","handleRemoveAll","isRemovable","groupedOptionsData","selectedGroupedOptions","filter","selectedOptionGroupChildren","selectionProps","handleSelectionRemove","selectedIndex","selectedUngroupedOptionData","find","UNSAFE_componentWillMount","preprocessOptionData","setState","UNSAFE_componentWillReceiveProps","nextProps","categories","madeFrom","NullOption","SearchableMultiSelectDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SearchableMultiSelect/SearchableMultiSelect.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { partitionText, propsSearch } from '../../util/text-manipulation';\nimport {\n\tStandardProps,\n\tgetFirst,\n\tfindTypes,\n\trejectTypes,\n\taddSpecialOmittedProps,\n} from '../../util/component-types';\nimport {\n\tSearchFieldDumb as SearchField,\n\tISearchFieldProps,\n} from '../SearchField/SearchField';\nimport {\n\tIDropMenuProps,\n\tIDropMenuState,\n\tIDropMenuOptionProps,\n\tIDropMenuOptionGroupProps,\n\tIOptionsData,\n\tDropMenuDumb as DropMenu,\n} from '../DropMenu/DropMenu';\nimport LoadingIcon from '../Icon/LoadingIcon/LoadingIcon';\nimport CheckboxLabeled from '../CheckboxLabeled/CheckboxLabeled';\nimport Selection, {\n\tISelectionProps,\n\tISelectionLabelProps,\n} from '../Selection/Selection';\nimport { Validation } from '../Validation/Validation';\n\nimport * as reducers from './SearchableMultiSelect.reducers';\n\nconst {\n\tany,\n\tarrayOf,\n\tbool,\n\tfunc,\n\tnumber,\n\toneOfType,\n\tshape,\n\tstring,\n\toneOf,\n\tnode,\n} = PropTypes;\n\nconst cx = lucidClassNames.bind('&-SearchableMultiSelect');\n\n/** SearchableMultiSelect.SelectionOption */\nconst SelectionOption = (_props: ISelectionProps): null => null;\nSelectionOption.displayName = 'SearchableMultiSelect.Option.Selection';\nSelectionOption.propTypes = Selection.propTypes;\nSelectionOption.propName = 'Selection';\nSelectionOption.peek = {\n\tdescription: `\n\t\tCustomizes the rendering of the Option when it is selected\n\t\tand is displayed instead of the Placeholder.\n\t`,\n};\n\n/** SearchableMultiSelect.Option.Selected */\nconst Selected = (_props: { children?: React.ReactNode }): null => null;\nSelected.displayName = 'SearchableMultiSelect.Option.Selected';\nSelected.peek = {\n\tdescription: `\n\t\tCustomizes the rendering of the Option when it is selected\n\t\tand is displayed instead of the Placeholder.\n\t`,\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\n\n/** SearchableMultiSelect.OptionGroup */\ninterface ISearchableSingleSelectOptionGroupProps\n\textends IDropMenuOptionGroupProps {\n\tSelected?: React.ReactNode;\n}\nconst OptionGroup = (_props: ISearchableSingleSelectOptionGroupProps): null =>\n\tnull;\nOptionGroup.displayName = 'SearchableMultiSelect.OptionGroup';\nOptionGroup.peek = {\n\tdescription: `\n\t\tA special kind of \\`Option\\` that is always rendered at the top of\n\t\tthe menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n\t\tunselect.\n\t`,\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\nOptionGroup.Selected = Selected;\n\n/** SearchableMultiSelect.SearchField */\nconst SearchFieldComponent = (_props: ISearchFieldProps): null => null;\nSearchFieldComponent.displayName = 'SearchableMultiSelect.SearchField';\nSearchFieldComponent.peek = {\n\tdescription: `\n\t\tPasses props through to the \\`Search Field\\`.\n\t`,\n};\nSearchFieldComponent.propName = 'SearchField';\nSearchFieldComponent.propTypes = SearchField.propTypes;\nSearchFieldComponent.defaultProps = SearchField.defaultProps;\n\n/** Option Child Component */\ntype ISearchableMultiSelectOptionSelectionProps = Partial<ISelectionProps>;\nexport interface ISearchableMultiSelectOptionProps\n\textends IDropMenuOptionProps {\n\tSelection?: ISearchableMultiSelectOptionSelectionProps;\n\tdescription?: string;\n\tname?: string;\n\tSelected?: React.ReactNode;\n}\n\nconst Option = (_props: ISearchableMultiSelectOptionProps): null => null;\n\nOption.displayName = 'SearchableMultiSelect.Option';\nOption.peek = {\n\tdescription: `\n\t\tA selectable option in the list.\n\t`,\n};\nOption.Selection = SelectionOption;\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n\t/**\n\t\tCustomizes the rendering of the Option when it is selected and is\n\t\tdisplayed instead of the Placeholder.\n  */\n\tSelected: any,\n\t/**\n        Uses a Selection object for custom rendering of the selected option\n    */\n\tSelection: any,\n\tvalue: string,\n\tfilterText: string,\n\t...DropMenu.Option.propTypes,\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\n\n/** SearchableMultiSelect */\n/** TODO: Remove these prop constants when the component is converted to a functional component */\nconst props = [\n\t'children',\n\t'className',\n\t'isDisabled',\n\t'isLoading',\n\t'maxMenuHeight',\n\t'onSearch',\n\t'onSelect',\n\t'onRemoveAll',\n\t'optionFilter',\n\t'searchText',\n\t'selectedIndices',\n\t'DropMenu',\n\t'Option',\n\t'responsiveMode',\n\t'hasRemoveAll',\n\t'hasSelections',\n\t'hasSelectAll',\n\t'selectAllText',\n\t'Error',\n\t'FixedOption',\n\t'NullOption',\n\t'OptionGroup',\n\t'SearchField',\n\t'Label',\n];\nconst nonPassThroughs = addSpecialOmittedProps(props, true);\n\nexport type Size = 'large' | 'medium' | 'small';\n\nexport interface ISearchableMultiSelectProps extends StandardProps {\n\tisDisabled?: boolean;\n\tisLoading: boolean;\n\tmaxMenuHeight?: string | null;\n\thasRemoveAll: boolean;\n\thasSelectAll?: boolean;\n\tselectAllText?: string;\n\thasSelections?: boolean;\n\tsearchText: string;\n\tinitialState?: any;\n\tresponsiveMode: Size;\n\tselectedIndices?: number[];\n\tSearchField?: React.ReactNode;\n\tDropMenu: IDropMenuProps;\n\tOption?: ISearchableMultiSelectOptionProps;\n\tOptionGroup?: IDropMenuOptionGroupProps;\n\tSelectionLabel?: ISelectionLabelProps;\n\tError?: React.ReactNode;\n\n\tonSelect: (\n\t\toptionIndices: number[] | number,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: IDropMenuOptionProps | undefined;\n\t\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\t}\n\t) => void;\n\n\tonSearch: (\n\t\tsearchText: string,\n\t\tfirstVisibleIndex: number | null,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: IDropMenuOptionProps;\n\t\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\t}\n\t) => void;\n\n\toptionFilter: (searchValue: string, props: any) => boolean;\n\n\tonRemoveAll: ({\n\t\tprops,\n\t\tevent,\n\t}: {\n\t\tprops: IDropMenuOptionProps;\n\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t}) => void;\n}\n\nexport interface ISearchableMultiSelectState {\n\tDropMenu: IDropMenuState;\n\tselectedIndices: number[];\n\tsearchText: string | null;\n\toptionGroups: IDropMenuOptionGroupProps[];\n\tflattenedOptionsData: IOptionsData[];\n\tungroupedOptionData: IOptionsData[];\n\toptionGroupDataLookup: { [key: number]: IOptionsData[] };\n}\n\nconst defaultProps = {\n\tisDisabled: false,\n\tisLoading: false,\n\thasRemoveAll: true,\n\thasSelections: true,\n\thasSelectAll: false,\n\tselectAllText: 'Select All',\n\tsearchText: '',\n\tresponsiveMode: 'large' as const,\n\tselectedIndices: [],\n\tDropMenu: DropMenu.defaultProps,\n\tError: null,\n\toptionFilter: propsSearch,\n\tonSearch: _.noop,\n\tonRemoveAll: _.noop,\n\tonSelect: _.noop,\n};\n\nclass SearchableMultiSelect extends React.Component<\n\tISearchableMultiSelectProps,\n\tISearchableMultiSelectState\n> {\n\tstatic displayName = 'SearchableMultiSelect';\n\tstatic peek = {\n\t\tdescription: `A control used to select multiple options from a dropdown list using a \\`SearchField\\`.`,\n\t\tcategories: ['controls', 'selectors'],\n\t\tmadeFrom: [\n\t\t\t'Checkbox',\n\t\t\t'SearchField',\n\t\t\t'DropMenu',\n\t\t\t'LoadingIcon',\n\t\t\t'Selection',\n\t\t],\n\t};\n\n\tstatic defaultProps = defaultProps;\n\tstatic reducers = reducers;\n\tstatic Option = Option;\n\tstatic OptionGroup = OptionGroup;\n\tstatic SearchField = SearchFieldComponent;\n\tstatic NullOption = DropMenu.NullOption;\n\tstatic FixedOption = DropMenu.FixedOption;\n\tstatic DropMenu = DropMenu;\n\tstatic SelectionLabel = Selection.Label;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tShould be instances of \\`SearchableMultiSelect.Option\\`. Other direct\n\t\t\tchild elements will not render.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tDisables the control from being clicked or focused.\n\t\t*/\n\t\tisDisabled: bool,\n\n\t\t/**\n\t\t\tDisplays a LoadingIcon to allow for asynchronous loading of options.\n\t\t*/\n\t\tisLoading: bool,\n\n\t\t/**\n\t\t\tThe max height of the fly-out menu.\n\t\t*/\n\t\tmaxMenuHeight: oneOfType([number, string]),\n\n\t\tonSearch: func /**\n\t\t\tCalled when the user enters a value to search for; the set of visible\n\t\t\tOptions will be filtered using the value.  Signature: \\`(searchText,\n\t\t\tfirstVisibleIndex, {props, event}) => {}\\` \\`searchText\\` is the value\n\t\t\tfrom the \\`SearchField\\` and \\`firstVisibleIndex\\` is the index of the\n\t\t\tfirst option that will be visible after filtering.\n\t\t*/,\n\n\t\t/**\n\t\t\tCalled when an option is selected.  Signature: \\`(optionIndex, {props,\n\t\t\tevent}) => {}\\` \\`optionIndex\\` is the new \\`selectedIndex\\` or \\`null\\`.\n\t\t*/\n\t\tonSelect: func,\n\n\t\t/**\n\t\t\tCalled when the user clicks to remove all selections.  Signature:\n\t\t\t\\`({props, event}) => {}\\`.\n\t\t*/\n\t\tonRemoveAll: func,\n\n\t\t/**\n\t\t\tThe function that will be run against each Option's props to determine\n\t\t\twhether it should be visible or not. The default behavior of the function\n\t\t\tis to match, ignoring case, against any text node descendant of the\n\t\t\t\\`Option\\`.  Signature: \\`(searchText, optionProps) => {}\\` If \\`true\\`\n\t\t\tis returned, the option will be visible. If \\`false\\`, the option will\n\t\t\tnot be visible.\n\t\t*/\n\t\toptionFilter: func,\n\n\t\t/**\n\t\t\tThe current search text to filter the list of options by.\n\t\t*/\n\t\tsearchText: string,\n\n\t\t/**\n\t\t\tAn array of currently selected \\`SearchableMultiSelect.Option\\` indices\n\t\t\tor \\`null\\` if nothing is selected.\n\t\t*/\n\t\tselectedIndices: arrayOf(number),\n\n\t\t/**\n\t\t\tObject of DropMenu props which are passed through to the underlying\n\t\t\tDropMenu component.\n\t\t*/\n\t\tDropMenu: shape(DropMenu.propTypes),\n\n\t\tOption: any /**\n\t\t\t*Child Element* - These are menu options. Each \\`Option\\` may be passed a\n\t\t\tprop called \\`isDisabled\\` to disable selection of that \\`Option\\`. Any\n\t\t\tother props pass to Option will be available from the \\`onSelect\\`\n\t\t\thandler.  It also support the \\`Selection\\` prop that can be used to\n\t\t\tforward along props to the underlying \\`Selection\\` component.\n\t\t*/,\n\n\t\t/**\n\t\t\tAdjusts the display of this component. This should typically be driven by\n\t\t\tscreen size. Currently \\`small\\` and \\`large\\` are explicitly handled by\n\t\t\tthis component.\n\t\t*/\n\t\tresponsiveMode: oneOf(['small', 'medium', 'large']),\n\n\t\t/**\n\t\t\tControls the visibility of the \"remove all\" button that's shown with the\n\t\t\tselected items.\n\t\t*/\n\t\thasRemoveAll: bool,\n\n\t\t/**\n\t\t\tControls the visibility of the \\`Selection\\` component that appears below\n\t\t\tthe search field.\n\t\t*/\n\t\thasSelections: bool,\n\n\t\t/**\n\t\t\tControls whether to show a \"Select All\" option.\n\t\t*/\n\t\thasSelectAll: bool,\n\n\t\t/**\n\t\t\tThe select all text.\n\t\t*/\n\t\tselectAllText: string,\n\n\t\t/**\n\t\t\tIn most cases this will be a string, but it also accepts any valid React\n\t\t\telement. If this is a falsey value, then no error message will be\n\t\t\tdisplayed.  If this is the literal \\`true\\`, it will add the\n\t\t\t\\`-is-error\\` class to the wrapper div, but not render the\n\t\t\t\\`-error-content\\` \\`div\\`.\n    */\n\t\tError: any,\n\n\t\tFixedOption: any /**\n\t\t\t*Child Element* - A special kind of \\`Option\\` that is always rendered at the top of\n\t\t\tthe menu.\n\t\t*/,\n\n\t\tNullOption: any /**\n\t\t\t*Child Element* - A special kind of \\`Option\\` that is always rendered at\n\t\t\tthe top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n\t\t\tunselect.\n\t\t*/,\n\n\t\tOptionGroup: any /**\n\t\t\t*Child Element* - Used to group \\`Option\\`s within the menu. Any\n\t\t\tnon-\\`Option\\`s passed in will be rendered as a label for the group.\n    */,\n\n\t\tSearchField: any /**\n\t\t\t*Child Element* - The visual Search element that the user can pass text\n\t\t\tto.\n\t\t*/,\n\n\t\tLabel: any /**\n\t\t\t*Child Element* - A custom label used as header text when options are\n\t\t\tselected.\n\t\t*/,\n\t};\n\n\thandleDropMenuSelect = (\n\t\toptionIndex: number | null,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tprops: IDropMenuOptionProps | undefined;\n\t\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\t}\n\t): void => {\n\t\tconst { onSelect } = this.props;\n\n\t\tevent.preventDefault();\n\n\t\tif (optionIndex === 0) {\n\t\t\treturn this.handleSelectAll({ event, props });\n\t\t}\n\t\t// this index is decremented to account for the \"Select All\" Option\n\t\tif (optionIndex) {\n\t\t\treturn onSelect(optionIndex - 1, { event, props });\n\t\t}\n\t};\n\n\thandleSelectAll = ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\tprops: IDropMenuOptionProps | undefined;\n\t}): void => {\n\t\t// This is needed otherwise clicking the checkbox will double fire this\n\t\t// event _and_ the `handleDropMenuSelect` handler\n\t\tconst {\n\t\t\tprops: { selectedIndices, onSelect },\n\t\t\tstate: { flattenedOptionsData },\n\t\t} = this;\n\n\t\tevent.preventDefault();\n\n\t\tconst visibleOptions = _.reject(\n\t\t\tflattenedOptionsData,\n\t\t\t'optionProps.isHidden'\n\t\t);\n\n\t\tconst [selected, unselected] = _.partition(\n\t\t\tvisibleOptions,\n\t\t\t({ optionIndex }) => _.includes(selectedIndices, optionIndex)\n\t\t);\n\n\t\tconst indices = _.isEmpty(unselected)\n\t\t\t? _.map(selected, 'optionIndex')\n\t\t\t: _.map(unselected, 'optionIndex');\n\n\t\treturn onSelect(indices, {\n\t\t\tprops: props,\n\t\t\tevent,\n\t\t});\n\t};\n\n\thandleSelectionRemove = ({\n\t\tevent,\n\t\tprops,\n\t\tprops: { callbackId: optionIndex },\n\t}: {\n\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\tprops: any;\n\t}): void => {\n\t\t// We don't want to send the consumer the selection's props so we have to\n\t\t// lookup the option they clicked and send its props along\n\t\tconst selectedOptionProps = _.get(\n\t\t\tfindTypes(this.props, SearchableMultiSelect.Option),\n\t\t\t`[${optionIndex}].props`\n\t\t);\n\n\t\treturn this.props.onSelect(optionIndex, {\n\t\t\tevent,\n\t\t\tprops: selectedOptionProps,\n\t\t});\n\t};\n\n\thandleRemoveAll = ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\tprops: IDropMenuOptionProps;\n\t}): void => {\n\t\tthis.props.onRemoveAll({ event, props });\n\t};\n\n\thandleSearch = (\n\t\tsearchText: string,\n\t\t{ event }: { event: React.KeyboardEvent | React.MouseEvent }\n\t): void => {\n\t\tconst {\n\t\t\tprops,\n\t\t\tprops: {\n\t\t\t\tonSearch,\n\t\t\t\toptionFilter,\n\t\t\t\tDropMenu: { onExpand },\n\t\t\t},\n\t\t} = this;\n\n\t\tconst options = _.map(\n\t\t\tfindTypes(props, SearchableMultiSelect.Option),\n\t\t\t'props'\n\t\t);\n\n\t\tconst firstVisibleIndex = _.findIndex(options, (option) => {\n\t\t\treturn optionFilter(searchText, option);\n\t\t});\n\n\t\tconst trueIndex = firstVisibleIndex === -1 ? -1 : firstVisibleIndex + 1;\n\n\t\tconst firstVisibleProps = options[trueIndex];\n\t\tconst dropMenuProps = this.props.DropMenu;\n\n\t\t// Just an extra call to make sure the search results show up when a user\n\t\t// is typing\n\t\tonExpand &&\n\t\t\tonExpand({\n\t\t\t\tevent,\n\t\t\t\tprops: dropMenuProps,\n\t\t\t});\n\n\t\treturn onSearch(searchText, trueIndex, {\n\t\t\tevent,\n\t\t\tprops: firstVisibleProps,\n\t\t});\n\t};\n\n\tUNSAFE_componentWillMount(): void {\n\t\t// preprocess the options data before rendering\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(this.props, SearchableMultiSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t}\n\n\tUNSAFE_componentWillReceiveProps(\n\t\tnextProps: ISearchableMultiSelectProps\n\t): void {\n\t\t// only preprocess options data when it changes (via new props) - better performance than doing this each render\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(nextProps, SearchableMultiSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t}\n\n\trenderUnderlinedChildren = (childText: string, searchText: string): any => {\n\t\tconst [pre, match, post] = partitionText(\n\t\t\tchildText,\n\t\t\tnew RegExp(_.escapeRegExp(searchText), 'i'),\n\t\t\tsearchText.length\n\t\t);\n\n\t\treturn [\n\t\t\tpre && (\n\t\t\t\t<span key='pre' className={cx('&-Option-underline-pre')}>\n\t\t\t\t\t{pre}\n\t\t\t\t</span>\n\t\t\t),\n\t\t\tmatch && (\n\t\t\t\t<span key='match' className={cx('&-Option-underline-match')}>\n\t\t\t\t\t{match}\n\t\t\t\t</span>\n\t\t\t),\n\t\t\tpost && (\n\t\t\t\t<span key='post' className={cx('&-Option-underline-post')}>\n\t\t\t\t\t{post}\n\t\t\t\t</span>\n\t\t\t),\n\t\t];\n\t};\n\n\trenderOption = ({\n\t\toptionProps,\n\t\toptionIndex,\n\t}: {\n\t\toptionProps: ISearchableMultiSelectOptionProps;\n\t\toptionIndex: number;\n\t}): React.ReactElement => {\n\t\tconst { searchText, selectedIndices, isLoading, optionFilter } = this.props;\n\t\treturn (\n\t\t\t<DropMenu.Option\n\t\t\t\tkey={'SearchableMultiSelectOption' + optionIndex}\n\t\t\t\t{..._.omit(optionProps, ['children', 'Selected', 'filterText'])}\n\t\t\t\tisHidden={!optionFilter(searchText, optionProps)}\n\t\t\t\tisDisabled={optionProps.isDisabled || isLoading}\n\t\t\t>\n\t\t\t\t<CheckboxLabeled\n\t\t\t\t\tclassName={cx('&-CheckboxLabeled')}\n\t\t\t\t\tcallbackId={optionIndex.toString()}\n\t\t\t\t\tisSelected={_.includes(selectedIndices, optionIndex)}\n\t\t\t\t>\n\t\t\t\t\t<CheckboxLabeled.Label>\n\t\t\t\t\t\t{_.isString(optionProps.children)\n\t\t\t\t\t\t\t? this.renderUnderlinedChildren(optionProps.children, searchText)\n\t\t\t\t\t\t\t: _.isFunction(optionProps.children)\n\t\t\t\t\t\t\t? React.createElement(optionProps.children, { searchText })\n\t\t\t\t\t\t\t: optionProps.children}\n\t\t\t\t\t</CheckboxLabeled.Label>\n\t\t\t\t</CheckboxLabeled>\n\t\t\t</DropMenu.Option>\n\t\t);\n\t};\n\n\trenderOptions = (): React.ReactElement[] | React.ReactElement | null => {\n\t\tconst {\n\t\t\tsearchText,\n\t\t\tisLoading,\n\t\t\thasSelectAll,\n\t\t\tselectedIndices,\n\t\t\tselectAllText,\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\toptionGroupDataLookup,\n\t\t\tungroupedOptionData,\n\t\t\tflattenedOptionsData,\n\t\t} = this.state;\n\n\t\tconst visibleOptions = _.reject(\n\t\t\tflattenedOptionsData,\n\t\t\t'optionProps.isHidden'\n\t\t);\n\t\tconst isAllOptionsHidden = _.isEmpty(visibleOptions);\n\n\t\tconst isEveryVisibleOptionSelected = _.every(\n\t\t\tvisibleOptions,\n\t\t\t({ optionIndex }) => _.includes(selectedIndices, optionIndex)\n\t\t);\n\n\t\tconst isAnyVisibleOptionSelected = _.some(\n\t\t\tvisibleOptions,\n\t\t\t({ optionIndex }) => _.includes(selectedIndices, optionIndex)\n\t\t);\n\n\t\t// for each option group passed in, render a DropMenu.OptionGroup, any label will be included in it's children, render each option inside the group\n\t\tconst dropMenuOptions = [\n\t\t\t<DropMenu.FixedOption\n\t\t\t\tclassName={cx('&-Option-select-all')}\n\t\t\t\tkey={'SearchableMultiSelectOption-select-all'}\n\t\t\t\tisHidden={!hasSelectAll}\n\t\t\t\tisDisabled={isLoading}\n\t\t\t>\n\t\t\t\t<CheckboxLabeled\n\t\t\t\t\tclassName={cx('&-CheckboxLabeled')}\n\t\t\t\t\tisSelected={isEveryVisibleOptionSelected}\n\t\t\t\t\tisIndeterminate={\n\t\t\t\t\t\t!isEveryVisibleOptionSelected && isAnyVisibleOptionSelected\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<CheckboxLabeled.Label>{selectAllText}</CheckboxLabeled.Label>\n\t\t\t\t</CheckboxLabeled>\n\t\t\t</DropMenu.FixedOption>,\n\t\t].concat(\n\t\t\t_.map(optionGroups, (optionGroupProps, optionGroupIndex) => (\n\t\t\t\t<DropMenu.OptionGroup\n\t\t\t\t\tkey={'SearchableMultiSelectOptionGroup' + optionGroupIndex}\n\t\t\t\t\t{..._.omit(optionGroupProps, 'children', 'Selected')}\n\t\t\t\t>\n\t\t\t\t\t{optionGroupProps.children}\n\t\t\t\t\t{_.map(optionGroupDataLookup[optionGroupIndex], (option) =>\n\t\t\t\t\t\tthis.renderOption(option)\n\t\t\t\t\t)}\n\t\t\t\t</DropMenu.OptionGroup>\n\t\t\t)).concat(\n\t\t\t\t// then render all the ungrouped options at the end\n\t\t\t\t_.map(ungroupedOptionData, (option) => this.renderOption(option))\n\t\t\t)\n\t\t);\n\n\t\tif (!isAllOptionsHidden || _.isEmpty(searchText)) {\n\t\t\treturn dropMenuOptions;\n\t\t}\n\n\t\tif (!isLoading) {\n\t\t\treturn (\n\t\t\t\t<DropMenu.Option isDisabled>\n\t\t\t\t\t<span className={cx('&-noresults')}>\n\t\t\t\t\t\tNo results match \"{searchText}\"\n\t\t\t\t\t</span>\n\t\t\t\t</DropMenu.Option>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t};\n\n\trender = () => {\n\t\tconst {\n\t\t\tprops,\n\t\t\tprops: {\n\t\t\t\tclassName,\n\t\t\t\tisLoading,\n\t\t\t\tisDisabled,\n\t\t\t\tmaxMenuHeight,\n\t\t\t\tselectedIndices,\n\t\t\t\tDropMenu: dropMenuProps,\n\t\t\t\tDropMenu: { optionContainerStyle },\n\t\t\t\tresponsiveMode,\n\t\t\t\tsearchText,\n\t\t\t\thasRemoveAll,\n\t\t\t\thasSelections,\n\t\t\t\t...passThroughs\n\t\t\t},\n\t\t} = this;\n\t\tconst { optionGroupDataLookup, optionGroups, ungroupedOptionData } =\n\t\t\tthis.state;\n\t\tconst searchFieldProps = _.get(\n\t\t\tgetFirst(props, SearchableMultiSelect.SearchField),\n\t\t\t'props',\n\t\t\t{}\n\t\t);\n\t\tconst errorChildProps = _.first(\n\t\t\t_.map(findTypes(props, Validation.Error), 'props')\n\t\t);\n\t\tconst selectionLabel = _.get(\n\t\t\tgetFirst(props, SearchableMultiSelect.SelectionLabel),\n\t\t\t'props',\n\t\t\t{}\n\t\t) || (\n\t\t\t<SearchableMultiSelect.SelectionLabel>\n\t\t\t\tSelected\n\t\t\t</SearchableMultiSelect.SelectionLabel>\n\t\t);\n\t\tconst isSmall = responsiveMode === 'small';\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...(omit(passThroughs, nonPassThroughs) as any)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t>\n\t\t\t\t<DropMenu\n\t\t\t\t\t{...dropMenuProps}\n\t\t\t\t\tselectedIndices={null}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'&-DropMenu',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'&-DropMenu-is-small': isSmall,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdropMenuProps.className\n\t\t\t\t\t)}\n\t\t\t\t\toptionContainerStyle={_.assign(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\toptionContainerStyle,\n\t\t\t\t\t\t!_.isNil(maxMenuHeight) ? { maxHeight: maxMenuHeight } : null\n\t\t\t\t\t)}\n\t\t\t\t\tisDisabled={isDisabled}\n\t\t\t\t\tonSelect={this.handleDropMenuSelect}\n\t\t\t\t\tContextMenu={{\n\t\t\t\t\t\talignmentOffset: -13,\n\t\t\t\t\t\tdirectonOffset: -1,\n\t\t\t\t\t\tminWidthOffset: -28,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<DropMenu.Control>\n\t\t\t\t\t\t<SearchField\n\t\t\t\t\t\t\t{...searchFieldProps}\n\t\t\t\t\t\t\tautoComplete={searchFieldProps.autoComplete || 'off'}\n\t\t\t\t\t\t\tisDisabled={isDisabled}\n\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t'&-search',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'&-search-is-small': isSmall,\n\t\t\t\t\t\t\t\t\t'&-search-is-error':\n\t\t\t\t\t\t\t\t\t\terrorChildProps && errorChildProps.children,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsearchFieldProps.className\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={this.handleSearch}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</DropMenu.Control>\n\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t<DropMenu.Option\n\t\t\t\t\t\t\tkey='SearchableMultiSelectLoading'\n\t\t\t\t\t\t\tclassName={cx('&-loading')}\n\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<LoadingIcon />\n\t\t\t\t\t\t</DropMenu.Option>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t</DropMenu>\n\n\t\t\t\t{hasSelections && !_.isEmpty(selectedIndices) ? (\n\t\t\t\t\t<div className={cx('&-Selection-padding')}>\n\t\t\t\t\t\t<Selection\n\t\t\t\t\t\t\tclassName={cx('&-Selection-section')}\n\t\t\t\t\t\t\tisBold\n\t\t\t\t\t\t\thasBackground\n\t\t\t\t\t\t\tkind='container'\n\t\t\t\t\t\t\tonRemove={this.handleRemoveAll}\n\t\t\t\t\t\t\tresponsiveMode={responsiveMode}\n\t\t\t\t\t\t\tisRemovable={hasRemoveAll}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Selection.Label>\n\t\t\t\t\t\t\t\t{selectionLabel.children ? selectionLabel.children : 'Selected'}\n\t\t\t\t\t\t\t</Selection.Label>\n\t\t\t\t\t\t\t{_.map(\n\t\t\t\t\t\t\t\toptionGroupDataLookup,\n\t\t\t\t\t\t\t\t(groupedOptionsData: any[], optionGroupIndex: number) => {\n\t\t\t\t\t\t\t\t\tconst selectedGroupedOptions = _.filter(\n\t\t\t\t\t\t\t\t\t\tgroupedOptionsData,\n\t\t\t\t\t\t\t\t\t\t({ optionIndex }) =>\n\t\t\t\t\t\t\t\t\t\t\t_.includes(selectedIndices, optionIndex)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (!_.isEmpty(selectedGroupedOptions)) {\n\t\t\t\t\t\t\t\t\t\tconst selectedOptionGroupChildren = _.get(\n\t\t\t\t\t\t\t\t\t\t\tgetFirst(\n\t\t\t\t\t\t\t\t\t\t\t\toptionGroups[optionGroupIndex],\n\t\t\t\t\t\t\t\t\t\t\t\tSearchableMultiSelect.OptionGroup.Selected\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t'props.children'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Selection\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={cx('&-Selection-group')}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={'optionGroup-' + optionGroupIndex}\n\t\t\t\t\t\t\t\t\t\t\t\tresponsiveMode={responsiveMode}\n\t\t\t\t\t\t\t\t\t\t\t\tisRemovable={false}\n\t\t\t\t\t\t\t\t\t\t\t\tisBold\n\t\t\t\t\t\t\t\t\t\t\t\tkind='container'\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Selection.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{!_.isNil(selectedOptionGroupChildren)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? selectedOptionGroupChildren\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: _.first(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trejectTypes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionGroups[optionGroupIndex].children,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSearchableMultiSelect.Option\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  )}\n\t\t\t\t\t\t\t\t\t\t\t\t</Selection.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t{_.map(\n\t\t\t\t\t\t\t\t\t\t\t\t\tselectedGroupedOptions,\n\t\t\t\t\t\t\t\t\t\t\t\t\t({ optionIndex, optionProps }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst selectionProps = _.get(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetFirst(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionProps,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSearchableMultiSelect.Option.Selection\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'props'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Selection\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={optionIndex}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...selectionProps}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackId={optionIndex}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresponsiveMode={responsiveMode}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonRemove={this.handleSelectionRemove}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Selection.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{_.get(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetFirst(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionProps,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSearchableMultiSelect.Option.Selected\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'props.children'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(_.isFunction(optionProps.children)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionProps.children\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: optionProps.children)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Selection.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Selection>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</Selection>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{_.map(selectedIndices, (selectedIndex) => {\n\t\t\t\t\t\t\t\tconst selectedUngroupedOptionData = _.find(\n\t\t\t\t\t\t\t\t\tungroupedOptionData,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\toptionIndex: selectedIndex,\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (selectedUngroupedOptionData) {\n\t\t\t\t\t\t\t\t\tconst { optionProps } = selectedUngroupedOptionData;\n\t\t\t\t\t\t\t\t\tconst selectionProps = _.get(\n\t\t\t\t\t\t\t\t\t\tgetFirst(\n\t\t\t\t\t\t\t\t\t\t\toptionProps,\n\t\t\t\t\t\t\t\t\t\t\tSearchableMultiSelect.Option.Selection\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t'props'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Selection\n\t\t\t\t\t\t\t\t\t\t\tkey={selectedIndex}\n\t\t\t\t\t\t\t\t\t\t\t{...selectionProps}\n\t\t\t\t\t\t\t\t\t\t\tcallbackId={selectedIndex}\n\t\t\t\t\t\t\t\t\t\t\tresponsiveMode={responsiveMode}\n\t\t\t\t\t\t\t\t\t\t\tonRemove={this.handleSelectionRemove}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<Selection.Label>\n\t\t\t\t\t\t\t\t\t\t\t\t{_.get(\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetFirst(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionProps,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSearchableMultiSelect.Option.Selected\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'props.children'\n\t\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t(_.isFunction(optionProps.children)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? React.createElement(optionProps.children)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: optionProps.children)}\n\t\t\t\t\t\t\t\t\t\t\t</Selection.Label>\n\t\t\t\t\t\t\t\t\t\t</Selection>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Selection>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t\t{errorChildProps &&\n\t\t\t\terrorChildProps.children &&\n\t\t\t\terrorChildProps.children !== true ? (\n\t\t\t\t\t<div\n\t\t\t\t\t\t{...omit(errorChildProps, ['initialState', 'callbackId'])}\n\t\t\t\t\t\tclassName={cx('&-error-content')}\n\t\t\t\t\t>\n\t\t\t\t\t\t{errorChildProps.children}\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t};\n}\n\nexport default buildModernHybridComponent<\n\tISearchableMultiSelectProps,\n\tISearchableMultiSelectState,\n\ttypeof SearchableMultiSelect\n>(SearchableMultiSelect as any, { reducers });\nexport { SearchableMultiSelect as SearchableMultiSelectDumb };\n"]},"metadata":{},"sourceType":"module"}