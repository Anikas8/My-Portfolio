{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport Resizer from '../Resizer/Resizer';\nconst cx = lucidClassNames.bind('&-ResponsiveGrid');\nconst {\n  string,\n  number,\n  arrayOf\n} = PropTypes;\n/** Cell */\nconst Cell = _props => null;\nCell.displayName = 'ResponsiveGrid.Cell';\nCell.peek = {\n  description: `Renders a \\`<article>\\` as the grid cell.`\n};\nconst defaultProps = {\n  breakPoints: [960, 1430]\n};\nexport class ResponsiveGrid extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.getColumnLayout = numberOfColumns => {\n      const cellProps = _.map(findTypes(this.props, ResponsiveGridWrapper.Cell), 'props');\n      const columns = _.reduce(_.map(cellProps, (props, key) => React.createElement(\"article\", {\n        key: key,\n        className: cx('&-Cell')\n      }, props.children)), (columns, cell, idx) => {\n        columns[idx % numberOfColumns].push(cell);\n        return columns;\n      }, _.times(numberOfColumns, () => []));\n      return React.createElement(\"div\", {\n        className: cx('&', {\n          '&-one-column': numberOfColumns === 1\n        })\n      }, _.map(columns, (col, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          className: cx('&-Column')\n        }, col);\n      }));\n    };\n  }\n  shouldComponentUpdate(nextProps) {\n    const {\n      width,\n      breakPoints\n    } = this.props;\n    const {\n      width: nextWidth\n    } = nextProps;\n    const [breakOne, breakTwo] = breakPoints;\n    if (nextWidth < width) {\n      return nextWidth < breakOne && width >= breakOne || nextWidth < breakTwo && width >= breakTwo;\n    } else if (nextWidth > width) {\n      return nextWidth > breakOne && width <= breakOne || nextWidth > breakTwo && width <= breakTwo;\n    }\n    return false;\n  }\n  render() {\n    const {\n      width,\n      breakPoints\n    } = this.props;\n    const [breakOne, breakTwo] = breakPoints;\n    if (width < breakTwo) {\n      if (width < breakOne) {\n        return this.getColumnLayout(1);\n      }\n      return this.getColumnLayout(2);\n    }\n    return this.getColumnLayout(3);\n  }\n}\nResponsiveGrid.displayName = 'ResponsiveGrid';\nResponsiveGrid.propTypes = {\n  /**\n      Width of the grid. Note: this does not set the width of the grid, and should be\n      provided by calculating the width of the parent element.\n  */\n  width: number,\n  /**\n      Break points for the grid to switch column layouts. Break points should be provided\n      in ascending order. Currently only two break points are used. Example: [960, 1430]\n  */\n  breakPoints: arrayOf(number),\n  /**\n      Appended to the component-specific class names set on the root elements.\n  */\n  className: string\n};\nconst ResponsiveGridWrapper = props => {\n  const {\n    breakPoints,\n    children,\n    className,\n    ...passThroughs\n  } = props;\n  return React.createElement(Resizer, {\n    className: cx('&', className),\n    ...omit(passThroughs, ['breakPoints', 'initialState'])\n  }, width => {\n    return React.createElement(ResponsiveGrid, {\n      width: width,\n      breakPoints: breakPoints\n    }, children);\n  });\n};\nResponsiveGridWrapper.Cell = Cell;\nResponsiveGridWrapper.defaultProps = defaultProps;\nResponsiveGridWrapper.displayName = ResponsiveGrid.displayName;\nResponsiveGridWrapper.propTypes = {\n  /**\n      Break points for the grid to switch column layouts. Break points should be provided\n      in ascending order. Currently only two break points are used. Example: [960, 1430]\n  */\n  breakPoints: arrayOf(number),\n  /**\n      Appended to the component-specific class names set on the root elements.\n  */\n  className: string\n};\nResponsiveGridWrapper.peek = {\n  description: `A grid container that changes the number of grid columns in response to width changes. By default, the grid cells are displayed in a single column for widths less than \\`960px\\`, two columns for widths greater than \\`960px\\` and less than \\`1430px\\`, and three columns for widths greater than \\`1430px\\`. Custom break points can be provided through the \\`breakPoints\\` prop.`,\n  categories: ['utility'],\n  madeFrom: ['Resizer']\n};\nexport default ResponsiveGridWrapper;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","findTypes","Resizer","cx","bind","string","number","arrayOf","Cell","_props","displayName","peek","description","defaultProps","breakPoints","ResponsiveGrid","Component","constructor","numberOfColumns","cellProps","map","props","ResponsiveGridWrapper","columns","reduce","key","className","children","cell","idx","push","times","col","index","shouldComponentUpdate","nextProps","width","nextWidth","breakOne","breakTwo","render","getColumnLayout","passThroughs","propTypes","categories","madeFrom"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/ResponsiveGrid/ResponsiveGrid.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, findTypes } from '../../util/component-types';\nimport Resizer from '../Resizer/Resizer';\n\nconst cx = lucidClassNames.bind('&-ResponsiveGrid');\n\nconst { string, number, arrayOf } = PropTypes;\n\nexport interface IResponsiveGridCellProps extends StandardProps {}\n\n/** Cell */\nconst Cell = (_props: IResponsiveGridCellProps): null => null;\nCell.displayName = 'ResponsiveGrid.Cell';\nCell.peek = {\n\tdescription: `Renders a \\`<article>\\` as the grid cell.`,\n};\n\n/** Responsive Grid */\n\nexport interface IResponsiveGridProps extends IResponsiveGridWrapperProps {\n\t/**\n\t * Width of the grid. Note: this does not set the width of the grid, and should be\n\t * provided by calculating the width of the parent element.\n\t */\n\twidth: number;\n}\n\nconst defaultProps = {\n\tbreakPoints: [960, 1430],\n};\n\nexport class ResponsiveGrid extends React.Component<IResponsiveGridProps> {\n\tstatic displayName = 'ResponsiveGrid';\n\n\tstatic propTypes = {\n\t\t/** \n\t\t\tWidth of the grid. Note: this does not set the width of the grid, and should be\n\t\t\tprovided by calculating the width of the parent element.\n\t\t*/\n\t\twidth: number,\n\n\t\t/**\n\t\t\tBreak points for the grid to switch column layouts. Break points should be provided\n\t\t\tin ascending order. Currently only two break points are used. Example: [960, 1430]\n\t\t*/\n\t\tbreakPoints: arrayOf(number),\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root elements.\n\t\t*/\n\t\tclassName: string,\n\t};\n\n\tgetColumnLayout = (numberOfColumns: number) => {\n\t\tconst cellProps: IResponsiveGridCellProps[] = _.map(\n\t\t\tfindTypes(this.props, ResponsiveGridWrapper.Cell),\n\t\t\t'props'\n\t\t);\n\n\t\tconst columns = _.reduce(\n\t\t\t_.map(cellProps, (props: IResponsiveGridCellProps, key: number) => (\n\t\t\t\t<article key={key} className={cx('&-Cell')}>\n\t\t\t\t\t{props.children}\n\t\t\t\t</article>\n\t\t\t)),\n\t\t\t(columns: React.ReactElement[][], cell, idx: number) => {\n\t\t\t\tcolumns[idx % numberOfColumns].push(cell);\n\t\t\t\treturn columns;\n\t\t\t},\n\t\t\t_.times(numberOfColumns, () => [])\n\t\t);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={cx('&', {\n\t\t\t\t\t'&-one-column': numberOfColumns === 1,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t{_.map(columns, (col, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={index} className={cx('&-Column')}>\n\t\t\t\t\t\t\t{col}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tshouldComponentUpdate(nextProps: IResponsiveGridProps) {\n\t\tconst { width, breakPoints } = this.props;\n\t\tconst { width: nextWidth } = nextProps;\n\t\tconst [breakOne, breakTwo] = breakPoints;\n\n\t\tif (nextWidth < width) {\n\t\t\treturn (\n\t\t\t\t(nextWidth < breakOne && width >= breakOne) ||\n\t\t\t\t(nextWidth < breakTwo && width >= breakTwo)\n\t\t\t);\n\t\t} else if (nextWidth > width) {\n\t\t\treturn (\n\t\t\t\t(nextWidth > breakOne && width <= breakOne) ||\n\t\t\t\t(nextWidth > breakTwo && width <= breakTwo)\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\trender() {\n\t\tconst { width, breakPoints } = this.props;\n\t\tconst [breakOne, breakTwo] = breakPoints;\n\n\t\tif (width < breakTwo) {\n\t\t\tif (width < breakOne) {\n\t\t\t\treturn this.getColumnLayout(1);\n\t\t\t}\n\t\t\treturn this.getColumnLayout(2);\n\t\t}\n\t\treturn this.getColumnLayout(3);\n\t}\n}\n\n/** Responsive Grid Wrapper */\nexport interface IResponsiveGridWrapperProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/**\n\t * Break points for the grid to switch column layouts. Break points should be provided\n\t * in ascending order. Currently only two break points are used. Example: [960, 1430]\n\t */\n\tbreakPoints: number[];\n}\n\nconst ResponsiveGridWrapper = (props: IResponsiveGridWrapperProps) => {\n\tconst { breakPoints, children, className, ...passThroughs } = props;\n\n\treturn (\n\t\t<Resizer\n\t\t\tclassName={cx('&', className)}\n\t\t\t{...(omit(passThroughs, ['breakPoints', 'initialState']) as any)}\n\t\t>\n\t\t\t{(width) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ResponsiveGrid width={width} breakPoints={breakPoints}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</ResponsiveGrid>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Resizer>\n\t);\n};\nResponsiveGridWrapper.Cell = Cell;\nResponsiveGridWrapper.defaultProps = defaultProps;\nResponsiveGridWrapper.displayName = ResponsiveGrid.displayName;\nResponsiveGridWrapper.propTypes = {\n\t/**\n\t\tBreak points for the grid to switch column layouts. Break points should be provided \n\t\tin ascending order. Currently only two break points are used. Example: [960, 1430]\n\t*/\n\tbreakPoints: arrayOf(number),\n\n\t/**\n\t\tAppended to the component-specific class names set on the root elements.\n\t*/\n\tclassName: string,\n};\nResponsiveGridWrapper.peek = {\n\tdescription: `A grid container that changes the number of grid columns in response to width changes. By default, the grid cells are displayed in a single column for widths less than \\`960px\\`, two columns for widths greater than \\`960px\\` and less than \\`1430px\\`, and three columns for widths greater than \\`1430px\\`. Custom break points can be provided through the \\`breakPoints\\` prop.`,\n\tcategories: ['utility'],\n\tmadeFrom: ['Resizer'],\n};\n\nexport default ResponsiveGridWrapper;\n"]},"metadata":{},"sourceType":"module"}