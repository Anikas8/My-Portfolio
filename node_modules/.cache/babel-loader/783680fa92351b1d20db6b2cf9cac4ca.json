{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MinusCircleIcon from '../Icon/MinusCircleIcon/MinusCircleIcon';\nimport SuccessIcon from '../Icon/SuccessIcon/SuccessIcon';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nimport InfoIcon from '../Icon/InfoIcon/InfoIcon';\nimport WarningIcon from '../Icon/WarningIcon/WarningIcon';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nconst {\n  createElement\n} = React;\nconst {\n  bool,\n  func,\n  string,\n  node,\n  oneOf\n} = PropTypes;\nconst cx = lucidClassNames.bind('&-Selection');\n/** SELECTION ICON */\nfunction defaultIcon(kind, responsiveMode) {\n  return kind === 'default' ? null : kind === 'container' ? null : kind === 'success' ? React.createElement(SuccessIcon, {\n    className: cx('&-Icon', `&-Icon-is-${responsiveMode}`)\n  }) : kind === 'danger' ? React.createElement(MinusCircleIcon, {\n    className: cx('&-Icon', `&-Icon-is-${responsiveMode}`)\n  }) : kind === 'info' ? React.createElement(InfoIcon, {\n    className: cx('&-Icon', `&-Icon-is-${responsiveMode}`)\n  }) : kind === 'warning' ? React.createElement(WarningIcon, {\n    className: cx('&-Icon', `&-Icon-is-${responsiveMode}`)\n  }) : null;\n}\nconst SelectionIcon = () => null;\nSelectionIcon.peek = {\n  description: `\n        Icon that is displayed within the Selection. Any of the lucid \\`*Icon\\` components should work.\n    `\n};\nSelectionIcon.displayName = 'Selection.Icon';\nSelectionIcon.propName = 'Icon';\nconst SelectionLabel = () => null;\nSelectionLabel.peek = {\n  description: `\\`Label\\` for the \\`Selection\\`.`\n};\nSelectionLabel.displayName = 'Selection.Label';\nSelectionLabel.propName = 'Label';\nconst defaultProps = {\n  isRemovable: true,\n  onRemove: _.noop,\n  hasBackground: false,\n  isBold: false,\n  kind: 'default',\n  responsiveMode: 'large'\n};\nconst Selection = props => {\n  const {\n    className,\n    isRemovable,\n    children,\n    hasBackground,\n    isBold,\n    isFilled,\n    isTop,\n    kind,\n    onRemove,\n    responsiveMode,\n    ...passThroughs\n  } = props;\n  const isSmall = responsiveMode === 'small';\n  const labelProps = _.get(getFirst(props, Selection.Label), 'props', {});\n  const iconElement = getFirst(props, Selection.Icon);\n  const iconChildren = _.get(iconElement, 'props.children');\n  const icon = iconChildren ? createElement(iconChildren.type, {\n    ...iconChildren.props,\n    className: cx('&-Icon', iconChildren.props.className)\n  }) : defaultIcon(kind, responsiveMode);\n  return React.createElement(\"div\", {\n    ..._.omit(passThroughs, ['callbackId', 'Label']),\n    className: cx('&', `&-is-${responsiveMode}`, kind && `&-${kind}`, {\n      '&-has-background': hasBackground,\n      '&-is-bold': isBold,\n      '&-is-filled': isFilled,\n      '&-is-top': isTop,\n      '&-no-title': _.isEmpty(labelProps)\n    }, className)\n  }, icon, React.createElement(\"div\", {\n    className: cx('&-content')\n  }, React.createElement(\"div\", {\n    className: cx('&-label-container')\n  }, React.createElement(\"span\", {\n    ...labelProps,\n    className: cx('&-label', isSmall && '&-label-is-small')\n  }), isRemovable ? React.createElement(CloseIcon, {\n    isClickable: true,\n    size: !isSmall ? 8 : 16,\n    className: cx('&-close-button', isSmall && '&-close-button-is-small'),\n    onClick: _ref => {\n      let {\n        event\n      } = _ref;\n      onRemove({\n        event,\n        props\n      });\n    }\n  }) : null), !_.isEmpty(children) && React.createElement(\"div\", {\n    className: cx('&-children-container')\n  }, _.map(React.Children.toArray(children), (child, i) => {\n    if (React.isValidElement(child) && child.type === Selection) {\n      return React.createElement(Selection, {\n        key: _.get(getFirst(child.props, Selection.Label), ['props', 'children'], {}) + i,\n        ...child.props\n      });\n    }\n    return child;\n  }))));\n};\nSelection.displayName = 'Selection';\nSelection.Icon = SelectionIcon;\nSelection.Label = SelectionLabel;\nSelection.peek = {\n  description: `Used to indicate selections. \\`Selection\\` is very similar to \\`Tag\\` but is meant to be used in areas of the UI that have more space available to them.`,\n  categories: ['communication']\n};\nSelection.defaultProps = defaultProps;\nSelection.propTypes = {\n  /**\n          Appended to the component-specific class names set on the root element.\n      */\n  className: string,\n  /**\n          Applies an icon and styles for the kind of selection.\n      */\n  kind: oneOf(['default', 'container', 'success', 'danger', 'info', 'warning']),\n  /**\n          Apply to the top of a nested sequence of Selection components.\n          Adds some spacing for a list of top level Selections with nested Selctions inside each.\n      */\n  isTop: bool,\n  /**\n          Only applies to \\`container\\` Selection components.\n          Fills with a darker gray background.\n          Defaults to false.\n      */\n  isFilled: bool,\n  /**\n          Shows or hides the little \"x\" for a given item.\n      */\n  isRemovable: bool,\n  /**\n          Gives the selection a background. This is desirable when you only have\n          one level of nested selections.\n      */\n  hasBackground: bool,\n  /**\n          Make the content text bold. This is desirable when you only have one\n          level of nested selections.\n      */\n  isBold: bool,\n  /**\n          Called when the close button is clicked.\n      */\n  onRemove: func,\n  /**\n          Label of the component.\n      */\n  Label: node,\n  /**\n          Display a custom icon for the selection. Generally you shouldn't need\n          this prop since the \\`kind\\` prop will pick the correct icon for you.\n      */\n  Icon: node,\n  /**\n          Arbitrary children.\n      */\n  children: node,\n  /**\n          Adjusts the display of this component. This should typically be driven by\n          screen size. Currently \\`small\\` and \\`large\\` are explicitly handled by\n          this component.\n      */\n  responsiveMode: oneOf(['small', 'medium', 'large'])\n};\nexport default Selection;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","MinusCircleIcon","SuccessIcon","CloseIcon","InfoIcon","WarningIcon","lucidClassNames","getFirst","createElement","bool","func","string","node","oneOf","cx","bind","defaultIcon","kind","responsiveMode","className","SelectionIcon","peek","description","displayName","propName","SelectionLabel","defaultProps","isRemovable","onRemove","noop","hasBackground","isBold","Selection","props","children","isFilled","isTop","passThroughs","isSmall","labelProps","get","Label","iconElement","Icon","iconChildren","icon","type","omit","isEmpty","isClickable","size","onClick","event","map","Children","toArray","child","i","isValidElement","key","categories","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Selection/Selection.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MinusCircleIcon from '../Icon/MinusCircleIcon/MinusCircleIcon';\nimport SuccessIcon from '../Icon/SuccessIcon/SuccessIcon';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nimport InfoIcon from '../Icon/InfoIcon/InfoIcon';\nimport WarningIcon from '../Icon/WarningIcon/WarningIcon';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst, FC, StandardProps } from '../../util/component-types';\n\nconst { createElement } = React;\n\nconst { bool, func, string, node, oneOf } = PropTypes;\n\nconst cx = lucidClassNames.bind('&-Selection');\n\n/** SELECTION ICON */\nfunction defaultIcon(\n\tkind: SelectionKind,\n\tresponsiveMode?: SelectionResponsiveMode\n) {\n\treturn kind === 'default' ? null : kind === 'container' ? null : kind ===\n\t  'success' ? (\n\t\t<SuccessIcon className={cx('&-Icon', `&-Icon-is-${responsiveMode}`)} />\n\t) : kind === 'danger' ? (\n\t\t<MinusCircleIcon className={cx('&-Icon', `&-Icon-is-${responsiveMode}`)} />\n\t) : kind === 'info' ? (\n\t\t<InfoIcon className={cx('&-Icon', `&-Icon-is-${responsiveMode}`)} />\n\t) : kind === 'warning' ? (\n\t\t<WarningIcon className={cx('&-Icon', `&-Icon-is-${responsiveMode}`)} />\n\t) : null;\n}\n\nexport interface ISelectionIconProps extends StandardProps {}\n\nconst SelectionIcon: FC<ISelectionIconProps> = (): null => null;\nSelectionIcon.peek = {\n\tdescription: `\n        Icon that is displayed within the Selection. Any of the lucid \\`*Icon\\` components should work.\n    `,\n};\nSelectionIcon.displayName = 'Selection.Icon';\nSelectionIcon.propName = 'Icon';\n\n/** SELECTION LABEL */\nexport interface ISelectionLabelProps extends StandardProps {}\n\nconst SelectionLabel: FC<ISelectionLabelProps> = (): null => null;\nSelectionLabel.peek = {\n\tdescription: `\\`Label\\` for the \\`Selection\\`.`,\n};\nSelectionLabel.displayName = 'Selection.Label';\nSelectionLabel.propName = 'Label';\n\n/** SELECTION */\ntype SelectionKind =\n\t| 'default'\n\t| 'container'\n\t| 'success'\n\t| 'danger'\n\t| 'info'\n\t| 'warning';\n\ntype SelectionResponsiveMode = 'small' | 'medium' | 'large';\n\nexport interface ISelectionProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Applies an icon and styles for the kind of selection. */\n\tkind: SelectionKind;\n\n\t/** Apply to the top of a nested sequence of Selection components.\n\t * Adds some spacing for a list of top level Selections with nested Selctions inside each.\n\t * */\n\tisTop?: boolean;\n\n\t/** Only applies to \\`container\\` Selection components.\n\t * Fills with a darker gray background.\n\t * Defaults to false.\n\t * */\n\tisFilled?: boolean;\n\n\t/** Shows or hides the little \"x\" for a given item. */\n\tisRemovable: boolean;\n\n\t/** Called when the close button is clicked. */\n\tonRemove: ({\n\t\tprops,\n\t\tevent,\n\t}: {\n\t\tprops: ISelectionProps;\n\t\tevent: React.MouseEvent;\n\t}) => void;\n\n\t/** Gives the selection a background. This is desirable when you only have\n\t * one level of nested selections.\n\t * */\n\thasBackground: boolean;\n\n\t/** Make the content text bold. This is desirable when you only have one\n\t * level of nested selections.\n\t * */\n\tisBold: boolean;\n\n\t/** Label of the component. */\n\tLabel?: React.ReactNode;\n\n\t/** Display a custom icon for the selection. Generally you shouldn't need\n\t * this prop since the \\`kind\\` prop will pick the correct icon for you.\n\t * */\n\tIcon?: React.ReactNode;\n\n\t/** Adjusts the display of this component. This should typically be driven by\n\t * screen size. Currently \\`small\\` and \\`large\\` are explicitly handled by\n\t * this component.\n\t * */\n\tresponsiveMode: SelectionResponsiveMode;\n}\n\nconst defaultProps = {\n\tisRemovable: true,\n\tonRemove: _.noop,\n\thasBackground: false,\n\tisBold: false,\n\tkind: 'default' as const,\n\tresponsiveMode: 'large' as const,\n};\n\nconst Selection = (props: ISelectionProps) => {\n\tconst {\n\t\tclassName,\n\t\tisRemovable,\n\t\tchildren,\n\t\thasBackground,\n\t\tisBold,\n\t\tisFilled,\n\t\tisTop,\n\t\tkind,\n\t\tonRemove,\n\t\tresponsiveMode,\n\t\t...passThroughs\n\t} = props;\n\n\tconst isSmall = responsiveMode === 'small';\n\n\tconst labelProps = _.get(getFirst(props, Selection.Label), 'props', {});\n\tconst iconElement = getFirst(props, Selection.Icon);\n\tconst iconChildren = _.get(iconElement, 'props.children');\n\tconst icon = iconChildren\n\t\t? createElement(iconChildren.type, {\n\t\t\t\t...iconChildren.props,\n\t\t\t\tclassName: cx('&-Icon', iconChildren.props.className),\n\t\t  })\n\t\t: defaultIcon(kind, responsiveMode);\n\n\treturn (\n\t\t<div\n\t\t\t{..._.omit(passThroughs, ['callbackId', 'Label'])}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t`&-is-${responsiveMode}`,\n\t\t\t\tkind && `&-${kind}`,\n\t\t\t\t{\n\t\t\t\t\t'&-has-background': hasBackground,\n\t\t\t\t\t'&-is-bold': isBold,\n\t\t\t\t\t'&-is-filled': isFilled,\n\t\t\t\t\t'&-is-top': isTop,\n\t\t\t\t\t'&-no-title': _.isEmpty(labelProps),\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t>\n\t\t\t{icon}\n\n\t\t\t<div className={cx('&-content')}>\n\t\t\t\t<div className={cx('&-label-container')}>\n\t\t\t\t\t<span\n\t\t\t\t\t\t{...labelProps}\n\t\t\t\t\t\tclassName={cx('&-label', isSmall && '&-label-is-small')}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{isRemovable ? (\n\t\t\t\t\t\t<CloseIcon\n\t\t\t\t\t\t\tisClickable\n\t\t\t\t\t\t\tsize={!isSmall ? 8 : 16}\n\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t'&-close-button',\n\t\t\t\t\t\t\t\tisSmall && '&-close-button-is-small'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tonClick={({ event }) => {\n\t\t\t\t\t\t\t\tonRemove({ event, props });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t\t{!_.isEmpty(children) && (\n\t\t\t\t\t<div className={cx('&-children-container')}>\n\t\t\t\t\t\t{_.map(React.Children.toArray(children), (child, i) => {\n\t\t\t\t\t\t\tif (React.isValidElement(child) && child.type === Selection) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Selection\n\t\t\t\t\t\t\t\t\t\tkey={\n\t\t\t\t\t\t\t\t\t\t\t_.get(\n\t\t\t\t\t\t\t\t\t\t\t\tgetFirst(child.props, Selection.Label),\n\t\t\t\t\t\t\t\t\t\t\t\t['props', 'children'],\n\t\t\t\t\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t\t\t\t\t) + i\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t{...child.props}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn child;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nSelection.displayName = 'Selection';\nSelection.Icon = SelectionIcon;\nSelection.Label = SelectionLabel;\nSelection.peek = {\n\tdescription: `Used to indicate selections. \\`Selection\\` is very similar to \\`Tag\\` but is meant to be used in areas of the UI that have more space available to them.`,\n\tcategories: ['communication'],\n};\nSelection.defaultProps = defaultProps;\nSelection.propTypes = {\n\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\tclassName: string,\n\n\t/**\n\t\t\tApplies an icon and styles for the kind of selection.\n\t\t*/\n\tkind: oneOf(['default', 'container', 'success', 'danger', 'info', 'warning']),\n\n\t/**\n\t\t\tApply to the top of a nested sequence of Selection components.\n\t\t\tAdds some spacing for a list of top level Selections with nested Selctions inside each.\n\t\t*/\n\tisTop: bool,\n\n\t/**\n\t\t\tOnly applies to \\`container\\` Selection components.\n\t\t\tFills with a darker gray background.\n\t\t\tDefaults to false.\n\t\t*/\n\tisFilled: bool,\n\n\t/**\n\t\t\tShows or hides the little \"x\" for a given item.\n\t\t*/\n\tisRemovable: bool,\n\n\t/**\n\t\t\tGives the selection a background. This is desirable when you only have\n\t\t\tone level of nested selections.\n\t\t*/\n\thasBackground: bool,\n\n\t/**\n\t\t\tMake the content text bold. This is desirable when you only have one\n\t\t\tlevel of nested selections.\n\t\t*/\n\tisBold: bool,\n\n\t/**\n\t\t\tCalled when the close button is clicked.\n\t\t*/\n\tonRemove: func,\n\n\t/**\n\t\t\tLabel of the component.\n\t\t*/\n\tLabel: node,\n\n\t/**\n\t\t\tDisplay a custom icon for the selection. Generally you shouldn't need\n\t\t\tthis prop since the \\`kind\\` prop will pick the correct icon for you.\n\t\t*/\n\tIcon: node,\n\n\t/**\n\t\t\tArbitrary children.\n\t\t*/\n\tchildren: node,\n\n\t/**\n\t\t\tAdjusts the display of this component. This should typically be driven by\n\t\t\tscreen size. Currently \\`small\\` and \\`large\\` are explicitly handled by\n\t\t\tthis component.\n\t\t*/\n\tresponsiveMode: oneOf(['small', 'medium', 'large']),\n};\n\nexport default Selection;\n"]},"metadata":{},"sourceType":"module"}