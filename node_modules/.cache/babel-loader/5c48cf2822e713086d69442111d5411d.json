{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { filterTypes } from '../../util/component-types';\nimport DragCaptureZone from '../DragCaptureZone/DragCaptureZone';\nimport { Motion, spring } from 'react-motion';\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\nconst cx = lucidClassNames.bind('&-SplitVertical');\nconst {\n  any,\n  bool,\n  func,\n  node,\n  number,\n  string,\n  oneOfType\n} = PropTypes;\nexport const SplitVerticalRightPane = _props => null;\nSplitVerticalRightPane.displayName = 'SplitVertical.RightPane';\nSplitVerticalRightPane.peek = {\n  description: `Right pane of the split.`\n};\nSplitVerticalRightPane.propName = 'RightPane';\nSplitVerticalRightPane.propTypes = {\n  /**\n      Any valid React children.\n  */\n  children: node,\n  /**\n      Set width of this pane.\n  */\n  width: oneOfType([number, string]),\n  /**\n      Define this pane as the primary content pane. When the split is\n      collapsed, this pane becomes full width.\n  */\n  isPrimary: bool\n};\nSplitVerticalRightPane.defaultProps = {\n  isPrimary: false\n};\nexport const SplitVerticalLeftPane = _props => null;\nSplitVerticalLeftPane.displayName = 'SplitVertical.LeftPane';\nSplitVerticalLeftPane.peek = {\n  description: `Left pane of the split.`\n};\nSplitVerticalLeftPane.propName = 'LeftPane';\nSplitVerticalLeftPane.propTypes = {\n  /**\n      Any valid React children.\n  */\n  children: node,\n  /**\n      Set width of this pane.\n  */\n  width: oneOfType([number, string]),\n  /**\n      Define this pane as the primary content pane. When the split is\n      collapsed, this pane becomes full width.\n  */\n  isPrimary: bool\n};\nSplitVerticalLeftPane.defaultProps = {\n  isPrimary: false\n};\n/** SplitVertical Divider */\nconst SplitVerticalDivider = _props => null;\nSplitVerticalDivider.displayName = 'SplitVertical.Divider';\nSplitVerticalDivider.peek = {\n  description: `The area that separates the split panes. Can be dragged to resize them.`\n};\nSplitVerticalDivider.propName = 'Divider';\nSplitVerticalDivider.propTypes = {\n  /**\n      Any valid React children.\n  */\n  children: node\n};\nclass SplitVertical extends React.Component {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.state = {\n      isAnimated: false,\n      isExpanded: true,\n      collapseAmount: 250\n    };\n    this.innerRef = React.createRef();\n    this.leftPaneRef = React.createRef();\n    this.rightPaneRef = React.createRef();\n    this.secondaryStartRect = this.leftPaneRef.current ? this.leftPaneRef.current.getBoundingClientRect() : null;\n    this.getPanes = () => {\n      const {\n        children\n      } = this.props;\n      const {\n        leftPaneRef,\n        rightPaneRef\n      } = this;\n      const leftPaneElement = _.get(filterTypes(children, SplitVertical.LeftPane), 0, React.createElement(SplitVertical.LeftPane, null));\n      const rightPaneElement = _.get(filterTypes(children, SplitVertical.RightPane), 0, React.createElement(SplitVertical.RightPane, null));\n      let primaryElement, primaryRef;\n      let secondaryElement, secondaryRef;\n      if (leftPaneElement.props.isPrimary && !rightPaneElement.props.isPrimary) {\n        primaryElement = leftPaneElement;\n        primaryRef = leftPaneRef;\n        secondaryElement = rightPaneElement;\n        secondaryRef = rightPaneRef;\n      } else {\n        primaryElement = rightPaneElement;\n        primaryRef = rightPaneRef;\n        secondaryElement = leftPaneElement;\n        secondaryRef = leftPaneRef;\n      }\n      return {\n        left: leftPaneElement.props,\n        right: rightPaneElement.props,\n        primary: primaryElement.props,\n        primaryRef,\n        secondary: secondaryElement.props,\n        secondaryRef\n      };\n    };\n    this.panes = this.getPanes();\n    // Style changes to DOM nodes are updated here to shortcut the state -> render cycle for better performance. Also the Style updates in this\n    // function are entirely transient and can be flushed with a props update to `width`.\n    this.applyDeltaToSecondaryWidth = function (dX, isExpanded, secondaryStartRect, secondaryRef, secondary, right, innerRef, primaryRef) {\n      let collapseShift = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      if (isExpanded) {\n        secondaryRef.current.style.flexBasis = `${secondaryStartRect.width + dX * (secondary === right ? -1 : 1)}px`;\n        return secondaryStartRect.width + dX * (secondary === right ? -1 : 1);\n      } else {\n        const overlapWidth = (secondary === right ? secondaryStartRect.width + dX : secondaryStartRect.width - dX) - collapseShift;\n        if (overlapWidth > 0) {\n          _this.collapseSecondary(overlapWidth);\n          return secondaryStartRect.width - overlapWidth;\n        } else {\n          _this.expandSecondary();\n          secondaryRef.current.style.flexBasis = `${(dX + collapseShift) * (secondary === right ? -1 : 1)}px`;\n          return (dX + collapseShift) * (secondary === right ? -1 : 1);\n        }\n      }\n    };\n    this.expandSecondary = () => {\n      this.setState({\n        isExpanded: true\n      });\n    };\n    this.collapseSecondary = collapseAmount => {\n      this.setState({\n        isExpanded: false,\n        collapseAmount\n      });\n    };\n    this.disableAnimation = (innerRef, secondaryRef, primaryRef) => {\n      innerRef.current.style.transitionDuration = '0s';\n      secondaryRef.current.style.transitionDuration = '0s';\n      primaryRef.current.style.transitionDuration = '0s';\n    };\n    this.resetAnimation = (innerRef, secondaryRef, primaryRef) => {\n      innerRef.current.style.transitionDuration = '';\n      secondaryRef.current.style.transitionDuration = '';\n      primaryRef.current.style.transitionDuration = '';\n    };\n    this.handleDragStart = () => {\n      this.panes = this.getPanes();\n      const {\n        secondaryRef,\n        primaryRef\n      } = this.panes;\n      this.secondaryStartRect = secondaryRef.current ? secondaryRef.current.getBoundingClientRect() : null;\n      this.disableAnimation(this.innerRef, secondaryRef, primaryRef);\n    };\n    this.handleDrag = (_ref, _ref2) => {\n      let {\n        dX\n      } = _ref;\n      let {\n        event\n      } = _ref2;\n      const {\n        isExpanded,\n        collapseShift,\n        onResizing\n      } = this.props;\n      const {\n        secondaryRef,\n        secondary,\n        right,\n        primaryRef\n      } = this.panes;\n      this.secondaryStartRect && onResizing(this.applyDeltaToSecondaryWidth(dX, isExpanded, this.secondaryStartRect, secondaryRef, secondary, right, this.innerRef, primaryRef, collapseShift), {\n        props: this.props,\n        event\n      });\n    };\n    this.handleDragEnd = (_ref3, _ref4) => {\n      let {\n        dX\n      } = _ref3;\n      let {\n        event\n      } = _ref4;\n      const {\n        isExpanded,\n        collapseShift,\n        onResize\n      } = this.props;\n      const {\n        secondaryRef,\n        secondary,\n        right,\n        primaryRef\n      } = this.panes;\n      this.secondaryStartRect && onResize(this.applyDeltaToSecondaryWidth(dX, isExpanded, this.secondaryStartRect, secondaryRef, secondary, right, this.innerRef, primaryRef, collapseShift), {\n        props: this.props,\n        event\n      });\n      this.resetAnimation(this.innerRef, secondaryRef, primaryRef);\n    };\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      isAnimated,\n      isExpanded,\n      collapseShift\n    } = nextProps;\n    const {\n      secondaryRef\n    } = this.getPanes();\n    if (!isExpanded && (\n    // check if collapseShift changed or secondary pane collapsed\n    this.props.isExpanded || this.props.collapseShift !== collapseShift)) {\n      // collapse secondary\n      const secondaryRect = secondaryRef.current.getBoundingClientRect();\n      this.collapseSecondary(secondaryRect.width - collapseShift);\n    } else if (!this.props.isExpanded && isExpanded) {\n      // expand secondary\n      this.expandSecondary();\n    }\n    if (this.state.isAnimated !== isAnimated) {\n      this.setState({\n        isAnimated\n      });\n    }\n  }\n  componentDidMount() {\n    const {\n      isAnimated,\n      isExpanded,\n      collapseShift\n    } = this.props;\n    const {\n      secondaryRef\n    } = this.getPanes();\n    if (isExpanded) {\n      // expand secondary\n      this.expandSecondary();\n    } else {\n      // collapse secondary\n      const secondaryRect = secondaryRef.current.getBoundingClientRect();\n      this.collapseSecondary(secondaryRect.width - collapseShift);\n    }\n    if (this.state.isAnimated !== isAnimated) {\n      _.defer(() => {\n        this.setState({\n          isAnimated\n        });\n      });\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      isResizeable,\n      ...passThroughs\n    } = this.props;\n    const {\n      isAnimated,\n      isExpanded,\n      collapseAmount\n    } = this.state;\n    const {\n      left: leftPaneProps,\n      right: rightPaneProps,\n      secondary\n    } = this.getPanes();\n    const dividerProps = _.get(_.first(filterTypes(children, SplitVertical.Divider)), 'props', {});\n    let from, to;\n    if (!isExpanded) {\n      from = {\n        slideAmount: 0\n      };\n      to = {\n        slideAmount: collapseAmount\n      };\n    } else {\n      from = {\n        slideAmount: 0\n      };\n      to = {\n        slideAmount: 0\n      };\n    }\n    const isRightSecondary = rightPaneProps === secondary;\n    return React.createElement(\"div\", {\n      ...omit(passThroughs, ['className', 'children', 'isExpanded', 'isAnimated', 'onResizing', 'onResize', 'collapseShift', 'RightPane', 'LeftPane', 'Divider', 'initialState', 'callbackId']),\n      className: cx('&', {\n        '&-is-expanded': isExpanded,\n        '&-is-animated': isAnimated\n      }, className),\n      style: {\n        overflow: 'hidden',\n        ...passThroughs.style\n      }\n    }, React.createElement(Motion, {\n      defaultStyle: from,\n      style: isAnimated ? _.mapValues(to, val => spring(val, QUICK_SLIDE_MOTION)) : to\n    }, tween => React.createElement(\"div\", {\n      className: cx('&-inner'),\n      ref: this.innerRef,\n      style: {\n        display: 'flex',\n        transform: `translateX(${(isRightSecondary ? 1 : -1) * Math.round(tween.slideAmount)}px)`\n      }\n    }, React.createElement(\"div\", {\n      ...omit(leftPaneProps, ['children', 'isPrimary', 'width'].concat(['initialState', 'callbackId'])),\n      className: cx('&-LeftPane', {\n        '&-is-secondary': leftPaneProps === secondary\n      }, leftPaneProps.className),\n      style: {\n        flexGrow: isRightSecondary ? 1 : 0,\n        flexShrink: isRightSecondary ? 1 : 0,\n        flexBasis: _.isNil(leftPaneProps.width) ? leftPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : leftPaneProps.width,\n        marginLeft: isRightSecondary ? -Math.round(tween.slideAmount) : undefined,\n        overflow: 'auto',\n        ...leftPaneProps.style\n      },\n      ref: this.leftPaneRef\n    }, leftPaneProps.children), isResizeable ? React.createElement(DragCaptureZone, {\n      ...omit(dividerProps, ['children'].concat('initialState')),\n      className: cx('&-Divider', '&-Divider-is-resizeable', dividerProps.className),\n      onDragStart: this.handleDragStart,\n      onDrag: this.handleDrag,\n      onDragEnd: this.handleDragEnd,\n      style: {\n        width: '6px',\n        boxSizing: 'border-box',\n        ...dividerProps.style\n      }\n    }, dividerProps.children || ' ') : React.createElement(\"div\", {\n      ...omit(dividerProps, ['children'].concat('initialState', 'callbackId')),\n      className: cx('&-Divider', dividerProps.className)\n    }, dividerProps.children || ' '), React.createElement(\"div\", {\n      ...omit(rightPaneProps, ['children', 'isPrimary', 'width'].concat(['initialState', 'callbackId'])),\n      className: cx('&-RightPane', {\n        '&-is-secondary': rightPaneProps === secondary\n      }, rightPaneProps.className),\n      style: {\n        flexGrow: !isRightSecondary ? 1 : 0,\n        flexShrink: !isRightSecondary ? 1 : 0,\n        flexBasis: _.isNil(rightPaneProps.width) ? rightPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : rightPaneProps.width,\n        marginRight: isRightSecondary ? undefined : -Math.round(tween.slideAmount),\n        overflow: 'auto',\n        ...rightPaneProps.style\n      },\n      ref: this.rightPaneRef\n    }, rightPaneProps.children))));\n  }\n}\nSplitVertical.displayName = 'SplitVertical';\nSplitVertical.peek = {\n  description: `\\`SplitVertical\\` renders a vertical split.`,\n  categories: ['helpers'],\n  madeFrom: ['DragCaptureZone']\n};\nSplitVertical._isPrivate = true;\nSplitVertical.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      Direct children must be types {SplitVertical.Leftpane,\n      SplitVertical.Divider, SplitVertical.RightPane}.\n      All content is composed as children of these respective elements.\n  */\n  children: node,\n  /**\n      Allows draggable resizing of the SplitVertical\n  */\n  isResizeable: bool,\n  /**\n      Render as expanded or collapsed.\n  */\n  isExpanded: bool,\n  /**\n      Allows animated expand and collapse behavior.\n  */\n  isAnimated: bool,\n  /**\n      Called when the user is currently resizing the split with the Divider.\n      Signature: \\`(width, { event, props }) => {}\\`\n  */\n  onResizing: func,\n  /**\n      Called when the user resizes the split with the Divider.  Signature:\n      \\`(width, { event, props }) => {}\\`\n  */\n  onResize: func,\n  /**\n      Use this prop to shift the collapsed position by a known value.\n  */\n  collapseShift: number,\n  /**\n      Direct child of SplitVertical\n   */\n  RightPane: node,\n  /**\n      Direct child of SplitVertical\n   */\n  LeftPane: node,\n  /**\n      Direct child of SplitVertical.\n      Rendered when `isResizeable` is true.\n   */\n  Divider: node\n};\nSplitVertical.defaultProps = {\n  isExpanded: true,\n  isAnimated: false,\n  collapseShift: 0,\n  onResizing: _.noop,\n  onResize: _.noop,\n  isResizeable: true\n};\nSplitVertical.RightPane = SplitVerticalRightPane;\nSplitVertical.LeftPane = SplitVerticalLeftPane;\nSplitVertical.Divider = SplitVerticalDivider;\nexport default SplitVertical;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","filterTypes","DragCaptureZone","Motion","spring","QUICK_SLIDE_MOTION","cx","bind","any","bool","func","node","number","string","oneOfType","SplitVerticalRightPane","_props","displayName","peek","description","propName","propTypes","children","width","isPrimary","defaultProps","SplitVerticalLeftPane","SplitVerticalDivider","SplitVertical","Component","constructor","isAnimated","isExpanded","collapseAmount","createRef","leftPaneRef","current","getBoundingClientRect","props","rightPaneRef","leftPaneElement","get","LeftPane","rightPaneElement","RightPane","primaryElement","primaryRef","secondaryElement","secondaryRef","left","right","primary","secondary","getPanes","dX","secondaryStartRect","innerRef","collapseShift","style","flexBasis","overlapWidth","collapseSecondary","expandSecondary","setState","transitionDuration","panes","disableAnimation","event","onResizing","applyDeltaToSecondaryWidth","onResize","resetAnimation","UNSAFE_componentWillReceiveProps","nextProps","secondaryRect","state","componentDidMount","defer","render","className","isResizeable","passThroughs","leftPaneProps","rightPaneProps","dividerProps","first","Divider","from","to","slideAmount","isRightSecondary","overflow","defaultStyle","mapValues","val","tween","ref","display","transform","Math","round","concat","flexGrow","flexShrink","isNil","marginLeft","undefined","onDragStart","handleDragStart","onDrag","handleDrag","onDragEnd","handleDragEnd","boxSizing","marginRight","categories","madeFrom","noop"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SplitVertical/SplitVertical.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React, { RefObject } from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { filterTypes, StandardProps } from '../../util/component-types';\nimport DragCaptureZone from '../DragCaptureZone/DragCaptureZone';\nimport { Motion, spring } from 'react-motion';\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\n\nconst cx = lucidClassNames.bind('&-SplitVertical');\n\nconst { any, bool, func, node, number, string, oneOfType } = PropTypes;\n\n/** SplitVertical Right Pane */\nexport interface ISplitVerticalRightPaneProps extends StandardProps {\n\t/** Set width of this pane. */\n\twidth?: number | string;\n\n\t/** Define this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full width. */\n\tisPrimary: boolean;\n}\nexport const SplitVerticalRightPane = (\n\t_props: ISplitVerticalRightPaneProps\n): null => null;\nSplitVerticalRightPane.displayName = 'SplitVertical.RightPane';\nSplitVerticalRightPane.peek = {\n\tdescription: `Right pane of the split.`,\n};\nSplitVerticalRightPane.propName = 'RightPane';\nSplitVerticalRightPane.propTypes = {\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n\n\t/**\n\t\tSet width of this pane.\n\t*/\n\twidth: oneOfType([number, string]),\n\n\t/**\n\t\tDefine this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full width.\n\t*/\n\tisPrimary: bool,\n};\nSplitVerticalRightPane.defaultProps = {\n\tisPrimary: false,\n};\n\n/** SplitVertical Left Pane */\nexport interface ISplitVerticalLeftPaneProps extends StandardProps {\n\t/** Set width of this pane. */\n\twidth?: number | string;\n\t/** Define this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full width. */\n\tisPrimary: boolean;\n}\nexport const SplitVerticalLeftPane = (\n\t_props: ISplitVerticalLeftPaneProps\n): null => null;\nSplitVerticalLeftPane.displayName = 'SplitVertical.LeftPane';\nSplitVerticalLeftPane.peek = {\n\tdescription: `Left pane of the split.`,\n};\nSplitVerticalLeftPane.propName = 'LeftPane';\nSplitVerticalLeftPane.propTypes = {\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n\t/**\n\t\tSet width of this pane.\n\t*/\n\twidth: oneOfType([number, string]),\n\t/**\n\t\tDefine this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full width.\n\t*/\n\tisPrimary: bool,\n};\nSplitVerticalLeftPane.defaultProps = {\n\tisPrimary: false,\n};\n\n/** SplitVertical Divider */\nconst SplitVerticalDivider = (_props: StandardProps): null => null;\nSplitVerticalDivider.displayName = 'SplitVertical.Divider';\nSplitVerticalDivider.peek = {\n\tdescription: `The area that separates the split panes. Can be dragged to resize them.`,\n};\nSplitVerticalDivider.propName = 'Divider';\nSplitVerticalDivider.propTypes = {\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n};\n\n/** SplitVertical */\nexport interface ISplitVerticalProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Render as expanded or collapsed. */\n\tisExpanded: boolean;\n\n\t/** Allows animated expand and collapse behavior. */\n\tisAnimated: boolean;\n\n\t/** Allows draggable resizing of the SplitVertical */\n\tisResizeable: boolean;\n\n\t/** Called when the user is currently resizing the split with the Divider. */\n\tonResizing: (\n\t\theight: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: MouseEvent | TouchEvent;\n\t\t\tprops: ISplitVerticalProps;\n\t\t}\n\t) => void;\n\n\t/** Called when the user resizes the split with the Divider. */\n\tonResize: (\n\t\theight: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: MouseEvent | TouchEvent;\n\t\t\tprops: ISplitVerticalProps;\n\t\t}\n\t) => void;\n\n\t/** Use this prop to shift the collapsed position by a known value. */\n\tcollapseShift: number;\n}\ninterface ISplitVerticalState {\n\tcollapseAmount: number;\n\tisAnimated: boolean;\n\tisExpanded: boolean;\n}\n\nclass SplitVertical extends React.Component<\n\tISplitVerticalProps,\n\tISplitVerticalState,\n\t{}\n> {\n\tstatic displayName = 'SplitVertical';\n\tstatic peek = {\n\t\tdescription: `\\`SplitVertical\\` renders a vertical split.`,\n\t\tcategories: ['helpers'],\n\t\tmadeFrom: ['DragCaptureZone'],\n\t};\n\tstatic _isPrivate = true;\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t\tValue is run through the \\`classnames\\` library.\n\t\t*/\n\t\tclassName: any,\n\n\t\t/**\n\t\t\tDirect children must be types {SplitVertical.Leftpane,\n\t\t\tSplitVertical.Divider, SplitVertical.RightPane}.  \n\t\t\tAll content is composed as children of these respective elements.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAllows draggable resizing of the SplitVertical\n\t\t*/\n\t\tisResizeable: bool,\n\n\t\t/**\n\t\t\tRender as expanded or collapsed.\n\t\t*/\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t\tAllows animated expand and collapse behavior.\n\t\t*/\n\t\tisAnimated: bool,\n\n\t\t/**\n\t\t\tCalled when the user is currently resizing the split with the Divider.\n\t\t\tSignature: \\`(width, { event, props }) => {}\\`\n\t\t*/\n\t\tonResizing: func,\n\n\t\t/**\n\t\t\tCalled when the user resizes the split with the Divider.  Signature:\n\t\t\t\\`(width, { event, props }) => {}\\`\n\t\t*/\n\t\tonResize: func,\n\n\t\t/**\n\t\t\tUse this prop to shift the collapsed position by a known value.\n\t\t*/\n\t\tcollapseShift: number,\n\n\t\t/**\n\t\t\tDirect child of SplitVertical\n\t\t */\n\t\tRightPane: node,\n\n\t\t/**\n\t\t\tDirect child of SplitVertical\n\t\t */\n\t\tLeftPane: node,\n\n\t\t/**\n\t\t \tDirect child of SplitVertical.\n\t\t \tRendered when `isResizeable` is true.\n\t\t */\n\t\tDivider: node,\n\t};\n\n\tstatic defaultProps = {\n\t\tisExpanded: true,\n\t\tisAnimated: false,\n\t\tcollapseShift: 0,\n\t\tonResizing: _.noop,\n\t\tonResize: _.noop,\n\t\tisResizeable: true,\n\t};\n\n\tstate = {\n\t\tisAnimated: false, // to ensure first render doesn't show a collapse animation\n\t\tisExpanded: true,\n\t\tcollapseAmount: 250,\n\t};\n\n\tstatic RightPane = SplitVerticalRightPane;\n\tstatic LeftPane = SplitVerticalLeftPane;\n\tstatic Divider = SplitVerticalDivider;\n\n\tprivate innerRef = React.createRef<HTMLDivElement>();\n\tprivate leftPaneRef = React.createRef<HTMLDivElement>();\n\tprivate rightPaneRef = React.createRef<HTMLDivElement>();\n\n\tsecondaryStartRect = this.leftPaneRef.current\n\t\t? this.leftPaneRef.current.getBoundingClientRect()\n\t\t: null;\n\n\tgetPanes = (): {\n\t\tright: ISplitVerticalRightPaneProps;\n\t\tleft: ISplitVerticalLeftPaneProps;\n\t\tprimary: ISplitVerticalRightPaneProps | ISplitVerticalLeftPaneProps;\n\t\tsecondary: ISplitVerticalRightPaneProps | ISplitVerticalLeftPaneProps;\n\t\tprimaryRef: React.RefObject<HTMLDivElement>;\n\t\tsecondaryRef: React.RefObject<HTMLDivElement>;\n\t} => {\n\t\tconst { children } = this.props;\n\t\tconst { leftPaneRef, rightPaneRef } = this;\n\n\t\tconst leftPaneElement = _.get(\n\t\t\tfilterTypes(children, SplitVertical.LeftPane),\n\t\t\t0,\n\t\t\t<SplitVertical.LeftPane />\n\t\t);\n\t\tconst rightPaneElement = _.get(\n\t\t\tfilterTypes(children, SplitVertical.RightPane),\n\t\t\t0,\n\t\t\t<SplitVertical.RightPane />\n\t\t);\n\t\tlet primaryElement, primaryRef;\n\t\tlet secondaryElement, secondaryRef;\n\n\t\tif (leftPaneElement.props.isPrimary && !rightPaneElement.props.isPrimary) {\n\t\t\tprimaryElement = leftPaneElement;\n\t\t\tprimaryRef = leftPaneRef;\n\t\t\tsecondaryElement = rightPaneElement;\n\t\t\tsecondaryRef = rightPaneRef;\n\t\t} else {\n\t\t\tprimaryElement = rightPaneElement;\n\t\t\tprimaryRef = rightPaneRef;\n\t\t\tsecondaryElement = leftPaneElement;\n\t\t\tsecondaryRef = leftPaneRef;\n\t\t}\n\n\t\treturn {\n\t\t\tleft: leftPaneElement.props,\n\t\t\tright: rightPaneElement.props,\n\t\t\tprimary: primaryElement.props,\n\t\t\tprimaryRef,\n\t\t\tsecondary: secondaryElement.props,\n\t\t\tsecondaryRef,\n\t\t};\n\t};\n\n\tpanes = this.getPanes();\n\n\t// Style changes to DOM nodes are updated here to shortcut the state -> render cycle for better performance. Also the Style updates in this\n\t// function are entirely transient and can be flushed with a props update to `width`.\n\tapplyDeltaToSecondaryWidth = (\n\t\tdX: number,\n\t\tisExpanded: boolean,\n\t\tsecondaryStartRect: ClientRect | DOMRect,\n\t\tsecondaryRef: React.RefObject<HTMLDivElement>,\n\t\tsecondary: ISplitVerticalRightPaneProps | ISplitVerticalLeftPaneProps,\n\t\tright: ISplitVerticalRightPaneProps,\n\t\tinnerRef: React.RefObject<HTMLDivElement>,\n\t\tprimaryRef: React.RefObject<HTMLDivElement>,\n\t\tcollapseShift = 0\n\t): number => {\n\t\tif (isExpanded) {\n\t\t\t(secondaryRef.current as HTMLDivElement).style.flexBasis = `${\n\t\t\t\tsecondaryStartRect.width + dX * (secondary === right ? -1 : 1)\n\t\t\t}px`;\n\t\t\treturn secondaryStartRect.width + dX * (secondary === right ? -1 : 1);\n\t\t} else {\n\t\t\tconst overlapWidth =\n\t\t\t\t(secondary === right\n\t\t\t\t\t? secondaryStartRect.width + dX\n\t\t\t\t\t: secondaryStartRect.width - dX) - collapseShift;\n\n\t\t\tif (overlapWidth > 0) {\n\t\t\t\tthis.collapseSecondary(overlapWidth);\n\t\t\t\treturn secondaryStartRect.width - overlapWidth;\n\t\t\t} else {\n\t\t\t\tthis.expandSecondary();\n\t\t\t\t(secondaryRef.current as HTMLDivElement).style.flexBasis = `${\n\t\t\t\t\t(dX + collapseShift) * (secondary === right ? -1 : 1)\n\t\t\t\t}px`;\n\t\t\t\treturn (dX + collapseShift) * (secondary === right ? -1 : 1);\n\t\t\t}\n\t\t}\n\t};\n\n\texpandSecondary = (): void => {\n\t\tthis.setState({ isExpanded: true });\n\t};\n\n\tcollapseSecondary = (collapseAmount: number): void => {\n\t\tthis.setState({ isExpanded: false, collapseAmount });\n\t};\n\n\tdisableAnimation = (\n\t\tinnerRef: RefObject<HTMLDivElement>,\n\t\tsecondaryRef: RefObject<HTMLDivElement>,\n\t\tprimaryRef: RefObject<HTMLDivElement>\n\t): void => {\n\t\t(innerRef.current as HTMLDivElement).style.transitionDuration = '0s';\n\t\t(secondaryRef.current as HTMLDivElement).style.transitionDuration = '0s';\n\t\t(primaryRef.current as HTMLDivElement).style.transitionDuration = '0s';\n\t};\n\n\tresetAnimation = (\n\t\tinnerRef: RefObject<HTMLDivElement>,\n\t\tsecondaryRef: RefObject<HTMLDivElement>,\n\t\tprimaryRef: RefObject<HTMLDivElement>\n\t): void => {\n\t\t(innerRef.current as HTMLDivElement).style.transitionDuration = '';\n\t\t(secondaryRef.current as HTMLDivElement).style.transitionDuration = '';\n\t\t(primaryRef.current as HTMLDivElement).style.transitionDuration = '';\n\t};\n\n\thandleDragStart = (): void => {\n\t\tthis.panes = this.getPanes();\n\t\tconst { secondaryRef, primaryRef } = this.panes;\n\t\tthis.secondaryStartRect = secondaryRef.current\n\t\t\t? secondaryRef.current.getBoundingClientRect()\n\t\t\t: null;\n\t\tthis.disableAnimation(this.innerRef, secondaryRef, primaryRef);\n\t};\n\n\thandleDrag = (\n\t\t{ dX }: { dX: number },\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t): void => {\n\t\tconst { isExpanded, collapseShift, onResizing } = this.props;\n\n\t\tconst { secondaryRef, secondary, right, primaryRef } = this.panes;\n\n\t\tthis.secondaryStartRect &&\n\t\t\tonResizing(\n\t\t\t\tthis.applyDeltaToSecondaryWidth(\n\t\t\t\t\tdX,\n\t\t\t\t\tisExpanded,\n\t\t\t\t\tthis.secondaryStartRect,\n\t\t\t\t\tsecondaryRef,\n\t\t\t\t\tsecondary,\n\t\t\t\t\tright,\n\t\t\t\t\tthis.innerRef,\n\t\t\t\t\tprimaryRef,\n\t\t\t\t\tcollapseShift\n\t\t\t\t),\n\t\t\t\t{ props: this.props, event }\n\t\t\t);\n\t};\n\n\thandleDragEnd = (\n\t\t{ dX }: { dX: number },\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t): void => {\n\t\tconst { isExpanded, collapseShift, onResize } = this.props;\n\n\t\tconst { secondaryRef, secondary, right, primaryRef } = this.panes;\n\n\t\tthis.secondaryStartRect &&\n\t\t\tonResize(\n\t\t\t\tthis.applyDeltaToSecondaryWidth(\n\t\t\t\t\tdX,\n\t\t\t\t\tisExpanded,\n\t\t\t\t\tthis.secondaryStartRect,\n\t\t\t\t\tsecondaryRef,\n\t\t\t\t\tsecondary,\n\t\t\t\t\tright,\n\t\t\t\t\tthis.innerRef,\n\t\t\t\t\tprimaryRef,\n\t\t\t\t\tcollapseShift\n\t\t\t\t),\n\t\t\t\t{ props: this.props, event }\n\t\t\t);\n\n\t\tthis.resetAnimation(this.innerRef, secondaryRef, primaryRef);\n\t};\n\n\tUNSAFE_componentWillReceiveProps(nextProps: ISplitVerticalProps): void {\n\t\tconst { isAnimated, isExpanded, collapseShift } = nextProps;\n\n\t\tconst { secondaryRef } = this.getPanes();\n\n\t\tif (\n\t\t\t!isExpanded && // check if collapseShift changed or secondary pane collapsed\n\t\t\t(this.props.isExpanded || this.props.collapseShift !== collapseShift)\n\t\t) {\n\t\t\t// collapse secondary\n\t\t\tconst secondaryRect = (\n\t\t\t\tsecondaryRef.current as HTMLDivElement\n\t\t\t).getBoundingClientRect();\n\t\t\tthis.collapseSecondary(secondaryRect.width - collapseShift);\n\t\t} else if (!this.props.isExpanded && isExpanded) {\n\t\t\t// expand secondary\n\t\t\tthis.expandSecondary();\n\t\t}\n\n\t\tif (this.state.isAnimated !== isAnimated) {\n\t\t\tthis.setState({\n\t\t\t\tisAnimated,\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tconst { isAnimated, isExpanded, collapseShift } = this.props;\n\n\t\tconst { secondaryRef } = this.getPanes();\n\n\t\tif (isExpanded) {\n\t\t\t// expand secondary\n\t\t\tthis.expandSecondary();\n\t\t} else {\n\t\t\t// collapse secondary\n\t\t\tconst secondaryRect = (\n\t\t\t\tsecondaryRef.current as HTMLDivElement\n\t\t\t).getBoundingClientRect();\n\t\t\tthis.collapseSecondary(secondaryRect.width - collapseShift);\n\t\t}\n\n\t\tif (this.state.isAnimated !== isAnimated) {\n\t\t\t_.defer((): void => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisAnimated,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst { children, className, isResizeable, ...passThroughs } = this.props;\n\n\t\tconst { isAnimated, isExpanded, collapseAmount } = this.state;\n\n\t\tconst {\n\t\t\tleft: leftPaneProps,\n\t\t\tright: rightPaneProps,\n\t\t\tsecondary,\n\t\t} = this.getPanes();\n\n\t\tconst dividerProps = _.get(\n\t\t\t_.first(filterTypes(children, SplitVertical.Divider)),\n\t\t\t'props',\n\t\t\t{}\n\t\t);\n\n\t\tlet from, to;\n\n\t\tif (!isExpanded) {\n\t\t\tfrom = { slideAmount: 0 };\n\t\t\tto = { slideAmount: collapseAmount };\n\t\t} else {\n\t\t\tfrom = { slideAmount: 0 };\n\t\t\tto = { slideAmount: 0 };\n\t\t}\n\n\t\tconst isRightSecondary = rightPaneProps === secondary;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...omit(passThroughs, [\n\t\t\t\t\t'className',\n\t\t\t\t\t'children',\n\t\t\t\t\t'isExpanded',\n\t\t\t\t\t'isAnimated',\n\t\t\t\t\t'onResizing',\n\t\t\t\t\t'onResize',\n\t\t\t\t\t'collapseShift',\n\t\t\t\t\t'RightPane',\n\t\t\t\t\t'LeftPane',\n\t\t\t\t\t'Divider',\n\t\t\t\t\t'initialState',\n\t\t\t\t\t'callbackId',\n\t\t\t\t])}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-expanded': isExpanded,\n\t\t\t\t\t\t'&-is-animated': isAnimated,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tstyle={{\n\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t...passThroughs.style,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Motion\n\t\t\t\t\tdefaultStyle={from}\n\t\t\t\t\tstyle={\n\t\t\t\t\t\tisAnimated\n\t\t\t\t\t\t\t? _.mapValues(to, (val) => spring(val, QUICK_SLIDE_MOTION))\n\t\t\t\t\t\t\t: to\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{(tween): JSX.Element => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={cx('&-inner')}\n\t\t\t\t\t\t\tref={this.innerRef}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\ttransform: `translateX(${\n\t\t\t\t\t\t\t\t\t(isRightSecondary ? 1 : -1) * Math.round(tween.slideAmount)\n\t\t\t\t\t\t\t\t}px)`,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t{...omit(\n\t\t\t\t\t\t\t\t\tleftPaneProps,\n\t\t\t\t\t\t\t\t\t['children', 'isPrimary', 'width'].concat([\n\t\t\t\t\t\t\t\t\t\t'initialState',\n\t\t\t\t\t\t\t\t\t\t'callbackId',\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t'&-LeftPane',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'&-is-secondary': leftPaneProps === secondary,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tleftPaneProps.className\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tflexGrow: isRightSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexShrink: isRightSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexBasis: _.isNil(leftPaneProps.width)\n\t\t\t\t\t\t\t\t\t\t? leftPaneProps === secondary\n\t\t\t\t\t\t\t\t\t\t\t? 'calc(50% - 3px)'\n\t\t\t\t\t\t\t\t\t\t\t: '0%'\n\t\t\t\t\t\t\t\t\t\t: leftPaneProps.width,\n\t\t\t\t\t\t\t\t\tmarginLeft: isRightSecondary\n\t\t\t\t\t\t\t\t\t\t? -Math.round(tween.slideAmount)\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\t\t\t\t...leftPaneProps.style,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tref={this.leftPaneRef}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{leftPaneProps.children}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{isResizeable ? (\n\t\t\t\t\t\t\t\t<DragCaptureZone\n\t\t\t\t\t\t\t\t\t{...omit(dividerProps, ['children'].concat('initialState'))}\n\t\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t\t'&-Divider',\n\t\t\t\t\t\t\t\t\t\t'&-Divider-is-resizeable',\n\t\t\t\t\t\t\t\t\t\tdividerProps.className\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonDragStart={this.handleDragStart}\n\t\t\t\t\t\t\t\t\tonDrag={this.handleDrag}\n\t\t\t\t\t\t\t\t\tonDragEnd={this.handleDragEnd}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\twidth: '6px',\n\t\t\t\t\t\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t\t\t\t\t\t\t...dividerProps.style,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{dividerProps.children || ' '}\n\t\t\t\t\t\t\t\t</DragCaptureZone>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t{...omit(\n\t\t\t\t\t\t\t\t\t\tdividerProps,\n\t\t\t\t\t\t\t\t\t\t['children'].concat('initialState', 'callbackId')\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tclassName={cx('&-Divider', dividerProps.className)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{dividerProps.children || ' '}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t{...omit(\n\t\t\t\t\t\t\t\t\trightPaneProps,\n\t\t\t\t\t\t\t\t\t['children', 'isPrimary', 'width'].concat([\n\t\t\t\t\t\t\t\t\t\t'initialState',\n\t\t\t\t\t\t\t\t\t\t'callbackId',\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t'&-RightPane',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'&-is-secondary': rightPaneProps === secondary,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\trightPaneProps.className\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tflexGrow: !isRightSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexShrink: !isRightSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexBasis: _.isNil(rightPaneProps.width)\n\t\t\t\t\t\t\t\t\t\t? rightPaneProps === secondary\n\t\t\t\t\t\t\t\t\t\t\t? 'calc(50% - 3px)'\n\t\t\t\t\t\t\t\t\t\t\t: '0%'\n\t\t\t\t\t\t\t\t\t\t: rightPaneProps.width,\n\t\t\t\t\t\t\t\t\tmarginRight: isRightSecondary\n\t\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t\t: -Math.round(tween.slideAmount),\n\t\t\t\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\t\t\t\t...rightPaneProps.style,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tref={this.rightPaneRef}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{rightPaneProps.children}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</Motion>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SplitVertical;\n"]},"metadata":{},"sourceType":"module"}