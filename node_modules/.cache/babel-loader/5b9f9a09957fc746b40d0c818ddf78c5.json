{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport Overlay from '../Overlay/Overlay';\nimport GripperVerticalIcon from '../Icon/GripperVerticalIcon/GripperVerticalIcon';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nimport DragCaptureZone from '../DragCaptureZone/DragCaptureZone';\nimport Button from '../Button/Button';\nimport { getFirst } from '../../util/component-types';\nconst cx = lucidClassNames.bind('&-SidePanel');\nconst {\n  any,\n  bool,\n  func,\n  oneOf,\n  node,\n  number,\n  string,\n  oneOfType\n} = PropTypes;\n/* SidePanel Header **/\nconst SidePanelHeader = _props => null;\nSidePanelHeader.displayName = 'SidePanel.Header';\nSidePanelHeader.propName = 'Header';\nSidePanelHeader.peek = {\n  description: `\n\t\tDefines the Header content of SidePanel. If no content is defined, it will\n\t\tstill show the close button.\n\t`\n};\nSidePanelHeader.propTypes = {\n  /**\n      Children that will be rendered.\n  */\n  children: node\n};\n/** TODO: Remove the 'nonPassThroughs' when the component is converted to a functional component */\nconst nonPassThroughs = ['children', 'className', 'Header', 'isAnimated', 'isExpanded', 'isResizeDisabled', 'onCollapse', 'onResize', 'position', 'preventBodyScroll', 'width', 'minWidth', 'maxWidth', 'topOffset', 'initialState'];\nclass SidePanel extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isResizing: false,\n      width: this.props.width,\n      startWidth: this.props.width,\n      isExpanded: this.props.isExpanded\n    };\n    this.timerId = setTimeout(() => {\n      return;\n    }, 1);\n    this.handleResizeStart = () => {\n      this.setState({\n        isResizing: true\n      });\n    };\n    this.handleResize = _ref => {\n      let {\n        dX\n      } = _ref;\n      const {\n        startWidth\n      } = this.state;\n      const position = startWidth + dX * (this.props.position === 'right' ? -1 : 1);\n      this.setState({\n        width: _.clamp(position, this.props.minWidth, this.props.maxWidth === Infinity ? window.innerWidth : this.props.maxWidth)\n      });\n    };\n    this.handleResizeEnd = (_ref2, _ref3) => {\n      let {\n        dX\n      } = _ref2;\n      let {\n        event\n      } = _ref3;\n      const {\n        startWidth,\n        width\n      } = this.state;\n      this.setState({\n        width: startWidth + dX * (this.props.position === 'right' ? -1 : 1),\n        isResizing: false,\n        startWidth: width\n      });\n      this.props.onResize(startWidth - dX, {\n        props: this.props,\n        event\n      });\n    };\n    this.handleCollapse = _ref4 => {\n      let {\n        event\n      } = _ref4;\n      this.props.onCollapse({\n        event,\n        props: this.props\n      });\n    };\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.isExpanded !== this.props.isExpanded) {\n      this.timerId = setTimeout(() => {\n        this.setState({\n          isExpanded: this.props.isExpanded\n        });\n      }, 1);\n    }\n  }\n  componentWillUnmount() {\n    const {\n      preventBodyScroll\n    } = this.props;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n    if (preventBodyScroll) {\n      window.document.body.style.overflow = '';\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      isAnimated,\n      isExpanded,\n      isResizeDisabled,\n      position,\n      preventBodyScroll,\n      topOffset,\n      ...passThroughs\n    } = this.props;\n    const headerEl = getFirst(this.props, SidePanel.Header);\n    const headerChildren = _.get(headerEl, 'props.children');\n    if (preventBodyScroll) {\n      window.document.body.style.overflow = isExpanded ? 'hidden' : '';\n    }\n    return React.createElement(Overlay, {\n      className: cx('&', {\n        '&-is-expanded': isExpanded && this.state.isExpanded,\n        '&-position-left': position === 'left',\n        '&-position-right': position === 'right',\n        '&-is-animated': isAnimated\n      }, className),\n      isShown: isExpanded || this.state.isExpanded,\n      onBackgroundClick: this.handleCollapse,\n      onEscape: this.handleCollapse,\n      isAnimated: isAnimated,\n      style: {\n        marginTop: topOffset\n      },\n      ...omit(passThroughs, nonPassThroughs)\n    }, React.createElement(\"div\", {\n      className: cx('&-pane'),\n      style: {\n        width: this.state.width,\n        marginTop: topOffset\n      }\n    }, headerEl && React.createElement(\"div\", {\n      className: cx('&-header')\n    }, React.createElement(\"div\", {\n      className: cx('&-header-inner-wrapper')\n    }, React.createElement(\"div\", {\n      className: cx('&-header-content')\n    }, headerChildren), React.createElement(Button, {\n      className: cx('&-header-closer-button'),\n      kind: 'invisible',\n      onClick: this.handleCollapse,\n      hasOnlyIcon: true\n    }, React.createElement(CloseIcon, {\n      className: cx('&-header-closer'),\n      isClickable: true,\n      size: 14\n    })))), React.createElement(\"div\", {\n      className: cx('&-body')\n    }, !isResizeDisabled && React.createElement(DragCaptureZone, {\n      className: cx('&-grabber'),\n      onDragStart: this.handleResizeStart,\n      onDrag: this.handleResize,\n      onDragEnd: this.handleResizeEnd\n    }, React.createElement(GripperVerticalIcon, {\n      width: '20'\n    })), React.createElement(\"div\", {\n      className: cx('&-content')\n    }, children))));\n  }\n}\nSidePanel.displayName = 'SidePanel';\nSidePanel.peek = {\n  description: `A fixed-positioned overlay positioned on the side of the screen at full screen height. Supports variable widths resized by the user or defined as a prop. Animated collapse and expand with optional Header and closer.`,\n  categories: ['layout']\n};\nSidePanel.propTypes = {\n  /**\n      Content of the SidePanel, but also accepts \\`<SidePanel.Header>\\` to define\n      header content.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Alternative to using \\`<SidePanel.Header>\\`.\n  */\n  Header: any,\n  /**\n      Enables animated transitions during expansion and collapse.\n  */\n  isAnimated: bool,\n  /**\n      Controls the expanded/collapsed state as a boolean prop.\n  */\n  isExpanded: bool,\n  /**\n      When true, hides the resizer at the edge of the SidePanel.\n  */\n  isResizeDisabled: bool,\n  /**\n      Callback triggered when user clicks the background, hits the Esc key, or\n      clicks the close button in the Header.\n      Signature: \\`({ event, props }) => {}\\`\n  */\n  onCollapse: func,\n  /**\n      Callback triggered after a user resizes to a new width.\n      Signature: \\`(width, { event, props }) => {}\\`\n  */\n  onResize: func,\n  /**\n      Controls the position on the screen.\n  */\n  position: oneOf(['left', 'right']),\n  /**\n      When true, it will prevent scrolling in the background when \\`isExpanded\\`\n      is true. This is accomplished by setting \\`document.body.style.overflow =\n      'hidden'\\`.\n  */\n  preventBodyScroll: bool,\n  /**\n      Sets the initial width in pixels. The actual width may change if the user\n      resizes it.\n  */\n  width: number,\n  /**\n      Sets the minimum width of the Side Panel.\n  */\n  minWidth: number,\n  /**\n      Sets the maximum width of the Side Panel.\n  */\n  maxWidth: number,\n  /**\n      Sets the top margin for the panel. Defaults to \\`0\\`.\n  */\n  topOffset: oneOfType([number, string])\n};\nSidePanel.defaultProps = {\n  isAnimated: true,\n  isExpanded: true,\n  isResizeDisabled: false,\n  onCollapse: _.noop,\n  onResize: _.noop,\n  position: 'right',\n  preventBodyScroll: false,\n  topOffset: 0,\n  width: 500,\n  minWidth: 500,\n  maxWidth: 1200\n};\nSidePanel.Header = SidePanelHeader;\nexport default SidePanel;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","Overlay","GripperVerticalIcon","CloseIcon","DragCaptureZone","Button","getFirst","cx","bind","any","bool","func","oneOf","node","number","string","oneOfType","SidePanelHeader","_props","displayName","propName","peek","description","propTypes","children","nonPassThroughs","SidePanel","Component","constructor","isResizing","width","props","startWidth","isExpanded","setTimeout","setState","dX","state","position","clamp","minWidth","maxWidth","Infinity","window","innerWidth","event","onResize","onCollapse","componentDidUpdate","prevProps","timerId","componentWillUnmount","preventBodyScroll","clearTimeout","document","body","style","overflow","render","className","isAnimated","isResizeDisabled","topOffset","passThroughs","headerEl","Header","headerChildren","get","isShown","onBackgroundClick","handleCollapse","onEscape","marginTop","kind","onClick","hasOnlyIcon","isClickable","size","onDragStart","handleResizeStart","onDrag","handleResize","onDragEnd","handleResizeEnd","categories","noop"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SidePanel/SidePanel.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport Overlay, { IOverlayProps } from '../Overlay/Overlay';\nimport GripperVerticalIcon from '../Icon/GripperVerticalIcon/GripperVerticalIcon';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nimport DragCaptureZone from '../DragCaptureZone/DragCaptureZone';\nimport Button from '../Button/Button';\nimport { getFirst, StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-SidePanel');\n\nconst { any, bool, func, oneOf, node, number, string, oneOfType } = PropTypes;\n\n/* SidePanel Header **/\nconst SidePanelHeader = (_props: StandardProps): null => null;\nSidePanelHeader.displayName = 'SidePanel.Header';\nSidePanelHeader.propName = 'Header';\nSidePanelHeader.peek = {\n\tdescription: `\n\t\tDefines the Header content of SidePanel. If no content is defined, it will\n\t\tstill show the close button.\n\t`,\n};\nSidePanelHeader.propTypes = {\n\t/**\n\t\tChildren that will be rendered.\n\t*/\n\tchildren: node,\n};\n\n/** Side Panel */\nexport interface ISidePanelProps extends Partial<IOverlayProps> {\n\t/** Alternative to using `<SidePanel.Header>`. */\n\tHeader?: string | (React.ReactNode & { props: StandardProps });\n\n\t/** Controls the expanded/collapsed state as a boolean prop. */\n\tisExpanded: boolean;\n\n\t/** When true, hides the resizer at the edge of the SidePanel. */\n\tisResizeDisabled: boolean;\n\n\t/** Callback triggered when user clicks the background, hits the Esc key, or\n\t * clicks the close button in the Header. */\n\tonCollapse: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent | KeyboardEvent;\n\t\tprops: ISidePanelProps;\n\t}) => void;\n\n\t/** Callback triggered after a user resizes to a new width. */\n\tonResize: (\n\t\twidth: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: MouseEvent | TouchEvent;\n\t\t\tprops: ISidePanelProps;\n\t\t}\n\t) => void;\n\n\t/** Controls the position on the screen. */\n\tposition: 'left' | 'right';\n\n\t/** When true, it will prevent scrolling in the background when \\`isExpanded\\;\n\t * is true. This is accomplished by setting \\`document.body.style.overflow =\n\t * 'hidden'\\`. */\n\tpreventBodyScroll: boolean;\n\n\t/** Sets the initial width in pixels. The actual width may change if the user\n\t * resizes it. */\n\twidth: number;\n\n\t/** Sets the minimum width in pixels. */\n\tminWidth: number;\n\n\t/** Sets the maximim width in pixels. */\n\tmaxWidth: number;\n\n\t/** Sets the top margin for the panel. Defaults to \\`0\\`. */\n\ttopOffset: number | string;\n}\n\n/** TODO: Remove the 'nonPassThroughs' when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'children',\n\t'className',\n\t'Header',\n\t'isAnimated',\n\t'isExpanded',\n\t'isResizeDisabled',\n\t'onCollapse',\n\t'onResize',\n\t'position',\n\t'preventBodyScroll',\n\t'width',\n\t'minWidth',\n\t'maxWidth',\n\t'topOffset',\n\t'initialState',\n];\n\ninterface ISidePanelState {\n\tisResizing: boolean;\n\twidth: number;\n\tstartWidth: number;\n\tisExpanded: boolean;\n}\n\nclass SidePanel extends React.Component<ISidePanelProps, ISidePanelState, {}> {\n\tstatic displayName = 'SidePanel';\n\tstatic peek = {\n\t\tdescription: `A fixed-positioned overlay positioned on the side of the screen at full screen height. Supports variable widths resized by the user or defined as a prop. Animated collapse and expand with optional Header and closer.`,\n\t\tcategories: ['layout'],\n\t};\n\tstatic propTypes = {\n\t\t/**\n\t\t\tContent of the SidePanel, but also accepts \\`<SidePanel.Header>\\` to define\n\t\t\theader content.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tAlternative to using \\`<SidePanel.Header>\\`.\n\t\t*/\n\t\tHeader: any,\n\n\t\t/**\n\t\t\tEnables animated transitions during expansion and collapse.\n\t\t*/\n\t\tisAnimated: bool,\n\n\t\t/**\n\t\t\tControls the expanded/collapsed state as a boolean prop.\n\t\t*/\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t\tWhen true, hides the resizer at the edge of the SidePanel.\n\t\t*/\n\t\tisResizeDisabled: bool,\n\n\t\t/**\n\t\t\tCallback triggered when user clicks the background, hits the Esc key, or\n\t\t\tclicks the close button in the Header.\n\t\t\tSignature: \\`({ event, props }) => {}\\`\n\t\t*/\n\t\tonCollapse: func,\n\n\t\t/**\n\t\t\tCallback triggered after a user resizes to a new width.\n\t\t\tSignature: \\`(width, { event, props }) => {}\\`\n\t\t*/\n\t\tonResize: func,\n\n\t\t/**\n\t\t\tControls the position on the screen.\n\t\t*/\n\t\tposition: oneOf(['left', 'right']),\n\n\t\t/**\n\t\t\tWhen true, it will prevent scrolling in the background when \\`isExpanded\\`\n\t\t\tis true. This is accomplished by setting \\`document.body.style.overflow =\n\t\t\t'hidden'\\`.\n\t\t*/\n\t\tpreventBodyScroll: bool,\n\n\t\t/**\n\t\t\tSets the initial width in pixels. The actual width may change if the user\n\t\t\tresizes it.\n\t\t*/\n\t\twidth: number,\n\n\t\t/**\n\t\t\tSets the minimum width of the Side Panel.\n\t\t*/\n\t\tminWidth: number,\n\n\t\t/**\n\t\t\tSets the maximum width of the Side Panel.\n\t\t*/\n\t\tmaxWidth: number,\n\n\t\t/**\n\t\t\tSets the top margin for the panel. Defaults to \\`0\\`.\n\t\t*/\n\t\ttopOffset: oneOfType([number, string]),\n\t};\n\n\tstate = {\n\t\tisResizing: false,\n\t\twidth: this.props.width as number,\n\t\tstartWidth: this.props.width as number,\n\t\tisExpanded: this.props.isExpanded as boolean,\n\t};\n\n\tstatic defaultProps = {\n\t\tisAnimated: true,\n\t\tisExpanded: true,\n\t\tisResizeDisabled: false,\n\t\tonCollapse: _.noop,\n\t\tonResize: _.noop,\n\t\tposition: 'right',\n\t\tpreventBodyScroll: false,\n\t\ttopOffset: 0,\n\t\twidth: 500,\n\t\tminWidth: 500,\n\t\tmaxWidth: 1200,\n\t};\n\n\tstatic Header = SidePanelHeader;\n\n\ttimerId = setTimeout((): void => {\n\t\treturn;\n\t}, 1);\n\n\thandleResizeStart = (): void => {\n\t\tthis.setState({\n\t\t\tisResizing: true,\n\t\t});\n\t};\n\n\thandleResize = ({ dX }: { dX: number }): void => {\n\t\tconst { startWidth } = this.state;\n\t\tconst position =\n\t\t\tstartWidth + dX * (this.props.position === 'right' ? -1 : 1);\n\t\tthis.setState({\n\t\t\twidth: _.clamp(\n\t\t\t\tposition,\n\t\t\t\tthis.props.minWidth,\n\t\t\t\tthis.props.maxWidth === Infinity\n\t\t\t\t\t? window.innerWidth\n\t\t\t\t\t: this.props.maxWidth\n\t\t\t),\n\t\t});\n\t};\n\n\thandleResizeEnd = (\n\t\t{ dX }: { dX: number },\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t): void => {\n\t\tconst { startWidth, width } = this.state;\n\t\tthis.setState({\n\t\t\twidth: startWidth + dX * (this.props.position === 'right' ? -1 : 1),\n\t\t\tisResizing: false,\n\t\t\tstartWidth: width,\n\t\t});\n\t\tthis.props.onResize(startWidth - dX, { props: this.props, event });\n\t};\n\n\thandleCollapse = ({\n\t\tevent,\n\t}: {\n\t\tevent: React.MouseEvent | KeyboardEvent;\n\t}): void => {\n\t\tthis.props.onCollapse({ event, props: this.props });\n\t};\n\n\tcomponentDidUpdate(prevProps: ISidePanelProps): void {\n\t\tif (prevProps.isExpanded !== this.props.isExpanded) {\n\t\t\tthis.timerId = setTimeout((): void => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisExpanded: this.props.isExpanded as boolean,\n\t\t\t\t});\n\t\t\t}, 1);\n\t\t}\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tconst { preventBodyScroll } = this.props;\n\t\tif (this.timerId) {\n\t\t\tclearTimeout(this.timerId);\n\t\t}\n\t\tif (preventBodyScroll) {\n\t\t\twindow.document.body.style.overflow = '';\n\t\t}\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\tisAnimated,\n\t\t\tisExpanded,\n\t\t\tisResizeDisabled,\n\t\t\tposition,\n\t\t\tpreventBodyScroll,\n\t\t\ttopOffset,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst headerEl = getFirst(this.props, SidePanel.Header);\n\t\tconst headerChildren = _.get(headerEl, 'props.children');\n\n\t\tif (preventBodyScroll) {\n\t\t\twindow.document.body.style.overflow = isExpanded ? 'hidden' : '';\n\t\t}\n\n\t\treturn (\n\t\t\t<Overlay\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-expanded': isExpanded && this.state.isExpanded,\n\t\t\t\t\t\t'&-position-left': position === 'left',\n\t\t\t\t\t\t'&-position-right': position === 'right',\n\t\t\t\t\t\t'&-is-animated': isAnimated,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tisShown={isExpanded || this.state.isExpanded}\n\t\t\t\tonBackgroundClick={this.handleCollapse}\n\t\t\t\tonEscape={this.handleCollapse}\n\t\t\t\tisAnimated={isAnimated}\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginTop: topOffset,\n\t\t\t\t}}\n\t\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={cx('&-pane')}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: this.state.width,\n\t\t\t\t\t\tmarginTop: topOffset,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{headerEl && (\n\t\t\t\t\t\t<div className={cx('&-header')}>\n\t\t\t\t\t\t\t<div className={cx('&-header-inner-wrapper')}>\n\t\t\t\t\t\t\t\t<div className={cx('&-header-content')}>{headerChildren}</div>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={cx('&-header-closer-button')}\n\t\t\t\t\t\t\t\t\tkind='invisible'\n\t\t\t\t\t\t\t\t\tonClick={this.handleCollapse}\n\t\t\t\t\t\t\t\t\thasOnlyIcon={true}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseIcon\n\t\t\t\t\t\t\t\t\t\tclassName={cx('&-header-closer')}\n\t\t\t\t\t\t\t\t\t\tisClickable\n\t\t\t\t\t\t\t\t\t\tsize={14}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<div className={cx('&-body')}>\n\t\t\t\t\t\t{!isResizeDisabled && (\n\t\t\t\t\t\t\t<DragCaptureZone\n\t\t\t\t\t\t\t\tclassName={cx('&-grabber')}\n\t\t\t\t\t\t\t\tonDragStart={this.handleResizeStart}\n\t\t\t\t\t\t\t\tonDrag={this.handleResize}\n\t\t\t\t\t\t\t\tonDragEnd={this.handleResizeEnd}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<GripperVerticalIcon width='20' />\n\t\t\t\t\t\t\t</DragCaptureZone>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className={cx('&-content')}>{children}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Overlay>\n\t\t);\n\t}\n}\n\nexport default SidePanel;\n"]},"metadata":{},"sourceType":"module"}