{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nconst cx = lucidClassNames.bind('&-Panel');\nconst {\n  bool,\n  node,\n  object,\n  string\n} = PropTypes;\nconst PanelHeader = _props => null;\nPanelHeader.displayName = 'Panel.Header';\nPanelHeader.peek = {\n  description: `Content displayed at the top of the panel.`\n};\nPanelHeader.propTypes = {\n  description: string,\n  children: node\n};\nPanelHeader.propName = 'Header';\nconst PanelFooter = _props => null;\nPanelFooter.displayName = 'Panel.Footer';\nPanelFooter.peek = {\n  description: `Content displayed at the bottom of the panel.`\n};\nPanelFooter.propTypes = {\n  description: string,\n  children: node\n};\nPanelFooter.propName = 'Footer';\nconst defaultProps = {\n  isGutterless: false,\n  hasMargin: true,\n  isScrollable: true\n};\nexport const Panel = props => {\n  const {\n    children,\n    className,\n    isGutterless,\n    hasMargin,\n    style,\n    isScrollable,\n    ...passThroughs\n  } = props;\n  const headerChildProp = _.first(_.map(findTypes(props, Panel.Header), 'props'));\n  const footerChildProp = _.first(_.map(findTypes(props, Panel.Footer), 'props'));\n  return React.createElement(\"div\", {\n    ...passThroughs,\n    className: cx('&', className, {\n      '&-is-not-gutterless': !isGutterless,\n      '&-has-margin': hasMargin,\n      '&-is-scrollable': isScrollable\n    }),\n    style: style\n  }, headerChildProp ? React.createElement(\"header\", {\n    ...headerChildProp,\n    className: cx('&-Header', headerChildProp.className)\n  }) : null, React.createElement(\"section\", {\n    className: cx('&-content')\n  }, children), footerChildProp ? React.createElement(\"footer\", {\n    ...footerChildProp,\n    className: cx('&-Footer', footerChildProp.className)\n  }) : null);\n};\nPanel.defaultProps = defaultProps;\nPanel.displayName = 'Panel';\nPanel.peek = {\n  description: `\\`Panel\\` is used to wrap content to better organize elements in window.`,\n  categories: ['layout']\n};\nPanel.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /*\n   *Child Element* - Header contents. Only one \\`Header\\` is used.\n   */\n  Header: node,\n  /**\n   *Child Element* - Footer contents. Only one \\`Footer\\` is used.\n   */\n  Footer: node,\n  /**\n      Generally you should only have a single child element so the centering\n      works correctly.\n  */\n  children: node,\n  /**\n      If set to true, creates a content section with no padding.\n  */\n  isGutterless: bool,\n  /**\n      Styles that are passed through to root element.\n  */\n  style: object,\n  /**\n      If set to true, makes content overflow scrollable, when Panel has a set\n      height.\n  */\n  isScrollable: bool\n};\nPanel.Header = PanelHeader;\nPanel.Footer = PanelFooter;\nexport default Panel;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,SAAS,QAAuB,4BAA4B;AAErE,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,SAAS,CAAC;AAE1C,MAAM;EAAEC,IAAI;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAM,CAAE,GAAGR,SAAS;AAQhD,MAAMS,WAAW,GAAIC,MAAyB,IAAW,IAAI;AAC7DD,WAAW,CAACE,WAAW,GAAG,cAAc;AACxCF,WAAW,CAACG,IAAI,GAAG;EAClBC,WAAW,EAAE;CACb;AACDJ,WAAW,CAACK,SAAS,GAAG;EACvBD,WAAW,EAAEL,MAAM;EACnBO,QAAQ,EAAET;CACV;AACDG,WAAW,CAACO,QAAQ,GAAG,QAAQ;AAO/B,MAAMC,WAAW,GAAIP,MAAyB,IAAW,IAAI;AAE7DO,WAAW,CAACN,WAAW,GAAG,cAAc;AACxCM,WAAW,CAACL,IAAI,GAAG;EAClBC,WAAW,EAAE;CACb;AACDI,WAAW,CAACH,SAAS,GAAG;EACvBD,WAAW,EAAEL,MAAM;EACnBO,QAAQ,EAAET;CACV;AACDW,WAAW,CAACD,QAAQ,GAAG,QAAQ;AAyB/B,MAAME,YAAY,GAAG;EACpBC,YAAY,EAAE,KAAK;EACnBC,SAAS,EAAE,IAAI;EACfC,YAAY,EAAE;CACd;AAED,OAAO,MAAMC,KAAK,GAAIC,KAAkB,IAAwB;EAC/D,MAAM;IACLR,QAAQ;IACRS,SAAS;IACTL,YAAY;IACZC,SAAS;IACTK,KAAK;IACLJ,YAAY;IACZ,GAAGK;EAAY,CACf,GAAGH,KAAK;EAET,MAAMI,eAAe,GAAG7B,CAAC,CAAC8B,KAAK,CAC9B9B,CAAC,CAAC+B,GAAG,CAAC3B,SAAS,CAACqB,KAAK,EAAED,KAAK,CAACQ,MAAM,CAAC,EAAE,OAAO,CAAC,CAC9C;EACD,MAAMC,eAAe,GAAGjC,CAAC,CAAC8B,KAAK,CAC9B9B,CAAC,CAAC+B,GAAG,CAAC3B,SAAS,CAACqB,KAAK,EAAED,KAAK,CAACU,MAAM,CAAC,EAAE,OAAO,CAAC,CAC9C;EAED,OACCjC;IAAA,GACK2B,YAAY;IAChBF,SAAS,EAAErB,EAAE,CAAC,GAAG,EAAEqB,SAAS,EAAE;MAC7B,qBAAqB,EAAE,CAACL,YAAY;MACpC,cAAc,EAAEC,SAAS;MACzB,iBAAiB,EAAEC;KACnB,CAAC;IACFI,KAAK,EAAEA;EAAK,GAEXE,eAAe,GACf5B;IAAA,GACK4B,eAAe;IACnBH,SAAS,EAAErB,EAAE,CAAC,UAAU,EAAEwB,eAAe,CAACH,SAAS;EAAC,EACnD,GACC,IAAI,EAERzB;IAASyB,SAAS,EAAErB,EAAE,CAAC,WAAW;EAAC,GAAGY,QAAQ,CAAW,EAExDgB,eAAe,GACfhC;IAAA,GACKgC,eAAe;IACnBP,SAAS,EAAErB,EAAE,CAAC,UAAU,EAAE4B,eAAe,CAACP,SAAS;EAAC,EACnD,GACC,IAAI,CACH;AAER,CAAC;AAEDF,KAAK,CAACJ,YAAY,GAAGA,YAAY;AACjCI,KAAK,CAACX,WAAW,GAAG,OAAO;AAC3BW,KAAK,CAACV,IAAI,GAAG;EACZC,WAAW,EAAE,0EAA0E;EACvFoB,UAAU,EAAE,CAAC,QAAQ;CACrB;AACDX,KAAK,CAACR,SAAS,GAAG;EACjB;;;EAGAU,SAAS,EAAEhB,MAAM;EAEjB;;;EAGAsB,MAAM,EAAExB,IAAI;EAEZ;;;EAGA0B,MAAM,EAAE1B,IAAI;EAEZ;;;;EAIAS,QAAQ,EAAET,IAAI;EAEd;;;EAGAa,YAAY,EAAEd,IAAI;EAElB;;;EAGAoB,KAAK,EAAElB,MAAM;EAEb;;;;EAIAc,YAAY,EAAEhB;CACd;AACDiB,KAAK,CAACQ,MAAM,GAAGrB,WAAW;AAC1Ba,KAAK,CAACU,MAAM,GAAGf,WAAW;AAE1B,eAAeK,KAAK","names":["_","React","PropTypes","lucidClassNames","findTypes","cx","bind","bool","node","object","string","PanelHeader","_props","displayName","peek","description","propTypes","children","propName","PanelFooter","defaultProps","isGutterless","hasMargin","isScrollable","Panel","props","className","style","passThroughs","headerChildProp","first","map","Header","footerChildProp","Footer","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Panel/Panel.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Panel');\n\nconst { bool, node, object, string } = PropTypes;\n\nexport interface IPanelHeaderProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {\n\tdescription?: string;\n}\n\nconst PanelHeader = (_props: IPanelHeaderProps): null => null;\nPanelHeader.displayName = 'Panel.Header';\nPanelHeader.peek = {\n\tdescription: `Content displayed at the top of the panel.`,\n};\nPanelHeader.propTypes = {\n\tdescription: string,\n\tchildren: node,\n};\nPanelHeader.propName = 'Header';\n\nexport interface IPanelFooterProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {\n\tdescription?: string;\n}\nconst PanelFooter = (_props: IPanelFooterProps): null => null;\n\nPanelFooter.displayName = 'Panel.Footer';\nPanelFooter.peek = {\n\tdescription: `Content displayed at the bottom of the panel.`,\n};\nPanelFooter.propTypes = {\n\tdescription: string,\n\tchildren: node,\n};\nPanelFooter.propName = 'Footer';\n\nexport interface IPanelProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** *Child Element* - Header contents. Only one \\`Header\\` is used. */\n\tHeader?: React.ReactNode & { props: IPanelHeaderProps };\n\n\t/** *Child Element* - Footer contents. Only one \\`Footer\\` is used. */\n\tFooter?: React.ReactNode & { props: IPanelFooterProps };\n\n\t/** If set to true, creates a content section with no padding. */\n\tisGutterless: boolean;\n\n\t/** If set to false, removes margin around the Panel */\n\thasMargin: boolean;\n\n\t/** If set to true, makes content overflow scrollable, when Panel has a set\n\t * height. */\n\tisScrollable: boolean;\n}\n\nconst defaultProps = {\n\tisGutterless: false,\n\thasMargin: true,\n\tisScrollable: true,\n};\n\nexport const Panel = (props: IPanelProps): React.ReactElement => {\n\tconst {\n\t\tchildren,\n\t\tclassName,\n\t\tisGutterless,\n\t\thasMargin,\n\t\tstyle,\n\t\tisScrollable,\n\t\t...passThroughs\n\t} = props;\n\n\tconst headerChildProp = _.first(\n\t\t_.map(findTypes(props, Panel.Header), 'props')\n\t);\n\tconst footerChildProp = _.first(\n\t\t_.map(findTypes(props, Panel.Footer), 'props')\n\t);\n\n\treturn (\n\t\t<div\n\t\t\t{...passThroughs}\n\t\t\tclassName={cx('&', className, {\n\t\t\t\t'&-is-not-gutterless': !isGutterless,\n\t\t\t\t'&-has-margin': hasMargin,\n\t\t\t\t'&-is-scrollable': isScrollable,\n\t\t\t})}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t{headerChildProp ? (\n\t\t\t\t<header\n\t\t\t\t\t{...headerChildProp}\n\t\t\t\t\tclassName={cx('&-Header', headerChildProp.className)}\n\t\t\t\t/>\n\t\t\t) : null}\n\n\t\t\t<section className={cx('&-content')}>{children}</section>\n\n\t\t\t{footerChildProp ? (\n\t\t\t\t<footer\n\t\t\t\t\t{...footerChildProp}\n\t\t\t\t\tclassName={cx('&-Footer', footerChildProp.className)}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nPanel.defaultProps = defaultProps;\nPanel.displayName = 'Panel';\nPanel.peek = {\n\tdescription: `\\`Panel\\` is used to wrap content to better organize elements in window.`,\n\tcategories: ['layout'],\n};\nPanel.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/*\n\t *Child Element* - Header contents. Only one \\`Header\\` is used.\n\t */\n\tHeader: node,\n\n\t/**\n\t *Child Element* - Footer contents. Only one \\`Footer\\` is used.\n\t */\n\tFooter: node,\n\n\t/**\n\t\tGenerally you should only have a single child element so the centering\n\t\tworks correctly.\n\t*/\n\tchildren: node,\n\n\t/**\n\t\tIf set to true, creates a content section with no padding.\n\t*/\n\tisGutterless: bool,\n\n\t/**\n\t\tStyles that are passed through to root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tIf set to true, makes content overflow scrollable, when Panel has a set\n\t\theight.\n\t*/\n\tisScrollable: bool,\n};\nPanel.Header = PanelHeader;\nPanel.Footer = PanelFooter;\n\nexport default Panel;\n"]},"metadata":{},"sourceType":"module"}