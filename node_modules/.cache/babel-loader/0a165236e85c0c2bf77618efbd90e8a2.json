{"ast":null,"code":"/* eslint-disable react/prop-types */\nimport _ from 'lodash';\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport TextField from '../TextField/TextField';\nimport SearchIcon from '../Icon/SearchIcon/SearchIcon';\nimport reducers from './SearchField.reducers';\nconst cx = lucidClassNames.bind('&-SearchField');\nconst {\n  bool,\n  func,\n  node,\n  number,\n  oneOfType,\n  string\n} = PropTypes;\nconst SearchFieldIcon = _props => null;\nSearchFieldIcon.peek = {\n  description: `Icon this is displayed on the right side of the SearchField. Any of the lucid \\`*Icon\\` components should work.`\n};\nSearchFieldIcon.displayName = 'SearchField.Icon';\nSearchFieldIcon.propName = 'Icon';\nconst SearchFieldTextField = _props => null;\nSearchFieldTextField.peek = {\n  description: `Icon this is displayed on the right side of the SearchField. Any of the lucid \\`*Icon\\` components should work.`\n};\nSearchFieldTextField.displayName = 'SearchField.TextField';\nSearchFieldTextField.propName = 'TextField';\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['onChange', 'onChangeDebounced', 'debounceLevel', 'onSubmit', 'value', 'isValid', 'isDisabled', 'placeholder', 'className', 'Icon', 'TextField', 'initialState', 'callbackId'];\nclass SearchField extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.textFieldElement = React.createRef();\n    this.focus = options => {\n      this.textFieldElement.current && this.textFieldElement.current.focus(options);\n    };\n  }\n  render() {\n    const {\n      props,\n      props: {\n        className,\n        isDisabled,\n        isValid,\n        onChange,\n        onChangeDebounced,\n        debounceLevel,\n        onSubmit,\n        placeholder,\n        value,\n        autoComplete,\n        ...passThroughs\n      }\n    } = this;\n    const {\n      Icon\n    } = SearchField;\n    const textFieldProps = _.get(getFirst(props, SearchField.TextField), 'props') || {\n      isDisabled,\n      onChange,\n      onChangeDebounced,\n      debounceLevel,\n      onSubmit,\n      placeholder,\n      isMultiLine: false,\n      value,\n      autoComplete\n    };\n    const textFieldElement = React.createElement(TextField, {\n      ref: this.textFieldElement,\n      ...textFieldProps\n    });\n    const isIconActive = _.isUndefined(isValid) ? !_.isEmpty(_.get(textFieldElement, 'props.value')) : isValid;\n    const defaultIcon = React.createElement(SearchIcon, {\n      size: 12,\n      className: cx('&-Icon', {\n        '&-Icon-active': isIconActive\n      })\n    });\n    const iconElement = getFirst(props, Icon);\n    const iconChildren = _.get(iconElement, 'props.children');\n    const icon = iconChildren ? createElement(iconChildren.type, {\n      ...iconChildren.props,\n      className: cx('&-Icon', {\n        '&-Icon-active': isIconActive\n      }, iconChildren.props.className)\n    }) : defaultIcon;\n    return React.createElement(\"div\", {\n      ..._.omit(passThroughs, nonPassThroughs),\n      className: cx('&', className)\n    }, textFieldElement, React.createElement(\"div\", {\n      className: cx('&-Icon-container', {\n        '&-Icon-is-disabled': isDisabled\n      })\n    }, icon));\n  }\n}\nSearchField.displayName = 'SearchField';\nSearchField.TextField = SearchFieldTextField;\nSearchField.Icon = SearchFieldIcon;\nSearchField.peek = {\n  description: `A wrapper around \\`TextField\\` that styles it for a search use-case. The icon and TextField are customizable through child components.`,\n  categories: ['controls', 'text'],\n  madeFrom: ['TextField', 'SearchIcon']\n};\nSearchField.reducers = reducers;\nSearchField.propTypes = {\n  /**\n      Fires an event every time the user types text into the TextField.\n      Signature: \\`(value, { event, props }) => {}\\`\n  */\n  onChange: func,\n  /**\n      Fires an event, debounced by \\`debounceLevel\\`, when the user types text\n      into the TextField.  Signature: \\`(value, { event, props }) => {}\\`\n  */\n  onChangeDebounced: func,\n  /**\n      Number of milliseconds to debounce the \\`onChangeDebounced\\` callback.\n      Only useful if you provide an \\`onChangeDebounced\\` handler.\n  */\n  debounceLevel: number,\n  /**\n      Fires an event when the user hits \"enter\" from the SearchField.\n      Signature: \\`(value, { event, props }) => {}\\`\n  */\n  onSubmit: func,\n  /**\n      Set the value of the input.\n  */\n  value: oneOfType([number, string]),\n  /**\n      Controls the highlighting of the search icon. Should be passed \\`true\\`\n      when the search text is valid, e.g. contains enough characters to perform\n      a search.\n  */\n  isValid: bool,\n  /**\n      Disables the SearchField by greying it out.\n  */\n  isDisabled: bool,\n  /**\n      placeholder value\n  */\n  placeholder: string,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  Icon: node /**\n             Icon this is displayed on the right side of the SearchField. Any of the\n             lucid \\`*Icon\\` components should work.\n             */,\n\n  /**\n      The TextField that Searchfield is composed of.\n  */\n  TextField: node\n};\nSearchField.defaultProps = {\n  isDisabled: false,\n  onChange: _.noop,\n  onChangeDebounced: _.noop,\n  debounceLevel: 500,\n  onSubmit: _.noop,\n  value: ''\n};\nexport default buildModernHybridComponent(SearchField, {\n  reducers\n});\nexport { SearchField as SearchFieldDumb };","map":{"version":3,"mappings":"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","names":["_","React","createElement","PropTypes","lucidClassNames","getFirst","buildModernHybridComponent","TextField","SearchIcon","reducers","cx","bind","bool","func","node","number","oneOfType","string","SearchFieldIcon","_props","peek","description","displayName","propName","SearchFieldTextField","nonPassThroughs","SearchField","Component","constructor","createRef","options","textFieldElement","current","focus","render","props","className","isDisabled","isValid","onChange","onChangeDebounced","debounceLevel","onSubmit","placeholder","value","autoComplete","passThroughs","Icon","textFieldProps","get","isMultiLine","ref","isIconActive","isUndefined","isEmpty","defaultIcon","size","iconElement","iconChildren","icon","type","omit","categories","madeFrom","noop","SearchFieldDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SearchField/SearchField.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport _ from 'lodash';\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, getFirst, Overwrite } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport TextField, { ITextFieldProps } from '../TextField/TextField';\nimport SearchIcon from '../Icon/SearchIcon/SearchIcon';\nimport reducers from './SearchField.reducers';\nimport { ITextFieldState } from '../TextField/TextField';\n\nconst cx = lucidClassNames.bind('&-SearchField');\n\nconst { bool, func, node, number, oneOfType, string } = PropTypes;\n\ninterface ISearchFieldIcon extends StandardProps {}\n\nconst SearchFieldIcon = (_props: ISearchFieldIcon): null => null;\nSearchFieldIcon.peek = {\n\tdescription: `Icon this is displayed on the right side of the SearchField. Any of the lucid \\`*Icon\\` components should work.`,\n};\nSearchFieldIcon.displayName = 'SearchField.Icon';\nSearchFieldIcon.propName = 'Icon';\n\ninterface ISearchFieldTextField extends ITextFieldProps {}\n\nconst SearchFieldTextField = (_props: ISearchFieldTextField): null => null;\nSearchFieldTextField.peek = {\n\tdescription: `Icon this is displayed on the right side of the SearchField. Any of the lucid \\`*Icon\\` components should work.`,\n};\nSearchFieldTextField.displayName = 'SearchField.TextField';\nSearchFieldTextField.propName = 'TextField';\n\nexport interface ISearchFieldState extends ITextFieldState {}\n\nexport interface ISearchFieldProps extends StandardProps {\n\t/** Fires an event every time the user types text into the TextField. */\n\tonChange?: (\n\t\tvalue: string,\n\t\t{ event, props }: { event: React.FormEvent; props: ITextFieldProps }\n\t) => void;\n\n\t/** Fires an event, debounced by \\`debounceLevel\\`, when the user types text\n\tinto the TextField. */\n\tonChangeDebounced?: (\n\t\tvalue: string,\n\t\t{ event, props }: { event: React.FormEvent; props: ITextFieldProps }\n\t) => void;\n\n\t/** Number of milliseconds to debounce the \\`onChangeDebounced\\` callback.\n\t\t\tOnly useful if you provide an \\`onChangeDebounced\\` handler. */\n\tdebounceLevel?: number;\n\n\t/** Fires an event when the user hits \"enter\" from the SearchField. */\n\tonSubmit?: (\n\t\tvalue: string,\n\t\t{ event, props }: { event: React.FormEvent; props: ITextFieldProps }\n\t) => void;\n\n\t/** Set the value of the input. */\n\tvalue?: string | number;\n\n\t/** Controls the highlighting of the search icon. Should be passed \\`true\\`\n\t\t\twhen the search text is valid, e.g. contains enough characters to perform\n\t\t\ta search. */\n\tisValid?: boolean;\n\n\t/** Disables the SearchField by greying it out. */\n\tisDisabled?: boolean;\n\n\t/**n placeholder value */\n\tplaceholder?: string;\n}\n\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'onChange',\n\t'onChangeDebounced',\n\t'debounceLevel',\n\t'onSubmit',\n\t'value',\n\t'isValid',\n\t'isDisabled',\n\t'placeholder',\n\t'className',\n\t'Icon',\n\t'TextField',\n\t'initialState',\n\t'callbackId',\n];\n\ntype ISearchFieldPropsWithPassThroughs = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.InputHTMLAttributes<HTMLInputElement>,\n\t\tHTMLInputElement\n\t>,\n\tISearchFieldProps\n>;\n\nclass SearchField extends React.Component<\n\tISearchFieldPropsWithPassThroughs,\n\tISearchFieldState\n> {\n\tstatic displayName = 'SearchField';\n\tstatic TextField = SearchFieldTextField;\n\tstatic Icon = SearchFieldIcon;\n\n\tstatic peek = {\n\t\tdescription: `A wrapper around \\`TextField\\` that styles it for a search use-case. The icon and TextField are customizable through child components.`,\n\t\tcategories: ['controls', 'text'],\n\t\tmadeFrom: ['TextField', 'SearchIcon'],\n\t};\n\n\tstatic reducers = reducers;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tFires an event every time the user types text into the TextField.\n\t\t\tSignature: \\`(value, { event, props }) => {}\\`\n\t\t*/\n\t\tonChange: func,\n\n\t\t/**\n\t\t\tFires an event, debounced by \\`debounceLevel\\`, when the user types text\n\t\t\tinto the TextField.  Signature: \\`(value, { event, props }) => {}\\`\n\t\t*/\n\t\tonChangeDebounced: func,\n\n\t\t/**\n\t\t\tNumber of milliseconds to debounce the \\`onChangeDebounced\\` callback.\n\t\t\tOnly useful if you provide an \\`onChangeDebounced\\` handler.\n\t\t*/\n\t\tdebounceLevel: number,\n\n\t\t/**\n\t\t\tFires an event when the user hits \"enter\" from the SearchField.\n\t\t\tSignature: \\`(value, { event, props }) => {}\\`\n\t\t*/\n\t\tonSubmit: func,\n\n\t\t/**\n\t\t\tSet the value of the input.\n\t\t*/\n\t\tvalue: oneOfType([number, string]),\n\n\t\t/**\n\t\t\tControls the highlighting of the search icon. Should be passed \\`true\\`\n\t\t\twhen the search text is valid, e.g. contains enough characters to perform\n\t\t\ta search.\n\t\t*/\n\t\tisValid: bool,\n\n\t\t/**\n\t\t\tDisables the SearchField by greying it out.\n\t\t*/\n\t\tisDisabled: bool,\n\n\t\t/**\n\t\t\tplaceholder value\n\t\t*/\n\t\tplaceholder: string,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\tIcon: node /**\n\t\t\tIcon this is displayed on the right side of the SearchField. Any of the\n\t\t\tlucid \\`*Icon\\` components should work.\n\t\t*/,\n\n\t\t/**\n\t\t\tThe TextField that Searchfield is composed of.\n\t\t*/\n\t\tTextField: node,\n\t};\n\n\tstatic defaultProps = {\n\t\tisDisabled: false,\n\t\tonChange: _.noop,\n\t\tonChangeDebounced: _.noop,\n\t\tdebounceLevel: 500,\n\t\tonSubmit: _.noop,\n\t\tvalue: '',\n\t};\n\n\tprivate textFieldElement = React.createRef<TextField>();\n\n\tfocus = (options?: FocusOptions): void => {\n\t\tthis.textFieldElement.current &&\n\t\t\tthis.textFieldElement.current.focus(options);\n\t};\n\n\trender(): React.ReactNode {\n\t\tconst {\n\t\t\tprops,\n\t\t\tprops: {\n\t\t\t\tclassName,\n\t\t\t\tisDisabled,\n\t\t\t\tisValid,\n\t\t\t\tonChange,\n\t\t\t\tonChangeDebounced,\n\t\t\t\tdebounceLevel,\n\t\t\t\tonSubmit,\n\t\t\t\tplaceholder,\n\t\t\t\tvalue,\n\t\t\t\tautoComplete,\n\t\t\t\t...passThroughs\n\t\t\t},\n\t\t} = this;\n\n\t\tconst { Icon } = SearchField;\n\n\t\tconst textFieldProps = _.get(\n\t\t\tgetFirst(props, SearchField.TextField),\n\t\t\t'props'\n\t\t) || {\n\t\t\tisDisabled,\n\t\t\tonChange,\n\t\t\tonChangeDebounced,\n\t\t\tdebounceLevel,\n\t\t\tonSubmit,\n\t\t\tplaceholder,\n\t\t\tisMultiLine: false,\n\t\t\tvalue,\n\t\t\tautoComplete,\n\t\t};\n\n\t\tconst textFieldElement = (\n\t\t\t<TextField ref={this.textFieldElement} {...textFieldProps} />\n\t\t);\n\t\tconst isIconActive = _.isUndefined(isValid)\n\t\t\t? !_.isEmpty(_.get(textFieldElement, 'props.value'))\n\t\t\t: isValid;\n\t\tconst defaultIcon = (\n\t\t\t<SearchIcon\n\t\t\t\tsize={12}\n\t\t\t\tclassName={cx('&-Icon', { '&-Icon-active': isIconActive })}\n\t\t\t/>\n\t\t);\n\t\tconst iconElement = getFirst(props, Icon);\n\t\tconst iconChildren = _.get(iconElement, 'props.children');\n\t\tconst icon = iconChildren\n\t\t\t? createElement(iconChildren.type, {\n\t\t\t\t\t...iconChildren.props,\n\t\t\t\t\tclassName: cx(\n\t\t\t\t\t\t'&-Icon',\n\t\t\t\t\t\t{ '&-Icon-active': isIconActive },\n\t\t\t\t\t\ticonChildren.props.className\n\t\t\t\t\t),\n\t\t\t  })\n\t\t\t: defaultIcon;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t>\n\t\t\t\t{textFieldElement}\n\t\t\t\t<div\n\t\t\t\t\tclassName={cx('&-Icon-container', {\n\t\t\t\t\t\t'&-Icon-is-disabled': isDisabled,\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{icon}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tISearchFieldPropsWithPassThroughs,\n\tISearchFieldState,\n\ttypeof SearchField\n>(SearchField, { reducers });\nexport { SearchField as SearchFieldDumb };\n"]},"metadata":{},"sourceType":"module"}