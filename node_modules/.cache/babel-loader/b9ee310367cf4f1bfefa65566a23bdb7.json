{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { ExpanderPanelDumb as ExpanderPanel } from '../ExpanderPanel/ExpanderPanel';\nimport { findTypes } from '../../util/component-types';\nimport * as reducers from '../Accordion/Accordion.reducers';\nconst cx = lucidClassNames.bind('&-Accordion');\nconst {\n  func,\n  object,\n  number,\n  string\n} = PropTypes;\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['selectedIndex', 'onSelect'];\nconst defaultProps = {\n  onSelect: _.noop\n};\nconst Accordion = props => {\n  const {\n    style,\n    className,\n    onSelect,\n    selectedIndex,\n    ...passThroughs\n  } = props;\n  const itemChildProps = _.map(findTypes(props, Accordion.Item), 'props');\n  const handleToggle = (isExpanded, index, event) => {\n    const selectedIndex = isExpanded ? index : null;\n    onSelect(selectedIndex, {\n      event,\n      props\n    });\n  };\n  return React.createElement(\"div\", {\n    ..._.omit(passThroughs, nonPassThroughs),\n    className: cx('&', className),\n    style: style\n  }, _.map(itemChildProps, (itemChildProp, index) => {\n    return React.createElement(ExpanderPanel, {\n      key: index,\n      ...itemChildProp,\n      className: cx('&-Item', itemChildProp.className),\n      onToggle: (isExpanded, _ref) => {\n        let {\n          event\n        } = _ref;\n        return handleToggle(isExpanded, index, event);\n      },\n      isExpanded: !itemChildProp.isDisabled && selectedIndex === index\n    });\n  }));\n};\nAccordion.displayName = 'Accordion';\nAccordion.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Indicates which item is expanded\n  */\n  selectedIndex: number,\n  /**\n      Called when the user clicks on the component's header of an item.\n  */\n  onSelect: func,\n  /**\n      Passed through to the root element.\n  **/\n  style: object\n};\nAccordion.peek = {\n  description: `\\`Accordion\\` is a container that renders panels and controls their expansion or collapse.`,\n  categories: ['layout'],\n  madeFrom: ['ExpanderPanel']\n};\nAccordion.defaultProps = defaultProps;\nAccordion.reducers = reducers;\nAccordion.Item = ExpanderPanel;\nAccordion.Header = ExpanderPanel.Header;\nexport default buildModernHybridComponent(Accordion, {\n  reducers\n});\nexport { Accordion as AccordionDumb };","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,0BAA0B,QAAQ,6BAA6B;AACxE,SAASC,iBAAiB,IAAIC,aAAa,QAAQ,gCAAgC;AACnF,SAASC,SAAS,QAAuB,4BAA4B;AACrE,OAAO,KAAKC,QAAQ,MAAM,iCAAiC;AAE3D,MAAMC,EAAE,GAAGN,eAAe,CAACO,IAAI,CAAC,aAAa,CAAC;AAE9C,MAAM;EAAEC,IAAI;EAAEC,MAAM;EAAEC,MAAM;EAAEC;AAAM,CAAE,GAAGZ,SAAS;AAgBlD;AACA,MAAMa,eAAe,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC;AAMrD,MAAMC,YAAY,GAAG;EACpBC,QAAQ,EAAEjB,CAAC,CAACkB;CACZ;AAED,MAAMC,SAAS,GAAIC,KAAsB,IAAwB;EAChE,MAAM;IAAEC,KAAK;IAAEC,SAAS;IAAEL,QAAQ;IAAEM,aAAa;IAAE,GAAGC;EAAY,CAAE,GAAGJ,KAAK;EAE5E,MAAMK,cAAc,GAAGzB,CAAC,CAAC0B,GAAG,CAACnB,SAAS,CAACa,KAAK,EAAED,SAAS,CAACQ,IAAI,CAAC,EAAE,OAAO,CAAC;EAEvE,MAAMC,YAAY,GAAG,CACpBC,UAAmB,EACnBC,KAAa,EACbC,KAAuB,KACpB;IACH,MAAMR,aAAa,GAAGM,UAAU,GAAGC,KAAK,GAAG,IAAI;IAE/Cb,QAAQ,CAACM,aAAa,EAAE;MACvBQ,KAAK;MACLX;KACA,CAAC;EACH,CAAC;EAED,OACCnB;IAAA,GACMD,CAAC,CAACgC,IAAI,CAACR,YAAY,EAAET,eAAe,CAAS;IAClDO,SAAS,EAAEb,EAAE,CAAC,GAAG,EAAEa,SAAS,CAAC;IAC7BD,KAAK,EAAEA;EAAK,GAEXrB,CAAC,CAAC0B,GAAG,CAACD,cAAc,EAAE,CAACQ,aAAa,EAAEH,KAAa,KAAI;IACvD,OACC7B,oBAACK,aAAa;MACb4B,GAAG,EAAEJ,KAAK;MAAA,GACNG,aAAa;MACjBX,SAAS,EAAEb,EAAE,CAAC,QAAQ,EAAEwB,aAAa,CAACX,SAAS,CAAC;MAChDa,QAAQ,EAAE,CAACN,UAAU;QAAA,IAAE;UAAEE;QAAK,CAAE;QAAA,OAC/BH,YAAY,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,CAAC;MAAA;MAEvCF,UAAU,EAAE,CAACI,aAAa,CAACG,UAAU,IAAIb,aAAa,KAAKO;IAAK,EAC/D;EAEJ,CAAC,CAAC,CACG;AAER,CAAC;AAEDX,SAAS,CAACkB,WAAW,GAAG,WAAW;AAEnClB,SAAS,CAACmB,SAAS,GAAG;EACrB;;;EAGAhB,SAAS,EAAER,MAAM;EAEjB;;;EAGAS,aAAa,EAAEV,MAAM;EAErB;;;EAGAI,QAAQ,EAAEN,IAAI;EAEd;;;EAGAU,KAAK,EAAET;CACP;AAEDO,SAAS,CAACoB,IAAI,GAAG;EAChBC,WAAW,EAAE,4FAA4F;EACzGC,UAAU,EAAE,CAAC,QAAQ,CAAC;EACtBC,QAAQ,EAAE,CAAC,eAAe;CAC1B;AAEDvB,SAAS,CAACH,YAAY,GAAGA,YAAY;AAErCG,SAAS,CAACX,QAAQ,GAAGA,QAAQ;AAE7BW,SAAS,CAACQ,IAAI,GAAGrB,aAAa;AAE9Ba,SAAS,CAACwB,MAAM,GAAGrC,aAAa,CAACqC,MAAM;AAEvC,eAAevC,0BAA0B,CAIvCe,SAAgB,EAAE;EAAEX;AAAQ,CAAE,CAAC;AAEjC,SAASW,SAAS,IAAIyB,aAAa","names":["_","React","PropTypes","lucidClassNames","buildModernHybridComponent","ExpanderPanelDumb","ExpanderPanel","findTypes","reducers","cx","bind","func","object","number","string","nonPassThroughs","defaultProps","onSelect","noop","Accordion","props","style","className","selectedIndex","passThroughs","itemChildProps","map","Item","handleToggle","isExpanded","index","event","omit","itemChildProp","key","onToggle","isDisabled","displayName","propTypes","peek","description","categories","madeFrom","Header","AccordionDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Accordion/Accordion.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { ExpanderPanelDumb as ExpanderPanel } from '../ExpanderPanel/ExpanderPanel';\nimport { findTypes, StandardProps } from '../../util/component-types';\nimport * as reducers from '../Accordion/Accordion.reducers';\n\nconst cx = lucidClassNames.bind('&-Accordion');\n\nconst { func, object, number, string } = PropTypes;\nexport interface IAccordionProps extends StandardProps {\n\t/**\n\t * Indicates which item is expanded\n\t * */\n\tselectedIndex?: number | null;\n\n\t/**\n\t * Called when the user clicks on the component's header of an item.\n\t * */\n\tonSelect: (\n\t\tselectedIndex: number | null,\n\t\t{ event, props }: { event: React.MouseEvent; props: IAccordionProps }\n\t) => void;\n}\n\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['selectedIndex', 'onSelect'];\n\nexport interface IAccordionState {\n\tselectedIndex: number | null;\n}\n\nconst defaultProps = {\n\tonSelect: _.noop,\n};\n\nconst Accordion = (props: IAccordionProps): React.ReactElement => {\n\tconst { style, className, onSelect, selectedIndex, ...passThroughs } = props;\n\n\tconst itemChildProps = _.map(findTypes(props, Accordion.Item), 'props');\n\n\tconst handleToggle = (\n\t\tisExpanded: boolean,\n\t\tindex: number,\n\t\tevent: React.MouseEvent\n\t) => {\n\t\tconst selectedIndex = isExpanded ? index : null;\n\n\t\tonSelect(selectedIndex, {\n\t\t\tevent,\n\t\t\tprops,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div\n\t\t\t{...(_.omit(passThroughs, nonPassThroughs) as any)}\n\t\t\tclassName={cx('&', className)}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t{_.map(itemChildProps, (itemChildProp, index: number) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ExpanderPanel\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t{...itemChildProp}\n\t\t\t\t\t\tclassName={cx('&-Item', itemChildProp.className)}\n\t\t\t\t\t\tonToggle={(isExpanded, { event }) =>\n\t\t\t\t\t\t\thandleToggle(isExpanded, index, event)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tisExpanded={!itemChildProp.isDisabled && selectedIndex === index}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nAccordion.displayName = 'Accordion';\n\nAccordion.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tIndicates which item is expanded\n\t*/\n\tselectedIndex: number,\n\n\t/**\n\t\tCalled when the user clicks on the component's header of an item.\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tPassed through to the root element.\n\t**/\n\tstyle: object,\n};\n\nAccordion.peek = {\n\tdescription: `\\`Accordion\\` is a container that renders panels and controls their expansion or collapse.`,\n\tcategories: ['layout'],\n\tmadeFrom: ['ExpanderPanel'],\n};\n\nAccordion.defaultProps = defaultProps;\n\nAccordion.reducers = reducers;\n\nAccordion.Item = ExpanderPanel;\n\nAccordion.Header = ExpanderPanel.Header;\n\nexport default buildModernHybridComponent<\n\tIAccordionProps,\n\tIAccordionState,\n\ttypeof Accordion\n>(Accordion as any, { reducers });\n\nexport { Accordion as AccordionDumb };\n"]},"metadata":{},"sourceType":"module"}