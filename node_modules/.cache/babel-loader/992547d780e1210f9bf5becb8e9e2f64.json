{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nconst cx = lucidClassNames.bind('&-Validation');\nconst {\n  string,\n  any\n} = PropTypes;\nconst ValidationError = _props => null;\nValidationError.displayName = 'Validation.Error';\nValidationError.peek = {\n  description: `Content that will be displayed as an error message.`\n};\nValidationError.propName = 'Error';\nValidationError.propTypes = {\n  description: string,\n  children: any\n};\nexport const Validation = props => {\n  const {\n    className,\n    children,\n    ...passThroughs\n  } = props;\n  const errorChildProps = _.get(getFirst(props, Validation.Error), 'props');\n  return React.createElement(\"div\", {\n    ...omit(passThroughs, ['Error', 'className', 'children', 'initialState', 'callbackId']),\n    className: cx('&', {\n      '&-is-error': errorChildProps && errorChildProps.children\n    }, className)\n  }, children, errorChildProps && errorChildProps.children && errorChildProps.children !== true ? React.createElement(\"div\", {\n    ...omit(errorChildProps, ['initialState', 'callbackId']),\n    className: cx('&-error-content', errorChildProps.className)\n  }, errorChildProps.children) : null);\n};\nValidation.displayName = 'Validation';\nValidation.peek = {\n  description: `\\`Validation\\` is a wrapper component that's meant to be used by other components. Wrap your form components in one, and, if there's an error, style them accordingly.`,\n  categories: ['helpers']\n};\nValidation.propTypes = {\n  /**\n      In most cases this will be a string, but it also accepts any valid React\n      element. If this is a falsey value, then no error message will be\n      displayed.  If this is the literal \\`true\\`, it will add the\n      \\`-is-error\\` class to the wrapper div, but not render the\n      \\`-error-content\\` \\`div\\`.\n  */\n  Error: any,\n  /**\n      Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library.\n  */\n  className: string,\n  /**\n      Any valid React children.\n  */\n  children: any.isRequired\n};\nValidation.Error = ValidationError;\nexport default Validation;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,IAAIC,IAAI,QAAQ,QAAQ;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,QAAQ,QAAuB,4BAA4B;AAEpE,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,cAAc,CAAC;AAE/C,MAAM;EAAEC,MAAM;EAAEC;AAAG,CAAE,GAAGN,SAAS;AAMjC,MAAMO,eAAe,GAAIC,MAA6B,IAAW,IAAI;AACrED,eAAe,CAACE,WAAW,GAAG,kBAAkB;AAChDF,eAAe,CAACG,IAAI,GAAG;EACtBC,WAAW,EAAE;CACb;AACDJ,eAAe,CAACK,QAAQ,GAAG,OAAO;AAClCL,eAAe,CAACM,SAAS,GAAG;EAC3BF,WAAW,EAAEN,MAAM;EACnBS,QAAQ,EAAER;CACV;AAYD,OAAO,MAAMS,UAAU,GAAIC,KAAuB,IAAwB;EACzE,MAAM;IAAEC,SAAS;IAAEH,QAAQ;IAAE,GAAGI;EAAY,CAAE,GAAGF,KAAK;EACtD,MAAMG,eAAe,GAAGtB,CAAC,CAACuB,GAAG,CAC5BlB,QAAQ,CAAwBc,KAAK,EAAED,UAAU,CAACM,KAAK,CAAC,EACxD,OAAO,CACP;EAED,OACCtB;IAAA,GACKD,IAAI,CAACoB,YAAY,EAAE,CACtB,OAAO,EACP,WAAW,EACX,UAAU,EACV,cAAc,EACd,YAAY,CACZ,CAAC;IACFD,SAAS,EAAEd,EAAE,CACZ,GAAG,EACH;MACC,YAAY,EAAEgB,eAAe,IAAIA,eAAe,CAACL;KACjD,EACDG,SAAS;EACT,GAEAH,QAAQ,EACRK,eAAe,IAChBA,eAAe,CAACL,QAAQ,IACxBK,eAAe,CAACL,QAAQ,KAAK,IAAI,GAChCf;IAAA,GACKD,IAAI,CAACqB,eAAe,EAAE,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IACzDF,SAAS,EAAEd,EAAE,CAAC,iBAAiB,EAAEgB,eAAe,CAACF,SAAS;EAAC,GAE1DE,eAAe,CAACL,QAAQ,CACpB,GACH,IAAI,CACH;AAER,CAAC;AAEDC,UAAU,CAACN,WAAW,GAAG,YAAY;AACrCM,UAAU,CAACL,IAAI,GAAG;EACjBC,WAAW,EAAE,wKAAwK;EACrLW,UAAU,EAAE,CAAC,SAAS;CACtB;AACDP,UAAU,CAACF,SAAS,GAAG;EACtB;;;;;;;EAOAQ,KAAK,EAAEf,GAAG;EAEV;;;;EAIAW,SAAS,EAAEZ,MAAM;EAEjB;;;EAGAS,QAAQ,EAAER,GAAG,CAACiB;CACd;AAEDR,UAAU,CAACM,KAAK,GAAGd,eAAe;AAElC,eAAeQ,UAAU","names":["_","omit","React","PropTypes","lucidClassNames","getFirst","cx","bind","string","any","ValidationError","_props","displayName","peek","description","propName","propTypes","children","Validation","props","className","passThroughs","errorChildProps","get","Error","categories","isRequired"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Validation/Validation.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst, StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Validation');\n\nconst { string, any } = PropTypes;\n\n/** Validation Error */\nexport interface IValidationErrorProps extends StandardProps {\n\tdescription?: string;\n}\nconst ValidationError = (_props: IValidationErrorProps): null => null;\nValidationError.displayName = 'Validation.Error';\nValidationError.peek = {\n\tdescription: `Content that will be displayed as an error message.`,\n};\nValidationError.propName = 'Error';\nValidationError.propTypes = {\n\tdescription: string,\n\tchildren: any,\n};\n\n/** Validation */\nexport interface IValidationProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\tError?: React.ReactNode;\n}\n\nexport const Validation = (props: IValidationProps): React.ReactElement => {\n\tconst { className, children, ...passThroughs } = props;\n\tconst errorChildProps = _.get(\n\t\tgetFirst<IValidationErrorProps>(props, Validation.Error),\n\t\t'props'\n\t);\n\n\treturn (\n\t\t<div\n\t\t\t{...omit(passThroughs, [\n\t\t\t\t'Error',\n\t\t\t\t'className',\n\t\t\t\t'children',\n\t\t\t\t'initialState',\n\t\t\t\t'callbackId',\n\t\t\t])}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-error': errorChildProps && errorChildProps.children,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t\t{errorChildProps &&\n\t\t\terrorChildProps.children &&\n\t\t\terrorChildProps.children !== true ? (\n\t\t\t\t<div\n\t\t\t\t\t{...omit(errorChildProps, ['initialState', 'callbackId'])}\n\t\t\t\t\tclassName={cx('&-error-content', errorChildProps.className)}\n\t\t\t\t>\n\t\t\t\t\t{errorChildProps.children}\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nValidation.displayName = 'Validation';\nValidation.peek = {\n\tdescription: `\\`Validation\\` is a wrapper component that's meant to be used by other components. Wrap your form components in one, and, if there's an error, style them accordingly.`,\n\tcategories: ['helpers'],\n};\nValidation.propTypes = {\n\t/**\n\t\tIn most cases this will be a string, but it also accepts any valid React\n\t\telement. If this is a falsey value, then no error message will be\n\t\tdisplayed.  If this is the literal \\`true\\`, it will add the\n\t\t\\`-is-error\\` class to the wrapper div, but not render the\n\t\t\\`-error-content\\` \\`div\\`.\n\t*/\n\tError: any,\n\n\t/**\n\t\tClasses that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: any.isRequired,\n};\n\nValidation.Error = ValidationError;\n\nexport default Validation;\n"]},"metadata":{},"sourceType":"module"}