{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport Collapsible from '../Collapsible/Collapsible';\nimport * as reducers from './Expander.reducers';\nimport Button from '../Button/Button';\nconst cx = lucidClassNames.bind('&-Expander');\nconst {\n  any,\n  bool,\n  func,\n  node,\n  object,\n  oneOf,\n  string\n} = PropTypes;\nconst Label = _props => null;\nLabel.displayName = 'Expander.Label';\nLabel.peek = {\n  description: `Renders a \\`<span>\\` to be shown next to the \\`ExpanderIcon\\`.`\n};\nLabel.propName = 'Label';\nLabel.propTypes = {\n  /**\n      Used to identify the purpose of this switch to the user -- can be any\n      renderable content.\n  */\n  children: node\n};\nconst AdditionalLabelContent = _props => null;\nAdditionalLabelContent.displayName = 'Expander.AdditionalLabelContent';\nAdditionalLabelContent.peek = {\n  description: `Renders a \\`<span>\\` to be shown next to the expander label.`\n};\nAdditionalLabelContent.propName = 'AdditionalLabelContent';\nAdditionalLabelContent.propTypes = {\n  /**\n      Used to display additional information or/and actions next to expander label.\n  */\n  children: node\n};\nconst nonPassThroughs = ['isExpanded', 'onToggle', 'style', 'Label', 'AdditionalLabelContent', 'kind', 'initialState', 'callbackId'];\nconst defaultProps = {\n  isExpanded: false,\n  onToggle: _.noop,\n  kind: 'simple'\n};\nclass Expander extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleToggle = event => {\n      this.props.onToggle(!this.props.isExpanded, {\n        event,\n        props: this.props\n      });\n    };\n  }\n  render() {\n    const {\n      children,\n      className,\n      isExpanded,\n      style,\n      kind,\n      ...passThroughs\n    } = this.props;\n    const labelChildProp = _.first(_.map(findTypes(this.props, Expander.Label), 'props'));\n    const additionalLabelContentChildProp = _.first(_.map(findTypes(this.props, Expander.AdditionalLabelContent), 'props'));\n    return React.createElement(\"div\", {\n      ...omit(passThroughs, nonPassThroughs),\n      className: cx('&', {\n        '&-is-expanded': isExpanded,\n        '&-kind-highlighted': kind === 'highlighted'\n      }, className),\n      style: style\n    }, React.createElement(\"header\", {\n      className: cx('&-header')\n    }, React.createElement(\"div\", {\n      className: cx('&-header-toggle'),\n      onClick: this.handleToggle\n    }, React.createElement(Button, {\n      className: cx('&-icon'),\n      kind: 'invisible',\n      hasOnlyIcon: true\n    }, React.createElement(ChevronIcon, {\n      direction: isExpanded ? 'up' : 'down'\n    })), labelChildProp && React.createElement(\"span\", {\n      className: cx('&-text')\n    }, labelChildProp.children)), additionalLabelContentChildProp && React.createElement(\"div\", {\n      className: cx('&-additional-content')\n    }, additionalLabelContentChildProp.children)), React.createElement(Collapsible, {\n      isExpanded: isExpanded,\n      rootType: 'section',\n      className: cx('&-content')\n    }, children));\n  }\n}\nExpander.displayName = 'Expander';\nExpander.propTypes = {\n  /**\n      Expandable content.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Indicates that the component is in the \"expanded\" state when true and in\n      the \"unexpanded\" state when false.\n  */\n  isExpanded: bool,\n  /**\n      Called when the user clicks on the component's header.  Signature:\n      \\`(isExpanded, { event, props }) => {}\\`\n  */\n  onToggle: func,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Child element whose children represents content to be shown next to the\n      expander icon.\n  */\n  Label: any,\n  /**\n      Child element whose children respresent content to be shown inside\n      Expander.Label and to the right of it\n  */\n  AdditionalLabelContent: node,\n  /**\n      Renders different variants of Expander. 'simple' is default.\n      'highlighted' is more prominant.\n  */\n  kind: oneOf(['simple', 'highlighted'])\n};\nExpander.defaultProps = defaultProps;\nExpander.reducers = reducers;\nExpander.Label = Label;\nExpander.AdditionalLabelContent = AdditionalLabelContent;\nExpander.peek = {\n  description: `\\`Expander\\` is a container that provides a toggle that controls when the \\`Panel\\` content is shown.`,\n  categories: ['layout'],\n  madeFrom: ['ChevronIcon']\n};\nexport default buildModernHybridComponent(Expander, {\n  reducers\n});\nexport { Expander as ExpanderDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","findTypes","buildModernHybridComponent","ChevronIcon","Collapsible","reducers","Button","cx","bind","any","bool","func","node","object","oneOf","string","Label","_props","displayName","peek","description","propName","propTypes","children","AdditionalLabelContent","nonPassThroughs","defaultProps","isExpanded","onToggle","noop","kind","Expander","Component","constructor","event","props","render","className","style","passThroughs","labelChildProp","first","map","additionalLabelContentChildProp","onClick","handleToggle","hasOnlyIcon","direction","rootType","categories","madeFrom","ExpanderDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Expander/Expander.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, StandardProps } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport Collapsible from '../Collapsible/Collapsible';\nimport * as reducers from './Expander.reducers';\nimport Button from '../Button/Button';\n\nconst cx = lucidClassNames.bind('&-Expander');\n\nconst { any, bool, func, node, object, oneOf, string } = PropTypes;\n\n/** Expander Label */\nexport interface IExpanderLabelProps extends StandardProps {\n\tdescription?: string;\n}\n\nconst Label = (_props: IExpanderLabelProps): null => null;\nLabel.displayName = 'Expander.Label';\nLabel.peek = {\n\tdescription: `Renders a \\`<span>\\` to be shown next to the \\`ExpanderIcon\\`.`,\n};\nLabel.propName = 'Label';\nLabel.propTypes = {\n\t/**\n\t\tUsed to identify the purpose of this switch to the user -- can be any\n\t\trenderable content.\n\t*/\n\tchildren: node,\n};\n\n/** Additional Label */\nexport interface IExpanderAdditionalLabelProps extends StandardProps {\n\tdescription?: string;\n}\nconst AdditionalLabelContent = (_props: IExpanderAdditionalLabelProps): null =>\n\tnull;\nAdditionalLabelContent.displayName = 'Expander.AdditionalLabelContent';\nAdditionalLabelContent.peek = {\n\tdescription: `Renders a \\`<span>\\` to be shown next to the expander label.`,\n};\nAdditionalLabelContent.propName = 'AdditionalLabelContent';\nAdditionalLabelContent.propTypes = {\n\t/**\n\t\tUsed to display additional information or/and actions next to expander label.\n\t*/\n\tchildren: node,\n};\n\n/** Expander */\nexport interface IExpanderProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/**\n\t * Indicates that the component is in the \"expanded\" state when true and in\n\t * the \"unexpanded\" state when false.\n\t * */\n\tisExpanded: boolean;\n\n\t/**\n\t * Called when the user clicks on the component's header.\n\t * */\n\tonToggle: (\n\t\tisExpanded: boolean,\n\t\t{ event, props }: { event: React.MouseEvent; props: IExpanderProps }\n\t) => void;\n\n\t/** Passed through to the root element. */\n\tstyle?: React.CSSProperties;\n\n\t/** Child element whose children represents content to be shown next to the\n\t * expander icon.\n\t * */\n\tLabel?: React.ReactNode;\n\n\t/** Child element whose children respresent content to be shown inside\n\t * Expander.Label and to the right of it\n\t * */\n\tAdditionalLabelContent?: React.ReactNode;\n\n\t/** Renders different variants of Expander. 'simple' is default.\n\t * 'highlighted' is more prominant.\n\t * */\n\tkind: 'simple' | 'highlighted';\n}\n\nconst nonPassThroughs = [\n\t'isExpanded',\n\t'onToggle',\n\t'style',\n\t'Label',\n\t'AdditionalLabelContent',\n\t'kind',\n\t'initialState',\n\t'callbackId',\n];\n\nconst defaultProps = {\n\tisExpanded: false,\n\tonToggle: _.noop,\n\tkind: 'simple' as const,\n};\n\nexport interface IExpanderState {\n\tisExpanded: boolean;\n}\n\nclass Expander extends React.Component<IExpanderProps, IExpanderState> {\n\tstatic displayName = 'Expander';\n\tstatic propTypes = {\n\t\t/**\n\t\t\tExpandable content.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tIndicates that the component is in the \"expanded\" state when true and in\n\t\t\tthe \"unexpanded\" state when false.\n\t\t*/\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t\tCalled when the user clicks on the component's header.  Signature:\n\t\t\t\\`(isExpanded, { event, props }) => {}\\`\n\t\t*/\n\t\tonToggle: func,\n\n\t\t/**\n\t\t\tPassed through to the root element.\n\t\t*/\n\t\tstyle: object,\n\n\t\t/**\n\t\t\tChild element whose children represents content to be shown next to the\n\t\t\texpander icon.\n\t\t*/\n\t\tLabel: any,\n\n\t\t/**\n\t\t\tChild element whose children respresent content to be shown inside\n\t\t\tExpander.Label and to the right of it\n\t\t*/\n\t\tAdditionalLabelContent: node,\n\n\t\t/**\n\t\t\tRenders different variants of Expander. 'simple' is default.\n\t\t\t'highlighted' is more prominant.\n\t\t*/\n\t\tkind: oneOf(['simple', 'highlighted']),\n\t};\n\n\tstatic defaultProps = defaultProps;\n\n\tstatic reducers = reducers;\n\n\tstatic Label = Label;\n\tstatic AdditionalLabelContent = AdditionalLabelContent;\n\n\tstatic peek = {\n\t\tdescription: `\\`Expander\\` is a container that provides a toggle that controls when the \\`Panel\\` content is shown.`,\n\t\tcategories: ['layout'],\n\t\tmadeFrom: ['ChevronIcon'],\n\t};\n\n\thandleToggle = (event: React.MouseEvent): void => {\n\t\tthis.props.onToggle(!this.props.isExpanded, {\n\t\t\tevent,\n\t\t\tprops: this.props,\n\t\t});\n\t};\n\n\trender(): React.ReactNode {\n\t\tconst { children, className, isExpanded, style, kind, ...passThroughs } =\n\t\t\tthis.props;\n\n\t\tconst labelChildProp = _.first(\n\t\t\t_.map(findTypes(this.props, Expander.Label), 'props')\n\t\t);\n\n\t\tconst additionalLabelContentChildProp = _.first(\n\t\t\t_.map(findTypes(this.props, Expander.AdditionalLabelContent), 'props')\n\t\t);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-expanded': isExpanded,\n\t\t\t\t\t\t'&-kind-highlighted': kind === 'highlighted',\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tstyle={style}\n\t\t\t>\n\t\t\t\t<header className={cx('&-header')}>\n\t\t\t\t\t<div className={cx('&-header-toggle')} onClick={this.handleToggle}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName={cx('&-icon')}\n\t\t\t\t\t\t\tkind='invisible'\n\t\t\t\t\t\t\thasOnlyIcon={true}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ChevronIcon direction={isExpanded ? 'up' : 'down'} />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t{labelChildProp && (\n\t\t\t\t\t\t\t<span className={cx('&-text')}>{labelChildProp.children}</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{additionalLabelContentChildProp && (\n\t\t\t\t\t\t<div className={cx('&-additional-content')}>\n\t\t\t\t\t\t\t{additionalLabelContentChildProp.children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</header>\n\t\t\t\t<Collapsible\n\t\t\t\t\tisExpanded={isExpanded}\n\t\t\t\t\trootType='section'\n\t\t\t\t\tclassName={cx('&-content')}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</Collapsible>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tIExpanderProps,\n\tIExpanderState,\n\ttypeof Expander\n>(Expander as any, { reducers });\nexport { Expander as ExpanderDumb };\n"]},"metadata":{},"sourceType":"module"}