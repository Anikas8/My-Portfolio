{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport * as d3Shape from 'd3-shape';\nimport * as chartConstants from '../../constants/charts';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport Line from '../../components/Line/Line';\nimport { ToolTipDumb as ToolTip, nonPassThroughs as toolTipNonPassThroughs } from '../../components/ToolTip/ToolTip';\nimport reducers from './PieChart.reducers';\nconst cx = lucidClassNames.bind('&-PieChart');\nconst {\n  string,\n  number,\n  arrayOf,\n  bool,\n  shape,\n  object,\n  func\n} = PropTypes;\nconst DONUT_WIDTH = 15;\nconst HOVER_SCALE = 1.1; // duplicated in .less file\nconst INNER_RADIUS = 0.5;\nconst nonPassThroughs = ['style', 'className', 'height', 'width', 'margin', 'data', 'hasToolTips', 'hasStroke', 'palette', 'colorMap', 'ToolTip', 'isDonut', 'isHovering', 'hoveringIndex', 'onMouseOver', 'onMouseOut', 'donutWidth', 'xAxisField', 'xAxisFormatter', 'yAxisField', 'yAxisFormatter', 'initialState', 'callbackId'];\nconst defaultProps = {\n  height: 200,\n  width: 200,\n  // duplicated because `statics` aren't available during getDefaultProps\n  margin: {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n  palette: chartConstants.PALETTE_7,\n  hasToolTips: true,\n  hasStroke: true,\n  isDonut: false,\n  donutWidth: DONUT_WIDTH,\n  ToolTip: ToolTip.defaultProps,\n  isHovering: false,\n  hoveringIndex: 0,\n  onMouseOver: _.noop,\n  onMouseOut: _.noop,\n  xAxisField: 'x',\n  xAxisFormatter: _.identity,\n  yAxisField: 'y',\n  yAxisFormatter: _.identity\n};\nconst PieChart = props => {\n  const {\n    style,\n    className,\n    height,\n    width,\n    margin: marginOriginal,\n    data,\n    hasToolTips,\n    hasStroke,\n    palette,\n    colorMap,\n    isDonut,\n    donutWidth,\n    ToolTip: toolTipProps,\n    isHovering,\n    hoveringIndex,\n    xAxisField,\n    xAxisFormatter,\n    yAxisField,\n    yAxisFormatter,\n    ...passThroughs\n  } = props;\n  const margin = {\n    ...PieChart.MARGIN,\n    ...marginOriginal\n  };\n  const svgClasses = cx(className, '&');\n  const pieChartProps = omit(omit(passThroughs, toolTipNonPassThroughs.concat(['callbackId'])), nonPassThroughs);\n  // TODO: Consider displaying something specific when there is no data,\n  // perhaps a loading indicator.\n  if (_.isEmpty(data) || width < 1 || height < 1) {\n    return React.createElement(\"svg\", {\n      ...pieChartProps,\n      style: style,\n      className: svgClasses,\n      width: width,\n      height: height\n    });\n  }\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const outerRadius = Math.min(innerWidth, innerHeight) / 2;\n  const pie = d3Shape.pie().sort(null); // needed to put the slices in proper order\n  const pieData = pie(_.map(data, yAxisField));\n  const arc = d3Shape.arc().innerRadius(isDonut ? outerRadius - donutWidth : INNER_RADIUS).outerRadius(outerRadius);\n  // Useful for capturing hovers when we're in donut mode\n  const arcFull = d3Shape.arc().innerRadius(0).outerRadius(outerRadius);\n  const handleMouseOut = _ref => {\n    let {\n      event\n    } = _ref;\n    props.onMouseOut({\n      props,\n      event\n    });\n  };\n  const handleMouseOver = (index, event) => {\n    props.onMouseOver(index, {\n      props,\n      event\n    });\n  };\n  return React.createElement(\"svg\", {\n    ...pieChartProps,\n    style: style,\n    className: svgClasses,\n    width: width,\n    height: height\n  }, React.createElement(ToolTip, {\n    ...toolTipProps,\n    isLight: true,\n    isExpanded: hasToolTips && isHovering,\n    onMouseOver: _.noop,\n    onMouseOut: handleMouseOut\n  }, React.createElement(ToolTip.Target, {\n    elementType: 'g'\n  }, React.createElement(\"g\", {\n    transform: `translate(${margin.left}, ${margin.top})`\n  }, React.createElement(\"g\", {\n    transform: `translate(${innerWidth / 2}, ${innerHeight / 2})`\n  }, _.map(pieData, (pieDatum, index) => {\n    /* Even though innerRadius and outerRadius are set when\n        constructing arc and arcFull, these functions still expect a type\n        that includes innerRadius and outerRadius */\n    //@ts-ignore\n    const arcFullData = arcFull(pieDatum);\n    //@ts-ignore\n    const arcData = arc(pieDatum);\n    return React.createElement(\"g\", {\n      key: index,\n      className: cx('&-slice-group', {\n        '&-slice-group-is-hovering': isHovering && hoveringIndex === index\n      })\n    }, React.createElement(Line, {\n      key: index,\n      className: cx('&-slice', {\n        '&-slice-has-stroke': hasStroke\n      }),\n      d: arcData,\n      color: _.get(colorMap, data && data[index][xAxisField] || '', palette[index % palette.length]),\n      transform: `scale(${isHovering && hoveringIndex === index ? HOVER_SCALE : 1})`\n    }), React.createElement(\"path\", {\n      className: cx('&-slice-hover'),\n      d: arcFullData,\n      transform: `scale(${HOVER_SCALE})`,\n      onMouseOver: _.partial(handleMouseOver, index),\n      onMouseOut: hasToolTips ? _.noop : handleMouseOut\n    }));\n  })))), React.createElement(ToolTip.Title, null, xAxisFormatter(_.get(data, `[${hoveringIndex}].${xAxisField}`))), React.createElement(ToolTip.Body, null, yAxisFormatter(_.get(data, `[${hoveringIndex}].${yAxisField}`)))));\n};\nPieChart.displayName = 'PieChart';\nPieChart.propTypes = {\n  /**\n          Styles that are passed through to the root container.\n      */\n  style: object,\n  /**\n          Appended to the component-specific class names set on the root element.\n      */\n  className: string,\n  /**\n          Height of the chart.\n      */\n  height: number,\n  /**\n          Width of the chart.\n      */\n  width: number,\n  /**\n      An object defining the margins of the chart. These margins typically\n      contain the axis and labels.\n  */\n  margin: shape({\n    top: number,\n    right: number,\n    bottom: number,\n    left: number\n  }),\n  /**\n          Data for the chart. E.g.\n               [\n                  { x: 'Monday'    , y: 1 } ,\n                  { x: 'Tuesday'   , y: 2 } ,\n                  { x: 'Wednesday' , y: 3 } ,\n                  { x: 'Thursday'  , y: 2 } ,\n                  { x: 'Friday'    , y: 5 } ,\n              ]\n      */\n  data: arrayOf(object),\n  /**\n          Show tool tips on hover.\n      */\n  hasToolTips: bool,\n  /**\n          Determines if the pie slices have a stroke around them.\n      */\n  hasStroke: bool,\n  /**\n          Takes one of the palettes exported from \\`lucid.chartConstants\\`.\n          Available palettes:\n           - \\`PALETTE_7\\` (default)\n          - \\`PALETTE_30\\`\n          - \\`PALETTE_MONOCHROME_0_5\\`\n          - \\`PALETTE_MONOCHROME_1_5\\`\n          - \\`PALETTE_MONOCHROME_2_5\\`\n          - \\`PALETTE_MONOCHROME_3_5\\`\n          - \\`PALETTE_MONOCHROME_4_5\\`\n          - \\`PALETTE_MONOCHROME_5_5\\`\n          - \\`PALETTE_MONOCHROME_6_5\\`\n      */\n  palette: arrayOf(string),\n  /**\n          You can pass in an object if you want to map x values to\n          \\`lucid.chartConstants\\` or custom colors:\n               {\n                  'imps': COLOR_0,\n                  'rev': COLOR_3,\n                  'clicks': '#abc123',\n              }\n      */\n  colorMap: object,\n  /**\n          An object of ToolTip props that are passed through to the underlying\n          ToolTip component.\n      */\n  ToolTip: shape(ToolTip.propTypes),\n  /**\n          Show the pie chart as a donut with a hollow center.\n      */\n  isDonut: bool,\n  /**\n          Controls the visibility of the tooltip and the size of the currently\n          hovered slice.\n      */\n  isHovering: bool,\n  /**\n          Determines which slice to scale up and which data to display in he\n          tooltip.\n      */\n  hoveringIndex: number,\n  /**\n          Called when the user hovers over a slice.  Signature:\n      */\n  onMouseOver: func,\n  /**\n          Called when the user hovers away from either the pie or the tooltip.\n      */\n  onMouseOut: func,\n  /**\n          Width of the donut in px.\n      */\n  donutWidth: number,\n  /**\n          The field we should look up your x data by. The data should be strings.\n      */\n  xAxisField: string,\n  /**\n          An optional function used to format your x axis data.\n      */\n  xAxisFormatter: func,\n  /**\n          The field we should look up your y data by. The data should be numeric.\n      */\n  yAxisField: string,\n  /**\n          An optional function used to format your y axis data.\n      */\n  yAxisFormatter: func\n};\nPieChart.peek = {\n  description: `\\`PieChart\\` is used for categorical data when you want to show the relative size of each category to the whole. We use similar \"x\" and \"y\" terms to keep parity with the other charts even though a pie chart is really just key value based.`,\n  categories: ['visualizations', 'charts'],\n  madeFrom: ['ToolTip']\n};\nPieChart.MARGIN = {\n  top: 10,\n  right: 10,\n  bottom: 10,\n  left: 10\n};\nPieChart.DONUT_WIDTH = DONUT_WIDTH;\nPieChart.HOVER_SCALE = HOVER_SCALE;\nPieChart.reducers = reducers;\nPieChart.defaultProps = defaultProps;\nexport default buildModernHybridComponent(PieChart, {\n  reducers\n});\nexport { PieChart as PieChartDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","d3Shape","chartConstants","buildModernHybridComponent","Line","ToolTipDumb","ToolTip","nonPassThroughs","toolTipNonPassThroughs","reducers","cx","bind","string","number","arrayOf","bool","shape","object","func","DONUT_WIDTH","HOVER_SCALE","INNER_RADIUS","defaultProps","height","width","margin","top","right","bottom","left","palette","PALETTE_7","hasToolTips","hasStroke","isDonut","donutWidth","isHovering","hoveringIndex","onMouseOver","noop","onMouseOut","xAxisField","xAxisFormatter","identity","yAxisField","yAxisFormatter","PieChart","props","style","className","marginOriginal","data","colorMap","toolTipProps","passThroughs","MARGIN","svgClasses","pieChartProps","concat","isEmpty","innerWidth","innerHeight","outerRadius","Math","min","pie","sort","pieData","map","arc","innerRadius","arcFull","handleMouseOut","event","handleMouseOver","index","isLight","isExpanded","Target","elementType","transform","pieDatum","arcFullData","arcData","key","d","color","get","length","partial","Title","Body","displayName","propTypes","peek","description","categories","madeFrom","PieChartDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/PieChart/PieChart.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\nimport * as d3Shape from 'd3-shape';\nimport * as chartConstants from '../../constants/charts';\nimport { buildModernHybridComponent } from '../../util/state-management';\n\nimport Line from '../../components/Line/Line';\nimport {\n\tToolTipDumb as ToolTip,\n\tIToolTipProps,\n\tnonPassThroughs as toolTipNonPassThroughs,\n} from '../../components/ToolTip/ToolTip';\n\nimport reducers, { IPieChartState } from './PieChart.reducers';\n\nconst cx = lucidClassNames.bind('&-PieChart');\n\nconst { string, number, arrayOf, bool, shape, object, func } = PropTypes;\n\nconst DONUT_WIDTH = 15;\nconst HOVER_SCALE = 1.1; // duplicated in .less file\nconst INNER_RADIUS = 0.5;\n\ninterface IPieChartMargin {\n\ttop?: number;\n\tright?: number;\n\tbottom?: number;\n\tleft?: number;\n}\n\nexport interface IPieChartPropsRaw extends StandardProps {\n\t/** Height of the chart. */\n\theight: number;\n\n\t/** Width of the chart. */\n\twidth: number;\n\n\t/**\n\t * An object defining the margins of the chart. These margins typically\n\t * contain the axis and labels.\n\t */\n\tmargin?: IPieChartMargin;\n\n\t/**\n\t * Data for the chart. E.g.\n\t *\n\t * [\n\t *\t{ x: 'Monday'    , y: 1 } ,\n\t *\t{ x: 'Tuesday'   , y: 2 } ,\n\t *  { x: 'Wednesday' , y: 3 } ,\n\t *  { x: 'Thursday'  , y: 2 } ,\n\t *  { x: 'Friday'    , y: 5 } ,\n\t * ]\n\t */\n\tdata?: Array<{ [key: string]: string | number }>;\n\n\t/** Show tool tips on hover. */\n\thasToolTips: boolean;\n\n\t/** Determines if the pie slices have a stroke around them. */\n\thasStroke: boolean;\n\n\t/**\t\t\t\n\t * Takes one of the palettes exported from \\`lucid.chartConstants\\`.\n\t\t\tAvailable palettes:\n\n\t\t\t- \\`PALETTE_7\\` (default)\n\t\t\t- \\`PALETTE_30\\`\n\t\t\t- \\`PALETTE_MONOCHROME_0_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_1_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_2_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_3_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_4_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_5_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_6_5\\` \n\t*/\n\tpalette: string[];\n\n\t/** You can pass in an object if you want to map x values to\n\t\\`lucid.chartConstants\\` or custom colors:\n\n\t\t{\n\t\t\t'imps': COLOR_0,\n\t\t\t'rev': COLOR_3,\n\t\t\t'clicks': '#abc123',\n\t\t}*/\n\tcolorMap?: object;\n\n\t/** \n\tAn object of ToolTip props that are passed through to the underlying\n\t\t\tToolTip component.\n\t\t\t*/\n\tToolTip: IToolTipProps;\n\n\t/** Show the pie chart as a donut with a hollow center. */\n\tisDonut: boolean;\n\n\t/** Controls the visibility of the tooltip and the size of the currently\n\t\t\thovered slice. */\n\tisHovering: boolean;\n\n\t/**\n\tDetermines which slice to scale up and which data to display in he\n\t\ttooltip. */\n\thoveringIndex: number;\n\n\t/** Called when the user hovers over a slice. */\n\tonMouseOver: (\n\t\tindex: number,\n\t\t{ event, props }: { event: React.MouseEvent; props: IPieChartProps }\n\t) => void;\n\n\t/** Called when the user hovers away from either the pie or the tooltip. */\n\tonMouseOut: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IPieChartProps;\n\t}) => void;\n\n\t/** Width of the donut in px. */\n\tdonutWidth: number;\n\n\t/** The field we should look up your x data by. The data should be strings. */\n\txAxisField: string;\n\n\t/** An optional function used to format your x axis data. */\n\txAxisFormatter: (x: string | number) => string | number;\n\n\t/** The field we should look up your y data by. The data should be numeric. */\n\tyAxisField: string;\n\n\t/** An optional function used to format your y axis data. */\n\tyAxisFormatter: (y: number) => string | number;\n}\n\nconst nonPassThroughs = [\n\t'style',\n\t'className',\n\t'height',\n\t'width',\n\t'margin',\n\t'data',\n\t'hasToolTips',\n\t'hasStroke',\n\t'palette',\n\t'colorMap',\n\t'ToolTip',\n\t'isDonut',\n\t'isHovering',\n\t'hoveringIndex',\n\t'onMouseOver',\n\t'onMouseOut',\n\t'donutWidth',\n\t'xAxisField',\n\t'xAxisFormatter',\n\t'yAxisField',\n\t'yAxisFormatter',\n\t'initialState',\n\t'callbackId',\n];\n\nexport type IPieChartProps = Overwrite<\n\tReact.SVGProps<SVGGElement>,\n\tIPieChartPropsRaw\n>;\n\nconst defaultProps = {\n\theight: 200,\n\twidth: 200,\n\t// duplicated because `statics` aren't available during getDefaultProps\n\tmargin: {\n\t\ttop: 10,\n\t\tright: 10,\n\t\tbottom: 10,\n\t\tleft: 10,\n\t},\n\tpalette: chartConstants.PALETTE_7,\n\thasToolTips: true,\n\thasStroke: true,\n\tisDonut: false,\n\tdonutWidth: DONUT_WIDTH,\n\tToolTip: ToolTip.defaultProps,\n\n\tisHovering: false,\n\thoveringIndex: 0,\n\tonMouseOver: _.noop,\n\tonMouseOut: _.noop,\n\n\txAxisField: 'x',\n\txAxisFormatter: _.identity,\n\n\tyAxisField: 'y',\n\tyAxisFormatter: _.identity,\n};\n\nconst PieChart = (props: IPieChartProps) => {\n\tconst {\n\t\tstyle,\n\t\tclassName,\n\t\theight,\n\t\twidth,\n\t\tmargin: marginOriginal,\n\t\tdata,\n\t\thasToolTips,\n\t\thasStroke,\n\t\tpalette,\n\t\tcolorMap,\n\t\tisDonut,\n\t\tdonutWidth,\n\t\tToolTip: toolTipProps,\n\n\t\tisHovering,\n\t\thoveringIndex,\n\n\t\txAxisField,\n\t\txAxisFormatter,\n\n\t\tyAxisField,\n\t\tyAxisFormatter,\n\n\t\t...passThroughs\n\t} = props;\n\n\tconst margin = {\n\t\t...PieChart.MARGIN,\n\t\t...marginOriginal,\n\t};\n\n\tconst svgClasses = cx(className, '&');\n\n\tconst pieChartProps: any = omit(\n\t\tomit(passThroughs, toolTipNonPassThroughs.concat(['callbackId'])),\n\t\tnonPassThroughs\n\t);\n\n\t// TODO: Consider displaying something specific when there is no data,\n\t// perhaps a loading indicator.\n\tif (_.isEmpty(data) || width < 1 || height < 1) {\n\t\treturn (\n\t\t\t<svg\n\t\t\t\t{...pieChartProps}\n\t\t\t\tstyle={style}\n\t\t\t\tclassName={svgClasses}\n\t\t\t\twidth={width}\n\t\t\t\theight={height}\n\t\t\t/>\n\t\t);\n\t}\n\n\tconst innerWidth = width - margin.left - margin.right;\n\tconst innerHeight = height - margin.top - margin.bottom;\n\n\tconst outerRadius = Math.min(innerWidth, innerHeight) / 2;\n\n\tconst pie = d3Shape.pie().sort(null); // needed to put the slices in proper order\n\tconst pieData = pie(\n\t\t_.map(data as Array<{ [key: string]: number }>, yAxisField)\n\t);\n\n\tconst arc = d3Shape\n\t\t.arc()\n\t\t.innerRadius(isDonut ? outerRadius - donutWidth : INNER_RADIUS)\n\t\t.outerRadius(outerRadius);\n\n\t// Useful for capturing hovers when we're in donut mode\n\tconst arcFull = d3Shape.arc().innerRadius(0).outerRadius(outerRadius);\n\n\tconst handleMouseOut = ({ event }: { event: React.MouseEvent }): void => {\n\t\tprops.onMouseOut({\n\t\t\tprops,\n\t\t\tevent,\n\t\t});\n\t};\n\n\tconst handleMouseOver = (index: number, event: React.MouseEvent): void => {\n\t\tprops.onMouseOver(index, {\n\t\t\tprops,\n\t\t\tevent,\n\t\t});\n\t};\n\n\treturn (\n\t\t<svg\n\t\t\t{...pieChartProps}\n\t\t\tstyle={style}\n\t\t\tclassName={svgClasses}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t>\n\t\t\t<ToolTip\n\t\t\t\t{...toolTipProps}\n\t\t\t\tisLight={true}\n\t\t\t\tisExpanded={hasToolTips && isHovering}\n\t\t\t\tonMouseOver={_.noop}\n\t\t\t\tonMouseOut={handleMouseOut}\n\t\t\t>\n\t\t\t\t<ToolTip.Target elementType='g'>\n\t\t\t\t\t<g transform={`translate(${margin.left}, ${margin.top})`}>\n\t\t\t\t\t\t<g transform={`translate(${innerWidth / 2}, ${innerHeight / 2})`}>\n\t\t\t\t\t\t\t{_.map(pieData, (pieDatum, index) => {\n\t\t\t\t\t\t\t\t/* Even though innerRadius and outerRadius are set when\n\t\t\t\t\t\t\t\t\tconstructing arc and arcFull, these functions still expect a type\n\t\t\t\t\t\t\t\t\tthat includes innerRadius and outerRadius */\n\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tconst arcFullData = arcFull(pieDatum);\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tconst arcData = arc(pieDatum);\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<g\n\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\tclassName={cx('&-slice-group', {\n\t\t\t\t\t\t\t\t\t\t\t'&-slice-group-is-hovering':\n\t\t\t\t\t\t\t\t\t\t\t\tisHovering && hoveringIndex === index,\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tclassName={cx('&-slice', {\n\t\t\t\t\t\t\t\t\t\t\t\t'&-slice-has-stroke': hasStroke,\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\td={arcData}\n\t\t\t\t\t\t\t\t\t\t\tcolor={_.get(\n\t\t\t\t\t\t\t\t\t\t\t\tcolorMap,\n\t\t\t\t\t\t\t\t\t\t\t\t(data && data[index][xAxisField]) || '',\n\t\t\t\t\t\t\t\t\t\t\t\tpalette[index % palette.length]\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\ttransform={`scale(${\n\t\t\t\t\t\t\t\t\t\t\t\tisHovering && hoveringIndex === index ? HOVER_SCALE : 1\n\t\t\t\t\t\t\t\t\t\t\t})`}\n\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t{/* This hidden path is useful for capturing hovers when we're in donut mode */}\n\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\tclassName={cx('&-slice-hover')}\n\t\t\t\t\t\t\t\t\t\t\td={arcFullData}\n\t\t\t\t\t\t\t\t\t\t\ttransform={`scale(${HOVER_SCALE})`}\n\t\t\t\t\t\t\t\t\t\t\tonMouseOver={_.partial(handleMouseOver, index)}\n\t\t\t\t\t\t\t\t\t\t\tonMouseOut={hasToolTips ? _.noop : handleMouseOut}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</g>\n\t\t\t\t</ToolTip.Target>\n\n\t\t\t\t<ToolTip.Title>\n\t\t\t\t\t{xAxisFormatter(_.get(data, `[${hoveringIndex}].${xAxisField}`))}\n\t\t\t\t</ToolTip.Title>\n\n\t\t\t\t<ToolTip.Body>\n\t\t\t\t\t{yAxisFormatter(_.get(data, `[${hoveringIndex}].${yAxisField}`))}\n\t\t\t\t</ToolTip.Body>\n\t\t\t</ToolTip>\n\t\t</svg>\n\t);\n};\n\nPieChart.displayName = 'PieChart';\n\nPieChart.propTypes = {\n\t/**\n\t\t\tStyles that are passed through to the root container.\n\t\t*/\n\tstyle: object,\n\n\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\tclassName: string,\n\n\t/**\n\t\t\tHeight of the chart.\n\t\t*/\n\theight: number,\n\n\t/**\n\t\t\tWidth of the chart.\n\t\t*/\n\twidth: number,\n\n\t/**\n\t\tAn object defining the margins of the chart. These margins typically\n\t\tcontain the axis and labels.\n\t*/\n\tmargin: shape({\n\t\ttop: number,\n\t\tright: number,\n\t\tbottom: number,\n\t\tleft: number,\n\t}),\n\n\t/**\n\t\t\tData for the chart. E.g.\n\n\t\t\t\t[\n\t\t\t\t\t{ x: 'Monday'    , y: 1 } ,\n\t\t\t\t\t{ x: 'Tuesday'   , y: 2 } ,\n\t\t\t\t\t{ x: 'Wednesday' , y: 3 } ,\n\t\t\t\t\t{ x: 'Thursday'  , y: 2 } ,\n\t\t\t\t\t{ x: 'Friday'    , y: 5 } ,\n\t\t\t\t]\n\t\t*/\n\tdata: arrayOf(object),\n\n\t/**\n\t\t\tShow tool tips on hover.\n\t\t*/\n\thasToolTips: bool,\n\n\t/**\n\t\t\tDetermines if the pie slices have a stroke around them.\n\t\t*/\n\thasStroke: bool,\n\n\t/**\n\t\t\tTakes one of the palettes exported from \\`lucid.chartConstants\\`.\n\t\t\tAvailable palettes:\n\n\t\t\t- \\`PALETTE_7\\` (default)\n\t\t\t- \\`PALETTE_30\\`\n\t\t\t- \\`PALETTE_MONOCHROME_0_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_1_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_2_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_3_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_4_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_5_5\\`\n\t\t\t- \\`PALETTE_MONOCHROME_6_5\\`\n\t\t*/\n\tpalette: arrayOf(string),\n\n\t/**\n\t\t\tYou can pass in an object if you want to map x values to\n\t\t\t\\`lucid.chartConstants\\` or custom colors:\n\n\t\t\t\t{\n\t\t\t\t\t'imps': COLOR_0,\n\t\t\t\t\t'rev': COLOR_3,\n\t\t\t\t\t'clicks': '#abc123',\n\t\t\t\t}\n\t\t*/\n\tcolorMap: object,\n\n\t/**\n\t\t\tAn object of ToolTip props that are passed through to the underlying\n\t\t\tToolTip component.\n\t\t*/\n\tToolTip: shape(ToolTip.propTypes),\n\n\t/**\n\t\t\tShow the pie chart as a donut with a hollow center.\n\t\t*/\n\tisDonut: bool,\n\n\t/**\n\t\t\tControls the visibility of the tooltip and the size of the currently\n\t\t\thovered slice.\n\t\t*/\n\tisHovering: bool,\n\n\t/**\n\t\t\tDetermines which slice to scale up and which data to display in he\n\t\t\ttooltip.\n\t\t*/\n\thoveringIndex: number,\n\n\t/**\n\t\t\tCalled when the user hovers over a slice.  Signature:\n\t\t*/\n\tonMouseOver: func,\n\n\t/**\n\t\t\tCalled when the user hovers away from either the pie or the tooltip.\n\t\t*/\n\tonMouseOut: func,\n\n\t/**\n\t\t\tWidth of the donut in px.\n\t\t*/\n\tdonutWidth: number,\n\n\t/**\n\t\t\tThe field we should look up your x data by. The data should be strings.\n\t\t*/\n\txAxisField: string,\n\n\t/**\n\t\t\tAn optional function used to format your x axis data.\n\t\t*/\n\txAxisFormatter: func,\n\n\t/**\n\t\t\tThe field we should look up your y data by. The data should be numeric.\n\t\t*/\n\tyAxisField: string,\n\n\t/**\n\t\t\tAn optional function used to format your y axis data.\n\t\t*/\n\tyAxisFormatter: func,\n};\n\nPieChart.peek = {\n\tdescription: `\\`PieChart\\` is used for categorical data when you want to show the relative size of each category to the whole. We use similar \"x\" and \"y\" terms to keep parity with the other charts even though a pie chart is really just key value based.`,\n\tcategories: ['visualizations', 'charts'],\n\tmadeFrom: ['ToolTip'],\n};\n\nPieChart.MARGIN = {\n\ttop: 10,\n\tright: 10,\n\tbottom: 10,\n\tleft: 10,\n};\n\nPieChart.DONUT_WIDTH = DONUT_WIDTH;\n\nPieChart.HOVER_SCALE = HOVER_SCALE;\n\nPieChart.reducers = reducers;\n\nPieChart.defaultProps = defaultProps;\n\nexport default buildModernHybridComponent<\n\tIPieChartProps,\n\tIPieChartState,\n\ttypeof PieChart\n>(PieChart as any, { reducers });\nexport { PieChart as PieChartDumb };\n"]},"metadata":{},"sourceType":"module"}