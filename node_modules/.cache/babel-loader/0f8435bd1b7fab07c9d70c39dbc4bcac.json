{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-EligibilityIcon');\nexport const iconPropTypes = {\n  /** Valid eligibility options for the Icon. */\n  eligibility: PropTypes.oneOf(['left', 'right', 'neither', 'both']),\n  /** Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`. */\n  size: PropTypes.number,\n  /** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width. */\n  viewBox: PropTypes.string,\n  /** Any valid SVG aspect ratio. */\n  aspectRatio: PropTypes.string,\n  /** Adds styling that makes the icon appear clickable. */\n  isClickable: PropTypes.bool,\n  /** Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false. */\n  isDisabled: PropTypes.bool,\n  /** Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onClick: PropTypes.func,\n  /** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onSelect: PropTypes.func,\n  /** Any valid React children. */\n  children: PropTypes.element,\n  /** Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library. */\n  className: PropTypes.string\n};\nexport const EligibilityIcon = _ref => {\n  let {\n    className,\n    eligibility = 'neither',\n    ...passThroughs\n  } = _ref;\n  return React.createElement(Icon\n  // As color is fixed for this icon, editing the color prop is disallowed\n  , {\n    ..._.omit(passThroughs, ['initialState', 'color']),\n    className: cx('&', className)\n  }, React.createElement(\"g\", null, React.createElement(\"path\", {\n    className: cx('&-half-circle', {\n      '&-is-selected': eligibility === 'left' || eligibility === 'both'\n    }),\n    d: 'M6 14.71A7.003 7.003 0 0 1 6 1.29v13.42z'\n  }), React.createElement(\"path\", {\n    className: cx('&-half-circle', {\n      '&-is-selected': eligibility === 'right' || eligibility === 'both'\n    }),\n    d: 'M10 1.29a7.003 7.003 0 0 1 0 13.42V1.29z'\n  })));\n};\nEligibilityIcon.displayName = 'EligibilityIcon';\nEligibilityIcon.propTypes = iconPropTypes;\nEligibilityIcon.defaultProps = Icon.defaultProps;\nexport default EligibilityIcon;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAoB,MAAM,SAAS;AAC1C,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,mBAAmB,CAAC;AAQpD,OAAO,MAAMC,aAAa,GAAG;EAC5B;EACAC,WAAW,EAAEN,SAAS,CAACO,KAAK,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;EAElE;;;EAGAC,IAAI,EAAER,SAAS,CAACS,MAAM;EAEtB;EACAC,KAAK,EAAEV,SAAS,CAACW,SAAS,CAAC,CAACX,SAAS,CAACS,MAAM,EAAET,SAAS,CAACY,MAAM,CAAC,CAAC;EAEhE;EACAC,MAAM,EAAEb,SAAS,CAACW,SAAS,CAAC,CAACX,SAAS,CAACS,MAAM,EAAET,SAAS,CAACY,MAAM,CAAC,CAAC;EAEjE;;;EAGAE,OAAO,EAAEd,SAAS,CAACY,MAAM;EAEzB;EACAG,WAAW,EAAEf,SAAS,CAACY,MAAM;EAE7B;EACAI,WAAW,EAAEhB,SAAS,CAACiB,IAAI;EAE3B;;EAEAC,UAAU,EAAElB,SAAS,CAACiB,IAAI;EAE1B;;EAEAE,OAAO,EAAEnB,SAAS,CAACoB,IAAI;EAEvB;;EAEAC,QAAQ,EAAErB,SAAS,CAACoB,IAAI;EAExB;EACAE,QAAQ,EAAEtB,SAAS,CAACuB,OAAO;EAE3B;;EAEAC,SAAS,EAAExB,SAAS,CAACY;CACrB;AAED,OAAO,MAAMa,eAAe,GAAG,QAIH;EAAA,IAJI;IAC/BD,SAAS;IACTlB,WAAW,GAAG,SAAS;IACvB,GAAGoB;EAAY,CACQ;EACvB,OACC3B,oBAACE;EACA;EAAA;OACIH,CAAC,CAAC6B,IAAI,CAACD,YAAY,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACnDF,SAAS,EAAErB,EAAE,CAAC,GAAG,EAAEqB,SAAS;EAAC,GAE7BzB,+BACCA;IACCyB,SAAS,EAAErB,EAAE,CAAC,eAAe,EAAE;MAC9B,eAAe,EAAEG,WAAW,KAAK,MAAM,IAAIA,WAAW,KAAK;KAC3D,CAAC;IACFsB,CAAC,EAAC;EAA0C,EAC3C,EACF7B;IACCyB,SAAS,EAAErB,EAAE,CAAC,eAAe,EAAE;MAC9B,eAAe,EAAEG,WAAW,KAAK,OAAO,IAAIA,WAAW,KAAK;KAC5D,CAAC;IACFsB,CAAC,EAAC;EAA0C,EAC3C,CACC,CACE;AAET,CAAC;AAEDH,eAAe,CAACI,WAAW,GAAG,iBAAiB;AAE/CJ,eAAe,CAACK,SAAS,GAAGzB,aAAa;AAEzCoB,eAAe,CAACM,YAAY,GAAG9B,IAAI,CAAC8B,YAAY;AAEhD,eAAeN,eAAe","names":["_","React","PropTypes","Icon","lucidClassNames","cx","bind","iconPropTypes","eligibility","oneOf","size","number","width","oneOfType","string","height","viewBox","aspectRatio","isClickable","bool","isDisabled","onClick","func","onSelect","children","element","className","EligibilityIcon","passThroughs","omit","d","displayName","propTypes","defaultProps"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/EligibilityIcon/EligibilityIcon.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon, { IIconProps } from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\n\nconst cx = lucidClassNames.bind('&-EligibilityIcon');\n\nexport type EligibilityOptions = 'left' | 'right' | 'neither' | 'both';\n\nexport interface IEligibilityIconProps extends IIconProps {\n\teligibility?: EligibilityOptions;\n}\n\nexport const iconPropTypes = {\n\t/** Valid eligibility options for the Icon. */\n\teligibility: PropTypes.oneOf(['left', 'right', 'neither', 'both']),\n\n\t/** Size variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`. */\n\tsize: PropTypes.number,\n\n\t/** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n\twidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n\theight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth. */\n\tviewBox: PropTypes.string,\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio: PropTypes.string,\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable: PropTypes.bool,\n\n\t/** Adds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false. */\n\tisDisabled: PropTypes.bool,\n\n\t/** Called when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonClick: PropTypes.func,\n\n\t/** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonSelect: PropTypes.func,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.element,\n\n\t/** Classes that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library. */\n\tclassName: PropTypes.string,\n};\n\nexport const EligibilityIcon = ({\n\tclassName,\n\teligibility = 'neither',\n\t...passThroughs\n}: IEligibilityIconProps) => {\n\treturn (\n\t\t<Icon\n\t\t\t// As color is fixed for this icon, editing the color prop is disallowed\n\t\t\t{..._.omit(passThroughs, ['initialState', 'color'])}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t<g>\n\t\t\t\t<path\n\t\t\t\t\tclassName={cx('&-half-circle', {\n\t\t\t\t\t\t'&-is-selected': eligibility === 'left' || eligibility === 'both',\n\t\t\t\t\t})}\n\t\t\t\t\td='M6 14.71A7.003 7.003 0 0 1 6 1.29v13.42z'\n\t\t\t\t/>\n\t\t\t\t<path\n\t\t\t\t\tclassName={cx('&-half-circle', {\n\t\t\t\t\t\t'&-is-selected': eligibility === 'right' || eligibility === 'both',\n\t\t\t\t\t})}\n\t\t\t\t\td='M10 1.29a7.003 7.003 0 0 1 0 13.42V1.29z'\n\t\t\t\t/>\n\t\t\t</g>\n\t\t</Icon>\n\t);\n};\n\nEligibilityIcon.displayName = 'EligibilityIcon';\n\nEligibilityIcon.propTypes = iconPropTypes;\n\nEligibilityIcon.defaultProps = Icon.defaultProps;\n\nexport default EligibilityIcon;\n"]},"metadata":{},"sourceType":"module"}