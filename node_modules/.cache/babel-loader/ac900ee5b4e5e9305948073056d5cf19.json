{"ast":null,"code":"import * as d3Axis from 'd3-axis';\nimport * as d3Shape from 'd3-shape';\nimport * as d3Drag from 'd3-drag';\nimport * as d3Selection from 'd3-selection';\nimport * as d3Transition from 'd3-transition';\nimport ReactDOM from 'react-dom';\nimport * as d3Scale from 'd3-scale';\nimport _ from 'lodash';\nimport * as d3Array from 'd3-array';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getGroup, lucidXAxis } from './d3-helpers';\nconst cx = lucidClassNames.bind('&-DraggableLineChart');\nconst getAttributes = function (selection, obj) {\n  return _.reduce(obj, (acc, value) => {\n    // @ts-ignore\n    acc[value] = selection.attr(value);\n    return acc;\n  }, {});\n};\nclass DraggableLineChartD3 {\n  constructor(selection, params) {\n    this.setMouseDown = (isMouseDown, mouseDownStep) => {\n      this.params.isMouseDown = isMouseDown;\n      this.params.mouseDownStep = mouseDownStep;\n    };\n    this.getIsMouseDown = () => {\n      return this.params.isMouseDown;\n    };\n    this.getMouseDownStep = () => {\n      return this.params.mouseDownStep || 0;\n    };\n    this.getHasRenderedPoint = () => {\n      return !!this.params.hasRenderedPoint;\n    };\n    this.getHasRenderedLine = () => {\n      return !!this.params.hasRenderedLine;\n    };\n    this.setHasRenderedPoint = () => {\n      this.params.hasRenderedPoint = true;\n    };\n    this.setHasRenderedLine = () => {\n      this.params.hasRenderedLine = true;\n    };\n    this.shouldShowPreselect = () => {\n      const hasUserValues = _.some(this.params.data, _ref => {\n        let {\n          y\n        } = _ref;\n        return y > 0;\n      });\n      return !!this.params.onPreselect && !hasUserValues;\n    };\n    this.drag = () => {\n      const {\n        xScale,\n        yScale,\n        renderLine,\n        renderPoints,\n        selection\n      } = this;\n      const {\n        cx,\n        onDragEnd\n      } = this.params;\n      let initialPosition;\n      return d3Drag.drag().on('start', function () {\n        const activeDot = d3Selection.select(this);\n        initialPosition = Number(activeDot.attr('cy'));\n      }).on('drag', function (pointData) {\n        const [max, min] = yScale.range();\n        const activeDot = d3Selection.select(this);\n        // @ts-ignore\n        const adjMouseY = initialPosition + d3Selection.event.y;\n        const newPointY = adjMouseY < min ? min : adjMouseY > max ? max : adjMouseY;\n        const lines = selection.selectAll(`path.${cx('&-Line')}`);\n        pointData.y = Number(yScale.invert(newPointY));\n        activeDot.attr('cy', newPointY);\n        const line = d3Shape.line().x(chartData => xScale(chartData.x) || 0).y(chartData => yScale(chartData.y));\n        lines.attr('d', line);\n      }).on('end', d => {\n        if (onDragEnd) onDragEnd(d.y, d.x);\n        renderLine();\n        renderPoints();\n      });\n    };\n    this.renderXAxis = () => {\n      const {\n        margin,\n        height,\n        xAxisTicksVertical,\n        dataIsCentered,\n        cx,\n        xAxisRenderProp,\n        data\n      } = this.params;\n      const xGroup = getGroup(this.selection, `${cx('&-Axis')}`);\n      xGroup.call(xAxis => {\n        xAxis.attr('transform', `translate(${0},${margin.top})`).call(lucidXAxis, {\n          xScale: this.xScale,\n          tickSize: margin.top + margin.bottom - height,\n          xAxisRenderProp,\n          dataIsCentered,\n          data\n        });\n        if (xAxisTicksVertical) {\n          xAxis.classed('Vert', true);\n        } else {\n          xAxis.classed('NoVert', true);\n        }\n        if (dataIsCentered) {\n          xAxis.classed('Center', true);\n        }\n      }).call(() => xGroup);\n    };\n    this.renderYAxis = () => {\n      const yGroup = getGroup(this.selection, 'yAxisGroup');\n      yGroup.call(yAxis => {\n        const {\n          margin,\n          cx,\n          yAxisFormatter\n        } = this.params;\n        yAxis.attr('transform', `translate(${margin.left},${0})`).classed(`${cx('&-Axis')}`, true).transition().duration(500).call(d3Axis.axisLeft(this.yScale).tickFormat(yAxisFormatter));\n      }).call(() => yGroup);\n    };\n    this.renderLine = () => {\n      if (this.shouldShowPreselect()) {\n        return;\n      }\n      const {\n        dataIsCentered,\n        cx\n      } = this.params;\n      if (!this.getHasRenderedLine()) {\n        if (dataIsCentered) {\n          const innerXTickWidth = this.xScale.step();\n          this.selection.append('g').append('path').attr('class', `${cx('&-Line')}`).attr('transform', `translate(${innerXTickWidth / 2}, 0)`);\n        } else {\n          this.selection.append('g').append('path').attr('class', `${cx('&-Line')}`);\n        }\n        this.setHasRenderedLine();\n      }\n      const lines = this.selection.selectAll(`path.${cx('&-Line')}`);\n      lines.datum(this.params.data).enter();\n      lines.transition(d3Transition.transition().duration(100)).attr('fill', 'none').attr('d', d3Shape.line().x(d => this.xScale(d.x) || 0).y(d => this.yScale(d.y)));\n    };\n    this.renderEmptyRenderProp = (height, width) => {\n      const {\n        emptyRenderProp\n      } = this.params;\n      if (!emptyRenderProp || !this.shouldShowPreselect()) {\n        return;\n      }\n      const emptyDataObject = this.selection.selectAll('.emptyRender');\n      if (emptyDataObject.empty()) {\n        const emptyRender = this.selection.selectAll('.overlayContainer').append('foreignObject').attr('height', height).attr('width', width).attr('x', this.params.margin.left).classed('emptyRender', true);\n        emptyRender.html((value, num, node) => {\n          ReactDOM.render(emptyRenderProp(), node[0]);\n        });\n      }\n    };\n    this.renderPoints = () => {\n      if (this.shouldShowPreselect()) {\n        return;\n      }\n      const {\n        data,\n        dataIsCentered\n      } = this.params;\n      const circle = this.getHasRenderedPoint() ? this.selection.selectAll('circle').data(data).join('circle') : this.selection.append('g').selectAll('circle').data(data).join('circle');\n      if (dataIsCentered) {\n        const innerXTickWidth = this.xScale.step();\n        circle\n        // @ts-ignore\n        .transition().duration(100).attr('cx', d => this.xScale(d.x) || 0).attr('cy', d => this.yScale(d.y)).attr('r', 5).attr('transform', `translate(${innerXTickWidth / 2}, 0)`).style('fill', '#587EBA').style('stroke', 'white').style('stroke-width', 1);\n      } else {\n        circle\n        // @ts-ignore\n        .transition().duration(100).attr('cx', d => this.xScale(d.x) || 0).attr('cy', d => this.yScale(d.y)).attr('r', 5).style('fill', '#587EBA').style('stroke', 'white').style('stroke-width', 1);\n      }\n      if (!this.getHasRenderedPoint()) circle.call(this.drag());\n      this.setHasRenderedPoint();\n    };\n    this.reRenderDragBox = _ref2 => {\n      let {\n        dragBox,\n        mouseX,\n        xLeft,\n        xRight,\n        stepWidth,\n        stepCount\n      } = _ref2;\n      const isLeft = xLeft >= mouseX;\n      const isRight = xRight <= mouseX;\n      const mouseDownStep = this.getMouseDownStep();\n      if (isLeft) {\n        const difference = _.max([xLeft - mouseX, 0]) || 0;\n        const rawStepsSelected = Math.floor(difference / stepWidth) + 2;\n        const maxStepsAvailable = mouseDownStep + 1;\n        const stepsSelected = _.min([rawStepsSelected, maxStepsAvailable]) || 1;\n        const activeBoxWidth = stepsSelected * stepWidth;\n        const nextXLeft = xRight - activeBoxWidth;\n        dragBox.attr('x', nextXLeft);\n        dragBox.attr('width', activeBoxWidth);\n      } else if (isRight) {\n        const difference = _.max([mouseX - xRight, 0]) || 0;\n        const rawStepsSelected = Math.floor(difference / stepWidth) + 2;\n        const maxStepsAvailable = stepCount - mouseDownStep;\n        const stepsSelected = _.min([rawStepsSelected, maxStepsAvailable]) || 1;\n        const activeBoxWidth = stepsSelected * stepWidth;\n        dragBox.attr('x', xLeft);\n        dragBox.attr('width', activeBoxWidth);\n      } else {\n        dragBox.attr('x', xLeft);\n        dragBox.attr('width', stepWidth);\n      }\n    };\n    this.renderHoverTracker = () => {\n      const {\n        height,\n        margin: {\n          top,\n          bottom\n        },\n        data,\n        onPreselect\n      } = this.params;\n      const {\n        shouldShowPreselect,\n        setMouseDown,\n        getIsMouseDown,\n        getMouseDownStep,\n        reRenderDragBox,\n        xScale,\n        selection\n      } = this;\n      if (!shouldShowPreselect()) {\n        selection.selectAll('.overlayContainer').remove();\n        return;\n      }\n      const innerHeight = height - top - bottom;\n      const stepWidth = xScale.step();\n      const stepCount = data.length;\n      const overlayContainer = selection.append('g').classed('overlayContainer', true).attr('transform', `translate(${0},${top})`);\n      this.renderEmptyRenderProp(innerHeight, stepCount * stepWidth);\n      const overlayTrack = overlayContainer.selectAll('rect').data(data).enter();\n      overlayTrack.append('rect').attr('x', chartData => this.xScale(chartData.x) || 0).attr('y', 0).attr('width', chartData => this.xScale.step()).attr('height', innerHeight).classed(cx('&-overlayTrack'), true)\n      // @ts-ignore\n      .on('mouseenter', (d, i, nodes) => {\n        if (!getIsMouseDown()) {\n          d3Selection.select(nodes[i]).classed('active', true);\n        }\n      })\n      // @ts-ignore\n      .on('mouseout', function (d, i, nodes) {\n        if (!getIsMouseDown()) {\n          d3Selection.select(nodes[i]).classed('active', false);\n        }\n      }).on('mousedown', function (d, i) {\n        d3Selection.selectAll('.active').classed('active', false);\n        const currentTarget = d3Selection.select(this);\n        const {\n          x,\n          y,\n          width,\n          height\n        } = getAttributes(currentTarget, ['x', 'y', 'width', 'height']);\n        // @ts-ignore\n        setMouseDown(true, i);\n        const xLeft = +x;\n        const xRight = +x + +width;\n        // @ts-ignore\n        const container = d3Selection.select(this.parentNode);\n        container.append('rect').attr('x', x).attr('y', y).attr('width', width).attr('height', height).classed(cx('&-overlayTrack'), true).classed('active', true).classed('dragBox', true).on('mouseout', function () {\n          // @ts-ignore\n          const [mouseX] = d3Selection.mouse(this);\n          const dragBox = selection.selectAll('.dragBox');\n          reRenderDragBox({\n            dragBox,\n            mouseX,\n            xLeft,\n            xRight,\n            stepWidth,\n            stepCount\n          });\n        }).on('mousemove', function () {\n          // @ts-ignore\n          const [mouseX] = d3Selection.mouse(this);\n          const dragBox = selection.selectAll('.dragBox');\n          reRenderDragBox({\n            dragBox,\n            mouseX,\n            xLeft,\n            xRight,\n            stepWidth,\n            stepCount\n          });\n        }).on('mouseup', function () {\n          const clickStep = getMouseDownStep();\n          const activeBox = selection.selectAll('.dragBox');\n          const {\n            x,\n            width\n          } = getAttributes(activeBox, ['x', 'width']);\n          const isRight = xLeft === +x;\n          const steps = Math.round(+width / stepWidth);\n          const startingIndex = isRight ? clickStep : clickStep - steps + 1;\n          const endingIndex = startingIndex + steps - 1;\n          const updatedData = data.map((step, i) => ({\n            ...step,\n            isSelected: i >= startingIndex && i <= endingIndex\n          }));\n          !!onPreselect && onPreselect(updatedData);\n          setMouseDown(false);\n          selection.selectAll('.dragBox').remove();\n          selection.selectAll('.overlayContainer').remove();\n        });\n      });\n    };\n    this.renderLineChart = () => {\n      this.renderXAxis();\n      this.renderYAxis();\n      this.renderHoverTracker();\n      this.renderLine();\n      this.renderPoints();\n    };\n    this.updateLineChart = data => {\n      this.params.data = data;\n      this.yScale.domain([_.isUndefined(this.params.yAxisMin) ? d3Array.min(this.params.data, d => d.y) : this.params.yAxisMin, d3Array.max(this.params.data, d => d.y) || 10]);\n      this.renderLineChart();\n    };\n    this.selection = selection;\n    this.params = params;\n    if (params.dataIsCentered) {\n      this.xScale = d3Scale.scalePoint().domain([...this.params.data.map(d => d.x), '']).range([this.params.margin.left, this.params.width - this.params.margin.right - this.params.margin.left]);\n    } else {\n      this.xScale = d3Scale.scalePoint().domain(this.params.data.map(d => d.x)).range([this.params.margin.left, this.params.width - this.params.margin.right - this.params.margin.left]);\n    }\n    this.yScale = d3Scale.scaleLinear().domain([_.isUndefined(this.params.yAxisMin) ? d3Array.min(this.params.data, d => d.y) : this.params.yAxisMin, d3Array.max(this.params.data, d => d.y) || 10]).nice().range([this.params.height - this.params.margin.bottom, this.params.margin.top]);\n  }\n}\nexport default DraggableLineChartD3;","map":{"version":3,"mappings":"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","names":["d3Axis","d3Shape","d3Drag","d3Selection","d3Transition","ReactDOM","d3Scale","_","d3Array","lucidClassNames","getGroup","lucidXAxis","cx","bind","getAttributes","selection","obj","reduce","acc","value","attr","DraggableLineChartD3","constructor","params","isMouseDown","mouseDownStep","hasRenderedPoint","hasRenderedLine","hasUserValues","some","data","y","onPreselect","xScale","yScale","renderLine","renderPoints","onDragEnd","initialPosition","drag","on","activeDot","select","Number","pointData","max","min","range","adjMouseY","event","newPointY","lines","selectAll","invert","line","x","chartData","d","margin","height","xAxisTicksVertical","dataIsCentered","xAxisRenderProp","xGroup","call","xAxis","top","tickSize","bottom","classed","yGroup","yAxis","yAxisFormatter","left","transition","duration","axisLeft","tickFormat","shouldShowPreselect","getHasRenderedLine","innerXTickWidth","step","append","setHasRenderedLine","datum","enter","width","emptyRenderProp","emptyDataObject","empty","emptyRender","html","num","node","render","circle","getHasRenderedPoint","join","style","setHasRenderedPoint","dragBox","mouseX","xLeft","xRight","stepWidth","stepCount","isLeft","isRight","getMouseDownStep","difference","rawStepsSelected","Math","floor","maxStepsAvailable","stepsSelected","activeBoxWidth","nextXLeft","setMouseDown","getIsMouseDown","reRenderDragBox","remove","innerHeight","length","overlayContainer","renderEmptyRenderProp","overlayTrack","i","nodes","currentTarget","container","parentNode","mouse","clickStep","activeBox","steps","round","startingIndex","endingIndex","updatedData","map","isSelected","renderXAxis","renderYAxis","renderHoverTracker","domain","isUndefined","yAxisMin","renderLineChart","scalePoint","right","scaleLinear","nice"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/DraggableLineChart/DraggableLineChartD3.ts"],"sourcesContent":["import * as d3Axis from 'd3-axis';\nimport { ScaleLinear, ScalePoint } from 'd3-scale';\nimport * as d3Shape from 'd3-shape';\nimport * as d3Drag from 'd3-drag';\nimport * as d3Selection from 'd3-selection';\nimport * as d3Transition from 'd3-transition';\nimport ReactDOM from 'react-dom';\nimport * as d3Scale from 'd3-scale';\nimport _ from 'lodash';\nimport * as d3Array from 'd3-array';\nimport { StandardProps } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport {\n\tIXAxisRenderProp,\n\tgetGroup,\n\tlucidXAxis,\n\tISelection,\n} from './d3-helpers';\n\nconst cx = lucidClassNames.bind('&-DraggableLineChart');\n\nexport interface IChartData {\n\tx: string;\n\ty: number;\n\tref?: any;\n}\nexport type IOnDragEnd = (newYValue: string, xValue: string) => void;\nexport type IData = IChartData[];\nexport type ISelectedChartData = IChartData & { isSelected: boolean };\nexport type IOnPreselect = (data: ISelectedChartData[]) => void;\n\ninterface IDraggableLineChartMargin {\n\ttop: number;\n\tright: number;\n\tbottom: number;\n\tleft: number;\n}\n\nconst getAttributes = function (selection: ISelection, obj: string[]): any {\n\treturn _.reduce(\n\t\tobj,\n\t\t(acc, value) => {\n\t\t\t// @ts-ignore\n\t\t\tacc[value] = selection.attr(value);\n\t\t\treturn acc;\n\t\t},\n\t\t{}\n\t);\n};\nexport interface IDraggableLineChart extends StandardProps {\n\t/** Height of the chart. */\n\theight?: number;\n\n\t/** Width of the chart. */\n\twidth?: number;\n\n\t/** Margin is an object defining the margins of the chart. These margins will\n\t    contain the axis and labels. */\n\tmargin?: IDraggableLineChartMargin;\n\n\t/** Data for the chart.\n\t\tBasic example:\n\t\t\t[\n\t\t\t\t{ x: new Date('2015-01-01') , y: 1 } ,\n\t\t\t\t{ x: new Date('2015-01-02') , y: 2 } ,\n\t\t\t\t{ x: new Date('2015-01-03') , y: 3 } ,\n\t\t\t\t{ x: new Date('2015-01-04') , y: 2 } ,\n\t\t\t\t{ x: new Date('2015-01-05') , y: 5 } ,\n\t\t\t]\n\n\t\tIf you want to be able to navigate to one of the components, you can use ref as well:\n\t\t\t[\n\t\t\t\t{ x: new Date('2015-01-01') , y: 1, ref: React.createRef() } ,\n\t\t\t\t{ x: new Date('2015-01-02') , y: 2, ref: React.createRef() } ,\n\t\t\t\t{ x: new Date('2015-01-03') , y: 3, ref: React.createRef() } ,\n\t\t\t\t{ x: new Date('2015-01-04') , y: 2, ref: React.createRef() } ,\n\t\t\t\t{ x: new Date('2015-01-05') , y: 5, ref: React.createRef() } ,\n\t\t\t] \n\t*/\n\tdata: IData;\n\n\t/** Drag handler function which is a callable function executed at the end of drag.\n\t\tCalled when the user stops to dragging an item.\n\t\t  Signature: `({ event, props }) => {}` */\n\tonDragEnd?: IOnDragEnd;\n\n\t/** Drag handler function which is a callable function executed at the end of drag.\n\t\tCalled when the user stops to dragging an item.\n\t\t\tSignature: `({ event, props }) => {}`\n\t    When defined show draggable pane. \n\t*/\n\tonPreselect?: IOnPreselect;\n\n\t/** Flag for if xAxis tick labels are vertical. */\n\txAxisTicksVertical?: boolean;\n\n\t/** Flag for if data is center aligned rather than default left aligned. */\n\tdataIsCentered?: boolean;\n\n\t/** Flag for yAxis sticking to minimum (not readjusting minimum). */\n\tyAxisMin?: number;\n\n\t/** Optional react component to render within X-Axis.\n\t\tNote: If you are using input boxes or similar and you want to navigate\n\t\tto the next component on tab, you will might need to provide refs\n\t\tin the data. This react component will always be passed the following props: ({x, y, ref }: { x: string; y: number; ref?: any }) \n\t*/\n\txAxisRenderProp?: IXAxisRenderProp;\n\n\t/** Text to show to users when there is no data selection. */\n\tpreSelectText?: string;\n\n\t/**\n\t\tAn optional function used to format your y axis data. If you don't\n\t\tprovide anything, we use the default D3 formatter.\n\t*/\n\tyAxisFormatter?: ((value: string) => string) | null;\n}\n\ninterface IDraggableLineChartParams extends IDraggableLineChart {\n\tIDraggableLineChart?: boolean;\n\tcx: (d: any) => void;\n\theight: number;\n\twidth: number;\n\tmargin: IDraggableLineChartMargin;\n\tyAxisMin: number;\n\tisMouseDown?: boolean;\n\tmouseDownStep?: number;\n\thasRenderedPoint?: boolean;\n\thasRenderedLine?: boolean;\n\temptyRenderProp?: () => JSX.Element;\n}\n\nclass DraggableLineChartD3 {\n\tselection: ISelection;\n\tparams: IDraggableLineChartParams;\n\txScale: ScalePoint<string>;\n\tyScale: ScaleLinear<number, number>;\n\tconstructor(selection: ISelection, params: IDraggableLineChartParams) {\n\t\tthis.selection = selection;\n\t\tthis.params = params;\n\t\tif (params.dataIsCentered) {\n\t\t\tthis.xScale = d3Scale\n\t\t\t\t.scalePoint()\n\t\t\t\t.domain([...this.params.data.map((d: any) => d.x), ''])\n\t\t\t\t.range([\n\t\t\t\t\tthis.params.margin.left,\n\t\t\t\t\tthis.params.width -\n\t\t\t\t\t\tthis.params.margin.right -\n\t\t\t\t\t\tthis.params.margin.left,\n\t\t\t\t]);\n\t\t} else {\n\t\t\tthis.xScale = d3Scale\n\t\t\t\t.scalePoint()\n\t\t\t\t.domain(this.params.data.map((d: any) => d.x))\n\t\t\t\t.range([\n\t\t\t\t\tthis.params.margin.left,\n\t\t\t\t\tthis.params.width -\n\t\t\t\t\t\tthis.params.margin.right -\n\t\t\t\t\t\tthis.params.margin.left,\n\t\t\t\t]);\n\t\t}\n\t\tthis.yScale = d3Scale\n\t\t\t.scaleLinear()\n\t\t\t.domain([\n\t\t\t\t_.isUndefined(this.params.yAxisMin)\n\t\t\t\t\t? d3Array.min(this.params.data, (d: any) => d.y)\n\t\t\t\t\t: this.params.yAxisMin,\n\t\t\t\td3Array.max(this.params.data, (d: any) => d.y) || 10,\n\t\t\t])\n\t\t\t.nice()\n\t\t\t.range([\n\t\t\t\tthis.params.height - this.params.margin.bottom,\n\t\t\t\tthis.params.margin.top,\n\t\t\t]);\n\t}\n\n\tsetMouseDown = (isMouseDown: boolean, mouseDownStep?: number) => {\n\t\tthis.params.isMouseDown = isMouseDown;\n\t\tthis.params.mouseDownStep = mouseDownStep;\n\t};\n\n\tgetIsMouseDown = () => {\n\t\treturn this.params.isMouseDown;\n\t};\n\n\tgetMouseDownStep = () => {\n\t\treturn this.params.mouseDownStep || 0;\n\t};\n\n\tgetHasRenderedPoint = () => {\n\t\treturn !!this.params.hasRenderedPoint;\n\t};\n\n\tgetHasRenderedLine = () => {\n\t\treturn !!this.params.hasRenderedLine;\n\t};\n\n\tsetHasRenderedPoint = () => {\n\t\tthis.params.hasRenderedPoint = true;\n\t};\n\n\tsetHasRenderedLine = () => {\n\t\tthis.params.hasRenderedLine = true;\n\t};\n\n\tshouldShowPreselect = () => {\n\t\tconst hasUserValues = _.some(this.params.data, ({ y }) => y > 0);\n\t\treturn !!this.params.onPreselect && !hasUserValues;\n\t};\n\n\tdrag: any = () => {\n\t\tconst { xScale, yScale, renderLine, renderPoints, selection } = this;\n\t\tconst { cx, onDragEnd } = this.params;\n\t\tlet initialPosition: number;\n\t\treturn d3Drag\n\t\t\t.drag()\n\t\t\t.on('start', function () {\n\t\t\t\tconst activeDot = d3Selection.select(this);\n\t\t\t\tinitialPosition = Number(activeDot.attr('cy'));\n\t\t\t})\n\t\t\t.on('drag', function (pointData: any) {\n\t\t\t\tconst [max, min] = yScale.range();\n\t\t\t\tconst activeDot = d3Selection.select(this);\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst adjMouseY = initialPosition + d3Selection.event.y;\n\t\t\t\tconst newPointY =\n\t\t\t\t\tadjMouseY < min ? min : adjMouseY > max ? max : adjMouseY;\n\t\t\t\tconst lines = selection.selectAll(`path.${cx('&-Line')}`);\n\n\t\t\t\tpointData.y = Number(yScale.invert(newPointY));\n\t\t\t\tactiveDot.attr('cy', newPointY);\n\t\t\t\tconst line: any = d3Shape\n\t\t\t\t\t.line<IChartData>()\n\t\t\t\t\t.x((chartData: IChartData) => xScale(chartData.x) || 0)\n\t\t\t\t\t.y((chartData: IChartData) => yScale(chartData.y) as any);\n\t\t\t\tlines.attr('d', line);\n\t\t\t})\n\t\t\t.on('end', (d: any) => {\n\t\t\t\tif (onDragEnd) onDragEnd(d.y, d.x);\n\t\t\t\trenderLine();\n\t\t\t\trenderPoints();\n\t\t\t});\n\t};\n\trenderXAxis = () => {\n\t\tconst {\n\t\t\tmargin,\n\t\t\theight,\n\t\t\txAxisTicksVertical,\n\t\t\tdataIsCentered,\n\t\t\tcx,\n\t\t\txAxisRenderProp,\n\t\t\tdata,\n\t\t} = this.params;\n\t\tconst xGroup = getGroup(this.selection, `${cx('&-Axis')}`);\n\t\txGroup\n\t\t\t.call((xAxis: any) => {\n\t\t\t\txAxis\n\t\t\t\t\t.attr('transform', `translate(${0},${margin.top})`)\n\t\t\t\t\t.call(lucidXAxis, {\n\t\t\t\t\t\txScale: this.xScale,\n\t\t\t\t\t\ttickSize: margin.top + margin.bottom - height,\n\t\t\t\t\t\txAxisRenderProp,\n\t\t\t\t\t\tdataIsCentered,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t});\n\t\t\t\tif (xAxisTicksVertical) {\n\t\t\t\t\txAxis.classed('Vert', true);\n\t\t\t\t} else {\n\t\t\t\t\txAxis.classed('NoVert', true);\n\t\t\t\t}\n\t\t\t\tif (dataIsCentered) {\n\t\t\t\t\txAxis.classed('Center', true);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.call(() => xGroup);\n\t};\n\trenderYAxis = () => {\n\t\tconst yGroup = getGroup(this.selection, 'yAxisGroup');\n\t\tyGroup\n\t\t\t.call((yAxis: any) => {\n\t\t\t\tconst { margin, cx, yAxisFormatter } = this.params;\n\t\t\t\tyAxis\n\t\t\t\t\t.attr('transform', `translate(${margin.left},${0})`)\n\t\t\t\t\t.classed(`${cx('&-Axis')}`, true)\n\t\t\t\t\t.transition()\n\t\t\t\t\t.duration(500)\n\t\t\t\t\t.call(\n\t\t\t\t\t\td3Axis\n\t\t\t\t\t\t\t.axisLeft(this.yScale)\n\t\t\t\t\t\t\t.tickFormat(\n\t\t\t\t\t\t\t\tyAxisFormatter as (domainValue: any, index: number) => string\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t})\n\t\t\t.call(() => yGroup);\n\t};\n\trenderLine = () => {\n\t\tif (this.shouldShowPreselect()) {\n\t\t\treturn;\n\t\t}\n\t\tconst { dataIsCentered, cx } = this.params;\n\n\t\tif (!this.getHasRenderedLine()) {\n\t\t\tif (dataIsCentered) {\n\t\t\t\tconst innerXTickWidth = this.xScale.step();\n\t\t\t\tthis.selection\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.append('path')\n\t\t\t\t\t.attr('class', `${cx('&-Line')}`)\n\t\t\t\t\t.attr('transform', `translate(${innerXTickWidth / 2}, 0)`);\n\t\t\t} else {\n\t\t\t\tthis.selection\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.append('path')\n\t\t\t\t\t.attr('class', `${cx('&-Line')}`);\n\t\t\t}\n\t\t\tthis.setHasRenderedLine();\n\t\t}\n\t\tconst lines: any = this.selection.selectAll(`path.${cx('&-Line')}`);\n\t\tlines.datum(this.params.data).enter();\n\t\tlines\n\t\t\t.transition(d3Transition.transition().duration(100))\n\t\t\t.attr('fill', 'none')\n\t\t\t.attr(\n\t\t\t\t'd',\n\t\t\t\td3Shape\n\t\t\t\t\t.line()\n\t\t\t\t\t.x((d: any) => this.xScale(d.x) || 0)\n\t\t\t\t\t.y((d: any) => this.yScale(d.y) as any)\n\t\t\t);\n\t};\n\trenderEmptyRenderProp = (height: number, width: number) => {\n\t\tconst { emptyRenderProp } = this.params;\n\t\tif (!emptyRenderProp || !this.shouldShowPreselect()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst emptyDataObject = this.selection.selectAll('.emptyRender');\n\t\tif (emptyDataObject.empty()) {\n\t\t\tconst emptyRender: ISelection = this.selection\n\t\t\t\t.selectAll('.overlayContainer')\n\t\t\t\t.append('foreignObject')\n\t\t\t\t.attr('height', height)\n\t\t\t\t.attr('width', width)\n\t\t\t\t.attr('x', this.params.margin.left)\n\t\t\t\t.classed('emptyRender', true);\n\t\t\temptyRender.html((value: any, num: any, node: any): any => {\n\t\t\t\tReactDOM.render(emptyRenderProp(), node[0]);\n\t\t\t});\n\t\t}\n\t};\n\trenderPoints = () => {\n\t\tif (this.shouldShowPreselect()) {\n\t\t\treturn;\n\t\t}\n\t\tconst { data, dataIsCentered } = this.params;\n\t\tconst circle = this.getHasRenderedPoint()\n\t\t\t? this.selection.selectAll('circle').data(data).join('circle')\n\t\t\t: this.selection\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.selectAll('circle')\n\t\t\t\t\t.data(data)\n\t\t\t\t\t.join('circle');\n\n\t\tif (dataIsCentered) {\n\t\t\tconst innerXTickWidth = this.xScale.step();\n\t\t\tcircle\n\t\t\t\t// @ts-ignore\n\t\t\t\t.transition()\n\t\t\t\t.duration(100)\n\t\t\t\t.attr('cx', (d: any) => this.xScale(d.x) || 0)\n\t\t\t\t.attr('cy', (d: any) => this.yScale(d.y) as any)\n\t\t\t\t.attr('r', 5)\n\t\t\t\t.attr('transform', `translate(${innerXTickWidth / 2}, 0)`)\n\t\t\t\t.style('fill', '#587EBA')\n\t\t\t\t.style('stroke', 'white')\n\t\t\t\t.style('stroke-width', 1);\n\t\t} else {\n\t\t\tcircle\n\t\t\t\t// @ts-ignore\n\t\t\t\t.transition()\n\t\t\t\t.duration(100)\n\t\t\t\t.attr('cx', (d: any) => this.xScale(d.x) || 0)\n\t\t\t\t.attr('cy', (d: any) => this.yScale(d.y) as any)\n\t\t\t\t.attr('r', 5)\n\t\t\t\t.style('fill', '#587EBA')\n\t\t\t\t.style('stroke', 'white')\n\t\t\t\t.style('stroke-width', 1);\n\t\t}\n\t\tif (!this.getHasRenderedPoint()) circle.call(this.drag());\n\t\tthis.setHasRenderedPoint();\n\t};\n\n\treRenderDragBox = ({\n\t\tdragBox,\n\t\tmouseX,\n\t\txLeft,\n\t\txRight,\n\t\tstepWidth,\n\t\tstepCount,\n\t}: {\n\t\tdragBox: any;\n\t\tmouseX: number;\n\t\txLeft: number;\n\t\txRight: number;\n\t\tstepWidth: number;\n\t\tstepCount: number;\n\t}) => {\n\t\tconst isLeft = xLeft >= mouseX;\n\t\tconst isRight = xRight <= mouseX;\n\t\tconst mouseDownStep = this.getMouseDownStep();\n\t\tif (isLeft) {\n\t\t\tconst difference = _.max([xLeft - mouseX, 0]) || 0;\n\t\t\tconst rawStepsSelected = Math.floor(difference / stepWidth) + 2;\n\t\t\tconst maxStepsAvailable = mouseDownStep + 1;\n\t\t\tconst stepsSelected = _.min([rawStepsSelected, maxStepsAvailable]) || 1;\n\t\t\tconst activeBoxWidth = stepsSelected * stepWidth;\n\t\t\tconst nextXLeft = xRight - activeBoxWidth;\n\t\t\tdragBox.attr('x', nextXLeft);\n\t\t\tdragBox.attr('width', activeBoxWidth);\n\t\t} else if (isRight) {\n\t\t\tconst difference = _.max([mouseX - xRight, 0]) || 0;\n\t\t\tconst rawStepsSelected = Math.floor(difference / stepWidth) + 2;\n\t\t\tconst maxStepsAvailable = stepCount - mouseDownStep;\n\t\t\tconst stepsSelected = _.min([rawStepsSelected, maxStepsAvailable]) || 1;\n\t\t\tconst activeBoxWidth = stepsSelected * stepWidth;\n\t\t\tdragBox.attr('x', xLeft);\n\t\t\tdragBox.attr('width', activeBoxWidth);\n\t\t} else {\n\t\t\tdragBox.attr('x', xLeft);\n\t\t\tdragBox.attr('width', stepWidth);\n\t\t}\n\t};\n\n\trenderHoverTracker = () => {\n\t\tconst {\n\t\t\theight,\n\t\t\tmargin: { top, bottom },\n\t\t\tdata,\n\t\t\tonPreselect,\n\t\t} = this.params;\n\t\tconst {\n\t\t\tshouldShowPreselect,\n\t\t\tsetMouseDown,\n\t\t\tgetIsMouseDown,\n\t\t\tgetMouseDownStep,\n\t\t\treRenderDragBox,\n\t\t\txScale,\n\t\t\tselection,\n\t\t} = this;\n\t\tif (!shouldShowPreselect()) {\n\t\t\tselection.selectAll('.overlayContainer').remove();\n\t\t\treturn;\n\t\t}\n\t\tconst innerHeight = height - top - bottom;\n\t\tconst stepWidth = xScale.step();\n\t\tconst stepCount = data.length;\n\n\t\tconst overlayContainer = selection\n\t\t\t.append('g')\n\t\t\t.classed('overlayContainer', true)\n\t\t\t.attr('transform', `translate(${0},${top})`);\n\n\t\tthis.renderEmptyRenderProp(innerHeight, stepCount * stepWidth);\n\n\t\tconst overlayTrack = overlayContainer.selectAll('rect').data(data).enter();\n\t\toverlayTrack\n\t\t\t.append('rect')\n\t\t\t.attr('x', (chartData) => this.xScale(chartData.x) || 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('width', (chartData) => this.xScale.step())\n\t\t\t.attr('height', innerHeight)\n\t\t\t.classed(cx('&-overlayTrack'), true)\n\t\t\t// @ts-ignore\n\t\t\t.on('mouseenter', (d, i, nodes) => {\n\t\t\t\tif (!getIsMouseDown()) {\n\t\t\t\t\td3Selection.select(nodes[i]).classed('active', true);\n\t\t\t\t}\n\t\t\t})\n\t\t\t// @ts-ignore\n\t\t\t.on('mouseout', function (d, i, nodes) {\n\t\t\t\tif (!getIsMouseDown()) {\n\t\t\t\t\td3Selection.select(nodes[i]).classed('active', false);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('mousedown', function (d, i) {\n\t\t\t\td3Selection.selectAll('.active').classed('active', false);\n\t\t\t\tconst currentTarget = d3Selection.select(this);\n\t\t\t\tconst { x, y, width, height }: any = getAttributes(currentTarget, [\n\t\t\t\t\t'x',\n\t\t\t\t\t'y',\n\t\t\t\t\t'width',\n\t\t\t\t\t'height',\n\t\t\t\t]);\n\t\t\t\t// @ts-ignore\n\t\t\t\tsetMouseDown(true, i);\n\t\t\t\tconst xLeft = +x;\n\t\t\t\tconst xRight = +x + +width;\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst container = d3Selection.select(this.parentNode);\n\t\t\t\tcontainer\n\t\t\t\t\t.append('rect')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('y', y)\n\t\t\t\t\t.attr('width', width)\n\t\t\t\t\t.attr('height', height)\n\t\t\t\t\t.classed(cx('&-overlayTrack'), true)\n\t\t\t\t\t.classed('active', true)\n\t\t\t\t\t.classed('dragBox', true)\n\t\t\t\t\t.on('mouseout', function () {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tconst [mouseX] = d3Selection.mouse(this);\n\t\t\t\t\t\tconst dragBox = selection.selectAll('.dragBox');\n\t\t\t\t\t\treRenderDragBox({\n\t\t\t\t\t\t\tdragBox,\n\t\t\t\t\t\t\tmouseX,\n\t\t\t\t\t\t\txLeft,\n\t\t\t\t\t\t\txRight,\n\t\t\t\t\t\t\tstepWidth,\n\t\t\t\t\t\t\tstepCount,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.on('mousemove', function () {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tconst [mouseX] = d3Selection.mouse(this);\n\t\t\t\t\t\tconst dragBox = selection.selectAll('.dragBox');\n\t\t\t\t\t\treRenderDragBox({\n\t\t\t\t\t\t\tdragBox,\n\t\t\t\t\t\t\tmouseX,\n\t\t\t\t\t\t\txLeft,\n\t\t\t\t\t\t\txRight,\n\t\t\t\t\t\t\tstepWidth,\n\t\t\t\t\t\t\tstepCount,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.on('mouseup', function () {\n\t\t\t\t\t\tconst clickStep = getMouseDownStep();\n\t\t\t\t\t\tconst activeBox = selection.selectAll('.dragBox');\n\t\t\t\t\t\tconst { x, width } = getAttributes(activeBox, ['x', 'width']);\n\t\t\t\t\t\tconst isRight = xLeft === +x;\n\t\t\t\t\t\tconst steps = Math.round(+width / stepWidth);\n\t\t\t\t\t\tconst startingIndex = isRight ? clickStep : clickStep - steps + 1;\n\t\t\t\t\t\tconst endingIndex = startingIndex + steps - 1;\n\t\t\t\t\t\tconst updatedData = data.map((step, i) => ({\n\t\t\t\t\t\t\t...step,\n\t\t\t\t\t\t\tisSelected: i >= startingIndex && i <= endingIndex,\n\t\t\t\t\t\t}));\n\t\t\t\t\t\t!!onPreselect && onPreselect(updatedData);\n\n\t\t\t\t\t\tsetMouseDown(false);\n\t\t\t\t\t\tselection.selectAll('.dragBox').remove();\n\t\t\t\t\t\tselection.selectAll('.overlayContainer').remove();\n\t\t\t\t\t});\n\t\t\t});\n\t};\n\trenderLineChart = () => {\n\t\tthis.renderXAxis();\n\t\tthis.renderYAxis();\n\t\tthis.renderHoverTracker();\n\t\tthis.renderLine();\n\t\tthis.renderPoints();\n\t};\n\tupdateLineChart = (data: IData) => {\n\t\tthis.params.data = data;\n\t\tthis.yScale.domain([\n\t\t\t_.isUndefined(this.params.yAxisMin)\n\t\t\t\t? d3Array.min(this.params.data, (d: any) => d.y)\n\t\t\t\t: this.params.yAxisMin,\n\t\t\td3Array.max(this.params.data, (d: any) => d.y) || 10,\n\t\t]);\n\t\tthis.renderLineChart();\n\t};\n}\n\nexport default DraggableLineChartD3;\n"]},"metadata":{},"sourceType":"module"}