{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-AxisLabel');\nconst {\n  number,\n  string,\n  oneOf,\n  object\n} = PropTypes;\nconst defaultProps = {\n  color: '#000'\n};\nexport const AxisLabel = props => {\n  const {\n    height,\n    width,\n    orient,\n    label,\n    color,\n    style,\n    className,\n    ...passThroughs\n  } = props;\n  const isH = orient === 'top' || orient === 'bottom';\n  const isCustomColor = _.startsWith(color, '#');\n  const colorStyle = isCustomColor ? {\n    fill: color\n  } : null;\n  return React.createElement(\"text\", {\n    ...passThroughs,\n    style: {\n      ...colorStyle,\n      ...style\n    },\n    className: cx(className, '&', {\n      [`&-${color}`]: !isCustomColor\n    }),\n    x: isH ? width / 2 : height / 2 * -1,\n    y: orient === 'right' ? width : orient === 'bottom' ? height : 0,\n    dy: orient === 'top' || orient === 'left' ? '1em' : '-.32em',\n    transform: isH ? '' : 'rotate(-90)'\n  }, label);\n};\nAxisLabel.defaultProps = defaultProps;\nAxisLabel.displayName = 'AxisLabel';\nAxisLabel.peek = {\n  description: `\\`AxisLabel\\` is used within a \\`svg\\`. Centered labels for axes that typically are fit into the margins of a chart.`,\n  categories: ['visualizations', 'chart primitives']\n};\nAxisLabel.propTypes = {\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Height of the margin this label should fit into.\n  */\n  height: number.isRequired,\n  /**\n      Width of the margin this label should fit into.\n  */\n  width: number.isRequired,\n  /**\n      Strings should match an existing color class unless they start with a '#'\n      for specific colors. E.g.:\n       - \\`COLOR_0\\`\n      - \\`COLOR_GOOD\\`\n      - \\`'#123abc'\\`\n  */\n  color: string,\n  /**\n      Contents of the label, should only ever be a string since we use a\n      \\`text\\` under the hood.\n  */\n  label: string,\n  /**\n      Determine orientation of the label.\n  */\n  orient: oneOf(['top', 'bottom', 'left', 'right'])\n};\nexport default AxisLabel;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,eAAe,QAAQ,0BAA0B;AAG1D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,aAAa,CAAC;AAE9C,MAAM;EAAEC,MAAM;EAAEC,MAAM;EAAEC,KAAK;EAAEC;AAAM,CAAE,GAAGP,SAAS;AAEnD,MAAMQ,YAAY,GAAG;EACpBC,KAAK,EAAE;CACP;AA0BD,OAAO,MAAMC,SAAS,GAAIC,KAAsB,IAAwB;EACvE,MAAM;IACLC,MAAM;IACNC,KAAK;IACLC,MAAM;IACNC,KAAK;IACLN,KAAK;IACLO,KAAK;IACLC,SAAS;IACT,GAAGC;EAAY,CACf,GAAGP,KAAK;EAET,MAAMQ,GAAG,GAAGL,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAK,QAAQ;EACnD,MAAMM,aAAa,GAAGtB,CAAC,CAACuB,UAAU,CAACZ,KAAK,EAAE,GAAG,CAAC;EAC9C,MAAMa,UAAU,GAAGF,aAAa,GAAG;IAAEG,IAAI,EAAEd;EAAK,CAAE,GAAG,IAAI;EAEzD,OACCV;IAAA,GACMmB,YAAoB;IACzBF,KAAK,EAAE;MACN,GAAGM,UAAU;MACb,GAAGN;KACH;IACDC,SAAS,EAAEf,EAAE,CAACe,SAAS,EAAE,GAAG,EAAE;MAC7B,CAAC,KAAKR,KAAK,EAAE,GAAG,CAACW;KACjB,CAAC;IACFI,CAAC,EAAEL,GAAG,GAAGN,KAAK,GAAG,CAAC,GAAID,MAAM,GAAG,CAAC,GAAI,CAAC,CAAC;IACtCa,CAAC,EAAEX,MAAM,KAAK,OAAO,GAAGD,KAAK,GAAGC,MAAM,KAAK,QAAQ,GAAGF,MAAM,GAAG,CAAC;IAChEc,EAAE,EAAEZ,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAK,MAAM,GAAG,KAAK,GAAG,QAAQ;IAC5Da,SAAS,EAAER,GAAG,GAAG,EAAE,GAAG;EAAa,GAElCJ,KAAK,CACA;AAET,CAAC;AAEDL,SAAS,CAACF,YAAY,GAAGA,YAAY;AACrCE,SAAS,CAACkB,WAAW,GAAG,WAAW;AACnClB,SAAS,CAACmB,IAAI,GAAG;EAChBC,WAAW,EAAE,sHAAsH;EACnIC,UAAU,EAAE,CAAC,gBAAgB,EAAE,kBAAkB;CACjD;AACDrB,SAAS,CAACsB,SAAS,GAAG;EACrB;;;EAGAhB,KAAK,EAAET,MAAM;EAEb;;;EAGAU,SAAS,EAAEZ,MAAM;EAEjB;;;EAGAO,MAAM,EAAER,MAAM,CAAC6B,UAAU;EAEzB;;;EAGApB,KAAK,EAAET,MAAM,CAAC6B,UAAU;EAExB;;;;;;;EAQAxB,KAAK,EAAEJ,MAAM;EAEb;;;;EAIAU,KAAK,EAAEV,MAAM;EAEb;;;EAGAS,MAAM,EAAER,KAAK,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;CAChD;AAED,eAAeI,SAAS","names":["_","React","PropTypes","lucidClassNames","cx","bind","number","string","oneOf","object","defaultProps","color","AxisLabel","props","height","width","orient","label","style","className","passThroughs","isH","isCustomColor","startsWith","colorStyle","fill","x","y","dy","transform","displayName","peek","description","categories","propTypes","isRequired"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/AxisLabel/AxisLabel.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-AxisLabel');\n\nconst { number, string, oneOf, object } = PropTypes;\n\nconst defaultProps = {\n\tcolor: '#000',\n};\n\nexport interface IAxisLabelProps extends StandardProps {\n\t/** Height of the margin this label should fit into. */\n\theight: number;\n\n\t/** Width of the margin this label should fit into. */\n\twidth: number;\n\n\t/** Strings should match an existing color class unless they start with a '#' \n\t * for specific colors. E.g.:\n\t * \n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\`\n\t`*/\n\tcolor: string;\n\n\t/** Contents of the label, should only ever be a string since we use a\n\t\t\\`text\\` under the hood. */\n\tlabel: string;\n\n\t/** Determine orientation of the label. */\n\torient: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport const AxisLabel = (props: IAxisLabelProps): React.ReactElement => {\n\tconst {\n\t\theight,\n\t\twidth,\n\t\torient,\n\t\tlabel,\n\t\tcolor,\n\t\tstyle,\n\t\tclassName,\n\t\t...passThroughs\n\t} = props;\n\n\tconst isH = orient === 'top' || orient === 'bottom';\n\tconst isCustomColor = _.startsWith(color, '#');\n\tconst colorStyle = isCustomColor ? { fill: color } : null;\n\n\treturn (\n\t\t<text\n\t\t\t{...(passThroughs as any)}\n\t\t\tstyle={{\n\t\t\t\t...colorStyle,\n\t\t\t\t...style,\n\t\t\t}}\n\t\t\tclassName={cx(className, '&', {\n\t\t\t\t[`&-${color}`]: !isCustomColor,\n\t\t\t})}\n\t\t\tx={isH ? width / 2 : (height / 2) * -1}\n\t\t\ty={orient === 'right' ? width : orient === 'bottom' ? height : 0}\n\t\t\tdy={orient === 'top' || orient === 'left' ? '1em' : '-.32em'}\n\t\t\ttransform={isH ? '' : 'rotate(-90)'}\n\t\t>\n\t\t\t{label}\n\t\t</text>\n\t);\n};\n\nAxisLabel.defaultProps = defaultProps;\nAxisLabel.displayName = 'AxisLabel';\nAxisLabel.peek = {\n\tdescription: `\\`AxisLabel\\` is used within a \\`svg\\`. Centered labels for axes that typically are fit into the margins of a chart.`,\n\tcategories: ['visualizations', 'chart primitives'],\n};\nAxisLabel.propTypes = {\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tHeight of the margin this label should fit into.\n\t*/\n\theight: number.isRequired,\n\n\t/**\n\t\tWidth of the margin this label should fit into.\n\t*/\n\twidth: number.isRequired,\n\n\t/**\n\t\tStrings should match an existing color class unless they start with a '#'\n\t\tfor specific colors. E.g.:\n\n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\`\n\t*/\n\tcolor: string,\n\n\t/**\n\t\tContents of the label, should only ever be a string since we use a\n\t\t\\`text\\` under the hood.\n\t*/\n\tlabel: string,\n\n\t/**\n\t\tDetermine orientation of the label.\n\t*/\n\torient: oneOf(['top', 'bottom', 'left', 'right']),\n};\n\nexport default AxisLabel;\n"]},"metadata":{},"sourceType":"module"}