{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Motion, spring } from 'react-motion';\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-Collapsible');\nconst {\n  any,\n  bool,\n  node,\n  number,\n  string,\n  func\n} = PropTypes;\n/** TODO: Remove this constant when the component is converted to a functional component */\nconst nonPassthroughs = ['children', 'className', 'isExpanded', 'isAnimated', 'isMountControlled', 'mountControlThreshold', 'onRest', 'rootType'];\nclass Collapsible extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.rootRef = React.createRef();\n    this.isAnimated = false;\n    this.delayTimer = null;\n    this._isMounted = false;\n    this.state = {\n      maxHeight: 0\n    };\n  }\n  UNSAFE_componentWillMount() {\n    this._isMounted = false;\n    this.isAnimated = false;\n    this.delayTimer = null;\n  }\n  componentDidMount() {\n    this._isMounted = true;\n    _.delay(() => {\n      // const maxHeight = _.get(this, 'rootRef.current.scrollHeight');\n      if (this._isMounted) {\n        this.setState({\n          maxHeight: _.get(this, 'rootRef.current.scrollHeight')\n        });\n      }\n      this.isAnimated = this.props.isAnimated;\n    }, 32);\n  }\n  componentDidUpdate() {\n    this.isAnimated = false;\n    this.delayTimer = _.delay(() => {\n      if (this.props.isExpanded) {\n        const maxHeight = _.get(this, 'rootRef.current.scrollHeight');\n        if (maxHeight !== this.state.maxHeight) {\n          if (this._isMounted) {\n            this.setState({\n              maxHeight\n            });\n          }\n        }\n      }\n      this.isAnimated = this.props.isAnimated;\n    }, 32);\n  }\n  componentWillUnmount() {\n    this.delayTimer && clearTimeout(this.delayTimer);\n  }\n  render() {\n    const {\n      children,\n      className,\n      isExpanded,\n      isMountControlled,\n      mountControlThreshold,\n      rootType,\n      onRest,\n      style,\n      ...passThroughs\n    } = this.props;\n    const {\n      maxHeight\n    } = this.state;\n    return React.createElement(Motion, {\n      style: this.isAnimated ? {\n        height: isExpanded ? spring(maxHeight, QUICK_SLIDE_MOTION) : spring(0, QUICK_SLIDE_MOTION)\n      } : {\n        height: isExpanded ? maxHeight : 0\n      },\n      onRest: onRest\n    }, tween => React.createElement(rootType, {\n      ..._.omit(passThroughs, nonPassthroughs),\n      ref: this.rootRef,\n      className: cx('&', className),\n      style: {\n        height: tween.height !== maxHeight ? tween.height < 0 ? 0 : tween.height : null,\n        overflow: 'hidden',\n        padding: 0,\n        ...style\n      }\n    }, [React.createElement(\"div\", {\n      key: 'content',\n      className: cx('&-content'),\n      style: {\n        margin: 0\n      }\n    }, isMountControlled && !isExpanded ? _.isNull(maxHeight) || Math.abs(tween.height) > mountControlThreshold ? children : null : children)]));\n  }\n}\nCollapsible.displayName = 'Collapsible';\nCollapsible.peek = {\n  description: `This is a simple container that can render content as expanded or collapsed.`,\n  categories: ['utility']\n};\n// static _isPrivate = true;\nCollapsible.propTypes = {\n  /**\n      Expandable content.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Indicates that the component is in the \"expanded\" state when true and in\n      the \"unexpanded\" state when false.\n  */\n  isExpanded: bool,\n  /**\n      Show an animated transition for alternating values of \\`isExpanded\\`.\n  */\n  isAnimated: bool,\n  /**\n      If true, do not render children when fully collapsed.\n  */\n  isMountControlled: bool,\n  /**\n      If \\`isMountControlled\\` is true, this value sets is the minimum height\n      the container needs to reach to not render any children.\n  */\n  mountControlThreshold: number,\n  /**\n      Optional. The callback that fires when the animation comes to a rest.\n  */\n  onRest: func,\n  /**\n      Pass in a custom root element type.\n  */\n  rootType: any\n};\nCollapsible.defaultProps = {\n  isExpanded: true,\n  isAnimated: true,\n  isMountControlled: true,\n  mountControlThreshold: 4,\n  rootType: 'div'\n};\nexport default Collapsible;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","Motion","spring","QUICK_SLIDE_MOTION","lucidClassNames","cx","bind","any","bool","node","number","string","func","nonPassthroughs","Collapsible","Component","constructor","createRef","maxHeight","UNSAFE_componentWillMount","_isMounted","isAnimated","delayTimer","componentDidMount","delay","setState","get","props","componentDidUpdate","isExpanded","state","componentWillUnmount","clearTimeout","render","children","className","isMountControlled","mountControlThreshold","rootType","onRest","style","passThroughs","height","tween","createElement","omit","ref","rootRef","overflow","padding","key","margin","isNull","Math","abs","description","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Collapsible/Collapsible.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Motion, spring } from 'react-motion';\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Collapsible');\n\nconst { any, bool, node, number, string, func } = PropTypes;\n\n// TODO: Is there a better way to add type checks for passThroughs in this case\n// where the underling element could be anything vs just extending\n// `React.HTMLProps<HTMLElement>`? Related to issue #1045\nexport interface ICollapsibleProps extends StandardProps {\n\t/** Indicates that the component is in the \"expanded\" state when true and in\n\t * the \"unexpanded\" state when false. */\n\tisExpanded: boolean;\n\n\t/** Show an animated transition for alternating values of \\`isExpanded\\`. */\n\tisAnimated: boolean;\n\n\t/** If true, do not render children when fully collapsed. */\n\tisMountControlled: boolean;\n\n\t/** If \\isMountControlled\\ is true, this value sets is the minimum height\n\t * the container needs to reach to not render any children. */\n\tmountControlThreshold: number;\n\n\t/** Pass in a custom root element type. */\n\trootType: any;\n\n\t/** Pass in a callback to be called after ExpanderPanel has came to a rest. */\n\tonRest?: () => void;\n}\n\n/** TODO: Remove this constant when the component is converted to a functional component */\nconst nonPassthroughs = [\n\t'children',\n\t'className',\n\t'isExpanded',\n\t'isAnimated',\n\t'isMountControlled',\n\t'mountControlThreshold',\n\t'onRest',\n\t'rootType',\n];\n\nexport interface ICollapsibleState {\n\tmaxHeight: number;\n}\n\nclass Collapsible extends React.Component<\n\tICollapsibleProps,\n\tICollapsibleState,\n\t{}\n> {\n\tstatic displayName = 'Collapsible';\n\tstatic peek = {\n\t\tdescription: `This is a simple container that can render content as expanded or collapsed.`,\n\t\tcategories: ['utility'],\n\t};\n\t// static _isPrivate = true;\n\tstatic propTypes = {\n\t\t/**\n\t\t\tExpandable content.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tIndicates that the component is in the \"expanded\" state when true and in\n\t\t\tthe \"unexpanded\" state when false.\n\t\t*/\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t\tShow an animated transition for alternating values of \\`isExpanded\\`.\n\t\t*/\n\t\tisAnimated: bool,\n\n\t\t/**\n\t\t\tIf true, do not render children when fully collapsed.\n\t\t*/\n\t\tisMountControlled: bool,\n\n\t\t/**\n\t\t\tIf \\`isMountControlled\\` is true, this value sets is the minimum height\n\t\t\tthe container needs to reach to not render any children.\n\t\t*/\n\t\tmountControlThreshold: number,\n\n\t\t/**\n\t\t\tOptional. The callback that fires when the animation comes to a rest.\n\t\t*/\n\t\tonRest: func,\n\n\t\t/**\n\t\t\tPass in a custom root element type.\n\t\t*/\n\t\trootType: any,\n\t};\n\n\tprivate rootRef = React.createRef<HTMLDivElement>();\n\n\tisAnimated: boolean | undefined = false;\n\tdelayTimer: number | null = null;\n\t_isMounted = false;\n\n\tstatic defaultProps = {\n\t\tisExpanded: true,\n\t\tisAnimated: true,\n\t\tisMountControlled: true,\n\t\tmountControlThreshold: 4,\n\t\trootType: 'div',\n\t};\n\n\tstate = {\n\t\tmaxHeight: 0,\n\t};\n\n\tUNSAFE_componentWillMount(): void {\n\t\tthis._isMounted = false;\n\t\tthis.isAnimated = false;\n\t\tthis.delayTimer = null;\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis._isMounted = true;\n\t\t_.delay((): void => {\n\t\t\t// const maxHeight = _.get(this, 'rootRef.current.scrollHeight');\n\t\t\tif (this._isMounted) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmaxHeight: _.get(this, 'rootRef.current.scrollHeight'),\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.isAnimated = this.props.isAnimated;\n\t\t}, 32);\n\t}\n\n\tcomponentDidUpdate(): void {\n\t\tthis.isAnimated = false;\n\t\tthis.delayTimer = _.delay((): void => {\n\t\t\tif (this.props.isExpanded) {\n\t\t\t\tconst maxHeight = _.get(this, 'rootRef.current.scrollHeight');\n\t\t\t\tif (maxHeight !== this.state.maxHeight) {\n\t\t\t\t\tif (this._isMounted) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tmaxHeight,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.isAnimated = this.props.isAnimated;\n\t\t}, 32);\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.delayTimer && clearTimeout(this.delayTimer);\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\tisExpanded,\n\t\t\tisMountControlled,\n\t\t\tmountControlThreshold,\n\t\t\trootType,\n\t\t\tonRest,\n\t\t\tstyle,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst { maxHeight } = this.state;\n\n\t\treturn (\n\t\t\t<Motion\n\t\t\t\tstyle={\n\t\t\t\t\tthis.isAnimated\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\theight: isExpanded\n\t\t\t\t\t\t\t\t\t? spring(maxHeight, QUICK_SLIDE_MOTION)\n\t\t\t\t\t\t\t\t\t: spring(0, QUICK_SLIDE_MOTION),\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: { height: isExpanded ? maxHeight : 0 }\n\t\t\t\t}\n\t\t\t\tonRest={onRest}\n\t\t\t>\n\t\t\t\t{(tween): JSX.Element =>\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\trootType,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t..._.omit(passThroughs, nonPassthroughs),\n\t\t\t\t\t\t\tref: this.rootRef,\n\t\t\t\t\t\t\tclassName: cx('&', className),\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\theight:\n\t\t\t\t\t\t\t\t\ttween.height !== maxHeight\n\t\t\t\t\t\t\t\t\t\t? tween.height < 0\n\t\t\t\t\t\t\t\t\t\t\t? 0\n\t\t\t\t\t\t\t\t\t\t\t: tween.height\n\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\t\t\t...style,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey='content'\n\t\t\t\t\t\t\t\tclassName={cx('&-content')}\n\t\t\t\t\t\t\t\tstyle={{ margin: 0 }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{isMountControlled && !isExpanded\n\t\t\t\t\t\t\t\t\t? _.isNull(maxHeight) ||\n\t\t\t\t\t\t\t\t\t  Math.abs(tween.height) > (mountControlThreshold as number)\n\t\t\t\t\t\t\t\t\t\t? children\n\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t: children}\n\t\t\t\t\t\t\t</div>,\n\t\t\t\t\t\t]\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Motion>\n\t\t);\n\t}\n}\n\nexport default Collapsible;\n"]},"metadata":{},"sourceType":"module"}