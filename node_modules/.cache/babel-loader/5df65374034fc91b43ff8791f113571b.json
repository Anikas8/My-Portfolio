{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst {\n  node,\n  string,\n  oneOf,\n  object\n} = PropTypes;\nconst cx = lucidClassNames.bind('&-NotchedTag');\nexport var TagStyle;\n(function (TagStyle) {\n  TagStyle[\"style-one\"] = \"style-one\";\n  TagStyle[\"style-two\"] = \"style-two\";\n  TagStyle[\"style-three\"] = \"style-three\";\n})(TagStyle || (TagStyle = {}));\nexport var Type;\n(function (Type) {\n  Type[\"filled\"] = \"filled\";\n  Type[\"stroke\"] = \"stroke\";\n})(Type || (Type = {}));\nexport var Size;\n(function (Size) {\n  Size[\"large\"] = \"large\";\n  Size[\"small\"] = \"small\";\n})(Size || (Size = {}));\nconst NOTCH_HEIGHT_LARGE = 5;\nconst NOTCH_HEIGHT_SMALL = 4;\nconst SIZE_DIMENSION_MAP = {\n  [Size.large]: {\n    height: '24px',\n    width: '40px'\n  },\n  [Size.small]: {\n    height: '18px',\n    width: '30px'\n  }\n};\nconst SIZE_NOTCH_MAP = {\n  [Size.large]: NOTCH_HEIGHT_LARGE,\n  [Size.small]: NOTCH_HEIGHT_SMALL\n};\nconst STROKE_SIZE = '2px';\nconst defaultProps = {\n  size: Size.large,\n  tagStyle: TagStyle['style-one']\n};\nexport const NotchedTag = props => {\n  const {\n    children,\n    className,\n    type,\n    style,\n    size,\n    tagStyle,\n    ...passThroughs\n  } = props;\n  const notchHeight = SIZE_NOTCH_MAP[size];\n  const notchWidth = notchHeight * Math.sqrt(3); //we want to maintain a 60 degree slice (30,60,90 triangle)\n  //clips off a corner of the element to create the notched effect\n  const slicePolygon = `\n\t\tpolygon(\n\t\t\t${notchHeight}px 0,\n\t\t\t100% 0,\n\t\t\t100% 100%,\n\t\t\t0 100%,\n\t\t\t0 ${notchWidth}px\n\t\t)`;\n  //used for creating an inset element to create a stroke effect (instead of fill)\n  const sliceInnerPolygon = `\n\t\tpolygon(\n\t\t\t${notchHeight - 1}px 0,\n\t\t\t100% 0,\n\t\t\t100% 100%,\n\t\t\t0 100%,\n\t\t\t0 ${notchWidth - 1}px\n\t\t)`;\n  return React.createElement(\"div\", {\n    className: cx('&', `&-${tagStyle}`, `&-${size}`, type === Type.filled ? '&-no-border' : '', className),\n    ...passThroughs,\n    style: {\n      ...style,\n      ...SIZE_DIMENSION_MAP[size],\n      clipPath: slicePolygon\n    }\n  }, React.createElement(\"div\", {\n    className: cx('&-container', type === Type.filled ? '&-container-filled' : ''),\n    style: {\n      top: STROKE_SIZE,\n      right: STROKE_SIZE,\n      left: STROKE_SIZE,\n      bottom: STROKE_SIZE,\n      clipPath: sliceInnerPolygon\n    }\n  }, React.createElement(\"div\", {\n    className: cx('&-container-centered')\n  }, children)));\n};\nNotchedTag.defaultProps = defaultProps;\nNotchedTag.displayName = 'NotchedTag';\nNotchedTag.propTypes = {\n  /**\n      Any valid React children.\n  */\n  children: node,\n  className: string,\n  /**\n      Style variations.\n  */\n  type: oneOf(_.values(Type)),\n  size: oneOf(_.values(Size)),\n  tagStyle: oneOf(_.values(TagStyle)),\n  style: object\n};\nNotchedTag.peek = {\n  description: `A banner that displays a prominent message.`,\n  notes: {\n    overview: `\n\t\t\tNotched tag helps users visually identify a high-priority object and its location in the object hierarchy.\n\t\t`,\n    intendedUse: `\n\t\t\tUse \\`NotchedTag\\` in tables, page headers, and in the global search to help users way-find while monitoring their objects. View \\`DetailsPageHeader\\` in ANX-React to see an example of Notched tag in context.\n\t\t\t\t\t\t\t\t\n\t\t\t**Styling notes**\n\t\t\t\n\t\t\t- Use filled in Notched tags, \\`type:\"filled\"\\`, for the currently-viewed or highest-priority object. \n\t\t\t- Use empty Notched tags, \\`type:\"stroke\"\\`, for the other objects associated with the viewed/priority object.\n\t\t\t- Use \\`size:\"small\"\\` in tables.\n\t\t\t- In page headers, use \\`size:\"large\"\\` \\`type:\"filled\"\\` for the highest-priority object, and \\`size:\"small\"\\` \\`type:\"stroke\"\\` for secondary objects.\n\t\t`,\n    technicalRecommendations: `\n\t\t\t- \\`tagStyle:style-one\"\\` is for Advertiser objects.\n\t\t\t- \\`tagStyle:style-two\"\\` is for Insertion Order objects.\n\t\t\t- \\`tagStyle:style-three\"\\` is for Line Item objects.\n\t\t`\n  },\n  categories: ['visual design']\n};\nexport default NotchedTag;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","node","string","oneOf","object","cx","bind","TagStyle","Type","Size","NOTCH_HEIGHT_LARGE","NOTCH_HEIGHT_SMALL","SIZE_DIMENSION_MAP","large","height","width","small","SIZE_NOTCH_MAP","STROKE_SIZE","defaultProps","size","tagStyle","NotchedTag","props","children","className","type","style","passThroughs","notchHeight","notchWidth","Math","sqrt","slicePolygon","sliceInnerPolygon","filled","clipPath","top","right","left","bottom","displayName","propTypes","values","peek","description","notes","overview","intendedUse","technicalRecommendations","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/NotchedTag/NotchedTag.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\n\nconst { node, string, oneOf, object } = PropTypes;\n\nconst cx = lucidClassNames.bind('&-NotchedTag');\n\nexport enum TagStyle {\n\t'style-one' = 'style-one',\n\t'style-two' = 'style-two',\n\t'style-three' = 'style-three',\n}\n\nexport enum Type {\n\tfilled = 'filled',\n\tstroke = 'stroke',\n}\n\nexport enum Size {\n\tlarge = 'large',\n\tsmall = 'small',\n}\n\nconst NOTCH_HEIGHT_LARGE = 5;\nconst NOTCH_HEIGHT_SMALL = 4;\n\nconst SIZE_DIMENSION_MAP = {\n\t[Size.large]: {\n\t\theight: '24px',\n\t\twidth: '40px',\n\t},\n\t[Size.small]: {\n\t\theight: '18px',\n\t\twidth: '30px',\n\t},\n};\n\nconst SIZE_NOTCH_MAP: { [key in Size]: number } = {\n\t[Size.large]: NOTCH_HEIGHT_LARGE,\n\t[Size.small]: NOTCH_HEIGHT_SMALL,\n};\n\nconst STROKE_SIZE = '2px';\n\nexport interface INotchedTagProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Style variations. */\n\ttype?: keyof typeof Type;\n\n\t/** Size variations. */\n\tsize: keyof typeof Size;\n\n\t/** Tag style variations. */\n\ttagStyle: keyof typeof TagStyle;\n}\n\nconst defaultProps = {\n\tsize: Size.large,\n\ttagStyle: TagStyle['style-one'],\n};\n\nexport const NotchedTag = (props: INotchedTagProps): React.ReactElement => {\n\tconst { children, className, type, style, size, tagStyle, ...passThroughs } =\n\t\tprops;\n\n\tconst notchHeight = SIZE_NOTCH_MAP[size];\n\tconst notchWidth = notchHeight * Math.sqrt(3); //we want to maintain a 60 degree slice (30,60,90 triangle)\n\n\t//clips off a corner of the element to create the notched effect\n\tconst slicePolygon = `\n\t\tpolygon(\n\t\t\t${notchHeight}px 0,\n\t\t\t100% 0,\n\t\t\t100% 100%,\n\t\t\t0 100%,\n\t\t\t0 ${notchWidth}px\n\t\t)`;\n\n\t//used for creating an inset element to create a stroke effect (instead of fill)\n\tconst sliceInnerPolygon = `\n\t\tpolygon(\n\t\t\t${notchHeight - 1}px 0,\n\t\t\t100% 0,\n\t\t\t100% 100%,\n\t\t\t0 100%,\n\t\t\t0 ${notchWidth - 1}px\n\t\t)`;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t`&-${tagStyle}`,\n\t\t\t\t`&-${size}`,\n\t\t\t\ttype === Type.filled ? '&-no-border' : '',\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...passThroughs}\n\t\t\tstyle={{\n\t\t\t\t...style,\n\t\t\t\t...SIZE_DIMENSION_MAP[size],\n\t\t\t\tclipPath: slicePolygon,\n\t\t\t}}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&-container',\n\t\t\t\t\ttype === Type.filled ? '&-container-filled' : ''\n\t\t\t\t)}\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: STROKE_SIZE,\n\t\t\t\t\tright: STROKE_SIZE,\n\t\t\t\t\tleft: STROKE_SIZE,\n\t\t\t\t\tbottom: STROKE_SIZE,\n\t\t\t\t\tclipPath: sliceInnerPolygon,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className={cx('&-container-centered')}>{children}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nNotchedTag.defaultProps = defaultProps;\nNotchedTag.displayName = 'NotchedTag';\nNotchedTag.propTypes = {\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n\tclassName: string,\n\t/**\n\t\tStyle variations.\n\t*/\n\ttype: oneOf(_.values(Type)),\n\tsize: oneOf(_.values(Size)),\n\ttagStyle: oneOf(_.values(TagStyle)),\n\tstyle: object,\n};\nNotchedTag.peek = {\n\tdescription: `A banner that displays a prominent message.`,\n\tnotes: {\n\t\toverview: `\n\t\t\tNotched tag helps users visually identify a high-priority object and its location in the object hierarchy.\n\t\t`,\n\t\tintendedUse: `\n\t\t\tUse \\`NotchedTag\\` in tables, page headers, and in the global search to help users way-find while monitoring their objects. View \\`DetailsPageHeader\\` in ANX-React to see an example of Notched tag in context.\n\t\t\t\t\t\t\t\t\n\t\t\t**Styling notes**\n\t\t\t\n\t\t\t- Use filled in Notched tags, \\`type:\"filled\"\\`, for the currently-viewed or highest-priority object. \n\t\t\t- Use empty Notched tags, \\`type:\"stroke\"\\`, for the other objects associated with the viewed/priority object.\n\t\t\t- Use \\`size:\"small\"\\` in tables.\n\t\t\t- In page headers, use \\`size:\"large\"\\` \\`type:\"filled\"\\` for the highest-priority object, and \\`size:\"small\"\\` \\`type:\"stroke\"\\` for secondary objects.\n\t\t`,\n\t\ttechnicalRecommendations: `\n\t\t\t- \\`tagStyle:style-one\"\\` is for Advertiser objects.\n\t\t\t- \\`tagStyle:style-two\"\\` is for Insertion Order objects.\n\t\t\t- \\`tagStyle:style-three\"\\` is for Line Item objects.\n\t\t`,\n\t},\n\tcategories: ['visual design'],\n};\n\nexport default NotchedTag;\n"]},"metadata":{},"sourceType":"module"}