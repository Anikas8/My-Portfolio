{"ast":null,"code":"/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst, rejectTypes } from '../../util/component-types';\nimport { CSSTransition } from 'react-transition-group';\nconst cx = lucidClassNames.bind('&-OverlayWrapper');\nconst {\n  bool,\n  node,\n  oneOf,\n  string\n} = PropTypes;\nexport const OverlayWrapperMessage = _props => null;\nOverlayWrapperMessage.displayName = 'OverlayWrapper.Message';\nOverlayWrapperMessage.peek = {\n  description: `The Message to display in the overlay.`\n};\nOverlayWrapperMessage.propName = 'Message';\nOverlayWrapperMessage.propTypes = {\n  children: node\n};\nconst defaultProps = {\n  hasOverlay: true,\n  overlayKind: 'light',\n  anchorMessage: false,\n  fixedMessage: false,\n  isVisible: false\n};\nexport const OverlayWrapper = props => {\n  const {\n    hasOverlay,\n    isVisible,\n    className,\n    children,\n    overlayKind,\n    anchorMessage,\n    fixedMessage,\n    ...passThroughs\n  } = props;\n  const messageElementProp = _.get(getFirst(props, OverlayWrapperMessage), 'props', {});\n  const otherChildren = rejectTypes(children, [OverlayWrapperMessage]);\n  return React.createElement(\"div\", {\n    ...passThroughs,\n    className: cx('&', className)\n  }, otherChildren, React.createElement(CSSTransition, {\n    in: isVisible,\n    classNames: cx('&-message-container'),\n    timeout: 300,\n    unmountOnExit: true\n  }, React.createElement(\"div\", {\n    className: cx('&-message-container', {\n      '&-has-overlay': hasOverlay,\n      '&-kind-light': hasOverlay && overlayKind === 'light',\n      '&-anchored-message': anchorMessage,\n      '&-fixed-message': fixedMessage\n    })\n  }, React.createElement(\"div\", {\n    ...messageElementProp\n  }))));\n};\nOverlayWrapper.defaultProps = defaultProps;\nOverlayWrapper.displayName = 'OverlayWrapper';\nOverlayWrapper.peek = {\n  description: `A wrapper with optional overlay to wrap content. \\`OverlayWrapper\\` is meant to wrap another component and cover its content, while \\`Overlay\\` is meant for overlaying an entire page.`,\n  categories: ['utility']\n};\nOverlayWrapper.propTypes = {\n  /**\n      Controls whether the message should be displayed over the wrapped\n      content.\n  */\n  isVisible: bool,\n  /**\n      Set this to \\`false\\` if you don't want the semi-transparent overlay over\n      the wrapped content.\n  */\n  hasOverlay: bool,\n  /**\n      Class names that are appended to the defaults.\n  */\n  className: string,\n  /**\n      Any valid React children.\n  */\n  children: node,\n  /**\n      Style variations for the overlay behind the message.\n  */\n  overlayKind: oneOf(['light', 'dark']),\n  /**\n      By default, the \\`OverlayMessage\\` is vertically aligned to the middle of the\n      OverlayWrapper. Set this to true to position the \\`OverlayMessage\\` near the top of\n      the \\`OverlayWrapper\\`.\n  */\n  anchorMessage: bool,\n  /**\n      By default, the OverlayMessage is vertically aligned to the middle of the\n      \\`OverlayWrapper\\` and the \\`OverlayWrapper\\` is the height of the entire content.\n      Set this to true to position the \\`OverlayMessage\\` near the center of the\n      \\`OverlayWrapper\\`, and fix the \\`OverlayWrapper\\` to the screen height and width.\n  */\n  fixedMessage: bool,\n  /*\n   *Child Element* The Message to display in the overlay.\n   */\n  Message: node\n};\nOverlayWrapper.Message = OverlayWrapperMessage;\nexport default OverlayWrapper;","map":{"version":3,"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SACCC,QAAQ,EACRC,WAAW,QAEL,4BAA4B;AACnC,SAASC,aAAa,QAAQ,wBAAwB;AAEtD,MAAMC,EAAE,GAAGJ,eAAe,CAACK,IAAI,CAAC,kBAAkB,CAAC;AAEnD,MAAM;EAAEC,IAAI;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAM,CAAE,GAAGX,SAAS;AAK/C,OAAO,MAAMY,qBAAqB,GAAIC,MAAqB,IAAW,IAAI;AAC1ED,qBAAqB,CAACE,WAAW,GAAG,wBAAwB;AAC5DF,qBAAqB,CAACG,IAAI,GAAG;EAC5BC,WAAW,EAAE;CACb;AACDJ,qBAAqB,CAACK,QAAQ,GAAG,SAAS;AAC1CL,qBAAqB,CAACM,SAAS,GAAG;EACjCC,QAAQ,EAAEV;CACV;AA8CD,MAAMW,YAAY,GAAG;EACpBC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,OAAgB;EAC7BC,aAAa,EAAE,KAAK;EACpBC,YAAY,EAAE,KAAK;EACnBC,SAAS,EAAE;CACX;AAED,OAAO,MAAMC,cAAc,GAC1BC,KAA2B,IACJ;EACvB,MAAM;IACLN,UAAU;IACVI,SAAS;IACTG,SAAS;IACTT,QAAQ;IACRG,WAAW;IACXC,aAAa;IACbC,YAAY;IACZ,GAAGK;EAAY,CACf,GAAGF,KAAK;EAET,MAAMG,kBAAkB,GAAG7B,CAAC,CAAC8B,GAAG,CAC/B5B,QAAQ,CAAgBwB,KAAK,EAAEf,qBAAqB,CAAC,EACrD,OAAO,EACP,EAAE,CACF;EAED,MAAMoB,aAAa,GAAG5B,WAAW,CAACe,QAAQ,EAAE,CAACP,qBAAqB,CAAC,CAAC;EAEpE,OACCb;IAAA,GAAS8B,YAAY;IAAED,SAAS,EAAEtB,EAAE,CAAC,GAAG,EAAEsB,SAAS;EAAC,GAClDI,aAAa,EACdjC,oBAACM,aAAa;IACb4B,EAAE,EAAER,SAAS;IACbS,UAAU,EAAE5B,EAAE,CAAC,qBAAqB,CAAC;IACrC6B,OAAO,EAAE,GAAG;IACZC,aAAa;EAAA,GAEbrC;IACC6B,SAAS,EAAEtB,EAAE,CAAC,qBAAqB,EAAE;MACpC,eAAe,EAAEe,UAAU;MAC3B,cAAc,EAAEA,UAAU,IAAIC,WAAW,KAAK,OAAO;MACrD,oBAAoB,EAAEC,aAAa;MACnC,iBAAiB,EAAEC;KACnB;EAAC,GAEFzB;IAAA,GAAS+B;EAAkB,EAAI,CAC1B,CACS,CACX;AAER,CAAC;AAEDJ,cAAc,CAACN,YAAY,GAAGA,YAAY;AAC1CM,cAAc,CAACZ,WAAW,GAAG,gBAAgB;AAC7CY,cAAc,CAACX,IAAI,GAAG;EACrBC,WAAW,EAAE,yLAAyL;EACtMqB,UAAU,EAAE,CAAC,SAAS;CACtB;AACDX,cAAc,CAACR,SAAS,GAAG;EAC1B;;;;EAIAO,SAAS,EAAEjB,IAAI;EAEf;;;;EAIAa,UAAU,EAAEb,IAAI;EAEhB;;;EAGAoB,SAAS,EAAEjB,MAAM;EAEjB;;;EAGAQ,QAAQ,EAAEV,IAAI;EAEd;;;EAGAa,WAAW,EAAEZ,KAAK,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;EAErC;;;;;EAKAa,aAAa,EAAEf,IAAI;EAEnB;;;;;;EAMAgB,YAAY,EAAEhB,IAAI;EAElB;;;EAGA8B,OAAO,EAAE7B;CACT;AAEDiB,cAAc,CAACY,OAAO,GAAG1B,qBAAqB;AAE9C,eAAec,cAAc","names":["React","PropTypes","_","lucidClassNames","getFirst","rejectTypes","CSSTransition","cx","bind","bool","node","oneOf","string","OverlayWrapperMessage","_props","displayName","peek","description","propName","propTypes","children","defaultProps","hasOverlay","overlayKind","anchorMessage","fixedMessage","isVisible","OverlayWrapper","props","className","passThroughs","messageElementProp","get","otherChildren","in","classNames","timeout","unmountOnExit","categories","Message"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/OverlayWrapper/OverlayWrapper.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport {\n\tgetFirst,\n\trejectTypes,\n\tStandardProps,\n} from '../../util/component-types';\nimport { CSSTransition } from 'react-transition-group';\n\nconst cx = lucidClassNames.bind('&-OverlayWrapper');\n\nconst { bool, node, oneOf, string } = PropTypes;\n\n/** Overlay Wrapper Message */\nexport interface IMessageProps extends StandardProps {}\n\nexport const OverlayWrapperMessage = (_props: IMessageProps): null => null;\nOverlayWrapperMessage.displayName = 'OverlayWrapper.Message';\nOverlayWrapperMessage.peek = {\n\tdescription: `The Message to display in the overlay.`,\n};\nOverlayWrapperMessage.propName = 'Message';\nOverlayWrapperMessage.propTypes = {\n\tchildren: node,\n};\n\n/** Overlay Wrapper */\nexport interface IOverlayWrapperProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Controls whether the message should be displayed over the wrapped content. */\n\tisVisible?: boolean;\n\n\t/** Set this to \\`false\\` if you don't want the semi-transparent overlay over\n\t * the wrapped content.\n\t *\n\t * @default true\n\t */\n\thasOverlay: boolean;\n\n\t/** Style variations for the overlay behind the message.\n\t *\n\t * @default 'light'\n\t * */\n\toverlayKind: 'light' | 'dark';\n\n\t/** By default, the OverlayMessage is vertically aligned to the middle of the\n\t *\tOverlayWrapper. Set this to true to position the `OverlayMessage` near the top of\n\t *\tthe `OverlayWrapper`.\n\t *\n\t * @default false\n\t */\n\tanchorMessage: boolean;\n\n\t/** By default, the OverlayMessage is vertically aligned to the middle of the\n\t *\tOverlayWrapper, and the `OverlayWrapper` is the height of the entire content.\n\t *\tSet this to true to position the `OverlayMessage` near the center of the\n\t *\t`OverlayWrapper`, and fix the `OverlayWrapper` to the screen height and width.\n\t *\n\t * @default false\n\t */\n\tfixedMessage: boolean;\n\n\t/** *Child Element* The Message to display in the overlay. */\n\tMessage?: React.ReactNode & { props: IMessageProps };\n}\n\nconst defaultProps = {\n\thasOverlay: true,\n\toverlayKind: 'light' as const,\n\tanchorMessage: false,\n\tfixedMessage: false,\n\tisVisible: false,\n};\n\nexport const OverlayWrapper = (\n\tprops: IOverlayWrapperProps\n): React.ReactElement => {\n\tconst {\n\t\thasOverlay,\n\t\tisVisible,\n\t\tclassName,\n\t\tchildren,\n\t\toverlayKind,\n\t\tanchorMessage,\n\t\tfixedMessage,\n\t\t...passThroughs\n\t} = props;\n\n\tconst messageElementProp = _.get(\n\t\tgetFirst<IMessageProps>(props, OverlayWrapperMessage),\n\t\t'props',\n\t\t{}\n\t);\n\n\tconst otherChildren = rejectTypes(children, [OverlayWrapperMessage]);\n\n\treturn (\n\t\t<div {...passThroughs} className={cx('&', className)}>\n\t\t\t{otherChildren}\n\t\t\t<CSSTransition\n\t\t\t\tin={isVisible}\n\t\t\t\tclassNames={cx('&-message-container')}\n\t\t\t\ttimeout={300}\n\t\t\t\tunmountOnExit\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={cx('&-message-container', {\n\t\t\t\t\t\t'&-has-overlay': hasOverlay,\n\t\t\t\t\t\t'&-kind-light': hasOverlay && overlayKind === 'light',\n\t\t\t\t\t\t'&-anchored-message': anchorMessage,\n\t\t\t\t\t\t'&-fixed-message': fixedMessage,\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t<div {...messageElementProp} />\n\t\t\t\t</div>\n\t\t\t</CSSTransition>\n\t\t</div>\n\t);\n};\n\nOverlayWrapper.defaultProps = defaultProps;\nOverlayWrapper.displayName = 'OverlayWrapper';\nOverlayWrapper.peek = {\n\tdescription: `A wrapper with optional overlay to wrap content. \\`OverlayWrapper\\` is meant to wrap another component and cover its content, while \\`Overlay\\` is meant for overlaying an entire page.`,\n\tcategories: ['utility'],\n};\nOverlayWrapper.propTypes = {\n\t/**\n\t\tControls whether the message should be displayed over the wrapped\n\t\tcontent.\n\t*/\n\tisVisible: bool,\n\n\t/**\n\t\tSet this to \\`false\\` if you don't want the semi-transparent overlay over\n\t\tthe wrapped content.\n\t*/\n\thasOverlay: bool,\n\n\t/**\n\t\tClass names that are appended to the defaults.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n\n\t/**\n\t\tStyle variations for the overlay behind the message.\n\t*/\n\toverlayKind: oneOf(['light', 'dark']),\n\n\t/**\n\t\tBy default, the \\`OverlayMessage\\` is vertically aligned to the middle of the\n\t\tOverlayWrapper. Set this to true to position the \\`OverlayMessage\\` near the top of \n\t\tthe \\`OverlayWrapper\\`.\n\t*/\n\tanchorMessage: bool,\n\n\t/**\n\t\tBy default, the OverlayMessage is vertically aligned to the middle of the\n\t\t\\`OverlayWrapper\\` and the \\`OverlayWrapper\\` is the height of the entire content.\n\t\tSet this to true to position the \\`OverlayMessage\\` near the center of the \n\t\t\\`OverlayWrapper\\`, and fix the \\`OverlayWrapper\\` to the screen height and width.\n\t*/\n\tfixedMessage: bool,\n\n\t/*\n\t *Child Element* The Message to display in the overlay.\n\t */\n\tMessage: node,\n};\n\nOverlayWrapper.Message = OverlayWrapperMessage;\n\nexport default OverlayWrapper;\n"]},"metadata":{},"sourceType":"module"}