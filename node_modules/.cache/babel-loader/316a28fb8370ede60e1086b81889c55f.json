{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getFirst } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport LoadingIndicator from '../LoadingIndicator/LoadingIndicator';\nimport OverlayWrapper, { OverlayWrapperMessage } from '../OverlayWrapper/OverlayWrapper';\nconst cx = lucidClassNames.bind('&-EmptyStateWrapper');\nconst {\n  any,\n  bool,\n  node,\n  string\n} = PropTypes;\nconst EmptyStateWrapperBody = _props => null;\nconst EmptyStateWrapperTitle = _props => null;\nconst nonPassthroughs = ['className', 'children', 'isEmpty', 'isLoading', 'anchorMessage', 'Body', 'Title', 'initialState', 'callbackId'];\nconst defaultProps = {\n  isEmpty: false,\n  isLoading: false,\n  anchorMessage: false\n};\nexport const EmptyStateWrapper = props => {\n  const {\n    children,\n    className,\n    isEmpty,\n    isLoading,\n    anchorMessage,\n    ...passThroughs\n  } = props;\n  const emptyMessageBodyProp = _.get(getFirst(props, EmptyStateWrapperBody), 'props');\n  const emptyMessageTitleProp = _.get(getFirst(props, EmptyStateWrapperTitle), 'props', {\n    children: 'You have no data.'\n  });\n  return isLoading ? React.createElement(LoadingIndicator, {\n    className: cx('&', className),\n    isLoading: true,\n    ..._.omit(passThroughs, nonPassthroughs),\n    anchorMessage: anchorMessage\n  }, children) : React.createElement(OverlayWrapper, {\n    className: cx('&', className),\n    hasOverlay: false,\n    isVisible: isEmpty,\n    anchorMessage: anchorMessage,\n    ..._.omit(passThroughs, nonPassthroughs)\n  }, React.createElement(OverlayWrapperMessage, {\n    className: cx('&-message-container')\n  }, React.createElement(\"div\", {\n    className: cx('&-message-header')\n  }), React.createElement(\"div\", {\n    className: cx('&-message-contents')\n  }, React.createElement(\"header\", {\n    ...emptyMessageTitleProp,\n    className: cx('&-message-title', emptyMessageTitleProp.className)\n  }), emptyMessageBodyProp && React.createElement(\"div\", {\n    ...emptyMessageBodyProp\n  }))), children);\n};\nEmptyStateWrapper._isPrivate = true;\nEmptyStateWrapper.peek = {\n  description: `A wrapper which can display either a \\`LoadingIndicator\\` or \\`OverlayWrapper\\`.`,\n  categories: ['utility'],\n  madeFrom: ['LoadingIndicator', 'OverlayWrapper']\n};\nEmptyStateWrapper.displayName = 'EmptyStateWrapper';\nEmptyStateWrapper.defaultProps = defaultProps;\nEmptyStateWrapper.propTypes = {\n  /**\n      Class names that are appended to the defaults.\n  */\n  className: string,\n  /**\n      Any valid React children.\n  */\n  children: node,\n  /**\n      Controls the visibility of the \\`EmptyMessage\\`.\n  */\n  isEmpty: bool,\n  /**\n      Controls the visibility of the \\`LoadingMessage\\`.\n  */\n  isLoading: bool,\n  /**\n      Position the \\`EmptyMessage\\` and \\`LoadingMessage\\` near the top of the container.\n  */\n  anchorMessage: bool,\n  /**\n   * Child Element* The element to display in the body of the overlay.\n   */\n  Body: any,\n  /**\n   * Child Element* The element to display in the title of the overlay.\n   */\n  Title: any\n};\nEmptyStateWrapperBody.displayName = 'EmptyStateWrapper.Body';\nEmptyStateWrapper.Body = EmptyStateWrapperBody;\nEmptyStateWrapperBody.peek = {\n  description: `Body content for the message to display when there is no data.`\n};\nEmptyStateWrapperBody.propName = 'Body';\nEmptyStateWrapperTitle.displayName = 'EmptyStateWrapper.Title';\nEmptyStateWrapper.Title = EmptyStateWrapperTitle;\nEmptyStateWrapperTitle.peek = {\n  description: `Title text for the message to display when there is no data.`\n};\nEmptyStateWrapperTitle.propName = 'Title';\nexport default EmptyStateWrapper;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","getFirst","lucidClassNames","LoadingIndicator","OverlayWrapper","OverlayWrapperMessage","cx","bind","any","bool","node","string","EmptyStateWrapperBody","_props","EmptyStateWrapperTitle","nonPassthroughs","defaultProps","isEmpty","isLoading","anchorMessage","EmptyStateWrapper","props","children","className","passThroughs","emptyMessageBodyProp","get","emptyMessageTitleProp","omit","hasOverlay","isVisible","_isPrivate","peek","description","categories","madeFrom","displayName","propTypes","Body","Title","propName"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/EmptyStateWrapper/EmptyStateWrapper.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getFirst, StandardProps } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport LoadingIndicator from '../LoadingIndicator/LoadingIndicator';\nimport OverlayWrapper, {\n\tOverlayWrapperMessage,\n} from '../OverlayWrapper/OverlayWrapper';\n\nconst cx = lucidClassNames.bind('&-EmptyStateWrapper');\n\nconst { any, bool, node, string } = PropTypes;\n\nexport interface IEmptyStateWrapperBodyProps extends StandardProps {}\n\nconst EmptyStateWrapperBody = (_props: IEmptyStateWrapperBodyProps): null =>\n\tnull;\n\nexport interface IEmptyStateWrapperTitleProps extends StandardProps {}\n\nconst EmptyStateWrapperTitle = (_props: IEmptyStateWrapperTitleProps): null =>\n\tnull;\n\nexport interface IEmptyStateWrapperProps extends StandardProps {\n\t/** *Child Element* The element to display in the body of the overlay. */\n\tBody?: React.ReactNode;\n\n\t/**\t*Child Element* The element to display in the title of the overlay. */\n\tTitle?: React.ReactNode | string;\n\n\t/** Controls the visibility of the \\`EmptyMessage\\`. */\n\tisEmpty: boolean;\n\n\t/** Controls the visibility of the \\`LoadingMessage\\`. */\n\tisLoading: boolean;\n\n\t/** Position the `EmptyMessage` and `LoadingMessage` near the top of the container. */\n\tanchorMessage: boolean;\n}\n\nconst nonPassthroughs = [\n\t'className',\n\t'children',\n\t'isEmpty',\n\t'isLoading',\n\t'anchorMessage',\n\t'Body',\n\t'Title',\n\t'initialState',\n\t'callbackId',\n];\n\nconst defaultProps = {\n\tisEmpty: false,\n\tisLoading: false,\n\tanchorMessage: false,\n};\n\nexport const EmptyStateWrapper = (\n\tprops: IEmptyStateWrapperProps\n): React.ReactElement => {\n\tconst {\n\t\tchildren,\n\t\tclassName,\n\t\tisEmpty,\n\t\tisLoading,\n\t\tanchorMessage,\n\t\t...passThroughs\n\t} = props;\n\n\tconst emptyMessageBodyProp = _.get(\n\t\tgetFirst(props, EmptyStateWrapperBody),\n\t\t'props'\n\t);\n\n\tconst emptyMessageTitleProp = _.get(\n\t\tgetFirst(props, EmptyStateWrapperTitle),\n\t\t'props',\n\t\t{ children: 'You have no data.' }\n\t);\n\n\treturn isLoading ? (\n\t\t<LoadingIndicator\n\t\t\tclassName={cx('&', className)}\n\t\t\tisLoading\n\t\t\t{..._.omit(passThroughs, nonPassthroughs)}\n\t\t\tanchorMessage={anchorMessage}\n\t\t>\n\t\t\t{children}\n\t\t</LoadingIndicator>\n\t) : (\n\t\t<OverlayWrapper\n\t\t\tclassName={cx('&', className)}\n\t\t\thasOverlay={false}\n\t\t\tisVisible={isEmpty}\n\t\t\tanchorMessage={anchorMessage}\n\t\t\t{..._.omit(passThroughs, nonPassthroughs)}\n\t\t>\n\t\t\t<OverlayWrapperMessage className={cx('&-message-container')}>\n\t\t\t\t<div className={cx('&-message-header')} />\n\t\t\t\t<div className={cx('&-message-contents')}>\n\t\t\t\t\t<header\n\t\t\t\t\t\t{...emptyMessageTitleProp}\n\t\t\t\t\t\tclassName={cx('&-message-title', emptyMessageTitleProp.className)}\n\t\t\t\t\t/>\n\t\t\t\t\t{emptyMessageBodyProp && <div {...emptyMessageBodyProp} />}\n\t\t\t\t</div>\n\t\t\t</OverlayWrapperMessage>\n\n\t\t\t{children}\n\t\t</OverlayWrapper>\n\t);\n};\n\nEmptyStateWrapper._isPrivate = true;\n\nEmptyStateWrapper.peek = {\n\tdescription: `A wrapper which can display either a \\`LoadingIndicator\\` or \\`OverlayWrapper\\`.`,\n\tcategories: ['utility'],\n\tmadeFrom: ['LoadingIndicator', 'OverlayWrapper'],\n};\n\nEmptyStateWrapper.displayName = 'EmptyStateWrapper';\n\nEmptyStateWrapper.defaultProps = defaultProps;\n\nEmptyStateWrapper.propTypes = {\n\t/**\n\t\tClass names that are appended to the defaults.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n\n\t/**\n\t\tControls the visibility of the \\`EmptyMessage\\`.\n\t*/\n\tisEmpty: bool,\n\n\t/**\n\t\tControls the visibility of the \\`LoadingMessage\\`.\n\t*/\n\tisLoading: bool,\n\n\t/**\n\t\tPosition the \\`EmptyMessage\\` and \\`LoadingMessage\\` near the top of the container.\n\t*/\n\tanchorMessage: bool,\n\n\t/**\n\t * Child Element* The element to display in the body of the overlay.\n\t */\n\tBody: any,\n\n\t/**\n\t * Child Element* The element to display in the title of the overlay.\n\t */\n\tTitle: any,\n};\n\nEmptyStateWrapperBody.displayName = 'EmptyStateWrapper.Body';\nEmptyStateWrapper.Body = EmptyStateWrapperBody;\nEmptyStateWrapperBody.peek = {\n\tdescription: `Body content for the message to display when there is no data.`,\n};\nEmptyStateWrapperBody.propName = 'Body';\n\nEmptyStateWrapperTitle.displayName = 'EmptyStateWrapper.Title';\nEmptyStateWrapper.Title = EmptyStateWrapperTitle;\nEmptyStateWrapperTitle.peek = {\n\tdescription: `Title text for the message to display when there is no data.`,\n};\nEmptyStateWrapperTitle.propName = 'Title';\n\nexport default EmptyStateWrapper;\n"]},"metadata":{},"sourceType":"module"}