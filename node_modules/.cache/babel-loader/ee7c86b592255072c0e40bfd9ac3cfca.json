{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-Typography');\nconst {\n  node,\n  string,\n  oneOf\n} = PropTypes;\nexport var ElementTypes;\n(function (ElementTypes) {\n  ElementTypes[\"p\"] = \"p\";\n  ElementTypes[\"tabular\"] = \"p\";\n  ElementTypes[\"h1\"] = \"h1\";\n  ElementTypes[\"h2\"] = \"h2\";\n  ElementTypes[\"h3\"] = \"h3\";\n  ElementTypes[\"a\"] = \"a\";\n  ElementTypes[\"pre\"] = \"pre\";\n  ElementTypes[\"code\"] = \"code\";\n  ElementTypes[\"kbd\"] = \"kbd\";\n  ElementTypes[\"samp\"] = \"samp\";\n  ElementTypes[\"span\"] = \"span\";\n})(ElementTypes || (ElementTypes = {}));\nconst defaultProps = {\n  variant: ElementTypes.p\n};\nexport const Typography = props => {\n  const {\n    children,\n    className,\n    variant,\n    ...passThroughs\n  } = props;\n  const Element = ElementTypes[variant ? variant : 'p'];\n  return React.createElement(Element, {\n    ...passThroughs,\n    className: cx('&', `&-${variant}`, className)\n  }, children);\n};\nTypography.defaultProps = defaultProps;\nTypography.displayName = 'Typography';\nTypography.peek = {\n  description: `A general component for several types of textual \\`HTML\\` elements.`,\n  categories: ['text']\n};\nTypography.propTypes = {\n  /**\n      Can contain elements or nested \\`Typography\\` components.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      This prop defines the type of text that will be displayed.\n      It may be an actual HTML element or something with extra semantic meaning.\n  */\n  variant: oneOf(_.keys(ElementTypes)).isRequired\n};\nexport default Typography;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,eAAe,QAAQ,0BAA0B;AAG1D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,cAAc,CAAC;AAE/C,MAAM;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAK,CAAE,GAAGN,SAAS;AAEzC,WAAYO,YAYX;AAZD,WAAYA,YAAY;EACvBA,uBAAO;EACPA,6BAAa;EACbA,yBAAS;EACTA,yBAAS;EACTA,yBAAS;EACTA,uBAAO;EACPA,2BAAW;EACXA,6BAAa;EACbA,2BAAW;EACXA,6BAAa;EACbA,6BAAa;AACd,CAAC,EAZWA,YAAY,KAAZA,YAAY;AAqBxB,MAAMC,YAAY,GAAG;EACpBC,OAAO,EAAEF,YAAY,CAACG;CACtB;AAED,OAAO,MAAMC,UAAU,GAAIC,KAAuB,IAAI;EACrD,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEL,OAAO;IAAE,GAAGM;EAAY,CAAE,GAAGH,KAAK;EAC/D,MAAMI,OAAO,GAAGT,YAAY,CAACE,OAAO,GAAGA,OAAO,GAAG,GAAG,CAAC;EAErD,OAAOV,KAAK,CAACkB,aAAa,CACzBD,OAAO,EACP;IACC,GAAGD,YAAY;IACfD,SAAS,EAAEZ,EAAE,CAAC,GAAG,EAAE,KAAKO,OAAO,EAAE,EAAEK,SAAS;GAC5C,EACDD,QAAQ,CACR;AACF,CAAC;AAEDF,UAAU,CAACH,YAAY,GAAGA,YAAY;AACtCG,UAAU,CAACO,WAAW,GAAG,YAAY;AACrCP,UAAU,CAACQ,IAAI,GAAG;EACjBC,WAAW,EAAE,qEAAqE;EAClFC,UAAU,EAAE,CAAC,MAAM;CACnB;AACDV,UAAU,CAACW,SAAS,GAAG;EACtB;;;EAGAT,QAAQ,EAAET,IAAI;EAEd;;;EAGAU,SAAS,EAAET,MAAM;EAEjB;;;;EAIAI,OAAO,EAAEH,KAAK,CAACR,CAAC,CAACyB,IAAI,CAAChB,YAAY,CAAC,CAAC,CAACiB;CACrC;AAED,eAAeb,UAAU","names":["_","React","PropTypes","lucidClassNames","cx","bind","node","string","oneOf","ElementTypes","defaultProps","variant","p","Typography","props","children","className","passThroughs","Element","createElement","displayName","peek","description","categories","propTypes","keys","isRequired"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Typography/Typography.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Typography');\n\nconst { node, string, oneOf } = PropTypes;\n\nexport enum ElementTypes {\n\tp = 'p',\n\ttabular = 'p',\n\th1 = 'h1',\n\th2 = 'h2',\n\th3 = 'h3',\n\ta = 'a',\n\tpre = 'pre',\n\tcode = 'code',\n\tkbd = 'kbd',\n\tsamp = 'samp',\n\tspan = 'span',\n}\n\nexport interface ITypographyProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {\n\t/** This prop defines the type of text that will be displayed. It may be an actual HTML element or something with extra semantic meaning. */\n\tvariant: keyof typeof ElementTypes;\n}\n\nconst defaultProps = {\n\tvariant: ElementTypes.p,\n};\n\nexport const Typography = (props: ITypographyProps) => {\n\tconst { children, className, variant, ...passThroughs } = props;\n\tconst Element = ElementTypes[variant ? variant : 'p'];\n\n\treturn React.createElement(\n\t\tElement,\n\t\t{\n\t\t\t...passThroughs,\n\t\t\tclassName: cx('&', `&-${variant}`, className),\n\t\t},\n\t\tchildren\n\t);\n};\n\nTypography.defaultProps = defaultProps;\nTypography.displayName = 'Typography';\nTypography.peek = {\n\tdescription: `A general component for several types of textual \\`HTML\\` elements.`,\n\tcategories: ['text'],\n};\nTypography.propTypes = {\n\t/**\n\t\tCan contain elements or nested \\`Typography\\` components.\n\t*/\n\tchildren: node,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tThis prop defines the type of text that will be displayed.\n\t\tIt may be an actual HTML element or something with extra semantic meaning.\n\t*/\n\tvariant: oneOf(_.keys(ElementTypes)).isRequired,\n};\n\nexport default Typography;\n"]},"metadata":{},"sourceType":"module"}