{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { findTypes, getFirst } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { partitionText, propsSearch } from '../../util/text-manipulation';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './SearchableSelect.reducers';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport { DropMenuDumb as DropMenu } from '../DropMenu/DropMenu';\nimport LoadingIcon from '../Icon/LoadingIcon/LoadingIcon';\nimport { SearchFieldDumb as SearchField } from '../SearchField/SearchField';\nimport { Validation } from '../Validation/Validation';\nconst cx = lucidClassNames.bind('&-SearchableSelect');\nconst {\n  any,\n  bool,\n  func,\n  node,\n  number,\n  object,\n  shape,\n  string,\n  oneOfType\n} = PropTypes;\nconst Placeholder = _props => null;\nPlaceholder.displayName = 'SearchableSelect.Placeholder';\nPlaceholder.peek = {\n  description: `The content rendered in the control when there is no option is selected. Also rendered in the option list to remove current selection.`\n};\nPlaceholder.propName = 'Placeholder';\nPlaceholder.propTypes = {};\n/** OptionGroup Child Component */\nconst OptionGroup = _props => null;\nOptionGroup.displayName = 'SearchableSelect.OptionGroup';\nOptionGroup.peek = {\n  description: `A special kind of \\`Option\\` that is always rendered at the top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for unselect.`\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\n/** Option.Selected Child Component */\nconst Selected = _props => null;\nSelected.displayName = 'SearchableSelect.Option.Selected';\nSelected.peek = {\n  description: `Customizes the rendering of the \\`Option\\` when it is selected and is displayed instead of the \\`Placeholder\\`.`\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\n/** Option Child Component */\nconst Option = _props => null;\nOption.displayName = 'SearchableSelect.Option';\nOption.peek = {\n  description: `A selectable option in the list.`\n};\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n  /**\n      Customizes the rendering of the Option when it is selected and is\n      displayed instead of the Placeholder.\n  */\n  Selected: any,\n  value: string,\n  filterText: string,\n  ...DropMenu.Option.propTypes\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\nconst defaultProps = {\n  hasReset: true,\n  isSelectionHighlighted: true,\n  isDisabled: false,\n  isInvisible: false,\n  isLoading: false,\n  optionFilter: propsSearch,\n  searchText: '',\n  selectedIndex: null,\n  DropMenu: DropMenu.defaultProps,\n  Error: null,\n  onSearch: _.noop,\n  onSelect: _.noop\n};\n/** SearchableSelect Component */\nclass SearchableSelect extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.UNSAFE_componentWillReceiveProps = nextProps => {\n      // only preprocess options data when it changes (via new props) - better performance than doing this each render\n      const {\n        optionGroups,\n        flattenedOptionsData,\n        ungroupedOptionData,\n        optionGroupDataLookup\n      } = DropMenu.preprocessOptionData(nextProps, SearchableSelect);\n      this.setState({\n        optionGroups,\n        flattenedOptionsData,\n        ungroupedOptionData,\n        optionGroupDataLookup\n      });\n    };\n    this.handleSearch = searchText => {\n      const {\n        props: {\n          onSearch,\n          optionFilter\n        }\n      } = this;\n      const {\n        flattenedOptionsData\n      } = this.state;\n      const firstVisibleIndex = _.get(_.find(flattenedOptionsData, _ref => {\n        let {\n          optionProps\n        } = _ref;\n        return optionFilter(searchText, optionProps);\n      }), 'optionIndex');\n      onSearch(searchText, firstVisibleIndex);\n    };\n    this.handleExpand = _ref2 => {\n      let {\n        props,\n        event\n      } = _ref2;\n      const dropMenuProps = this.props.DropMenu;\n      dropMenuProps.onExpand && dropMenuProps.onExpand({\n        event,\n        props: props\n      });\n      this.setState({\n        isFocusOnSearchFieldRequired: true\n      });\n    };\n    this.setSearchField = e => {\n      if (e && this.state.isFocusOnSearchFieldRequired) {\n        this.setState({\n          isFocusOnSearchFieldRequired: false\n        });\n        // use setTimeout to prevent scroll from safari\n        setTimeout(() => {\n          e.focus({\n            preventScroll: true\n          });\n        }, 0);\n      }\n    };\n    this.renderUnderlinedChildren = (childText, searchText) => {\n      const [pre, match, post] = partitionText(childText, new RegExp(_.escapeRegExp(searchText), 'i'), searchText.length);\n      return [pre && React.createElement(\"span\", {\n        key: 'pre',\n        className: cx('&-Option-underline-pre')\n      }, pre), match && React.createElement(\"span\", {\n        key: 'match',\n        className: cx('&-Option-underline-match')\n      }, match), post && React.createElement(\"span\", {\n        key: 'post',\n        className: cx('&-Option-underline-post')\n      }, post)];\n    };\n    this.renderOption = (optionProps, optionIndex) => {\n      const {\n        isLoading,\n        optionFilter,\n        searchText\n      } = this.props;\n      if (searchText) {\n        return React.createElement(DropMenu.Option, {\n          isDisabled: isLoading,\n          ..._.omit(optionProps, ['children', 'Selected', 'filterText']),\n          isHidden: !optionFilter(searchText, optionProps),\n          key: 'SearchableSelectOption' + optionIndex\n        }, _.isString(optionProps.children) ? this.renderUnderlinedChildren(optionProps.children, searchText) : _.isFunction(optionProps.children) ? React.createElement(optionProps.children, {\n          searchText\n        }) : optionProps.children);\n      }\n      return React.createElement(DropMenu.Option, {\n        key: 'SearchableSelectOption' + optionIndex,\n        ..._.omit(optionProps, ['children', 'Selected', 'filterText']),\n        isDisabled: optionProps.isDisabled || isLoading\n      }, _.isFunction(optionProps.children) ? React.createElement(optionProps.children, {\n        searchText\n      }) : optionProps.children);\n    };\n  }\n  UNSAFE_componentWillMount() {\n    // preprocess the options data before rendering\n    const {\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    } = DropMenu.preprocessOptionData(this.props, SearchableSelect);\n    this.setState({\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    });\n  }\n  renderOptions() {\n    const {\n      searchText\n    } = this.props;\n    const {\n      optionGroups,\n      optionGroupDataLookup,\n      ungroupedOptionData\n    } = this.state;\n    // for each option group passed in, render a DropMenu.OptionGroup, any\n    // label will be included in it's children, render each option inside the\n    // group\n    const options = _.map(optionGroups, (optionGroupProps, optionGroupIndex) => {\n      const childOptions = _.map(_.get(optionGroupDataLookup, optionGroupIndex), _ref3 => {\n        let {\n          optionProps,\n          optionIndex\n        } = _ref3;\n        return this.renderOption(optionProps, optionIndex);\n      });\n      const visibleChildrenCount = _.filter(childOptions, option => !option.props.isHidden).length;\n      return React.createElement(DropMenu.OptionGroup, {\n        isHidden: visibleChildrenCount === 0,\n        key: 'SearchableSelectOptionGroup' + optionGroupIndex,\n        ...optionGroupProps\n      }, optionGroupProps.children, childOptions);\n      // then render all the ungrouped options at the end\n    }).concat(_.map(ungroupedOptionData, _ref4 => {\n      let {\n        optionProps,\n        optionIndex\n      } = _ref4;\n      return this.renderOption(optionProps, optionIndex);\n    }));\n    const visibleOptionsCount = _.filter(options, option => !option.props.isHidden).length;\n    return visibleOptionsCount > 0 ? options : React.createElement(DropMenu.Option, {\n      isDisabled: true\n    }, React.createElement(\"span\", {\n      className: cx('&-noresults')\n    }, \"No results match \\\"\", searchText, \"\\\"\"));\n  }\n  render() {\n    const {\n      props,\n      props: {\n        style,\n        className,\n        hasReset,\n        isDisabled,\n        isInvisible,\n        isLoading,\n        isSelectionHighlighted,\n        maxMenuHeight,\n        searchText,\n        selectedIndex,\n        onSelect,\n        DropMenu: dropMenuProps\n      }\n    } = this;\n    const {\n      direction,\n      optionContainerStyle,\n      isExpanded\n    } = dropMenuProps;\n    const {\n      flattenedOptionsData\n    } = this.state;\n    const searchFieldProps = _.get(getFirst(props, SearchField) || React.createElement(SearchField, {\n      placeholder: 'Search...'\n    }), 'props');\n    const placeholderProps = _.first(_.map(findTypes(this.props, SearchableSelect.Placeholder), 'props'));\n    const errorChildProps = _.first(_.map(findTypes(props, Validation.Error), 'props'));\n    const placeholder = _.get(placeholderProps, 'children', 'Select');\n    const isItemSelected = _.isNumber(selectedIndex);\n    return React.createElement(\"div\", {\n      className: cx('&', className),\n      style: style\n    }, React.createElement(DropMenu, {\n      ...dropMenuProps,\n      optionContainerStyle: _.assign({}, optionContainerStyle, !_.isNil(maxMenuHeight) ? {\n        maxHeight: maxMenuHeight\n      } : null),\n      isDisabled: isDisabled,\n      onSelect: onSelect,\n      selectedIndices: _.isNumber(selectedIndex) ? [selectedIndex] : [],\n      onExpand: this.handleExpand\n    }, React.createElement(DropMenu.Control, null, React.createElement(\"div\", {\n      tabIndex: 0,\n      className: cx('&-Control', {\n        '&-Control-is-highlighted': !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted,\n        '&-Control-is-selected': !isDisabled && isItemSelected && isSelectionHighlighted && !(errorChildProps && errorChildProps.children),\n        '&-Control-is-expanded': isExpanded,\n        '&-Control-is-invisible': isInvisible,\n        '&-Control-is-disabled': isDisabled,\n        '&-Control-is-error': errorChildProps && errorChildProps.children\n      })\n    }, React.createElement(\"span\", {\n      ...(!isItemSelected ? placeholderProps : null),\n      className: cx('&-Control-content', !isItemSelected ? _.get(placeholderProps, 'className') : null)\n    }, _.isNumber(selectedIndex) ? _.get(getFirst(flattenedOptionsData[selectedIndex].optionProps, SearchableSelect.Option.Selected), 'props.children') || (Children => _.isFunction(Children) ? React.createElement(Children, null) : Children)(flattenedOptionsData[selectedIndex].optionProps.children) : placeholder), React.createElement(ChevronIcon, {\n      size: 12,\n      direction: isExpanded ? direction : 'down'\n    }))), React.createElement(DropMenu.Header, {\n      className: cx('&-Search-container')\n    }, React.createElement(SearchField, {\n      ...searchFieldProps,\n      autoComplete: searchFieldProps.autoComplete || 'off',\n      onChange: this.handleSearch,\n      value: searchText,\n      ref: this.setSearchField\n    })), isLoading && React.createElement(DropMenu.Option, {\n      key: 'SearchableSelectLoading',\n      className: cx('&-Loading'),\n      isDisabled: true\n    }, React.createElement(LoadingIcon, null)), hasReset && isItemSelected && React.createElement(DropMenu.NullOption, {\n      ...placeholderProps\n    }, placeholder), this.renderOptions()), errorChildProps && errorChildProps.children && errorChildProps.children !== true ? React.createElement(\"div\", {\n      ..._.omit(errorChildProps, ['initialState', 'callbackId']),\n      className: cx('&-error-content')\n    }, errorChildProps.children) : null);\n  }\n}\nSearchableSelect.displayName = 'SearchableSelect';\nSearchableSelect.peek = {\n  description: `A selector control (like native \\`<select>\\`) which is used to select a single option from a dropdown list using a \\`SearchField\\`. Supports option groups with and without labels.`,\n  categories: ['controls', 'selectors'],\n  madeFrom: ['DropMenu', 'SearchField']\n};\nSearchableSelect.defaultProps = defaultProps;\nSearchableSelect.reducers = reducers;\nSearchableSelect.Placeholder = Placeholder;\nSearchableSelect.Option = Option;\nSearchableSelect.OptionGroup = OptionGroup;\nSearchableSelect.SearchField = SearchField;\nSearchableSelect.NullOption = DropMenu.NullOption;\nSearchableSelect.FixedOption = DropMenu.FixedOption;\nSearchableSelect.propTypes = {\n  /**\n      Should be instances of {\\`SearchableSelect.Placeholder\\`,\n      \\`SearchableSelect.Option\\`, \\`SearchableSelect.OptionGroup\\`}. Other\n      direct child elements will not render.\n  */\n  children: node,\n  className: string /**\n                    Appended to the component-specific class names set on the root elements.\n                    Applies to *both* the control and the flyout menu.\n                    */,\n\n  /**\n      Styles that are passed through to root element.\n  */\n  style: object,\n  /**\n      Allows user to reset the \\`optionIndex\\` to \\`null\\` if they select the\n      placeholder at the top of the options list.  If \\`false\\`, it will not\n      render the placeholder in the menu.\n  */\n  hasReset: bool,\n  /**\n      Disables the SearchableSelect from being clicked or focused.\n  */\n  isDisabled: bool,\n  /**\n      The SearchableSelect will be invisible.\n  */\n  isInvisible: bool,\n  /**\n      Displays a centered LoadingIcon to allow for asynchronous loading of\n      options.\n  */\n  isLoading: bool,\n  /**\n      Applies primary color styling to the control when an item is selected.\n  */\n  isSelectionHighlighted: bool,\n  /**\n      The max height of the fly-out menu.\n  */\n  maxMenuHeight: oneOfType([number, string]),\n  onSearch: func /**\n                 Called when the user enters a value to search for; the set of visible\n                 Options will be filtered using the value.  Has the signature\n                 \\`(searchText, firstVisibleIndex, {props, event}) => {}\\` where\n                 \\`searchText\\` is the value from the \\`SearchField\\` and\n                 \\`firstVisibleIndex\\` is the index of the first option that will be\n                 visible after filtering.\n                 */,\n\n  /**\n      Called when an option is selected.  Has the signature\n      \\`(optionIndex, {props, event}) => {}\\` where \\`optionIndex\\` is the new\n      \\`selectedIndex\\` or \\`null\\`.\n  */\n  onSelect: func,\n  /**\n      The function that will be run against each Option's props to determine\n      whether it should be visible or not. The default behavior of the function\n      is to match, ignoring case, against any text node descendant of the\n      \\`Option\\`.  Has the signature \\`(searchText, optionProps)\\` If \\`true\\`,\n      option will be visible. If \\`false\\`, the option will not be visible.\n  */\n  optionFilter: func,\n  /**\n      The current search text to filter the list of options by.\n  */\n  searchText: string,\n  /**\n      The currently selected \\`SearchableSelect.Option\\` index or \\`null\\` if\n      nothing is selected.\n  */\n  selectedIndex: number,\n  /**\n      Object of DropMenu props which are passed thru to the underlying DropMenu\n      component.\n  */\n  DropMenu: shape(DropMenu.propTypes),\n  Placeholder: any /**\n                   *Child Element* - The content rendered in the control when there is no\n                   option is selected. Also rendered in the option list to remove current\n                   selection.\n                   */,\n  Option: any /**\n              *Child Element* - These are menu options. The \\`optionIndex\\` is in-order\n              of rendering regardless of group nesting, starting with index \\`0\\`.\n              Each \\`Option\\` may be passed a prop called \\`isDisabled\\` to disable\n              selection of that \\`Option\\`.  Any other props pass to Option will be\n              available from the \\`onSelect\\` handler.\n              */,\n  FixedOption: any /**\n                   *Child Element* - A special kind of \\`Option\\` that is always rendered at the top of\n                   the menu.\n                   */,\n  NullOption: any /**\n                  *Child Element* - A special kind of \\`Option\\` that is always rendered at\n                  the top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n                  unselect.\n                  */,\n  OptionGroup: any /**\n                   *Child Element* - Used to group \\`Option\\`s within the menu. Any\n                   non-\\`Option\\`s passed in will be rendered as a label for the group.\n                   */,\n\n  /**\n      In most cases this will be a string, but it also accepts any valid React\n      element. If this is a falsey value, then no error message will be\n      displayed.  If this is the literal \\`true\\`, it will add the\n      \\`-is-error\\` class to the wrapper div, but not render the\n      \\`-error-content\\` \\`div\\`.\n  */\n  Error: any\n};\nexport default buildModernHybridComponent(SearchableSelect, {\n  reducers\n});\nexport { SearchableSelect as SearchableSelectDumb };","map":{"version":3,"mappings":"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","names":["React","PropTypes","_","findTypes","getFirst","lucidClassNames","partitionText","propsSearch","buildModernHybridComponent","reducers","ChevronIcon","DropMenuDumb","DropMenu","LoadingIcon","SearchFieldDumb","SearchField","Validation","cx","bind","any","bool","func","node","number","object","shape","string","oneOfType","Placeholder","_props","displayName","peek","description","propName","propTypes","OptionGroup","defaultProps","Selected","Option","value","filterText","hasReset","isSelectionHighlighted","isDisabled","isInvisible","isLoading","optionFilter","searchText","selectedIndex","Error","onSearch","noop","onSelect","SearchableSelect","Component","constructor","nextProps","optionGroups","flattenedOptionsData","ungroupedOptionData","optionGroupDataLookup","preprocessOptionData","setState","props","state","firstVisibleIndex","get","find","optionProps","event","dropMenuProps","onExpand","isFocusOnSearchFieldRequired","e","setTimeout","focus","preventScroll","childText","pre","match","post","RegExp","escapeRegExp","length","key","className","optionIndex","omit","isHidden","isString","children","renderUnderlinedChildren","isFunction","createElement","UNSAFE_componentWillMount","renderOptions","options","map","optionGroupProps","optionGroupIndex","childOptions","renderOption","visibleChildrenCount","filter","option","concat","visibleOptionsCount","render","style","maxMenuHeight","direction","optionContainerStyle","isExpanded","searchFieldProps","placeholder","placeholderProps","first","errorChildProps","isItemSelected","isNumber","assign","isNil","maxHeight","selectedIndices","handleExpand","Control","tabIndex","Children","size","Header","autoComplete","onChange","handleSearch","ref","setSearchField","NullOption","categories","madeFrom","FixedOption","SearchableSelectDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SearchableSelect/SearchableSelect.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport { StandardProps, findTypes, getFirst } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { partitionText, propsSearch } from '../../util/text-manipulation';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './SearchableSelect.reducers';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport {\n\tDropMenuDumb as DropMenu,\n\tIDropMenuOptionProps,\n\tIDropMenuOptionGroupProps,\n\tIDropMenuProps,\n\tIDropMenuState,\n\tIOptionsData,\n} from '../DropMenu/DropMenu';\nimport LoadingIcon from '../Icon/LoadingIcon/LoadingIcon';\nimport { SearchFieldDumb as SearchField } from '../SearchField/SearchField';\nimport { Validation } from '../Validation/Validation';\n\nconst cx = lucidClassNames.bind('&-SearchableSelect');\n\nconst { any, bool, func, node, number, object, shape, string, oneOfType } =\n\tPropTypes;\n\n/** Placeholder Child Component */\nexport interface ISearchableSelectPlaceholderProps extends StandardProps {\n\tdescription?: string;\n}\n\nconst Placeholder = (_props: ISearchableSelectPlaceholderProps): null => null;\nPlaceholder.displayName = 'SearchableSelect.Placeholder';\nPlaceholder.peek = {\n\tdescription: `The content rendered in the control when there is no option is selected. Also rendered in the option list to remove current selection.`,\n};\nPlaceholder.propName = 'Placeholder';\nPlaceholder.propTypes = {};\n\n/** OptionGroup Child Component */\nconst OptionGroup = (_props: IDropMenuOptionGroupProps): null => null;\nOptionGroup.displayName = 'SearchableSelect.OptionGroup';\nOptionGroup.peek = {\n\tdescription: `A special kind of \\`Option\\` that is always rendered at the top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for unselect.`,\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\n\nexport interface ISearchableSelectOptionProps extends IDropMenuOptionProps {\n\tdescription?: string;\n\tname?: string;\n\tSelected?: React.ReactNode;\n}\n\n/** Option.Selected Child Component */\nconst Selected = (_props: { children?: React.ReactNode }): null => null;\n\nSelected.displayName = 'SearchableSelect.Option.Selected';\nSelected.peek = {\n\tdescription: `Customizes the rendering of the \\`Option\\` when it is selected and is displayed instead of the \\`Placeholder\\`.`,\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\n\n/** Option Child Component */\nconst Option = (_props: ISearchableSelectOptionProps): null => null;\n\nOption.displayName = 'SearchableSelect.Option';\nOption.peek = {\n\tdescription: `A selectable option in the list.`,\n};\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n\t/**\n\t\tCustomizes the rendering of the Option when it is selected and is\n\t\tdisplayed instead of the Placeholder.\n\t*/\n\tSelected: any,\n\tvalue: string,\n\tfilterText: string,\n\t...DropMenu.Option.propTypes,\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\n\n/** Searchable Select */\ntype ISearchableSelectDropMenuProps = Partial<IDropMenuProps>;\n\nexport interface ISearchableSelectProps extends StandardProps {\n\thasReset: boolean;\n\tisDisabled: boolean;\n\tisInvisible: boolean;\n\tisLoading: boolean;\n\tisSelectionHighlighted: boolean;\n\tmaxMenuHeight?: string | number;\n\tselectedIndex: number | null;\n\tsearchText: string;\n\tDropMenu: ISearchableSelectDropMenuProps;\n\tPlaceholder?: React.ReactNode;\n\tOption?: React.ReactNode;\n\tOptionGroup?: IDropMenuOptionGroupProps;\n\tError: React.ReactNode;\n\t/** Called when an option is clicked, or when an option has focus and the\n\t\tEnter key is pressed. */\n\tonSelect: (\n\t\toptionIndex: number | null,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: IDropMenuOptionProps | undefined;\n\t\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\t}\n\t) => void;\n\n\tonSearch: (searchText: string, firstVisibleIndex: number | undefined) => void;\n\n\toptionFilter: (searchValue: string, props: any) => boolean;\n}\n\nexport interface ISearchableSelectState {\n\tDropMenu: IDropMenuState;\n\tselectedIndex: number | null;\n\tsearchText: string | null;\n\toptionGroups: IDropMenuOptionGroupProps[];\n\tflattenedOptionsData: IOptionsData[];\n\tungroupedOptionData: IOptionsData[];\n\toptionGroupDataLookup: { [key: number]: IOptionsData[] };\n\tisFocusOnSearchFieldRequired: boolean;\n}\n\nconst defaultProps = {\n\thasReset: true,\n\tisSelectionHighlighted: true,\n\tisDisabled: false,\n\tisInvisible: false,\n\tisLoading: false,\n\toptionFilter: propsSearch,\n\tsearchText: '',\n\tselectedIndex: null,\n\tDropMenu: DropMenu.defaultProps,\n\tError: null,\n\tonSearch: _.noop,\n\tonSelect: _.noop,\n};\n\n/** SearchableSelect Component */\nclass SearchableSelect extends React.Component<\n\tISearchableSelectProps,\n\tISearchableSelectState\n> {\n\tstatic displayName = 'SearchableSelect';\n\tstatic peek = {\n\t\tdescription: `A selector control (like native \\`<select>\\`) which is used to select a single option from a dropdown list using a \\`SearchField\\`. Supports option groups with and without labels.`,\n\t\tcategories: ['controls', 'selectors'],\n\t\tmadeFrom: ['DropMenu', 'SearchField'],\n\t};\n\n\tstatic defaultProps = defaultProps;\n\tstatic reducers = reducers;\n\tstatic Placeholder = Placeholder;\n\tstatic Option = Option;\n\tstatic OptionGroup = OptionGroup;\n\tstatic SearchField = SearchField;\n\tstatic NullOption = DropMenu.NullOption;\n\tstatic FixedOption = DropMenu.FixedOption;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tShould be instances of {\\`SearchableSelect.Placeholder\\`,\n\t\t\t\\`SearchableSelect.Option\\`, \\`SearchableSelect.OptionGroup\\`}. Other\n\t\t\tdirect child elements will not render.\n\t\t*/\n\t\tchildren: node,\n\n\t\tclassName: string /**\n\t\t\tAppended to the component-specific class names set on the root elements.\n\t\t\tApplies to *both* the control and the flyout menu.\n\t\t*/,\n\n\t\t/**\n\t\t\tStyles that are passed through to root element.\n\t\t*/\n\t\tstyle: object,\n\n\t\t/**\n\t\t\tAllows user to reset the \\`optionIndex\\` to \\`null\\` if they select the\n\t\t\tplaceholder at the top of the options list.  If \\`false\\`, it will not\n\t\t\trender the placeholder in the menu.\n\t\t*/\n\t\thasReset: bool,\n\n\t\t/**\n\t\t\tDisables the SearchableSelect from being clicked or focused.\n\t\t*/\n\t\tisDisabled: bool,\n\n\t\t/**\n\t\t\tThe SearchableSelect will be invisible.\n\t\t*/\n\t\tisInvisible: bool,\n\n\t\t/**\n\t\t\tDisplays a centered LoadingIcon to allow for asynchronous loading of\n\t\t\toptions.\n\t\t*/\n\t\tisLoading: bool,\n\n\t\t/**\n\t\t\tApplies primary color styling to the control when an item is selected.\n\t\t*/\n\t\tisSelectionHighlighted: bool,\n\n\t\t/**\n\t\t\tThe max height of the fly-out menu.\n\t\t*/\n\t\tmaxMenuHeight: oneOfType([number, string]),\n\n\t\tonSearch: func /**\n\t\t\tCalled when the user enters a value to search for; the set of visible\n\t\t\tOptions will be filtered using the value.  Has the signature\n\t\t\t\\`(searchText, firstVisibleIndex, {props, event}) => {}\\` where\n\t\t\t\\`searchText\\` is the value from the \\`SearchField\\` and\n\t\t\t\\`firstVisibleIndex\\` is the index of the first option that will be\n\t\t\tvisible after filtering.\n\t\t*/,\n\n\t\t/**\n\t\t\tCalled when an option is selected.  Has the signature\n\t\t\t\\`(optionIndex, {props, event}) => {}\\` where \\`optionIndex\\` is the new\n\t\t\t\\`selectedIndex\\` or \\`null\\`.\n\t\t*/\n\t\tonSelect: func,\n\n\t\t/**\n\t\t\tThe function that will be run against each Option's props to determine\n\t\t\twhether it should be visible or not. The default behavior of the function\n\t\t\tis to match, ignoring case, against any text node descendant of the\n\t\t\t\\`Option\\`.  Has the signature \\`(searchText, optionProps)\\` If \\`true\\`,\n\t\t\toption will be visible. If \\`false\\`, the option will not be visible.\n\t\t*/\n\t\toptionFilter: func,\n\n\t\t/**\n\t\t\tThe current search text to filter the list of options by.\n\t\t*/\n\t\tsearchText: string,\n\n\t\t/**\n\t\t\tThe currently selected \\`SearchableSelect.Option\\` index or \\`null\\` if\n\t\t\tnothing is selected.\n\t\t*/\n\t\tselectedIndex: number,\n\n\t\t/**\n\t\t\tObject of DropMenu props which are passed thru to the underlying DropMenu\n\t\t\tcomponent.\n\t\t*/\n\t\tDropMenu: shape(DropMenu.propTypes),\n\n\t\tPlaceholder: any /**\n\t\t\t*Child Element* - The content rendered in the control when there is no\n\t\t\toption is selected. Also rendered in the option list to remove current\n\t\t\tselection.\n\t\t*/,\n\n\t\tOption: any /**\n\t\t\t*Child Element* - These are menu options. The \\`optionIndex\\` is in-order\n\t\t\tof rendering regardless of group nesting, starting with index \\`0\\`.\n\t\t\tEach \\`Option\\` may be passed a prop called \\`isDisabled\\` to disable\n\t\t\tselection of that \\`Option\\`.  Any other props pass to Option will be\n\t\t\tavailable from the \\`onSelect\\` handler.\n\t\t*/,\n\n\t\tFixedOption: any /**\n\t\t\t*Child Element* - A special kind of \\`Option\\` that is always rendered at the top of\n\t\t\tthe menu.\n\t\t*/,\n\n\t\tNullOption: any /**\n\t\t\t*Child Element* - A special kind of \\`Option\\` that is always rendered at\n\t\t\tthe top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n\t\t\tunselect.\n\t\t*/,\n\n\t\tOptionGroup: any /**\n\t\t\t*Child Element* - Used to group \\`Option\\`s within the menu. Any\n\t\t\tnon-\\`Option\\`s passed in will be rendered as a label for the group.\n\t\t*/,\n\n\t\t/**\n\t\t\tIn most cases this will be a string, but it also accepts any valid React\n\t\t\telement. If this is a falsey value, then no error message will be\n\t\t\tdisplayed.  If this is the literal \\`true\\`, it will add the\n\t\t\t\\`-is-error\\` class to the wrapper div, but not render the\n\t\t\t\\`-error-content\\` \\`div\\`.\n\t\t*/\n\t\tError: any,\n\t};\n\n\tUNSAFE_componentWillMount() {\n\t\t// preprocess the options data before rendering\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(this.props, SearchableSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t}\n\n\tUNSAFE_componentWillReceiveProps = (nextProps: ISearchableSelectProps) => {\n\t\t// only preprocess options data when it changes (via new props) - better performance than doing this each render\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(nextProps, SearchableSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t};\n\n\thandleSearch = (searchText: string) => {\n\t\tconst {\n\t\t\tprops: { onSearch, optionFilter },\n\t\t} = this;\n\n\t\tconst { flattenedOptionsData } = this.state;\n\n\t\tconst firstVisibleIndex = _.get(\n\t\t\t_.find(flattenedOptionsData, ({ optionProps }) => {\n\t\t\t\treturn optionFilter(searchText, optionProps);\n\t\t\t}),\n\t\t\t'optionIndex'\n\t\t);\n\n\t\tonSearch(searchText, firstVisibleIndex);\n\t};\n\n\thandleExpand = ({\n\t\tprops,\n\t\tevent,\n\t}: {\n\t\tprops: IDropMenuProps;\n\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t}): void => {\n\t\tconst dropMenuProps = this.props.DropMenu;\n\t\tdropMenuProps.onExpand && dropMenuProps.onExpand({ event, props: props });\n\t\tthis.setState({ isFocusOnSearchFieldRequired: true });\n\t};\n\n\tsetSearchField = (e: SearchField) => {\n\t\tif (e && this.state.isFocusOnSearchFieldRequired) {\n\t\t\tthis.setState({ isFocusOnSearchFieldRequired: false });\n\t\t\t// use setTimeout to prevent scroll from safari\n\t\t\tsetTimeout(() => {\n\t\t\t\te.focus({ preventScroll: true });\n\t\t\t}, 0);\n\t\t}\n\t};\n\n\trenderUnderlinedChildren = (childText: string, searchText: string) => {\n\t\tconst [pre, match, post] = partitionText(\n\t\t\tchildText,\n\t\t\tnew RegExp(_.escapeRegExp(searchText), 'i'),\n\t\t\tsearchText.length\n\t\t);\n\n\t\treturn [\n\t\t\tpre && (\n\t\t\t\t<span key='pre' className={cx('&-Option-underline-pre')}>\n\t\t\t\t\t{pre}\n\t\t\t\t</span>\n\t\t\t),\n\t\t\tmatch && (\n\t\t\t\t<span key='match' className={cx('&-Option-underline-match')}>\n\t\t\t\t\t{match}\n\t\t\t\t</span>\n\t\t\t),\n\t\t\tpost && (\n\t\t\t\t<span key='post' className={cx('&-Option-underline-post')}>\n\t\t\t\t\t{post}\n\t\t\t\t</span>\n\t\t\t),\n\t\t];\n\t};\n\n\trenderOption = (optionProps: IDropMenuOptionProps, optionIndex: number) => {\n\t\tconst { isLoading, optionFilter, searchText } = this.props;\n\n\t\tif (searchText) {\n\t\t\treturn (\n\t\t\t\t<DropMenu.Option\n\t\t\t\t\tisDisabled={isLoading}\n\t\t\t\t\t{..._.omit(optionProps, ['children', 'Selected', 'filterText'])}\n\t\t\t\t\tisHidden={!optionFilter(searchText, optionProps)}\n\t\t\t\t\tkey={'SearchableSelectOption' + optionIndex}\n\t\t\t\t>\n\t\t\t\t\t{_.isString(optionProps.children)\n\t\t\t\t\t\t? this.renderUnderlinedChildren(optionProps.children, searchText)\n\t\t\t\t\t\t: _.isFunction(optionProps.children)\n\t\t\t\t\t\t? React.createElement(optionProps.children, { searchText })\n\t\t\t\t\t\t: optionProps.children}\n\t\t\t\t</DropMenu.Option>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<DropMenu.Option\n\t\t\t\tkey={'SearchableSelectOption' + optionIndex}\n\t\t\t\t{..._.omit(optionProps, ['children', 'Selected', 'filterText'])}\n\t\t\t\tisDisabled={optionProps.isDisabled || isLoading}\n\t\t\t>\n\t\t\t\t{_.isFunction(optionProps.children)\n\t\t\t\t\t? React.createElement(optionProps.children, { searchText })\n\t\t\t\t\t: optionProps.children}\n\t\t\t</DropMenu.Option>\n\t\t);\n\t};\n\n\trenderOptions() {\n\t\tconst { searchText } = this.props;\n\n\t\tconst { optionGroups, optionGroupDataLookup, ungroupedOptionData } =\n\t\t\tthis.state;\n\n\t\t// for each option group passed in, render a DropMenu.OptionGroup, any\n\t\t// label will be included in it's children, render each option inside the\n\t\t// group\n\t\tconst options = _.map(\n\t\t\toptionGroups,\n\t\t\t(optionGroupProps, optionGroupIndex) => {\n\t\t\t\tconst childOptions = _.map(\n\t\t\t\t\t_.get(optionGroupDataLookup, optionGroupIndex),\n\t\t\t\t\t({ optionProps, optionIndex }) =>\n\t\t\t\t\t\tthis.renderOption(optionProps, optionIndex)\n\t\t\t\t);\n\t\t\t\tconst visibleChildrenCount = _.filter(\n\t\t\t\t\tchildOptions,\n\t\t\t\t\t(option) => !option.props.isHidden\n\t\t\t\t).length;\n\n\t\t\t\treturn (\n\t\t\t\t\t<DropMenu.OptionGroup\n\t\t\t\t\t\tisHidden={visibleChildrenCount === 0}\n\t\t\t\t\t\tkey={'SearchableSelectOptionGroup' + optionGroupIndex}\n\t\t\t\t\t\t{...optionGroupProps}\n\t\t\t\t\t>\n\t\t\t\t\t\t{optionGroupProps.children}\n\t\t\t\t\t\t{childOptions}\n\t\t\t\t\t</DropMenu.OptionGroup>\n\t\t\t\t);\n\t\t\t\t// then render all the ungrouped options at the end\n\t\t\t}\n\t\t).concat(\n\t\t\t_.map(ungroupedOptionData, ({ optionProps, optionIndex }) =>\n\t\t\t\tthis.renderOption(optionProps, optionIndex)\n\t\t\t)\n\t\t);\n\n\t\tconst visibleOptionsCount = _.filter(\n\t\t\toptions,\n\t\t\t(option) => !option.props.isHidden\n\t\t).length;\n\n\t\treturn visibleOptionsCount > 0 ? (\n\t\t\toptions\n\t\t) : (\n\t\t\t<DropMenu.Option isDisabled>\n\t\t\t\t<span className={cx('&-noresults')}>\n\t\t\t\t\tNo results match \"{searchText}\"\n\t\t\t\t</span>\n\t\t\t</DropMenu.Option>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tprops,\n\t\t\tprops: {\n\t\t\t\tstyle,\n\t\t\t\tclassName,\n\t\t\t\thasReset,\n\t\t\t\tisDisabled,\n\t\t\t\tisInvisible,\n\t\t\t\tisLoading,\n\t\t\t\tisSelectionHighlighted,\n\t\t\t\tmaxMenuHeight,\n\t\t\t\tsearchText,\n\t\t\t\tselectedIndex,\n\t\t\t\tonSelect,\n\t\t\t\tDropMenu: dropMenuProps,\n\t\t\t},\n\t\t} = this;\n\n\t\tconst { direction, optionContainerStyle, isExpanded } = dropMenuProps;\n\n\t\tconst { flattenedOptionsData } = this.state;\n\n\t\tconst searchFieldProps = _.get(\n\t\t\tgetFirst(props, SearchField) || <SearchField placeholder='Search...' />,\n\t\t\t'props'\n\t\t);\n\n\t\tconst placeholderProps = _.first(\n\t\t\t_.map(findTypes(this.props, SearchableSelect.Placeholder), 'props')\n\t\t);\n\n\t\tconst errorChildProps = _.first(\n\t\t\t_.map(findTypes(props, Validation.Error), 'props')\n\t\t);\n\n\t\tconst placeholder = _.get(placeholderProps, 'children', 'Select');\n\n\t\tconst isItemSelected = _.isNumber(selectedIndex);\n\n\t\treturn (\n\t\t\t<div className={cx('&', className)} style={style}>\n\t\t\t\t<DropMenu\n\t\t\t\t\t{...dropMenuProps}\n\t\t\t\t\toptionContainerStyle={_.assign(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\toptionContainerStyle,\n\t\t\t\t\t\t!_.isNil(maxMenuHeight) ? { maxHeight: maxMenuHeight } : null\n\t\t\t\t\t)}\n\t\t\t\t\tisDisabled={isDisabled}\n\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\tselectedIndices={_.isNumber(selectedIndex) ? [selectedIndex] : []}\n\t\t\t\t\tonExpand={this.handleExpand}\n\t\t\t\t>\n\t\t\t\t\t<DropMenu.Control>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\t\tclassName={cx('&-Control', {\n\t\t\t\t\t\t\t\t'&-Control-is-highlighted':\n\t\t\t\t\t\t\t\t\t(!isDisabled && isItemSelected && isSelectionHighlighted) ||\n\t\t\t\t\t\t\t\t\t(isExpanded && isSelectionHighlighted),\n\t\t\t\t\t\t\t\t'&-Control-is-selected':\n\t\t\t\t\t\t\t\t\t!isDisabled &&\n\t\t\t\t\t\t\t\t\tisItemSelected &&\n\t\t\t\t\t\t\t\t\tisSelectionHighlighted &&\n\t\t\t\t\t\t\t\t\t!(errorChildProps && errorChildProps.children),\n\t\t\t\t\t\t\t\t'&-Control-is-expanded': isExpanded,\n\t\t\t\t\t\t\t\t'&-Control-is-invisible': isInvisible,\n\t\t\t\t\t\t\t\t'&-Control-is-disabled': isDisabled,\n\t\t\t\t\t\t\t\t'&-Control-is-error':\n\t\t\t\t\t\t\t\t\terrorChildProps && errorChildProps.children,\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t{...(!isItemSelected ? placeholderProps : null)}\n\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t'&-Control-content',\n\t\t\t\t\t\t\t\t\t!isItemSelected ? _.get(placeholderProps, 'className') : null\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{_.isNumber(selectedIndex)\n\t\t\t\t\t\t\t\t\t? _.get(\n\t\t\t\t\t\t\t\t\t\t\tgetFirst(\n\t\t\t\t\t\t\t\t\t\t\t\tflattenedOptionsData[selectedIndex].optionProps,\n\t\t\t\t\t\t\t\t\t\t\t\tSearchableSelect.Option.Selected\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t'props.children'\n\t\t\t\t\t\t\t\t\t  ) ||\n\t\t\t\t\t\t\t\t\t  ((Children) =>\n\t\t\t\t\t\t\t\t\t\t\t_.isFunction(Children) ? <Children /> : Children)(\n\t\t\t\t\t\t\t\t\t\t\tflattenedOptionsData[selectedIndex].optionProps.children\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t: placeholder}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<ChevronIcon\n\t\t\t\t\t\t\t\tsize={12}\n\t\t\t\t\t\t\t\tdirection={isExpanded ? direction : 'down'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DropMenu.Control>\n\t\t\t\t\t<DropMenu.Header className={cx('&-Search-container')}>\n\t\t\t\t\t\t<SearchField\n\t\t\t\t\t\t\t{...searchFieldProps}\n\t\t\t\t\t\t\tautoComplete={searchFieldProps.autoComplete || 'off'}\n\t\t\t\t\t\t\tonChange={this.handleSearch}\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tref={this.setSearchField}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</DropMenu.Header>\n\t\t\t\t\t{isLoading && (\n\t\t\t\t\t\t<DropMenu.Option\n\t\t\t\t\t\t\tkey='SearchableSelectLoading'\n\t\t\t\t\t\t\tclassName={cx('&-Loading')}\n\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<LoadingIcon />\n\t\t\t\t\t\t</DropMenu.Option>\n\t\t\t\t\t)}\n\t\t\t\t\t{hasReset && isItemSelected && (\n\t\t\t\t\t\t<DropMenu.NullOption {...placeholderProps}>\n\t\t\t\t\t\t\t{placeholder}\n\t\t\t\t\t\t</DropMenu.NullOption>\n\t\t\t\t\t)}\n\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t</DropMenu>\n\t\t\t\t{errorChildProps &&\n\t\t\t\terrorChildProps.children &&\n\t\t\t\terrorChildProps.children !== true ? (\n\t\t\t\t\t<div\n\t\t\t\t\t\t{..._.omit(errorChildProps, ['initialState', 'callbackId'])}\n\t\t\t\t\t\tclassName={cx('&-error-content')}\n\t\t\t\t\t>\n\t\t\t\t\t\t{errorChildProps.children}\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tISearchableSelectProps,\n\tISearchableSelectState,\n\ttypeof SearchableSelect\n>(SearchableSelect as any, { reducers });\nexport { SearchableSelect as SearchableSelectDumb };\n"]},"metadata":{},"sourceType":"module"}