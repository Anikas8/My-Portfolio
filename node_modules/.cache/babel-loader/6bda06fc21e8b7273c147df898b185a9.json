{"ast":null,"code":"/* eslint-disable react/prop-types */\nimport _ from 'lodash';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, filterTypes, getFirst } from '../../util/component-types';\nimport Checkbox from '../Checkbox/Checkbox';\nimport EmptyStateWrapper from '../EmptyStateWrapper/EmptyStateWrapper';\nimport ScrollTable from '../ScrollTable/ScrollTable';\nimport Table from '../Table/Table';\nconst {\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td\n} = ScrollTable;\nconst cx = lucidClassNames.bind('&-DataTable');\nconst cxe = lucidClassNames.bind('&-DataTable-EmptyStateWrapper');\nconst SELECTOR_COLUMN_WIDTH = 41;\nconst {\n  any,\n  func,\n  number,\n  object,\n  string: stringProps,\n  bool,\n  arrayOf\n} = PropTypes;\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['className', 'data', 'emptyCellText', 'isActionable', 'isFullWidth', 'isLoading', 'isSelectable', 'anchorMessage', 'style', 'minRows', 'hasFixedHeader', 'fixedColumnCount', 'fixedRowHeight', 'truncateContent', 'initialState', 'onRowClick', 'onSelect', 'onSelectAll', 'onSort', 'Column', 'ColumnGroup', 'onResize'];\n/** TODO: Remove the nonColumnProps when the component is converted to a functional component */\nconst omittedColumnProps = ['field', 'title', 'initialState'];\nconst defaultProps = {\n  emptyCellText: '--',\n  isActionable: false,\n  isSelectable: false,\n  onRowClick: _.noop,\n  onSelect: _.noop,\n  onSelectAll: _.noop,\n  onSort: _.noop,\n  minRows: 10,\n  hasFixedHeader: false,\n  fixedColumnCount: 0\n};\nconst defaultState = {\n  // Represents the actively changing width as the cell is resized.\n  activeWidth: {}\n};\nexport const DataTable = props => {\n  const [state, setState] = useState(defaultState);\n  let fixedHeaderUnfixedColumnsRef;\n  let fixedBodyFixedColumnsRef;\n  const handleSelect = (rowIndex, _ref) => {\n    let {\n      event\n    } = _ref;\n    const {\n      data,\n      onSelect\n    } = props;\n    onSelect(data[rowIndex], rowIndex, {\n      props: props,\n      event\n    });\n  };\n  const handleSelectAll = _ref2 => {\n    let {\n      event\n    } = _ref2;\n    const {\n      onSelectAll\n    } = props;\n    onSelectAll({\n      props: props,\n      event\n    });\n  };\n  const handleRowClick = (rowIndex, event) => {\n    const {\n      data,\n      onRowClick\n    } = props;\n    const targetTagName = event.target.tagName.toLowerCase();\n    if (targetTagName === 'td' || targetTagName === 'tr') {\n      onRowClick(data[rowIndex], rowIndex, {\n        props: props,\n        event\n      });\n    }\n  };\n  const handleSort = (field, event) => {\n    const {\n      onSort\n    } = props;\n    event.stopPropagation();\n    event.preventDefault();\n    event.bubbles = false;\n    onSort(field, {\n      props: props,\n      event\n    });\n  };\n  const handleFixedBodyUnfixedColumnsScroll = event => {\n    fixedHeaderUnfixedColumnsRef && (fixedHeaderUnfixedColumnsRef.scrollLeft = event.target.scrollLeft);\n    fixedBodyFixedColumnsRef && (fixedBodyFixedColumnsRef.scrollTop = event.target.scrollTop);\n  };\n  const handleResize = (columnWidth, _ref3) => {\n    let {\n      props: {\n        field\n      }\n    } = _ref3;\n    // setting latest column width to Tbody\n    setState(state => ({\n      activeWidth: {\n        ...state.activeWidth,\n        [field]: columnWidth\n      }\n    }));\n  };\n  const renderHeader = (startColumn, endColumn, childComponentElements, flattenedColumns) => {\n    const {\n      isSelectable,\n      data,\n      truncateContent\n    } = props;\n    const hasGroupedColumns = _.some(childComponentElements, childComponentElement => childComponentElement.type === DataTable.ColumnGroup);\n    const columnSlicer = _.flow(_.compact, columns => _.slice(columns, startColumn, endColumn));\n    const allSelected = _.every(data, 'isSelected');\n    return React.createElement(Thead, null, React.createElement(Tr, null, columnSlicer([isSelectable ? React.createElement(Th, {\n      key: cx('&-row-selector'),\n      rowSpan: hasGroupedColumns ? 2 : null,\n      width: SELECTOR_COLUMN_WIDTH\n    }, React.createElement(Checkbox, {\n      isDisabled: !data || !data.length,\n      isSelected: !!data && data.length > 0 && allSelected,\n      isIndeterminate: !allSelected && !!data.find(d => d.isSelected),\n      onSelect: handleSelectAll\n    })) : null].concat(_.map(childComponentElements, (_ref4, index) => {\n      let {\n        props,\n        type\n      } = _ref4;\n      return type === DataTable.Column ? React.createElement(Th, {\n        onResize: props.isResizable ? handleResize : null,\n        ..._.omit(props, ['children', 'title']),\n        onClick: DataTable.shouldColumnHandleSort(props) ? _.partial(handleSort, props.field) : null,\n        rowSpan: hasGroupedColumns ? 2 : null,\n        field: props.field || index,\n        key: _.get(props, 'field', index),\n        truncateContent: truncateContent\n      }, props.title || props.children) : React.createElement(Th, {\n        colSpan: _.size(filterTypes(props.children, DataTable.Column)),\n        ..._.omit(props, ['field', 'children', 'width', 'title']),\n        key: _.get(props, 'field', index)\n      }, props.title || props.children);\n    })))), hasGroupedColumns ? React.createElement(Tr, null, _.reduce(flattenedColumns, (acc, _ref5, index) => {\n      let {\n        props: columnProps,\n        columnGroupProps\n      } = _ref5;\n      return acc.concat(_.isNull(columnGroupProps) ? [] : [React.createElement(Th, {\n        ..._.omit(columnProps, omittedColumnProps),\n        onClick: DataTable.shouldColumnHandleSort(columnProps) ? _.partial(handleSort, columnProps.field) : null,\n        style: {\n          width: columnProps.width\n        },\n        key: _.get(columnProps, 'field', index)\n      }, columnProps.title || columnProps.children)]);\n    }, [])) : null);\n  };\n  const renderBody = (startColumn, endColumn, flattenedColumns) => {\n    const {\n      data,\n      isSelectable,\n      isActionable,\n      minRows,\n      emptyCellText,\n      fixedRowHeight,\n      truncateContent\n    } = props;\n    const fillerRowCount = _.clamp(minRows - _.size(data), 0, Infinity);\n    const isFixedColumn = endColumn < Infinity;\n    const columnSlicer = _.flow(_.compact, columns => _.slice(columns, startColumn, endColumn));\n    return React.createElement(Tbody, null, _.map(data, (row, index) => React.createElement(Tr, {\n      ..._.pick(row, ['isDisabled', 'isActive', 'isSelected']),\n      isActionable: isActionable,\n      onClick: _.partial(handleRowClick, index),\n      key: 'row' + index,\n      style: _.assign(row.style, fixedRowHeight ? {\n        height: fixedRowHeight\n      } : {})\n    }, columnSlicer([isSelectable ? React.createElement(Td, {\n      key: cx('&-row-selector'),\n      width: SELECTOR_COLUMN_WIDTH,\n      hasBorderRight: isFixedColumn && flattenedColumns.length === 0\n    }, React.createElement(Checkbox, {\n      isSelected: row.isSelected,\n      onSelect: _.partial(handleSelect, index)\n    })) : null].concat(_.map(flattenedColumns, (_ref6, columnIndex) => {\n      let {\n        props: columnProps\n      } = _ref6;\n      const cellValue = _.get(row, columnProps.field);\n      const isEmpty = _.isEmpty(_.toString(cellValue));\n      const currentWidth = state.activeWidth[columnProps.field || columnIndex] || columnProps.width;\n      return React.createElement(Td, {\n        ..._.omit(columnProps, ['field', 'children', 'width', 'title', 'isSortable', 'isSorted', 'isResizable']),\n        hasBorderRight: !_.isNil(columnProps.hasBorderRight) ? columnProps.hasBorderRight : isFixedColumn && columnIndex + 1 + (isSelectable ? 1 : 0) === endColumn,\n        style: {\n          width: currentWidth\n        },\n        key: 'row' + index + _.get(columnProps, 'field', columnIndex),\n        truncateContent: truncateContent\n      }, isEmpty ? emptyCellText : _.isFunction(cellValue) ? cellValue(currentWidth) : cellValue);\n    }))))), _.times(fillerRowCount, index => React.createElement(Tr, {\n      isDisabled: true,\n      key: 'row' + index,\n      style: {\n        height: fixedRowHeight || '32px'\n      }\n    }, columnSlicer([isSelectable ? React.createElement(Td, {\n      key: cx('&-row-selector')\n    }) : null].concat(_.map(flattenedColumns, (_ref7, columnIndex) => {\n      let {\n        props: columnProps\n      } = _ref7;\n      return React.createElement(Td, {\n        ..._.omit(columnProps, ['field', 'children', 'width', 'title', 'isSortable', 'isSorted', 'isResizable']),\n        style: {\n          width: columnProps.width\n        },\n        key: 'row' + index + _.get(columnProps, 'field', columnIndex)\n      });\n    }))))));\n  };\n  const {\n    className,\n    data,\n    isFullWidth,\n    isLoading,\n    style,\n    hasFixedHeader,\n    fixedColumnCount,\n    anchorMessage,\n    ...passThroughs\n  } = props;\n  const childComponentElements = findTypes(props, [DataTable.Column, DataTable.ColumnGroup]);\n  const flattenedColumns = _.reduce(childComponentElements, (acc, childComponentElement) => {\n    if (childComponentElement.type === DataTable.Column) {\n      return acc.concat([{\n        props: childComponentElement.props,\n        columnGroupProps: null\n      }]);\n    }\n    if (childComponentElement.type === DataTable.ColumnGroup) {\n      return acc.concat(_.map(findTypes(childComponentElement.props, DataTable.Column), columnChildComponent => ({\n        props: columnChildComponent.props,\n        columnGroupProps: childComponentElement.props\n      })));\n    }\n  }, []);\n  const emptyStateWrapper = getFirst(props, DataTable.EmptyStateWrapper) || React.createElement(DataTable.EmptyStateWrapper, {\n    Title: 'No items found.',\n    Body: 'Try creating a new object or removing a filter.'\n  });\n  const emptyStateWrapperClassName = cxe({\n    '&-has-fixed-header': hasFixedHeader\n  }, emptyStateWrapper.props.className);\n  return React.createElement(EmptyStateWrapper, {\n    ...emptyStateWrapper.props,\n    isEmpty: _.isEmpty(data),\n    isLoading: isLoading,\n    className: emptyStateWrapperClassName,\n    anchorMessage: anchorMessage\n  }, emptyStateWrapper.props.children, hasFixedHeader ? React.createElement(\"div\", {\n    className: cx('&-fixed')\n  }, React.createElement(\"div\", {\n    className: cx('&-fixed-header')\n  }, React.createElement(\"div\", {\n    className: cx('&-fixed-header-fixed-columns')\n  }, fixedColumnCount > 0 ? React.createElement(Table, {\n    ..._.omit(passThroughs, nonPassThroughs),\n    style: style,\n    className: cx('&-fixed-header-fixed-columns-Table')\n  }, renderHeader(0, fixedColumnCount, childComponentElements, flattenedColumns)) : null), React.createElement(\"div\", {\n    className: cx('&-fixed-header-unfixed-columns'),\n    ref: ref => fixedHeaderUnfixedColumnsRef = ref\n  }, React.createElement(Table, {\n    ..._.omit(passThroughs, nonPassThroughs),\n    style: style,\n    className: cx('&-fixed-header-unfixed-columns-Table')\n  }, renderHeader(fixedColumnCount, Infinity, childComponentElements, flattenedColumns)))), React.createElement(\"div\", {\n    className: cx('&-fixed-body')\n  }, React.createElement(\"div\", {\n    className: cx('&-fixed-body-fixed-columns'),\n    ref: ref => fixedBodyFixedColumnsRef = ref\n  }, fixedColumnCount > 0 ? React.createElement(Table, {\n    ..._.omit(passThroughs, nonPassThroughs),\n    style: style,\n    className: cx('&-fixed-body-fixed-columns-Table'),\n    hasWordWrap: false /* try to protect against vertical overflow */\n  }, renderBody(0, fixedColumnCount, flattenedColumns)) : null), React.createElement(\"div\", {\n    onScroll: handleFixedBodyUnfixedColumnsScroll,\n    className: cx('&-fixed-body-unfixed-columns')\n  }, React.createElement(\"span\", {\n    className: cx('&-fixed-body-unfixed-columns-shadow')\n  }), React.createElement(Table, {\n    ..._.omit(passThroughs, nonPassThroughs),\n    style: style,\n    className: cx('&-fixed-body-unfixed-columns-Table'),\n    hasWordWrap: false /* try to protect against vertical overflow */\n  }, renderBody(fixedColumnCount, Infinity, flattenedColumns))))) : React.createElement(ScrollTable, {\n    style: style,\n    tableWidth: isFullWidth ? '100%' : undefined,\n    ..._.omit(passThroughs, nonPassThroughs),\n    className: cx('&', {\n      '&-full-width': isFullWidth\n    }, className)\n  }, renderHeader(0, Infinity, childComponentElements, flattenedColumns), renderBody(0, Infinity, flattenedColumns)));\n};\nDataTable.displayName = 'DataTable';\nDataTable.propTypes = {\n  /**\n      Class names that are appended to the defaults.\n  */\n  className: stringProps,\n  /**\n      Array of objects to be rendered in the table. Object keys match the\n      \\`field\\` of each defined \\`DataTable.Column\\`.\n  */\n  data: arrayOf(object),\n  /**\n      The text to display in cells which have no data.\n  */\n  emptyCellText: stringProps,\n  /**\n      Render each row item to be navigable, allowing \\`onRowClick\\` to be\n      triggered.\n  */\n  isActionable: bool,\n  /**\n      If \\`true\\`, the table will be set to fill the width of its parent\n      container.\n  */\n  isFullWidth: bool,\n  /**\n      Controls the visibility of the \\`LoadingMessage\\`.\n  */\n  isLoading: bool,\n  /**\n      Render a checkbox in the first column allowing \\`onSelect\\` and\n      \\`onSelectAll\\` to be triggered.\n  */\n  isSelectable: bool,\n  /**\n      Position the \\`EmptyMessage\\` and \\`LoadingMessage\\` near the top of the container.\n      By default, they are vertically aligned to the middle of the table. Useful\n      for tables with many rows that extend past the viewport.\n  */\n  anchorMessage: bool,\n  /**\n      Styles that are passed through to the root container.\n  */\n  style: object,\n  /**\n      The minimum number of rows to rendered. If not enough data is provided,\n      the remainder will be shown as empty rows.\n  */\n  minRows: number,\n  /**\n      Handler for row click. Signature is\n      \\`(object, index, { props, event }) => {...}\\`\n  */\n  onRowClick: func,\n  /**\n      Handler for checkbox selection. Signature is\n      \\`(object, index, { props, event }) => {...}\\`\n  */\n  onSelect: func,\n  /**\n      Handler for checkbox selection in the table header. Signature is\n      \\`({ props, event }) => {...}\\`\n  */\n  onSelectAll: func,\n  /**\n      Handler for column header click (for sorting). Signature is\n      \\`(field, { props, event }) => {...}\\`\n  */\n  onSort: func,\n  hasFixedHeader: bool /**\n                       If \\`true\\` the table will have a fixed header set. *Note* this feature\n                       imposes some limitations with respect to the styling and usage of your\n                       table. Here are those caveats:\n                       - Each \\`DataTable.Column\\` *must* have an explicit pixel width defined\n                       on it. If the combined width of all the columns is greater than the\n                       parent container, the user will be able to horizontally scroll.\n                       - The outermost wrapper element emitted by this component will be set to\n                       100% height. It's your responsibility to put this component inside\n                       another container that limits its height so that the resulting table can\n                       scroll vertically and keep the fixed headers.\n                       - Scroll bars will always be present. This is prevent misalignment of the\n                       header and the table body that can occur when scroll bars show up and\n                       take width. MacOS browsers depend on OS level settings to determine how\n                       scrollbars show up. Having them always present saves us from writing a\n                       bunch of terrible code to detect scroll bars and account for their width.\n                       - Using fixed headers means multiple tables will be rendered under the\n                       hood. We use \\`table-layout: fixed\\` behavior to make sure we can sync\n                       columns widths between the header and the body.\n                       - Does not support \\`DataTable.ColumnGroup\\`s at this time. It's possible\n                       we could support them at some point but its not a priority at the moment.\n                       - You have to be careful about table cell height overflow. There are\n                       cases where this can break the alignment of fixed columns.\n                       */,\n\n  /**\n      Sets the number of columns you want to have fixed. You must specify\n      \\`fixedRowHeight\\` and enable \\`hasFixedHeader\\`when setting this prop.\n  */\n  fixedColumnCount: number,\n  /**\n      Determines the height of every row in the DataTable. It's required when\n      using the \\`fixedColumnCount\\` prop.\n  */\n  fixedRowHeight: number,\n  /**\n      Truncates \\`Table.Td\\` content with ellipses, must be used with \\`hasFixedHeader\\`\n  */\n  truncateContent: bool,\n  Column: any /**\n              *Child Element*\n              Used to define a column of the table. It accepts the same props as\n              \\`Table.Th\\` in addition to:\n              - the required prop \\`field\\`\n              - the optional prop \\`title\\`\n              */,\n  ColumnGroup: any /**\n                   *Child Element*\n                   _Note_: column groups are *not* compatible with \\`hasFixedHeader\\`.\n                   Used to Group defined \\`Column\\`s in the table. It accepts the same props\n                   as \\`Table.Th\\` in addition to:\n                   - the optional prop \\`title\\`\n                   */,\n\n  /**\n       If \\`isResizable\\` is true,\n      it is called when the user resizes the a header cell in the table.\n   */\n  onResize: func\n};\nDataTable.defaultProps = defaultProps;\nDataTable.peek = {\n  description: `\\`DataTable\\` provides a simple abstraction over the \\`Table\\` component to make it easier to define data-driven tables and render an array of objects.`,\n  notes: {\n    overview: `\n\t\t\t\\`DataTable\\` provides a simple abstraction over the \\`Table\\`\n\t\t\tcomponent to make it easier to define data-driven tables and render an\n\t\t\tarray of objects.\n\t\t`,\n    intendedUse: `\n\t\t\t\\`DataTable\\` is optimized for our two main uses, full page and in-line tables.\n\n\t\t\t**Full page table**\n\t\t\t\n\t\t\tTables that cover the entire page, or are the main focus on the page. Generally used for managing and monitoring objects.\n\t\t\t\n\t\t\t**In-line tables**\n\t\t\t\n\t\t\tTables insides containers such as \\`Dialog\\` or \\`Panel\\`. Generally used for details panels and actions dialogs.\n\t\t\t\t\t\t\t\t\n\t\t\t**Styling notes**\n\t\t\t\n\t\t\t- Preferred column alignment shown in \\`basic\\` example, column header alignment should match column content\n\t\t\t\t- strings left-aligned\n\t\t\t\t- currency right-aligned\n\t\t\t\t- icons/buttons centered\n\t\t\t- Use grey footer for full page tables, \\`hasLightFooter={false}\\`\n\t\t\t- Use white footer for in-line tables, \\`hasLightFooter={true}\\`\n\t\t`,\n    technicalRecommendations: `\n\t\t\t- There is a pre-styled state for tables with no data, see the \\`empty\\` example\n\t\t\t- There should be no row hover state if the rows are not clickable, see example (?)\n\t\t`\n  },\n  categories: ['table'],\n  madeFrom: ['Checkbox', 'EmptyStateWrapper', 'ScrollTable']\n};\nDataTable.EmptyStateWrapper = EmptyStateWrapper;\n// type IColumnProps = Overwrite<typeof Th, IColumnPropsRaw>;\nconst Column = props => {\n  return null;\n};\nColumn.displayName = 'DataTable.Column';\nColumn.peek = {\n  description: `\n\t\tRenders a \\`Th\\` for the table. It accepts all the props of \\`Table.Th\\`\n\t`\n};\nColumn.propTypes = {\n  field: stringProps.isRequired,\n  title: stringProps,\n  isResizable: bool\n};\nDataTable.Column = Column;\nconst ColumnGroup = _ref8 => {\n  let {\n    children\n  } = _ref8;\n  return children;\n};\nColumnGroup.displayName = 'DataTable.ColumnGroup';\nColumnGroup.peek = {\n  description: `\n\t\tRenders a group of \\`Th\\`s.  It accepts all the props of Table.Th\n\t`\n};\nColumnGroup.propTypes = {\n  title: stringProps\n};\nColumnGroup.defaultProps = {\n  align: 'center'\n};\nDataTable.ColumnGroup = ColumnGroup;\nDataTable.shouldColumnHandleSort = column => {\n  return _.isNil(column.isSortable) ? column.isSorted : column.isSortable;\n};\nexport default DataTable;","map":{"version":3,"mappings":"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","names":["_","React","useState","PropTypes","lucidClassNames","findTypes","filterTypes","getFirst","Checkbox","EmptyStateWrapper","ScrollTable","Table","Thead","Tbody","Tr","Th","Td","cx","bind","cxe","SELECTOR_COLUMN_WIDTH","any","func","number","object","string","stringProps","bool","arrayOf","nonPassThroughs","omittedColumnProps","defaultProps","emptyCellText","isActionable","isSelectable","onRowClick","noop","onSelect","onSelectAll","onSort","minRows","hasFixedHeader","fixedColumnCount","defaultState","activeWidth","DataTable","props","state","setState","fixedHeaderUnfixedColumnsRef","fixedBodyFixedColumnsRef","handleSelect","rowIndex","event","data","handleSelectAll","handleRowClick","targetTagName","target","tagName","toLowerCase","handleSort","field","stopPropagation","preventDefault","bubbles","handleFixedBodyUnfixedColumnsScroll","scrollLeft","scrollTop","handleResize","columnWidth","renderHeader","startColumn","endColumn","childComponentElements","flattenedColumns","truncateContent","hasGroupedColumns","some","childComponentElement","type","ColumnGroup","columnSlicer","flow","compact","columns","slice","allSelected","every","key","rowSpan","width","isDisabled","length","isSelected","isIndeterminate","find","d","concat","map","index","Column","onResize","isResizable","omit","onClick","shouldColumnHandleSort","partial","get","title","children","colSpan","size","reduce","acc","columnProps","columnGroupProps","isNull","style","renderBody","fixedRowHeight","fillerRowCount","clamp","Infinity","isFixedColumn","row","pick","assign","height","hasBorderRight","columnIndex","cellValue","isEmpty","toString","currentWidth","isNil","isFunction","times","className","isFullWidth","isLoading","anchorMessage","passThroughs","columnChildComponent","emptyStateWrapper","Title","Body","emptyStateWrapperClassName","ref","hasWordWrap","onScroll","tableWidth","undefined","displayName","propTypes","peek","description","notes","overview","intendedUse","technicalRecommendations","categories","madeFrom","isRequired","align","column","isSortable","isSorted"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/DataTable/DataTable.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport _ from 'lodash';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, filterTypes, getFirst } from '../../util/component-types';\n\nimport Checkbox from '../Checkbox/Checkbox';\nimport EmptyStateWrapper from '../EmptyStateWrapper/EmptyStateWrapper';\nimport ScrollTable from '../ScrollTable/ScrollTable';\nimport Table, { IThProps, ITableProps } from '../Table/Table';\n\nconst { Thead, Tbody, Tr, Th, Td } = ScrollTable;\n\nconst cx = lucidClassNames.bind('&-DataTable');\nconst cxe = lucidClassNames.bind('&-DataTable-EmptyStateWrapper');\nconst SELECTOR_COLUMN_WIDTH = 41;\n\nconst {\n\tany,\n\tfunc,\n\tnumber,\n\tobject,\n\tstring: stringProps,\n\tbool,\n\tarrayOf,\n} = PropTypes;\n\nexport interface IDataTableProps\n\textends ITableProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/*\n\t * \tArray of objects to be rendered in the table. Object keys match the\n\t * \t\\`field\\` of each defined \\`DataTable.Column\\`.\n\t */\n\tdata: object[];\n\n\t/*\n\t * \tThe text to display in cells which have no data.\n\t */\n\temptyCellText: string;\n\n\t/*\n\t * \tRender each row item to be navigable, allowing \\`onRowClick\\` to be\n\t * \ttriggered.\n\t */\n\tisActionable: boolean;\n\n\t/*\n\t * \tIf \\`true\\`, the table will be set to fill the width of its parent\n\t * \tcontainer.\n\t */\n\tisFullWidth?: boolean;\n\n\t/*\n\t * \tControls the visibility of the \\`LoadingMessage\\`.\n\t */\n\tisLoading?: boolean;\n\n\t/*\n\t * \tRender a checkbox in the first column allowing \\`onSelect\\` and\n\t * \t\\`onSelectAll\\` to be triggered.\n\t */\n\tisSelectable: boolean;\n\n\t/*\n\t * \tPosition the \\`EmptyMessage\\` and \\`LoadingMessage\\` near the top of the container.\n\t * \tBy default, they are vertically aligned to the middle of the table. Useful\n\t * \tfor tables with many rows that extend past the viewport.\n\t */\n\tanchorMessage?: boolean;\n\n\t/*\n\t * \tStyles that are passed through to the root container.\n\t */\n\tstyle?: object;\n\n\t/*\n\t * \tThe minimum number of rows to rendered. If not enough data is provided,\n\t * \tthe remainder will be shown as empty rows.\n\t */\n\tminRows: number;\n\n\t/*\n\t * \tHandler for row click. Signature is\n\t * \t\\`(object, index, { props, event }) => {...}\\`\n\t */\n\tonRowClick: any;\n\n\t/*\n\t * \tHandler for checkbox selection. Signature is\n\t * \t\\`(object, index, { props, event }) => {...}\\`\n\t */\n\tonSelect: any;\n\n\t/*\n\t * \tHandler for checkbox selection in the table header. Signature is\n\t * \t\\`({ props, event }) => {...}\\`\n\t */\n\tonSelectAll: any;\n\n\t/*\n\t * \tHandler for column header click (for sorting). Signature is\n\t * \t\\`(field, { props, event }) => {...}\\`\n\t */\n\tonSort: any;\n\n\t/*\n\t * \tIf \\`true\\` the table will have a fixed header set. *Note* this feature\n\t * \timposes some limitations with respect to the styling and usage of your\n\t * \ttable. Here are those caveats:\n\n\t * \t- Each \\`DataTable.Column\\` *must* have an explicit pixel width defined\n\t * \t\ton it. If the combined width of all the columns is greater than the\n\t * \t\tparent container, the user will be able to horizontally scroll.\n\t * \t- The outermost wrapper element emitted by this component will be set to\n\t * \t\t100% height. It's your responsibility to put this component inside\n\t * \t\tanother container that limits its height so that the resulting table can\n\t * \t\tscroll vertically and keep the fixed headers.\n\t * \t- Scroll bars will always be present. This is prevent misalignment of the\n\t * \t\theader and the table body that can occur when scroll bars show up and\n\t * \t\ttake width. MacOS browsers depend on OS level settings to determine how\n\t * \t\tscrollbars show up. Having them always present saves us from writing a\n\t * \t\tbunch of terrible code to detect scroll bars and account for their width.\n\t * \t- Using fixed headers means multiple tables will be rendered under the\n\t * \t\thood. We use \\`table-layout: fixed\\` behavior to make sure we can sync\n\t * \t\tcolumns widths between the header and the body.\n\t * \t- Does not support \\`DataTable.ColumnGroup\\`s at this time. It's possible\n\t * \t\twe could support them at some point but its not a priority at the moment.\n\t * \t- You have to be careful about table cell height overflow. There are\n\t * \t\tcases where this can break the alignment of fixed columns.\n\t */\n\thasFixedHeader: boolean;\n\n\t/*\n\t * \tSets the number of columns you want to have fixed. You must specify\n\t * \t\\`fixedRowHeight\\` and enable \\`hasFixedHeader\\`when setting this prop.\n\t */\n\tfixedColumnCount: number;\n\n\t/*\n\t * \tDetermines the height of every row in the DataTable. It's required when\n\t * \tusing the \\`fixedColumnCount\\` prop.\n\t */\n\tfixedRowHeight?: number;\n\n\t/* Truncates \\`Table.Td\\` content with ellipses, must be used with \\`hasFixedHeader\\` */\n\ttruncateContent?: boolean;\n\n\t/*\n\t * \t*Child Element*\n\n\t * \tUsed to define a column of the table. It accepts the same props as\n\t * \t\\`Table.Th\\` in addition to:\n\n\t * \t- the required prop \\`field\\`\n\t * \t- the optional prop \\`title\\`\n\t */\n\tColumn?: any;\n\n\t/*\n\t * \t*Child Element*\n\n\t * \t_Note_: column groups are *not* compatible with \\`hasFixedHeader\\`.\n\n\t * \tUsed to Group defined \\`Column\\`s in the table. It accepts the same props\n\t * \tas \\`Table.Th\\` in addition to:\n\n\t * \t- the optional prop \\`title\\`\n\t */\n\tColumnGroup?: any;\n\n\t/*\n\t * If \\`isResizable\\` is true,\n\t * it is called when the user resizes the a header cell in the table.\n\t */\n\tonResize?: any;\n}\n\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'className',\n\t'data',\n\t'emptyCellText',\n\t'isActionable',\n\t'isFullWidth',\n\t'isLoading',\n\t'isSelectable',\n\t'anchorMessage',\n\t'style',\n\t'minRows',\n\t'hasFixedHeader',\n\t'fixedColumnCount',\n\t'fixedRowHeight',\n\t'truncateContent',\n\t'initialState',\n\t'onRowClick',\n\t'onSelect',\n\t'onSelectAll',\n\t'onSort',\n\t'Column',\n\t'ColumnGroup',\n\t'onResize',\n];\n\n/** TODO: Remove the nonColumnProps when the component is converted to a functional component */\nconst omittedColumnProps = ['field', 'title', 'initialState'];\n\nconst defaultProps = {\n\temptyCellText: '--',\n\tisActionable: false,\n\tisSelectable: false,\n\tonRowClick: _.noop,\n\tonSelect: _.noop,\n\tonSelectAll: _.noop,\n\tonSort: _.noop,\n\tminRows: 10,\n\thasFixedHeader: false,\n\tfixedColumnCount: 0,\n};\n\nconst defaultState = {\n\t// Represents the actively changing width as the cell is resized.\n\tactiveWidth: {},\n};\n\nexport const DataTable = (props: IDataTableProps) => {\n\tconst [state, setState] = useState(defaultState);\n\n\tlet fixedHeaderUnfixedColumnsRef: any;\n\tlet fixedBodyFixedColumnsRef: any;\n\n\tconst handleSelect = (rowIndex: any, { event }: any) => {\n\t\tconst { data, onSelect } = props;\n\n\t\tonSelect(data[rowIndex], rowIndex, { props: props, event });\n\t};\n\n\tconst handleSelectAll = ({ event }: any) => {\n\t\tconst { onSelectAll } = props;\n\n\t\tonSelectAll({ props: props, event });\n\t};\n\n\tconst handleRowClick = (rowIndex: any, event: any) => {\n\t\tconst { data, onRowClick } = props;\n\n\t\tconst targetTagName = event.target.tagName.toLowerCase();\n\t\tif (targetTagName === 'td' || targetTagName === 'tr') {\n\t\t\tonRowClick(data[rowIndex], rowIndex, { props: props, event });\n\t\t}\n\t};\n\n\tconst handleSort = (field: any, event: any) => {\n\t\tconst { onSort } = props;\n\n\t\tevent.stopPropagation();\n\t\tevent.preventDefault();\n\t\tevent.bubbles = false;\n\t\tonSort(field, { props: props, event });\n\t};\n\n\tconst handleFixedBodyUnfixedColumnsScroll = (event: any) => {\n\t\tfixedHeaderUnfixedColumnsRef &&\n\t\t\t(fixedHeaderUnfixedColumnsRef.scrollLeft = event.target.scrollLeft);\n\t\tfixedBodyFixedColumnsRef &&\n\t\t\t(fixedBodyFixedColumnsRef.scrollTop = event.target.scrollTop);\n\t};\n\n\tconst handleResize = (columnWidth: any, { props: { field } }: any) => {\n\t\t// setting latest column width to Tbody\n\t\tsetState((state) => ({\n\t\t\tactiveWidth: {\n\t\t\t\t...state.activeWidth,\n\t\t\t\t[field]: columnWidth,\n\t\t\t},\n\t\t}));\n\t};\n\n\tconst renderHeader = (\n\t\tstartColumn: any,\n\t\tendColumn: any,\n\t\tchildComponentElements: any,\n\t\tflattenedColumns: any\n\t) => {\n\t\tconst { isSelectable, data, truncateContent } = props;\n\n\t\tconst hasGroupedColumns = _.some(\n\t\t\tchildComponentElements,\n\t\t\t(childComponentElement) =>\n\t\t\t\tchildComponentElement.type === DataTable.ColumnGroup\n\t\t);\n\n\t\tconst columnSlicer = _.flow(_.compact, (columns) =>\n\t\t\t_.slice(columns, startColumn, endColumn)\n\t\t);\n\t\tconst allSelected = _.every(data, 'isSelected');\n\n\t\treturn (\n\t\t\t<Thead>\n\t\t\t\t<Tr>\n\t\t\t\t\t{columnSlicer(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tisSelectable ? (\n\t\t\t\t\t\t\t\t<Th\n\t\t\t\t\t\t\t\t\tkey={cx('&-row-selector')}\n\t\t\t\t\t\t\t\t\trowSpan={hasGroupedColumns ? 2 : null}\n\t\t\t\t\t\t\t\t\twidth={SELECTOR_COLUMN_WIDTH}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tisDisabled={!data || !data.length}\n\t\t\t\t\t\t\t\t\t\tisSelected={!!data && data.length > 0 && allSelected}\n\t\t\t\t\t\t\t\t\t\tisIndeterminate={\n\t\t\t\t\t\t\t\t\t\t\t!allSelected && !!data.find((d: any) => d.isSelected)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={handleSelectAll}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Th>\n\t\t\t\t\t\t\t) : null,\n\t\t\t\t\t\t].concat(\n\t\t\t\t\t\t\t_.map(childComponentElements, ({ props, type }, index) =>\n\t\t\t\t\t\t\t\ttype === DataTable.Column ? (\n\t\t\t\t\t\t\t\t\t<Th\n\t\t\t\t\t\t\t\t\t\tonResize={props.isResizable ? (handleResize as any) : null}\n\t\t\t\t\t\t\t\t\t\t{..._.omit(props, ['children', 'title'])}\n\t\t\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\t\t\tDataTable.shouldColumnHandleSort(props)\n\t\t\t\t\t\t\t\t\t\t\t\t? (_.partial(handleSort, props.field) as any)\n\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\trowSpan={hasGroupedColumns ? 2 : null}\n\t\t\t\t\t\t\t\t\t\tfield={props.field || index}\n\t\t\t\t\t\t\t\t\t\tkey={_.get(props, 'field', index)}\n\t\t\t\t\t\t\t\t\t\ttruncateContent={truncateContent}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{props.title || props.children}\n\t\t\t\t\t\t\t\t\t</Th>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Th\n\t\t\t\t\t\t\t\t\t\tcolSpan={_.size(\n\t\t\t\t\t\t\t\t\t\t\tfilterTypes(props.children, DataTable.Column)\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{..._.omit(props, ['field', 'children', 'width', 'title'])}\n\t\t\t\t\t\t\t\t\t\tkey={_.get(props, 'field', index)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{props.title || props.children}\n\t\t\t\t\t\t\t\t\t</Th>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\t\t\t\t</Tr>\n\t\t\t\t{hasGroupedColumns ? (\n\t\t\t\t\t<Tr>\n\t\t\t\t\t\t{_.reduce(\n\t\t\t\t\t\t\tflattenedColumns,\n\t\t\t\t\t\t\t(acc: any, { props: columnProps, columnGroupProps }, index) =>\n\t\t\t\t\t\t\t\tacc.concat(\n\t\t\t\t\t\t\t\t\t_.isNull(columnGroupProps)\n\t\t\t\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t\t\t\t\t<Th\n\t\t\t\t\t\t\t\t\t\t\t\t\t{..._.omit(columnProps, omittedColumnProps)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDataTable.shouldColumnHandleSort(columnProps)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (_.partial(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleSort,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnProps.field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ) as any)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: columnProps.width,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={_.get(columnProps, 'field', index)}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{columnProps.title || columnProps.children}\n\t\t\t\t\t\t\t\t\t\t\t\t</Th>,\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Tr>\n\t\t\t\t) : null}\n\t\t\t</Thead>\n\t\t);\n\t};\n\n\tconst renderBody = (\n\t\tstartColumn: any,\n\t\tendColumn: any,\n\t\tflattenedColumns: any\n\t) => {\n\t\tconst {\n\t\t\tdata,\n\t\t\tisSelectable,\n\t\t\tisActionable,\n\t\t\tminRows,\n\t\t\temptyCellText,\n\t\t\tfixedRowHeight,\n\t\t\ttruncateContent,\n\t\t} = props;\n\n\t\tconst fillerRowCount = _.clamp(minRows - _.size(data), 0, Infinity);\n\t\tconst isFixedColumn = endColumn < Infinity;\n\t\tconst columnSlicer = _.flow(_.compact, (columns) =>\n\t\t\t_.slice(columns, startColumn, endColumn)\n\t\t);\n\n\t\treturn (\n\t\t\t<Tbody>\n\t\t\t\t{_.map(data, (row: any, index) => (\n\t\t\t\t\t<Tr\n\t\t\t\t\t\t{..._.pick(row, ['isDisabled', 'isActive', 'isSelected'])}\n\t\t\t\t\t\tisActionable={isActionable}\n\t\t\t\t\t\tonClick={_.partial(handleRowClick, index)}\n\t\t\t\t\t\tkey={'row' + index}\n\t\t\t\t\t\tstyle={_.assign(\n\t\t\t\t\t\t\trow.style,\n\t\t\t\t\t\t\tfixedRowHeight ? { height: fixedRowHeight } : {}\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{columnSlicer(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tisSelectable ? (\n\t\t\t\t\t\t\t\t\t<Td\n\t\t\t\t\t\t\t\t\t\tkey={cx('&-row-selector')}\n\t\t\t\t\t\t\t\t\t\twidth={SELECTOR_COLUMN_WIDTH}\n\t\t\t\t\t\t\t\t\t\thasBorderRight={\n\t\t\t\t\t\t\t\t\t\t\tisFixedColumn && flattenedColumns.length === 0\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\tisSelected={row.isSelected}\n\t\t\t\t\t\t\t\t\t\t\tonSelect={_.partial(handleSelect, index)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t) : null,\n\t\t\t\t\t\t\t].concat(\n\t\t\t\t\t\t\t\t_.map(\n\t\t\t\t\t\t\t\t\tflattenedColumns,\n\t\t\t\t\t\t\t\t\t({ props: columnProps }, columnIndex) => {\n\t\t\t\t\t\t\t\t\t\tconst cellValue = _.get(row, columnProps.field);\n\t\t\t\t\t\t\t\t\t\tconst isEmpty = _.isEmpty(_.toString(cellValue));\n\t\t\t\t\t\t\t\t\t\tconst currentWidth =\n\t\t\t\t\t\t\t\t\t\t\tstate.activeWidth[columnProps.field || columnIndex] ||\n\t\t\t\t\t\t\t\t\t\t\tcolumnProps.width;\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Td\n\t\t\t\t\t\t\t\t\t\t\t\t{..._.omit(columnProps, [\n\t\t\t\t\t\t\t\t\t\t\t\t\t'field',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'children',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'width',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'title',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'isSortable',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'isSorted',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'isResizable',\n\t\t\t\t\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t\t\t\t\t\thasBorderRight={\n\t\t\t\t\t\t\t\t\t\t\t\t\t!_.isNil(columnProps.hasBorderRight)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? columnProps.hasBorderRight\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: isFixedColumn &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  columnIndex + 1 + (isSelectable ? 1 : 0) ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tendColumn\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: currentWidth }}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={\n\t\t\t\t\t\t\t\t\t\t\t\t\t'row' +\n\t\t\t\t\t\t\t\t\t\t\t\t\tindex +\n\t\t\t\t\t\t\t\t\t\t\t\t\t_.get(columnProps, 'field', columnIndex)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\ttruncateContent={truncateContent}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{isEmpty\n\t\t\t\t\t\t\t\t\t\t\t\t\t? emptyCellText\n\t\t\t\t\t\t\t\t\t\t\t\t\t: _.isFunction(cellValue)\n\t\t\t\t\t\t\t\t\t\t\t\t\t? cellValue(currentWidth)\n\t\t\t\t\t\t\t\t\t\t\t\t\t: cellValue}\n\t\t\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Tr>\n\t\t\t\t))}\n\t\t\t\t{_.times(fillerRowCount, (index) => (\n\t\t\t\t\t<Tr\n\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\tkey={'row' + index}\n\t\t\t\t\t\tstyle={{ height: fixedRowHeight || '32px' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{columnSlicer(\n\t\t\t\t\t\t\t[isSelectable ? <Td key={cx('&-row-selector')} /> : null].concat(\n\t\t\t\t\t\t\t\t_.map(\n\t\t\t\t\t\t\t\t\tflattenedColumns,\n\t\t\t\t\t\t\t\t\t({ props: columnProps }, columnIndex) => (\n\t\t\t\t\t\t\t\t\t\t<Td\n\t\t\t\t\t\t\t\t\t\t\t{..._.omit(columnProps, [\n\t\t\t\t\t\t\t\t\t\t\t\t'field',\n\t\t\t\t\t\t\t\t\t\t\t\t'children',\n\t\t\t\t\t\t\t\t\t\t\t\t'width',\n\t\t\t\t\t\t\t\t\t\t\t\t'title',\n\t\t\t\t\t\t\t\t\t\t\t\t'isSortable',\n\t\t\t\t\t\t\t\t\t\t\t\t'isSorted',\n\t\t\t\t\t\t\t\t\t\t\t\t'isResizable',\n\t\t\t\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\twidth: columnProps.width,\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tkey={\n\t\t\t\t\t\t\t\t\t\t\t\t'row' + index + _.get(columnProps, 'field', columnIndex)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Tr>\n\t\t\t\t))}\n\t\t\t</Tbody>\n\t\t);\n\t};\n\n\tconst {\n\t\tclassName,\n\t\tdata,\n\t\tisFullWidth,\n\t\tisLoading,\n\t\tstyle,\n\t\thasFixedHeader,\n\t\tfixedColumnCount,\n\t\tanchorMessage,\n\t\t...passThroughs\n\t} = props;\n\n\tconst childComponentElements = findTypes(props, [\n\t\tDataTable.Column,\n\t\tDataTable.ColumnGroup,\n\t]);\n\n\tconst flattenedColumns = _.reduce(\n\t\tchildComponentElements,\n\t\t(acc: any, childComponentElement: any) => {\n\t\t\tif (childComponentElement.type === DataTable.Column) {\n\t\t\t\treturn acc.concat([\n\t\t\t\t\t{ props: childComponentElement.props, columnGroupProps: null },\n\t\t\t\t]);\n\t\t\t}\n\t\t\tif (childComponentElement.type === DataTable.ColumnGroup) {\n\t\t\t\treturn acc.concat(\n\t\t\t\t\t_.map(\n\t\t\t\t\t\tfindTypes(childComponentElement.props, DataTable.Column),\n\t\t\t\t\t\t(columnChildComponent: any) => ({\n\t\t\t\t\t\t\tprops: columnChildComponent.props,\n\t\t\t\t\t\t\tcolumnGroupProps: childComponentElement.props,\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\n\tconst emptyStateWrapper: any = getFirst(\n\t\tprops,\n\t\tDataTable.EmptyStateWrapper\n\t) || (\n\t\t<DataTable.EmptyStateWrapper\n\t\t\tTitle='No items found.'\n\t\t\tBody='Try creating a new object or removing a filter.'\n\t\t/>\n\t);\n\n\tconst emptyStateWrapperClassName = cxe(\n\t\t{\n\t\t\t'&-has-fixed-header': hasFixedHeader,\n\t\t},\n\t\temptyStateWrapper.props.className\n\t);\n\n\treturn (\n\t\t<EmptyStateWrapper\n\t\t\t{...emptyStateWrapper.props}\n\t\t\tisEmpty={_.isEmpty(data)}\n\t\t\tisLoading={isLoading}\n\t\t\tclassName={emptyStateWrapperClassName}\n\t\t\tanchorMessage={anchorMessage}\n\t\t>\n\t\t\t{emptyStateWrapper.props.children}\n\t\t\t{hasFixedHeader ? (\n\t\t\t\t<div className={cx('&-fixed')}>\n\t\t\t\t\t<div className={cx('&-fixed-header')}>\n\t\t\t\t\t\t<div className={cx('&-fixed-header-fixed-columns')}>\n\t\t\t\t\t\t\t{fixedColumnCount > 0 ? (\n\t\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\t\t\t\t\t\tstyle={style}\n\t\t\t\t\t\t\t\t\tclassName={cx('&-fixed-header-fixed-columns-Table')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{renderHeader(\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\tfixedColumnCount,\n\t\t\t\t\t\t\t\t\t\tchildComponentElements,\n\t\t\t\t\t\t\t\t\t\tflattenedColumns\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={cx('&-fixed-header-unfixed-columns')}\n\t\t\t\t\t\t\tref={(ref) => (fixedHeaderUnfixedColumnsRef = ref)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\t\t\t\t\tstyle={style}\n\t\t\t\t\t\t\t\tclassName={cx('&-fixed-header-unfixed-columns-Table')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{renderHeader(\n\t\t\t\t\t\t\t\t\tfixedColumnCount,\n\t\t\t\t\t\t\t\t\tInfinity,\n\t\t\t\t\t\t\t\t\tchildComponentElements,\n\t\t\t\t\t\t\t\t\tflattenedColumns\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={cx('&-fixed-body')}>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={cx('&-fixed-body-fixed-columns')}\n\t\t\t\t\t\t\tref={(ref) => (fixedBodyFixedColumnsRef = ref)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{fixedColumnCount > 0 ? (\n\t\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\t\t\t\t\t\tstyle={style}\n\t\t\t\t\t\t\t\t\tclassName={cx('&-fixed-body-fixed-columns-Table')}\n\t\t\t\t\t\t\t\t\thasWordWrap={\n\t\t\t\t\t\t\t\t\t\tfalse /* try to protect against vertical overflow */\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{renderBody(0, fixedColumnCount, flattenedColumns)}\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonScroll={handleFixedBodyUnfixedColumnsScroll}\n\t\t\t\t\t\t\tclassName={cx('&-fixed-body-unfixed-columns')}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className={cx('&-fixed-body-unfixed-columns-shadow')} />\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\t\t\t\t\tstyle={style}\n\t\t\t\t\t\t\t\tclassName={cx('&-fixed-body-unfixed-columns-Table')}\n\t\t\t\t\t\t\t\thasWordWrap={\n\t\t\t\t\t\t\t\t\tfalse /* try to protect against vertical overflow */\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{renderBody(fixedColumnCount, Infinity, flattenedColumns)}\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<ScrollTable\n\t\t\t\t\tstyle={style}\n\t\t\t\t\ttableWidth={isFullWidth ? '100%' : undefined}\n\t\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'&',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'&-full-width': isFullWidth,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclassName\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{renderHeader(0, Infinity, childComponentElements, flattenedColumns)}\n\t\t\t\t\t{renderBody(0, Infinity, flattenedColumns)}\n\t\t\t\t</ScrollTable>\n\t\t\t)}\n\t\t</EmptyStateWrapper>\n\t);\n};\n\nDataTable.displayName = 'DataTable';\n\nDataTable.propTypes = {\n\t/**\n\t\tClass names that are appended to the defaults.\n\t*/\n\tclassName: stringProps,\n\n\t/**\n\t\tArray of objects to be rendered in the table. Object keys match the\n\t\t\\`field\\` of each defined \\`DataTable.Column\\`.\n\t*/\n\tdata: arrayOf(object),\n\n\t/**\n\t\tThe text to display in cells which have no data.\n\t*/\n\temptyCellText: stringProps,\n\n\t/**\n\t\tRender each row item to be navigable, allowing \\`onRowClick\\` to be\n\t\ttriggered.\n\t*/\n\tisActionable: bool,\n\n\t/**\n\t\tIf \\`true\\`, the table will be set to fill the width of its parent\n\t\tcontainer.\n\t*/\n\tisFullWidth: bool,\n\n\t/**\n\t\tControls the visibility of the \\`LoadingMessage\\`.\n\t*/\n\tisLoading: bool,\n\n\t/**\n\t\tRender a checkbox in the first column allowing \\`onSelect\\` and\n\t\t\\`onSelectAll\\` to be triggered.\n\t*/\n\tisSelectable: bool,\n\n\t/**\n\t\tPosition the \\`EmptyMessage\\` and \\`LoadingMessage\\` near the top of the container. \n\t\tBy default, they are vertically aligned to the middle of the table. Useful\n\t\tfor tables with many rows that extend past the viewport.\n\t*/\n\tanchorMessage: bool,\n\n\t/**\n\t\tStyles that are passed through to the root container.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tThe minimum number of rows to rendered. If not enough data is provided,\n\t\tthe remainder will be shown as empty rows.\n\t*/\n\tminRows: number,\n\n\t/**\n\t\tHandler for row click. Signature is\n\t\t\\`(object, index, { props, event }) => {...}\\`\n\t*/\n\tonRowClick: func,\n\n\t/**\n\t\tHandler for checkbox selection. Signature is\n\t\t\\`(object, index, { props, event }) => {...}\\`\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tHandler for checkbox selection in the table header. Signature is\n\t\t\\`({ props, event }) => {...}\\`\n\t*/\n\tonSelectAll: func,\n\n\t/**\n\t\tHandler for column header click (for sorting). Signature is\n\t\t\\`(field, { props, event }) => {...}\\`\n\t*/\n\tonSort: func,\n\n\thasFixedHeader: bool /**\n\t\tIf \\`true\\` the table will have a fixed header set. *Note* this feature\n\t\timposes some limitations with respect to the styling and usage of your\n\t\ttable. Here are those caveats:\n\n\t\t- Each \\`DataTable.Column\\` *must* have an explicit pixel width defined\n\t\t\ton it. If the combined width of all the columns is greater than the\n\t\t\tparent container, the user will be able to horizontally scroll.\n\t\t- The outermost wrapper element emitted by this component will be set to\n\t\t\t100% height. It's your responsibility to put this component inside\n\t\t\tanother container that limits its height so that the resulting table can\n\t\t\tscroll vertically and keep the fixed headers.\n\t\t- Scroll bars will always be present. This is prevent misalignment of the\n\t\t\theader and the table body that can occur when scroll bars show up and\n\t\t\ttake width. MacOS browsers depend on OS level settings to determine how\n\t\t\tscrollbars show up. Having them always present saves us from writing a\n\t\t\tbunch of terrible code to detect scroll bars and account for their width.\n\t\t- Using fixed headers means multiple tables will be rendered under the\n\t\t\thood. We use \\`table-layout: fixed\\` behavior to make sure we can sync\n\t\t\tcolumns widths between the header and the body.\n\t\t- Does not support \\`DataTable.ColumnGroup\\`s at this time. It's possible\n\t\t\twe could support them at some point but its not a priority at the moment.\n\t\t- You have to be careful about table cell height overflow. There are\n\t\t\tcases where this can break the alignment of fixed columns.\n\t*/,\n\n\t/**\n\t\tSets the number of columns you want to have fixed. You must specify\n\t\t\\`fixedRowHeight\\` and enable \\`hasFixedHeader\\`when setting this prop.\n\t*/\n\tfixedColumnCount: number,\n\n\t/**\n\t\tDetermines the height of every row in the DataTable. It's required when\n\t\tusing the \\`fixedColumnCount\\` prop.\n\t*/\n\tfixedRowHeight: number,\n\n\t/**\n\t\tTruncates \\`Table.Td\\` content with ellipses, must be used with \\`hasFixedHeader\\`\n\t*/\n\ttruncateContent: bool,\n\n\tColumn: any /**\n\t\t*Child Element*\n\n\t\tUsed to define a column of the table. It accepts the same props as\n\t\t\\`Table.Th\\` in addition to:\n\n\t\t- the required prop \\`field\\`\n\t\t- the optional prop \\`title\\`\n\t*/,\n\n\tColumnGroup: any /**\n\t\t*Child Element*\n\n\t\t_Note_: column groups are *not* compatible with \\`hasFixedHeader\\`.\n\n\t\tUsed to Group defined \\`Column\\`s in the table. It accepts the same props\n\t\tas \\`Table.Th\\` in addition to:\n\n\t\t- the optional prop \\`title\\`\n\t*/,\n\n\t/**\n\t\t If \\`isResizable\\` is true,\n\t\tit is called when the user resizes the a header cell in the table.\n\t */\n\tonResize: func,\n};\n\nDataTable.defaultProps = defaultProps;\n\nDataTable.peek = {\n\tdescription: `\\`DataTable\\` provides a simple abstraction over the \\`Table\\` component to make it easier to define data-driven tables and render an array of objects.`,\n\tnotes: {\n\t\toverview: `\n\t\t\t\\`DataTable\\` provides a simple abstraction over the \\`Table\\`\n\t\t\tcomponent to make it easier to define data-driven tables and render an\n\t\t\tarray of objects.\n\t\t`,\n\t\tintendedUse: `\n\t\t\t\\`DataTable\\` is optimized for our two main uses, full page and in-line tables.\n\n\t\t\t**Full page table**\n\t\t\t\n\t\t\tTables that cover the entire page, or are the main focus on the page. Generally used for managing and monitoring objects.\n\t\t\t\n\t\t\t**In-line tables**\n\t\t\t\n\t\t\tTables insides containers such as \\`Dialog\\` or \\`Panel\\`. Generally used for details panels and actions dialogs.\n\t\t\t\t\t\t\t\t\n\t\t\t**Styling notes**\n\t\t\t\n\t\t\t- Preferred column alignment shown in \\`basic\\` example, column header alignment should match column content\n\t\t\t\t- strings left-aligned\n\t\t\t\t- currency right-aligned\n\t\t\t\t- icons/buttons centered\n\t\t\t- Use grey footer for full page tables, \\`hasLightFooter={false}\\`\n\t\t\t- Use white footer for in-line tables, \\`hasLightFooter={true}\\`\n\t\t`,\n\t\ttechnicalRecommendations: `\n\t\t\t- There is a pre-styled state for tables with no data, see the \\`empty\\` example\n\t\t\t- There should be no row hover state if the rows are not clickable, see example (?)\n\t\t`,\n\t},\n\tcategories: ['table'],\n\tmadeFrom: ['Checkbox', 'EmptyStateWrapper', 'ScrollTable'],\n};\n\nDataTable.EmptyStateWrapper = EmptyStateWrapper;\n\nexport interface IColumnProps extends IThProps {\n\tfield: string;\n\ttitle?: string;\n}\n\n// type IColumnProps = Overwrite<typeof Th, IColumnPropsRaw>;\n\nconst Column = (props: IColumnProps) => {\n\treturn null;\n};\n\nColumn.displayName = 'DataTable.Column';\n\nColumn.peek = {\n\tdescription: `\n\t\tRenders a \\`Th\\` for the table. It accepts all the props of \\`Table.Th\\`\n\t`,\n};\n\nColumn.propTypes = {\n\tfield: stringProps.isRequired,\n\ttitle: stringProps,\n\tisResizable: bool,\n};\n\nDataTable.Column = Column;\n\nexport interface IColumnGroupProps {\n\tchildren?: any;\n\ttitle?: string;\n}\n\nconst ColumnGroup = ({ children }: IColumnGroupProps) => {\n\treturn children;\n};\n\nColumnGroup.displayName = 'DataTable.ColumnGroup';\n\nColumnGroup.peek = {\n\tdescription: `\n\t\tRenders a group of \\`Th\\`s.  It accepts all the props of Table.Th\n\t`,\n};\n\nColumnGroup.propTypes = {\n\ttitle: stringProps,\n};\n\nColumnGroup.defaultProps = {\n\talign: 'center',\n};\n\nDataTable.ColumnGroup = ColumnGroup;\n\nDataTable.shouldColumnHandleSort = (column: any) => {\n\treturn _.isNil(column.isSortable) ? column.isSorted : column.isSortable;\n};\n\nexport default DataTable;\n"]},"metadata":{},"sourceType":"module"}