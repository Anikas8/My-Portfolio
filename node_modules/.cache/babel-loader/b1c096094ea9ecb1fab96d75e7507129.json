{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { createClass } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildHybridComponent } from '../../util/state-management';\nimport { partitionText } from '../../util/text-manipulation';\nimport * as reducers from './Autocomplete.reducers';\nimport * as KEYCODE from '../../constants/key-code';\nimport { DropMenuDumb as DropMenu } from '../DropMenu/DropMenu';\nconst cx = lucidClassNames.bind('&-Autocomplete');\nconst {\n  arrayOf,\n  bool,\n  func,\n  object,\n  shape,\n  string\n} = PropTypes;\nconst Autocomplete = createClass({\n  statics: {\n    peek: {\n      description: `A text input with suggested values displayed in an attached menu.`,\n      categories: ['controls', 'text'],\n      madeFrom: ['DropMenu']\n    }\n  },\n  displayName: 'Autocomplete',\n  reducers: reducers,\n  propTypes: {\n    /**\n        Appended to the component-specific class names set on the root elements.\n    */\n    className: string,\n    /**\n        Styles that are passed through to root element.\n    */\n    style: object,\n    /**\n        Disables the Autocomplete from being clicked or focused.\n    */\n    isDisabled: bool,\n    /**\n        Array of suggested text input values shown in drop menu.\n    */\n    suggestions: arrayOf(string),\n    /**\n        Text value of the input.\n    */\n    value: string,\n    /**\n        Object of DropMenu props which are passed thru to the underlying DropMenu\n        component.\n    */\n    DropMenu: shape(DropMenu.propTypes),\n    /**\n        Called when the input value changes. Has the signature\n        \\`(value, {props, event}) => {}\\` where value is a string.\n    */\n    onChange: func,\n    /**\n        Called when a suggstion is selected from the menu. Has the signature\n        \\`(optionIndex, {props, event}) => {}\\` where optionIndex is a number.\n    */\n    onSelect: func,\n    /**\n        Called when menu is expected to expand. Has the signature\n        \\`({props, event}) => {}\\`.\n    */\n    onExpand: func\n  },\n  getDefaultProps() {\n    return {\n      isDisabled: false,\n      suggestions: [],\n      value: '',\n      onChange: _.noop,\n      onSelect: _.noop,\n      onExpand: _.noop,\n      DropMenu: DropMenu.defaultProps\n    }; // TODO: typescript hack that should be removed\n  },\n\n  handleSelect(optionIndex, _ref) {\n    let {\n      event\n    } = _ref;\n    const {\n      suggestions,\n      onChange,\n      onSelect\n    } = this.props;\n    onChange(suggestions[optionIndex], {\n      event,\n      props: this.props\n    });\n    onSelect(optionIndex, {\n      event,\n      props: this.props\n    });\n  },\n  handleInput(event) {\n    const {\n      onChange,\n      onExpand,\n      DropMenu: {\n        onCollapse\n      }\n    } = this.props;\n    onChange(event.target.value, {\n      event,\n      props: this.props\n    });\n    if (!_.isEmpty(event.target.value)) {\n      onExpand({\n        event,\n        props: this.props\n      });\n    } else {\n      onCollapse();\n    }\n  },\n  getInputValue() {\n    return _.get(this, 'inputRef.value', this.props.value);\n  },\n  setInputValue(value) {\n    if (this.inputRef) {\n      this.inputRef.value = value;\n    }\n  },\n  handleInputKeydown(event) {\n    const {\n      onExpand,\n      DropMenu: {\n        isExpanded,\n        focusedIndex,\n        onCollapse\n      }\n    } = this.props;\n    const value = this.getInputValue();\n    if (event.keyCode === KEYCODE.Tab && isExpanded && focusedIndex !== null) {\n      this.handleSelect(focusedIndex, {\n        event,\n        props: this.props\n      });\n      event.preventDefault();\n    }\n    if (event.keyCode === KEYCODE.ArrowDown && !isExpanded) {\n      event.stopPropagation();\n      if (_.isEmpty(value)) {\n        onExpand({\n          event,\n          props: this.props\n        });\n      }\n    }\n    if (event.keyCode === KEYCODE.Escape) {\n      event.stopPropagation();\n      onCollapse(event);\n    }\n    if (event.keyCode === KEYCODE.Enter && focusedIndex === null) {\n      event.stopPropagation();\n      onCollapse(event);\n    }\n  },\n  handleControlClick(event) {\n    const {\n      onExpand,\n      DropMenu: {\n        isExpanded,\n        onCollapse\n      }\n    } = this.props;\n    if (event.target === this.inputRef) {\n      onExpand({\n        event,\n        props: this.props\n      });\n    } else {\n      if (isExpanded) {\n        onCollapse(event);\n      } else {\n        onExpand({\n          event,\n          props: this.props\n        });\n      }\n      this.inputRef.focus();\n    }\n  },\n  componentDidMount() {\n    const {\n      value\n    } = this.props;\n    this.inputRef.addEventListener('input', this.handleInput);\n    this.setInputValue(value);\n  },\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // TODO: typescript hack that should be removed\n    const {\n      value\n    } = nextProps;\n    if (value !== this.getInputValue()) {\n      this.setInputValue(value);\n    }\n  },\n  componentWillUnmount() {\n    if (this.inputRef) {\n      this.inputRef.removeEventListener('input', this.handleInput);\n    }\n  },\n  render() {\n    const {\n      style,\n      className,\n      isDisabled,\n      DropMenu: dropMenuProps,\n      suggestions,\n      ...passThroughs\n    } = this.props; // TODO: typescript hack that should be removed\n    const {\n      isExpanded\n    } = dropMenuProps;\n    const value = this.getInputValue();\n    const valuePattern = new RegExp(_.escapeRegExp(value), 'i');\n    return React.createElement(DropMenu, {\n      ...dropMenuProps,\n      isDisabled: isDisabled,\n      selectedIndices: [],\n      className: cx('&', className),\n      onSelect: this.handleSelect,\n      style: style\n    }, React.createElement(DropMenu.Control, {\n      ...{\n        onClick: this.handleControlClick\n      } /* TODO: typescript hack that should be removed */\n    }, React.createElement(\"div\", {\n      className: cx('&-Control', {\n        '&-Control-is-expanded': isExpanded,\n        '&-Control-is-disabled': isDisabled\n      })\n    }, React.createElement(\"input\", {\n      ..._.omit(passThroughs, ['onChange', 'onSelect', 'onExpand', 'value', 'children']),\n      type: 'text',\n      className: cx('&-Control-input'),\n      ref: ref => this.inputRef = ref,\n      onKeyDown: this.handleInputKeydown,\n      disabled: isDisabled\n    }))), value ? _.map(suggestions, suggestion => React.createElement(DropMenu.Option, {\n      key: 'AutocompleteOption' + suggestion\n    }, (() => {\n      const [pre, match, post] = partitionText(suggestion, valuePattern, value.length);\n      const formattedSuggestion = [];\n      if (pre) {\n        formattedSuggestion.push(React.createElement(\"span\", {\n          key: `AutocompleteOption-suggestion-pre-${suggestion}`,\n          className: cx('&-Option-suggestion-pre')\n        }, pre));\n      }\n      if (match) {\n        formattedSuggestion.push(React.createElement(\"span\", {\n          key: `AutocompleteOption-suggestion-match-${suggestion}`,\n          className: cx('&-Option-suggestion-match')\n        }, match));\n      }\n      if (post) {\n        formattedSuggestion.push(React.createElement(\"span\", {\n          key: `AutocompleteOption-suggestion-post-${suggestion}`,\n          className: cx('&-Option-suggestion-post')\n        }, post));\n      }\n      return formattedSuggestion;\n    })())) : _.map(suggestions, suggestion => React.createElement(DropMenu.Option, {\n      key: 'AutocompleteOption' + suggestion\n    }, suggestion)));\n  }\n});\nexport default buildHybridComponent(Autocomplete);\nexport { Autocomplete as AutocompleteDumb };","map":{"version":3,"mappings":"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","names":["React","PropTypes","_","createClass","lucidClassNames","buildHybridComponent","partitionText","reducers","KEYCODE","DropMenuDumb","DropMenu","cx","bind","arrayOf","bool","func","object","shape","string","Autocomplete","statics","peek","description","categories","madeFrom","displayName","propTypes","className","style","isDisabled","suggestions","value","onChange","onSelect","onExpand","getDefaultProps","noop","defaultProps","handleSelect","optionIndex","event","props","handleInput","onCollapse","target","isEmpty","getInputValue","get","setInputValue","inputRef","handleInputKeydown","isExpanded","focusedIndex","keyCode","Tab","preventDefault","ArrowDown","stopPropagation","Escape","Enter","handleControlClick","focus","componentDidMount","addEventListener","UNSAFE_componentWillReceiveProps","nextProps","componentWillUnmount","removeEventListener","render","dropMenuProps","passThroughs","valuePattern","RegExp","escapeRegExp","selectedIndices","Control","onClick","omit","type","ref","onKeyDown","disabled","map","suggestion","Option","key","pre","match","post","length","formattedSuggestion","push","AutocompleteDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Autocomplete/Autocomplete.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { createClass, StandardProps } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildHybridComponent } from '../../util/state-management';\nimport { partitionText } from '../../util/text-manipulation';\nimport * as reducers from './Autocomplete.reducers';\nimport * as KEYCODE from '../../constants/key-code';\nimport { DropMenuDumb as DropMenu, IDropMenuProps } from '../DropMenu/DropMenu';\n\nconst cx = lucidClassNames.bind('&-Autocomplete');\n\nconst { arrayOf, bool, func, object, shape, string } = PropTypes;\n\nexport interface IAutocompleteProps extends StandardProps {\n\tisDisabled?: boolean;\n\tsuggestions?: string[];\n\tvalue?: any;\n\tonChange?: any;\n\tonSelect?: any;\n\tonExpand?: any;\n\tDropMenu?: IDropMenuProps;\n\tplaceholder?: any;\n}\n\nconst Autocomplete = createClass<IAutocompleteProps>({\n\tstatics: {\n\t\tpeek: {\n\t\t\tdescription: `A text input with suggested values displayed in an attached menu.`,\n\t\t\tcategories: ['controls', 'text'],\n\t\t\tmadeFrom: ['DropMenu'],\n\t\t},\n\t},\n\n\tdisplayName: 'Autocomplete',\n\n\treducers: reducers as any, // TODO: typescript hack that should be removed\n\n\tpropTypes: {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root elements.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tStyles that are passed through to root element.\n\t\t*/\n\t\tstyle: object,\n\n\t\t/**\n\t\t\tDisables the Autocomplete from being clicked or focused.\n\t\t*/\n\t\tisDisabled: bool,\n\n\t\t/**\n\t\t\tArray of suggested text input values shown in drop menu.\n\t\t*/\n\t\tsuggestions: arrayOf(string),\n\n\t\t/**\n\t\t\tText value of the input.\n\t\t*/\n\t\tvalue: string,\n\n\t\t/**\n\t\t\tObject of DropMenu props which are passed thru to the underlying DropMenu\n\t\t\tcomponent.\n\t\t*/\n\t\tDropMenu: shape(DropMenu.propTypes),\n\n\t\t/**\n\t\t\tCalled when the input value changes. Has the signature\n\t\t\t\\`(value, {props, event}) => {}\\` where value is a string.\n\t\t*/\n\t\tonChange: func,\n\n\t\t/**\n\t\t\tCalled when a suggstion is selected from the menu. Has the signature\n\t\t\t\\`(optionIndex, {props, event}) => {}\\` where optionIndex is a number.\n\t\t*/\n\t\tonSelect: func,\n\n\t\t/**\n\t\t\tCalled when menu is expected to expand. Has the signature\n\t\t\t\\`({props, event}) => {}\\`.\n\t\t*/\n\t\tonExpand: func,\n\t} as any, // TODO: typescript hack that should be removed\n\n\tgetDefaultProps() {\n\t\treturn {\n\t\t\tisDisabled: false,\n\t\t\tsuggestions: [],\n\t\t\tvalue: '',\n\t\t\tonChange: _.noop,\n\t\t\tonSelect: _.noop,\n\t\t\tonExpand: _.noop,\n\t\t\tDropMenu: DropMenu.defaultProps,\n\t\t} as any; // TODO: typescript hack that should be removed\n\t},\n\n\thandleSelect(optionIndex: number, { event }: any) {\n\t\tconst { suggestions, onChange, onSelect } = this.props;\n\n\t\tonChange(suggestions[optionIndex], { event, props: this.props });\n\t\tonSelect(optionIndex, { event, props: this.props });\n\t},\n\n\thandleInput(event: any) {\n\t\tconst {\n\t\t\tonChange,\n\t\t\tonExpand,\n\t\t\tDropMenu: { onCollapse },\n\t\t} = this.props;\n\n\t\tonChange(event.target.value, { event, props: this.props });\n\t\tif (!_.isEmpty(event.target.value)) {\n\t\t\tonExpand({ event, props: this.props });\n\t\t} else {\n\t\t\tonCollapse();\n\t\t}\n\t},\n\n\tgetInputValue() {\n\t\treturn _.get(this, 'inputRef.value', this.props.value);\n\t},\n\n\tsetInputValue(value: any) {\n\t\tif (this.inputRef) {\n\t\t\tthis.inputRef.value = value;\n\t\t}\n\t},\n\n\thandleInputKeydown(event: React.KeyboardEvent<HTMLInputElement>) {\n\t\tconst {\n\t\t\tonExpand,\n\t\t\tDropMenu: { isExpanded, focusedIndex, onCollapse },\n\t\t} = this.props;\n\n\t\tconst value = this.getInputValue();\n\n\t\tif (event.keyCode === KEYCODE.Tab && isExpanded && focusedIndex !== null) {\n\t\t\tthis.handleSelect(focusedIndex, { event, props: this.props });\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tif (event.keyCode === KEYCODE.ArrowDown && !isExpanded) {\n\t\t\tevent.stopPropagation();\n\n\t\t\tif (_.isEmpty(value)) {\n\t\t\t\tonExpand({ event, props: this.props });\n\t\t\t}\n\t\t}\n\n\t\tif (event.keyCode === KEYCODE.Escape) {\n\t\t\tevent.stopPropagation();\n\t\t\tonCollapse(event);\n\t\t}\n\n\t\tif (event.keyCode === KEYCODE.Enter && focusedIndex === null) {\n\t\t\tevent.stopPropagation();\n\t\t\tonCollapse(event);\n\t\t}\n\t},\n\n\thandleControlClick(event: React.MouseEvent<Element, MouseEvent>) {\n\t\tconst {\n\t\t\tonExpand,\n\t\t\tDropMenu: { isExpanded, onCollapse },\n\t\t} = this.props;\n\n\t\tif (event.target === this.inputRef) {\n\t\t\tonExpand({ event, props: this.props });\n\t\t} else {\n\t\t\tif (isExpanded) {\n\t\t\t\tonCollapse(event);\n\t\t\t} else {\n\t\t\t\tonExpand({ event, props: this.props });\n\t\t\t}\n\n\t\t\tthis.inputRef.focus();\n\t\t}\n\t},\n\n\tcomponentDidMount() {\n\t\tconst { value } = this.props;\n\t\tthis.inputRef.addEventListener('input', this.handleInput);\n\t\tthis.setInputValue(value);\n\t},\n\n\tUNSAFE_componentWillReceiveProps(nextProps: any) {\n\t\t// TODO: typescript hack that should be removed\n\t\tconst { value } = nextProps;\n\t\tif (value !== this.getInputValue()) {\n\t\t\tthis.setInputValue(value);\n\t\t}\n\t},\n\n\tcomponentWillUnmount() {\n\t\tif (this.inputRef) {\n\t\t\tthis.inputRef.removeEventListener('input', this.handleInput);\n\t\t}\n\t},\n\n\trender() {\n\t\tconst {\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tisDisabled,\n\t\t\tDropMenu: dropMenuProps,\n\t\t\tsuggestions,\n\t\t\t...passThroughs\n\t\t} = this.props as any; // TODO: typescript hack that should be removed\n\n\t\tconst { isExpanded } = dropMenuProps;\n\n\t\tconst value = this.getInputValue();\n\t\tconst valuePattern = new RegExp(_.escapeRegExp(value), 'i');\n\n\t\treturn (\n\t\t\t<DropMenu\n\t\t\t\t{...dropMenuProps}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tselectedIndices={[]}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\tonSelect={this.handleSelect}\n\t\t\t\tstyle={style}\n\t\t\t>\n\t\t\t\t<DropMenu.Control\n\t\t\t\t\t{\n\t\t\t\t\t\t...{\n\t\t\t\t\t\t\tonClick: this.handleControlClick,\n\t\t\t\t\t\t} /* TODO: typescript hack that should be removed */\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={cx('&-Control', {\n\t\t\t\t\t\t\t'&-Control-is-expanded': isExpanded,\n\t\t\t\t\t\t\t'&-Control-is-disabled': isDisabled,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t{...(_.omit(passThroughs, [\n\t\t\t\t\t\t\t\t'onChange',\n\t\t\t\t\t\t\t\t'onSelect',\n\t\t\t\t\t\t\t\t'onExpand',\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'children',\n\t\t\t\t\t\t\t]) as any)} // TODO: typescript hack that should be removed\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tclassName={cx('&-Control-input')}\n\t\t\t\t\t\t\tref={(ref) => (this.inputRef = ref)}\n\t\t\t\t\t\t\tonKeyDown={this.handleInputKeydown}\n\t\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</DropMenu.Control>\n\t\t\t\t{value\n\t\t\t\t\t? _.map(suggestions, (suggestion) => (\n\t\t\t\t\t\t\t<DropMenu.Option key={'AutocompleteOption' + suggestion}>\n\t\t\t\t\t\t\t\t{(() => {\n\t\t\t\t\t\t\t\t\tconst [pre, match, post] = partitionText(\n\t\t\t\t\t\t\t\t\t\tsuggestion,\n\t\t\t\t\t\t\t\t\t\tvaluePattern,\n\t\t\t\t\t\t\t\t\t\tvalue.length\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst formattedSuggestion: any = [];\n\t\t\t\t\t\t\t\t\tif (pre) {\n\t\t\t\t\t\t\t\t\t\tformattedSuggestion.push(\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tkey={`AutocompleteOption-suggestion-pre-${suggestion}`}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={cx('&-Option-suggestion-pre')}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{pre}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\t\t\tformattedSuggestion.push(\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tkey={`AutocompleteOption-suggestion-match-${suggestion}`}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={cx('&-Option-suggestion-match')}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{match}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (post) {\n\t\t\t\t\t\t\t\t\t\tformattedSuggestion.push(\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tkey={`AutocompleteOption-suggestion-post-${suggestion}`}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={cx('&-Option-suggestion-post')}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{post}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn formattedSuggestion;\n\t\t\t\t\t\t\t\t})()}\n\t\t\t\t\t\t\t</DropMenu.Option>\n\t\t\t\t\t  ))\n\t\t\t\t\t: _.map(suggestions, (suggestion) => (\n\t\t\t\t\t\t\t<DropMenu.Option key={'AutocompleteOption' + suggestion}>\n\t\t\t\t\t\t\t\t{suggestion}\n\t\t\t\t\t\t\t</DropMenu.Option>\n\t\t\t\t\t  ))}\n\t\t\t</DropMenu>\n\t\t);\n\t},\n});\n\nexport default buildHybridComponent(Autocomplete);\nexport { Autocomplete as AutocompleteDumb };\n"]},"metadata":{},"sourceType":"module"}