{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nconst cx = lucidClassNames.bind('&-Grid');\nconst {\n  string,\n  bool,\n  node\n} = PropTypes;\nconst Cell = _props => null;\nCell.displayName = 'Grid.Cell';\nCell.peek = {\n  description: `Renders an \\`<article>\\` as the grid cell`\n};\nCell.propTypes = {\n  /**\n      fill all twelve columns of the primary grid axis\n  */\n  isFull: bool,\n  /**\n      fill six columns of the primary grid axis\n  */\n  isHalf: bool,\n  /**\n      fill four columns of the primary grid axis\n  */\n  isThird: bool,\n  /**\n      fill three columns of the primary grid axis\n  */\n  isQuarter: bool,\n  /**\n      fill 2 columns of 12\n  */\n  is2: bool,\n  /**\n      fill 3 columns of 12\n  */\n  is3: bool,\n  /**\n      fill 4 columns of 12\n  */\n  is4: bool,\n  /**\n      fill 5 columns of 12\n  */\n  is5: bool,\n  /**\n      fill 6 columns of 12\n  */\n  is6: bool,\n  /**\n      fill 7 columns of 12\n  */\n  is7: bool,\n  /**\n      fill 8 columns of 12\n  */\n  is8: bool,\n  /**\n      fill 9 columns of 12\n  */\n  is9: bool,\n  /**\n      fill 10 columns of 12\n  */\n  is10: bool,\n  /**\n      fill 11 columns of 12\n  */\n  is11: bool,\n  /**\n      offset a grid cell by three columns\n      */\n  isOffsetQuarter: bool,\n  /**\n      offset a grid cell by four columns\n  */\n  isOffsetThird: bool,\n  /**\n      offset a grid cell by six columns\n  */\n  isOffsetHalf: bool\n};\nCell.peek = {\n  description: `Renders an \\`<article>\\` as the grid cell.`\n};\n// TODO: This functional component should be refactored so it doesn't have to omit props\nconst nonPassThroughs = ['isFull', 'isHalf', 'isThird', 'isQuarter', 'is2', 'is3', 'is4', 'is5', 'is6', 'is7', 'is8', 'is9', 'is10', 'is11', 'isOffsetQuarter', 'isOffsetThird', 'isOffsetHalf', 'initialState', 'callbackId'];\nexport const Grid = props => {\n  const {\n    className,\n    children,\n    isVertical,\n    isHorizontal,\n    isGutterless,\n    isMultiline,\n    ...passThroughs\n  } = props;\n  const cellChildProps = _.map(findTypes(props, Grid.Cell), 'props');\n  return React.createElement(\"section\", {\n    ...passThroughs,\n    className: cx('&', {\n      '&-is-vertical': isVertical,\n      '&-is-horizontal': isHorizontal,\n      '&-is-gutterless': isGutterless,\n      '&-is-multiline': isMultiline\n    }, className)\n  }, _.map(cellChildProps, (cellChildProp, index) => {\n    return React.createElement(\"article\", {\n      ...omit(cellChildProp, nonPassThroughs),\n      key: index,\n      className: cx('&-Cell', {\n        '&-Cell-is-full': cellChildProp.isFull,\n        '&-Cell-is-half': cellChildProp.isHalf,\n        '&-Cell-is-quarter': cellChildProp.isQuarter,\n        '&-Cell-is-third': cellChildProp.isThird,\n        '&-Cell-is-2': cellChildProp.is2,\n        '&-Cell-is-3': cellChildProp.is3,\n        '&-Cell-is-4': cellChildProp.is4,\n        '&-Cell-is-5': cellChildProp.is5,\n        '&-Cell-is-6': cellChildProp.is6,\n        '&-Cell-is-7': cellChildProp.is7,\n        '&-Cell-is-8': cellChildProp.is8,\n        '&-Cell-is-9': cellChildProp.is9,\n        '&-Cell-is-10': cellChildProp.is10,\n        '&-Cell-is-11': cellChildProp.is11,\n        '&-Cell-is-offset-quarter': cellChildProp.isOffsetQuarter,\n        '&-Cell-is-offset-third': cellChildProp.isOffsetThird,\n        '&-Cell-is-offset-half': cellChildProp.isOffsetHalf\n      }, cellChildProp.className)\n    }, cellChildProp.children);\n  }), children);\n};\nGrid.Cell = Cell;\nGrid.displayName = 'Grid';\nGrid.peek = {\n  description: `This component is designed to be used in \\`Composites\\` as a layout tool. You can use the \\`Grid\\` components themselves or create your own components using the \\`Grid\\` styles from \\`Grid.less\\`. Please see examples for more information.`,\n  categories: ['layout']\n};\nGrid.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      explicitly set the primary axis of the grid to Y\n  */\n  isVertical: bool,\n  /**\n      explicitly set the primary axis of the grid to X\n  */\n  isHorizontal: bool,\n  /**\n      a grid without padding separating grid cells\n  */\n  isGutterless: bool,\n  /**\n      Allow Grids to wrap multiple lines\n  */\n  isMultiline: bool,\n  /**\n      Any valid React component\n  */\n  children: node\n};\nexport default Grid;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","findTypes","cx","bind","string","bool","node","Cell","_props","displayName","peek","description","propTypes","isFull","isHalf","isThird","isQuarter","is2","is3","is4","is5","is6","is7","is8","is9","is10","is11","isOffsetQuarter","isOffsetThird","isOffsetHalf","nonPassThroughs","Grid","props","className","children","isVertical","isHorizontal","isGutterless","isMultiline","passThroughs","cellChildProps","map","cellChildProp","index","key","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Grid/Grid.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Grid');\n\nconst { string, bool, node } = PropTypes;\n\n// -----------------------------------------------------------------------------\n// Cell child component\n// -----------------------------------------------------------------------------\nexport interface ICellProps extends StandardProps {\n\t/** fill all twelve columns of the primary grid axis */\n\tisFull?: boolean;\n\n\t/** fill six columns of the primary grid axis */\n\tisHalf?: boolean;\n\n\t/** fill four columns of the primary grid axis */\n\tisThird?: boolean;\n\n\t/** fill three columns of the primary grid axis */\n\tisQuarter?: boolean;\n\n\t/** fill 2 columns of 12 */\n\tis2?: boolean;\n\n\t/** fill 3 columns of 12 */\n\tis3?: boolean;\n\n\t/** fill 4 columns of 12 */\n\tis4?: boolean;\n\n\t/** fill 5 columns of 12 */\n\tis5?: boolean;\n\n\t/** fill 6 columns of 12 */\n\tis6?: boolean;\n\n\t/** fill 7 columns of 12 */\n\tis7?: boolean;\n\n\t/** fill 8 columns of 12 */\n\tis8?: boolean;\n\n\t/** fill 9 columns of 12 */\n\tis9?: boolean;\n\n\t/** fill 10 columns of 12 */\n\tis10?: boolean;\n\n\t/** fill 11 columns of 12 */\n\tis11?: boolean;\n\n\t/** offset a grid cell by three columns */\n\tisOffsetQuarter?: boolean;\n\n\t/** offset a grid cell by four columns */\n\tisOffsetThird?: boolean;\n\n\t/** offset a grid cell by six columns */\n\tisOffsetHalf?: boolean;\n}\n\nconst Cell = (_props: ICellProps): null => null;\nCell.displayName = 'Grid.Cell';\nCell.peek = {\n\tdescription: `Renders an \\`<article>\\` as the grid cell`,\n};\nCell.propTypes = {\n\t/**\n\t\tfill all twelve columns of the primary grid axis\n\t*/\n\tisFull: bool,\n\n\t/**\n\t\tfill six columns of the primary grid axis\n\t*/\n\tisHalf: bool,\n\n\t/**\n\t\tfill four columns of the primary grid axis\n\t*/\n\tisThird: bool,\n\n\t/**\n\t\tfill three columns of the primary grid axis\n\t*/\n\tisQuarter: bool,\n\n\t/**\n\t\tfill 2 columns of 12\n\t*/\n\tis2: bool,\n\n\t/**\n\t\tfill 3 columns of 12\n\t*/\n\tis3: bool,\n\n\t/**\n\t\tfill 4 columns of 12\n\t*/\n\tis4: bool,\n\n\t/**\n\t\tfill 5 columns of 12\n\t*/\n\tis5: bool,\n\n\t/**\n\t\tfill 6 columns of 12\n\t*/\n\tis6: bool,\n\n\t/**\n\t\tfill 7 columns of 12\n\t*/\n\tis7: bool,\n\n\t/**\n\t\tfill 8 columns of 12\n\t*/\n\tis8: bool,\n\n\t/**\n\t\tfill 9 columns of 12\n\t*/\n\tis9: bool,\n\n\t/**\n\t\tfill 10 columns of 12\n\t*/\n\tis10: bool,\n\n\t/**\n\t\tfill 11 columns of 12\n\t*/\n\tis11: bool,\n\n\t/**\n\t\toffset a grid cell by three columns\n\t\t*/\n\tisOffsetQuarter: bool,\n\n\t/**\n\t\toffset a grid cell by four columns\n\t*/\n\tisOffsetThird: bool,\n\n\t/**\n\t\toffset a grid cell by six columns\n\t*/\n\tisOffsetHalf: bool,\n};\nCell.peek = {\n\tdescription: `Renders an \\`<article>\\` as the grid cell.`,\n};\n\n// -----------------------------------------------------------------------------\n// Grid\n// -----------------------------------------------------------------------------\nexport interface IGridProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {\n\t/** explicitly set the primary axis of the grid to Y */\n\tisVertical?: boolean;\n\n\t/** explicitly set the primary axis of the grid to X */\n\tisHorizontal?: boolean;\n\n\t/** a grid without padding separating grid cells */\n\tisGutterless?: boolean;\n\n\t/** Allow Grids to wrap multiple lines */\n\tisMultiline?: boolean;\n\n\t/** Any valid React component */\n\tchildren?: React.ReactNode;\n}\n\n// TODO: This functional component should be refactored so it doesn't have to omit props\nconst nonPassThroughs = [\n\t'isFull',\n\t'isHalf',\n\t'isThird',\n\t'isQuarter',\n\t'is2',\n\t'is3',\n\t'is4',\n\t'is5',\n\t'is6',\n\t'is7',\n\t'is8',\n\t'is9',\n\t'is10',\n\t'is11',\n\t'isOffsetQuarter',\n\t'isOffsetThird',\n\t'isOffsetHalf',\n\t'initialState',\n\t'callbackId',\n];\n\nexport const Grid = (props: IGridProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tchildren,\n\t\tisVertical,\n\t\tisHorizontal,\n\t\tisGutterless,\n\t\tisMultiline,\n\t\t...passThroughs\n\t} = props;\n\n\tconst cellChildProps = _.map(findTypes(props, Grid.Cell), 'props');\n\n\treturn (\n\t\t<section\n\t\t\t{...passThroughs}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-vertical': isVertical,\n\t\t\t\t\t'&-is-horizontal': isHorizontal,\n\t\t\t\t\t'&-is-gutterless': isGutterless,\n\t\t\t\t\t'&-is-multiline': isMultiline,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t>\n\t\t\t{_.map(cellChildProps, (cellChildProp, index): React.ReactElement => {\n\t\t\t\treturn (\n\t\t\t\t\t<article\n\t\t\t\t\t\t{...omit(cellChildProp, nonPassThroughs)}\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t'&-Cell',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'&-Cell-is-full': cellChildProp.isFull,\n\t\t\t\t\t\t\t\t'&-Cell-is-half': cellChildProp.isHalf,\n\t\t\t\t\t\t\t\t'&-Cell-is-quarter': cellChildProp.isQuarter,\n\t\t\t\t\t\t\t\t'&-Cell-is-third': cellChildProp.isThird,\n\t\t\t\t\t\t\t\t'&-Cell-is-2': cellChildProp.is2,\n\t\t\t\t\t\t\t\t'&-Cell-is-3': cellChildProp.is3,\n\t\t\t\t\t\t\t\t'&-Cell-is-4': cellChildProp.is4,\n\t\t\t\t\t\t\t\t'&-Cell-is-5': cellChildProp.is5,\n\t\t\t\t\t\t\t\t'&-Cell-is-6': cellChildProp.is6,\n\t\t\t\t\t\t\t\t'&-Cell-is-7': cellChildProp.is7,\n\t\t\t\t\t\t\t\t'&-Cell-is-8': cellChildProp.is8,\n\t\t\t\t\t\t\t\t'&-Cell-is-9': cellChildProp.is9,\n\t\t\t\t\t\t\t\t'&-Cell-is-10': cellChildProp.is10,\n\t\t\t\t\t\t\t\t'&-Cell-is-11': cellChildProp.is11,\n\t\t\t\t\t\t\t\t'&-Cell-is-offset-quarter': cellChildProp.isOffsetQuarter,\n\t\t\t\t\t\t\t\t'&-Cell-is-offset-third': cellChildProp.isOffsetThird,\n\t\t\t\t\t\t\t\t'&-Cell-is-offset-half': cellChildProp.isOffsetHalf,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcellChildProp.className\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{cellChildProp.children}\n\t\t\t\t\t</article>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t{children}\n\t\t</section>\n\t);\n};\n\nGrid.Cell = Cell;\nGrid.displayName = 'Grid';\nGrid.peek = {\n\tdescription: `This component is designed to be used in \\`Composites\\` as a layout tool. You can use the \\`Grid\\` components themselves or create your own components using the \\`Grid\\` styles from \\`Grid.less\\`. Please see examples for more information.`,\n\tcategories: ['layout'],\n};\nGrid.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\texplicitly set the primary axis of the grid to Y\n\t*/\n\tisVertical: bool,\n\n\t/**\n\t\texplicitly set the primary axis of the grid to X\n\t*/\n\tisHorizontal: bool,\n\n\t/**\n\t\ta grid without padding separating grid cells\n\t*/\n\tisGutterless: bool,\n\n\t/**\n\t\tAllow Grids to wrap multiple lines\n\t*/\n\tisMultiline: bool,\n\n\t/**\n\t\tAny valid React component\n\t*/\n\tchildren: node,\n};\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}