{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Motion, spring } from 'react-motion';\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { shiftChildren } from '../../util/dom-helpers';\nimport { findTypes } from '../../util/component-types';\nconst cx = lucidClassNames.bind('&-SlidePanel');\nconst {\n  bool,\n  func,\n  node,\n  number,\n  string,\n  any\n} = PropTypes;\nconst modulo = (n, a) => a - n * Math.floor(a / n);\nclass SlidePanelSlide extends React.Component {\n  render() {\n    return null;\n  }\n}\nSlidePanelSlide.displayName = 'SlidePanel.Slide';\nSlidePanelSlide.propName = 'Slide';\nconst nonPassThroughs = ['className', 'children', 'Slide', 'slidesToShow', 'offset', 'isAnimated', 'isLooped', 'onSwipe', 'initialState', 'callbackId'];\nclass SlidePanel extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.rootHTMLDivElement = React.createRef();\n    this.slideStrip = React.createRef();\n    this.offsetTranslate = this.props.isLooped ? Math.floor(_.size(findTypes(this.props, SlidePanel.Slide)) / 2) : 0;\n    this.state = {\n      translateXPixel: 0,\n      startX: 0,\n      isAnimated: this.props.isAnimated,\n      isDragging: false\n    };\n    this.handleTouchStart = event => {\n      this.setState({\n        startX: event.touches[0].screenX,\n        isAnimated: false,\n        isDragging: true\n      });\n    };\n    this.handleTouchMove = event => {\n      const dX = event.touches[0].screenX - this.state.startX;\n      this.setState({\n        translateXPixel: dX\n      });\n    };\n    this.handleTouchEnd = event => {\n      const dX = event.changedTouches[0].screenX - this.state.startX;\n      const slideWidth = this.rootHTMLDivElement.current.getBoundingClientRect().width / this.props.slidesToShow;\n      const slidesSwiped = Math.round(dX / slideWidth);\n      if (slidesSwiped !== 0) {\n        this.props.onSwipe(-1 * slidesSwiped, {\n          event,\n          props: this.props\n        });\n      }\n      this.setState({\n        translateXPixel: 0,\n        isDragging: false,\n        isAnimated: this.props.isAnimated\n      });\n    };\n  }\n  componentDidMount() {\n    const slides = findTypes(this.props, SlidePanel.Slide);\n    if (this.props.isLooped) {\n      shiftChildren(this.slideStrip.current, Math.floor(_.size(slides) / 2));\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const slides = findTypes(this.props, SlidePanel.Slide);\n    const offsetDiff = this.props.offset - prevProps.offset;\n    if (offsetDiff !== 0 && this.props.isLooped) {\n      this.offsetTranslate = modulo(_.size(slides), this.offsetTranslate - offsetDiff);\n      _.delay(() => {\n        shiftChildren(this.slideStrip.current, -offsetDiff);\n        this.setState({\n          isAnimated: false\n        }, () => {\n          this.forceUpdate();\n          this.setState({\n            isAnimated: this.props.isAnimated\n          });\n        });\n      }, 200);\n    }\n  }\n  render() {\n    const {\n      className,\n      slidesToShow,\n      offset: realOffset,\n      isLooped,\n      ...passThroughs\n    } = this.props;\n    const offset = realOffset + this.offsetTranslate;\n    const slides = findTypes(this.props, SlidePanel.Slide);\n    const translateXPercentage = -1 * (100 / slidesToShow) * (isLooped ? modulo(_.size(slides), offset) : offset);\n    return React.createElement(\"div\", {\n      ...omit(passThroughs, nonPassThroughs),\n      ref: this.rootHTMLDivElement,\n      className: cx('&', className)\n    }, React.createElement(Motion, {\n      style: this.state.isAnimated ? {\n        translateXPercentage: spring(translateXPercentage, QUICK_SLIDE_MOTION),\n        translateXPixel: spring(this.state.translateXPixel, QUICK_SLIDE_MOTION)\n      } : {\n        translateXPercentage: translateXPercentage,\n        translateXPixel: this.state.translateXPixel\n      }\n    }, tween => React.createElement(\"div\", {\n      ...omit(passThroughs, nonPassThroughs),\n      className: cx('&-slidestrip', className),\n      style: {\n        transform: this.state.isDragging ? `translateX(calc(${tween.translateXPercentage}% + ${this.state.translateXPixel}px))` : `translateX(calc(${tween.translateXPercentage}% + ${tween.translateXPixel}px))`\n      },\n      ref: this.slideStrip,\n      onTouchStart: this.handleTouchStart,\n      onTouchMove: this.handleTouchMove,\n      onTouchEnd: this.handleTouchEnd,\n      onTouchCancel: _.noop\n    }, _.map(slides, (slide, offset) => React.createElement(\"div\", {\n      key: offset,\n      ...slide.props,\n      className: cx('&-Slide', slide.props.className),\n      style: {\n        flexGrow: 1,\n        flexShrink: 0,\n        flexBasis: `${100 / slidesToShow}%`,\n        ...slide.props.style\n      }\n    })))));\n  }\n}\nSlidePanel._isPrivate = true;\nSlidePanel.displayName = 'SlidePanel';\nSlidePanel.peek = {\n  description: `A container for rendering a set of horizontal slides at at a particular offset. Translation between slides is controlled by passing in a new \\`offset\\`.  Can hook into touch events to update the \\`offset\\`.`,\n  categories: ['helpers']\n};\nSlidePanel.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      SlidePanel.Slide elements are passed in as children.\n  */\n  children: node,\n  /**\n      This is the child component that will be displayed inside the SlidePanel.\n  */\n  Slide: any,\n  /**\n      Max number of viewable slides to show simultaneously.\n  */\n  slidesToShow: number,\n  /**\n      The offset of the left-most rendered slide.\n  */\n  offset: number,\n  /**\n      Animate slides transitions from changes in \\`offset\\`.\n  */\n  isAnimated: bool,\n  /**\n      Slides are rendered in a continuous loop, where the first slide repeats\n      after the last slide and vice-versa. DOM elements are re-ordered and\n      re-used.\n  */\n  isLooped: bool,\n  /**\n      Called when a user's swipe would change the offset. Callback passes\n      number of slides by the user (positive for forward swipes, negative for\n      backwards swipes).  Signature: \\`(slidesSwiped, { event, props }) => {}\\`\n  */\n  onSwipe: func\n};\nSlidePanel.Slide = SlidePanelSlide;\nSlidePanel.defaultProps = {\n  slidesToShow: 1,\n  offset: 0,\n  isAnimated: true,\n  onSwipe: _.noop,\n  isLooped: false\n};\nexport default SlidePanel;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","Motion","spring","QUICK_SLIDE_MOTION","lucidClassNames","shiftChildren","findTypes","cx","bind","bool","func","node","number","string","any","modulo","n","a","Math","floor","SlidePanelSlide","Component","render","nonPassThroughs","SlidePanel","constructor","createRef","props","isLooped","size","Slide","translateXPixel","startX","isAnimated","isDragging","event","setState","touches","screenX","dX","state","changedTouches","slideWidth","rootHTMLDivElement","current","getBoundingClientRect","width","slidesToShow","slidesSwiped","round","onSwipe","componentDidMount","slides","slideStrip","componentDidUpdate","prevProps","prevState","offsetDiff","offset","offsetTranslate","delay","forceUpdate","className","realOffset","passThroughs","translateXPercentage","ref","style","tween","transform","onTouchStart","handleTouchStart","onTouchMove","handleTouchMove","onTouchEnd","handleTouchEnd","onTouchCancel","noop","map","slide","key","flexGrow","flexShrink","flexBasis","description","categories","children"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SlidePanel/SlidePanel.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Motion, spring, PlainStyle } from 'react-motion';\n\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { shiftChildren } from '../../util/dom-helpers';\nimport { findTypes, StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-SlidePanel');\n\nconst { bool, func, node, number, string, any } = PropTypes;\n\nconst modulo = (n: number, a: number): number => a - n * Math.floor(a / n);\n\n/** Slide Panel Slide */\nexport interface ISlidePanelSlideProps extends StandardProps {\n\tdescription?: string;\n}\nclass SlidePanelSlide extends React.Component<ISlidePanelSlideProps, {}, {}> {\n\tstatic displayName = 'SlidePanel.Slide';\n\tstatic propName = 'Slide';\n\n\trender(): null {\n\t\treturn null;\n\t}\n}\n\n/** Slide Panel */\nexport interface ISlidePanelProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Max number of viewable slides to show simultaneously. */\n\tslidesToShow: number;\n\n\t/** The offset of the left-most rendered slide. */\n\toffset: number;\n\n\t/** Animate slides transitions from changes in `offset`. */\n\tisAnimated: boolean;\n\n\t/** Slides are rendered in a continuous loop, where the first slide repeats\n\t * after the last slide and vice-versa. DOM elements are re-ordered and\n\t * re-used. */\n\tisLooped: boolean;\n\n\t/** Called when a user's swipe would change the offset. Callback passes\n\t * number of slides by the user (positive for forward swipes, negative for\n\t * backwards swipes). */\n\tonSwipe: (\n\t\tslidesSwiped: number,\n\t\t{ event, props }: { event: React.TouchEvent; props: ISlidePanelProps }\n\t) => void;\n}\n\nconst nonPassThroughs = [\n\t'className',\n\t'children',\n\t'Slide',\n\t'slidesToShow',\n\t'offset',\n\t'isAnimated',\n\t'isLooped',\n\t'onSwipe',\n\t'initialState',\n\t'callbackId',\n];\ninterface ISlidePanelState {\n\ttranslateXPixel: number;\n\tstartX: number;\n\tisDragging: boolean;\n\tisAnimated: boolean;\n}\n\nclass SlidePanel extends React.Component<\n\tISlidePanelProps,\n\tISlidePanelState,\n\t{}\n> {\n\tstatic _isPrivate = true;\n\tstatic displayName = 'SlidePanel';\n\tstatic peek = {\n\t\tdescription: `A container for rendering a set of horizontal slides at at a particular offset. Translation between slides is controlled by passing in a new \\`offset\\`.  Can hook into touch events to update the \\`offset\\`.`,\n\t\tcategories: ['helpers'],\n\t};\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tSlidePanel.Slide elements are passed in as children.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tThis is the child component that will be displayed inside the SlidePanel.\n\t\t*/\n\t\tSlide: any,\n\n\t\t/**\n\t\t\tMax number of viewable slides to show simultaneously.\n\t\t*/\n\t\tslidesToShow: number,\n\n\t\t/**\n\t\t\tThe offset of the left-most rendered slide.\n\t\t*/\n\t\toffset: number,\n\n\t\t/**\n\t\t\tAnimate slides transitions from changes in \\`offset\\`.\n\t\t*/\n\t\tisAnimated: bool,\n\n\t\t/**\n\t\t\tSlides are rendered in a continuous loop, where the first slide repeats\n\t\t\tafter the last slide and vice-versa. DOM elements are re-ordered and\n\t\t\tre-used.\n\t\t*/\n\t\tisLooped: bool,\n\n\t\t/**\n\t\t\tCalled when a user's swipe would change the offset. Callback passes\n\t\t\tnumber of slides by the user (positive for forward swipes, negative for\n\t\t\tbackwards swipes).  Signature: \\`(slidesSwiped, { event, props }) => {}\\`\n\t\t*/\n\t\tonSwipe: func,\n\t};\n\n\tprivate rootHTMLDivElement = React.createRef<HTMLDivElement>();\n\tprivate slideStrip = React.createRef<HTMLDivElement>();\n\n\tstatic Slide = SlidePanelSlide;\n\n\toffsetTranslate = this.props.isLooped\n\t\t? Math.floor(_.size(findTypes(this.props, SlidePanel.Slide)) / 2)\n\t\t: 0;\n\n\tstate = {\n\t\ttranslateXPixel: 0,\n\t\tstartX: 0,\n\t\tisAnimated: this.props.isAnimated as boolean,\n\t\tisDragging: false,\n\t};\n\n\tstatic defaultProps = {\n\t\tslidesToShow: 1,\n\t\toffset: 0,\n\t\tisAnimated: true,\n\t\tonSwipe: _.noop,\n\t\tisLooped: false,\n\t};\n\n\thandleTouchStart = (event: React.TouchEvent): void => {\n\t\tthis.setState({\n\t\t\tstartX: event.touches[0].screenX,\n\t\t\tisAnimated: false,\n\t\t\tisDragging: true,\n\t\t});\n\t};\n\n\thandleTouchMove = (event: React.TouchEvent): void => {\n\t\tconst dX = event.touches[0].screenX - this.state.startX;\n\t\tthis.setState({\n\t\t\ttranslateXPixel: dX,\n\t\t});\n\t};\n\n\thandleTouchEnd = (event: React.TouchEvent): void => {\n\t\tconst dX = event.changedTouches[0].screenX - this.state.startX;\n\t\tconst slideWidth =\n\t\t\t(this.rootHTMLDivElement.current as HTMLElement).getBoundingClientRect()\n\t\t\t\t.width / (this.props.slidesToShow as number);\n\t\tconst slidesSwiped = Math.round(dX / slideWidth);\n\n\t\tif (slidesSwiped !== 0) {\n\t\t\t(\n\t\t\t\tthis.props.onSwipe as (\n\t\t\t\t\tslidesSwiped: number,\n\t\t\t\t\t{ event, props }: { event: React.TouchEvent; props: ISlidePanelProps }\n\t\t\t\t) => void\n\t\t\t)(-1 * slidesSwiped, { event, props: this.props });\n\t\t}\n\t\tthis.setState({\n\t\t\ttranslateXPixel: 0,\n\t\t\tisDragging: false,\n\t\t\tisAnimated: this.props.isAnimated as boolean,\n\t\t});\n\t};\n\n\tcomponentDidMount(): void {\n\t\tconst slides = findTypes(this.props, SlidePanel.Slide);\n\t\tif (this.props.isLooped) {\n\t\t\tshiftChildren(\n\t\t\t\tthis.slideStrip.current as HTMLElement,\n\t\t\t\tMath.floor(_.size(slides) / 2)\n\t\t\t);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(\n\t\tprevProps: ISlidePanelProps,\n\t\tprevState: ISlidePanelState\n\t): void {\n\t\tconst slides = findTypes(this.props, SlidePanel.Slide);\n\t\tconst offsetDiff =\n\t\t\t(this.props.offset as number) - (prevProps.offset as number);\n\t\tif (offsetDiff !== 0 && this.props.isLooped) {\n\t\t\tthis.offsetTranslate = modulo(\n\t\t\t\t_.size(slides),\n\t\t\t\tthis.offsetTranslate - offsetDiff\n\t\t\t);\n\n\t\t\t_.delay((): void => {\n\t\t\t\tshiftChildren(this.slideStrip.current as HTMLElement, -offsetDiff);\n\t\t\t\tthis.setState(\n\t\t\t\t\t{\n\t\t\t\t\t\tisAnimated: false,\n\t\t\t\t\t},\n\t\t\t\t\t(): void => {\n\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisAnimated: this.props.isAnimated as boolean,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}, 200);\n\t\t}\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tslidesToShow,\n\t\t\toffset: realOffset,\n\t\t\tisLooped,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\t\tconst offset = (realOffset as number) + this.offsetTranslate;\n\n\t\tconst slides = findTypes(this.props, SlidePanel.Slide);\n\t\tconst translateXPercentage =\n\t\t\t-1 *\n\t\t\t(100 / (slidesToShow as number)) *\n\t\t\t(isLooped ? modulo(_.size(slides), offset) : offset);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t\tref={this.rootHTMLDivElement}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t>\n\t\t\t\t<Motion\n\t\t\t\t\tstyle={\n\t\t\t\t\t\tthis.state.isAnimated\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\ttranslateXPercentage: spring(\n\t\t\t\t\t\t\t\t\t\ttranslateXPercentage,\n\t\t\t\t\t\t\t\t\t\tQUICK_SLIDE_MOTION\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\ttranslateXPixel: spring(\n\t\t\t\t\t\t\t\t\t\tthis.state.translateXPixel,\n\t\t\t\t\t\t\t\t\t\tQUICK_SLIDE_MOTION\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\ttranslateXPercentage: translateXPercentage,\n\t\t\t\t\t\t\t\t\ttranslateXPixel: this.state.translateXPixel,\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{(tween: PlainStyle): JSX.Element => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t\t\t\t\tclassName={cx('&-slidestrip', className)}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttransform: this.state.isDragging\n\t\t\t\t\t\t\t\t\t? `translateX(calc(${tween.translateXPercentage}% + ${this.state.translateXPixel}px))`\n\t\t\t\t\t\t\t\t\t: `translateX(calc(${tween.translateXPercentage}% + ${tween.translateXPixel}px))`,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tref={this.slideStrip}\n\t\t\t\t\t\t\tonTouchStart={this.handleTouchStart}\n\t\t\t\t\t\t\tonTouchMove={this.handleTouchMove}\n\t\t\t\t\t\t\tonTouchEnd={this.handleTouchEnd}\n\t\t\t\t\t\t\tonTouchCancel={_.noop}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{_.map(\n\t\t\t\t\t\t\t\tslides,\n\t\t\t\t\t\t\t\t(slide: React.ReactElement, offset): React.ReactNode => (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={offset}\n\t\t\t\t\t\t\t\t\t\t{...slide.props}\n\t\t\t\t\t\t\t\t\t\tclassName={cx('&-Slide', slide.props.className)}\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tflexGrow: 1,\n\t\t\t\t\t\t\t\t\t\t\tflexShrink: 0,\n\t\t\t\t\t\t\t\t\t\t\tflexBasis: `${100 / (slidesToShow as number)}%`,\n\t\t\t\t\t\t\t\t\t\t\t...slide.props.style,\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</Motion>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SlidePanel;\n"]},"metadata":{},"sourceType":"module"}