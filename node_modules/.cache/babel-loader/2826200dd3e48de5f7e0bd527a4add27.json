{"ast":null,"code":"import { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-GripperVerticalIcon');\nconst iconPropTypes = {\n  /** Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library. */\n  className: PropTypes.string,\n  /** Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`. */\n  size: PropTypes.number,\n  /** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width. */\n  viewBox: PropTypes.string,\n  /** Any valid SVG aspect ratio. */\n  aspectRatio: PropTypes.string,\n  /** Adds styling that makes the icon appear clickable. */\n  isClickable: PropTypes.bool,\n  /** Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false. */\n  isDisabled: PropTypes.bool,\n  /** Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onClick: PropTypes.func,\n  /** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onSelect: PropTypes.func,\n  /** Any valid React children. */\n  children: PropTypes.element,\n  /** Sets the color of the Icon.  May not be applicable for icons that are tied\n      to specific colors (e.g. DangerIcon). */\n  color: PropTypes.oneOf(['neutral-dark', 'neutral-light', 'primary', 'white', 'success', 'warning', 'secondary-one', 'secondary-two', 'secondary-three'])\n};\nexport const GripperVerticalIcon = _ref => {\n  let {\n    className,\n    isClickable,\n    isDisabled,\n    ...passThroughs\n  } = _ref;\n  return React.createElement(Icon, {\n    ...omit(passThroughs, ['initialState']),\n    width: 2,\n    height: 16,\n    viewBox: '0 0 2 16',\n    isClickable: isClickable,\n    isDisabled: isDisabled,\n    className: cx('&', className)\n  }, React.createElement(\"path\", {\n    d: 'M0 .5h2M0 4h2M0 8h2M0 12h2M0 15.5h2'\n  }));\n};\nGripperVerticalIcon.defaultProps = Icon.defaultProps;\nGripperVerticalIcon.displayName = 'GripperVerticalIcon';\nGripperVerticalIcon.peek = {\n  description: `A vertical gripper icon.`,\n  categories: ['visual design', 'icons'],\n  extend: 'Icon',\n  madeFrom: ['Icon']\n};\nGripperVerticalIcon.propTypes = iconPropTypes;\nexport default GripperVerticalIcon;","map":{"version":3,"mappings":"AAAA,SAAYA,IAAI,QAAQ,QAAQ;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAOC,IAAoB,MAAM,SAAS;AAC1C,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,uBAAuB,CAAC;AAIxD,MAAMC,aAAa,GAAG;EACrB;;EAEAC,SAAS,EAAEN,SAAS,CAACO,MAAM;EAE3B;;;EAGAC,IAAI,EAAER,SAAS,CAACS,MAAM;EAEtB;EACAC,KAAK,EAAEV,SAAS,CAACW,SAAS,CAAC,CAACX,SAAS,CAACS,MAAM,EAAET,SAAS,CAACO,MAAM,CAAC,CAAC;EAEhE;EACAK,MAAM,EAAEZ,SAAS,CAACW,SAAS,CAAC,CAACX,SAAS,CAACS,MAAM,EAAET,SAAS,CAACO,MAAM,CAAC,CAAC;EAEjE;;;EAGAM,OAAO,EAAEb,SAAS,CAACO,MAAM;EAEzB;EACAO,WAAW,EAAEd,SAAS,CAACO,MAAM;EAE7B;EACAQ,WAAW,EAAEf,SAAS,CAACgB,IAAI;EAE3B;;EAEAC,UAAU,EAAEjB,SAAS,CAACgB,IAAI;EAE1B;;EAEAE,OAAO,EAAElB,SAAS,CAACmB,IAAI;EAEvB;;EAEAC,QAAQ,EAAEpB,SAAS,CAACmB,IAAI;EAExB;EACAE,QAAQ,EAAErB,SAAS,CAACsB,OAAO;EAE3B;;EAEAC,KAAK,EAAEvB,SAAS,CAACwB,KAAK,CAAC,CACtB,cAAc,EACd,eAAe,EACf,SAAS,EACT,OAAO,EACP,SAAS,EACT,SAAS,EACT,eAAe,EACf,eAAe,EACf,iBAAiB,CACjB;CACD;AAED,OAAO,MAAMC,mBAAmB,GAAG,QAKH;EAAA,IALI;IACnCnB,SAAS;IACTS,WAAW;IACXE,UAAU;IACV,GAAGS;EAAY,CACY;EAC3B,OACC3B,oBAACE,IAAI;IAAA,GACAH,IAAI,CAAC4B,YAAY,EAAE,CAAC,cAAc,CAAC,CAAC;IACxChB,KAAK,EAAE,CAAC;IACRE,MAAM,EAAE,EAAE;IACVC,OAAO,EAAC,UAAU;IAClBE,WAAW,EAAEA,WAAW;IACxBE,UAAU,EAAEA,UAAU;IACtBX,SAAS,EAAEH,EAAE,CAAC,GAAG,EAAEG,SAAS;EAAC,GAE7BP;IAAM4B,CAAC,EAAC;EAAqC,EAAG,CAC1C;AAET,CAAC;AAEDF,mBAAmB,CAACG,YAAY,GAAG3B,IAAI,CAAC2B,YAAY;AACpDH,mBAAmB,CAACI,WAAW,GAAG,qBAAqB;AACvDJ,mBAAmB,CAACK,IAAI,GAAG;EAC1BC,WAAW,EAAE,0BAA0B;EACvCC,UAAU,EAAE,CAAC,eAAe,EAAE,OAAO,CAAC;EACtCC,MAAM,EAAE,MAAM;EACdC,QAAQ,EAAE,CAAC,MAAM;CACjB;AACDT,mBAAmB,CAACU,SAAS,GAAG9B,aAAa;AAE7C,eAAeoB,mBAAmB","names":["omit","React","PropTypes","Icon","lucidClassNames","cx","bind","iconPropTypes","className","string","size","number","width","oneOfType","height","viewBox","aspectRatio","isClickable","bool","isDisabled","onClick","func","onSelect","children","element","color","oneOf","GripperVerticalIcon","passThroughs","d","defaultProps","displayName","peek","description","categories","extend","madeFrom","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/GripperVerticalIcon/GripperVerticalIcon.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Icon, { IIconProps } from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\n\nconst cx = lucidClassNames.bind('&-GripperVerticalIcon');\n\nexport interface IGripperVerticalIconProps extends IIconProps {}\n\nconst iconPropTypes = {\n\t/** Classes that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library. */\n\tclassName: PropTypes.string,\n\n\t/** Size variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`. */\n\tsize: PropTypes.number,\n\n\t/** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n\twidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n\theight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth. */\n\tviewBox: PropTypes.string,\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio: PropTypes.string,\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable: PropTypes.bool,\n\n\t/** Adds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false. */\n\tisDisabled: PropTypes.bool,\n\n\t/** Called when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonClick: PropTypes.func,\n\n\t/** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonSelect: PropTypes.func,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.element,\n\n\t/** Sets the color of the Icon.  May not be applicable for icons that are tied\n\t\tto specific colors (e.g. DangerIcon). */\n\tcolor: PropTypes.oneOf([\n\t\t'neutral-dark',\n\t\t'neutral-light',\n\t\t'primary',\n\t\t'white',\n\t\t'success',\n\t\t'warning',\n\t\t'secondary-one',\n\t\t'secondary-two',\n\t\t'secondary-three',\n\t]),\n};\n\nexport const GripperVerticalIcon = ({\n\tclassName,\n\tisClickable,\n\tisDisabled,\n\t...passThroughs\n}: IGripperVerticalIconProps) => {\n\treturn (\n\t\t<Icon\n\t\t\t{...omit(passThroughs, ['initialState'])}\n\t\t\twidth={2}\n\t\t\theight={16}\n\t\t\tviewBox='0 0 2 16'\n\t\t\tisClickable={isClickable}\n\t\t\tisDisabled={isDisabled}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t<path d='M0 .5h2M0 4h2M0 8h2M0 12h2M0 15.5h2' />\n\t\t</Icon>\n\t);\n};\n\nGripperVerticalIcon.defaultProps = Icon.defaultProps;\nGripperVerticalIcon.displayName = 'GripperVerticalIcon';\nGripperVerticalIcon.peek = {\n\tdescription: `A vertical gripper icon.`,\n\tcategories: ['visual design', 'icons'],\n\textend: 'Icon',\n\tmadeFrom: ['Icon'],\n};\nGripperVerticalIcon.propTypes = iconPropTypes;\n\nexport default GripperVerticalIcon;\n"]},"metadata":{},"sourceType":"module"}