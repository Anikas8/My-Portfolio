{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-Icon');\nconst {\n  any,\n  string,\n  number,\n  bool,\n  func,\n  oneOf,\n  oneOfType\n} = PropTypes;\nexport var Color;\n(function (Color) {\n  Color[\"neutral-dark\"] = \"neutral-dark\";\n  Color[\"neutral-light\"] = \"neutral-light\";\n  Color[\"primary\"] = \"primary\";\n  Color[\"white\"] = \"white\";\n  Color[\"success\"] = \"success\";\n  Color[\"warning\"] = \"warning\";\n  Color[\"secondary-one\"] = \"secondary-one\";\n  Color[\"secondary-two\"] = \"secondary-two\";\n  Color[\"secondary-three\"] = \"secondary-three\";\n})(Color || (Color = {}));\nconst defaultProps = {\n  size: 16,\n  aspectRatio: 'xMidYMid meet',\n  viewBox: '0 0 16 16',\n  isDisabled: false,\n  isClickable: false,\n  color: Color.primary,\n  onClick: _.noop,\n  onSelect: _.noop\n};\nexport const Icon = props => {\n  const {\n    className,\n    children,\n    color,\n    size,\n    width,\n    height,\n    viewBox,\n    aspectRatio,\n    isClickable,\n    isDisabled,\n    onClick,\n    onSelect,\n    ...passThroughs\n  } = props;\n  const svgRef = React.createRef();\n  function handleClick(event) {\n    onClick && onClick({\n      event,\n      props: props\n    });\n    if (isClickable && !isDisabled) {\n      onSelect && onSelect({\n        event,\n        props: props\n      });\n      if (svgRef.current) {\n        svgRef.current.focus();\n      }\n    }\n  }\n  return React.createElement(\"svg\", {\n    width: width ? width : size,\n    height: height ? height : size,\n    viewBox: viewBox,\n    preserveAspectRatio: aspectRatio,\n    ...passThroughs,\n    className: cx('&', {\n      [`&-color-${color}`]: true,\n      '&-is-clickable': !isDisabled && isClickable,\n      '&-is-disabled': isDisabled\n    }, className),\n    ref: svgRef,\n    onClick: handleClick\n  }, children);\n};\nIcon.displayName = 'Icon';\nIcon.defaultProps = defaultProps;\nIcon.peek = {\n  description: `A basic \\`svg\\` icon. Any props that are not explicitly called out below will be passed through to the native \\`svg\\` component.`,\n  categories: ['visual design', 'icons']\n};\nexport const propTypes = {\n  /**\n      Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`.\n  */\n  size: number,\n  /**\n      Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size.\n  */\n  width: oneOfType([number, string]),\n  /**\n      Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size.\n  */\n  height: oneOfType([number, string]),\n  /**\n      \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width.\n  */\n  viewBox: string,\n  /**\n      Any valid SVG aspect ratio.\n  */\n  aspectRatio: string,\n  /**\n      Adds styling that makes the icon appear clickable.\n  */\n  isClickable: bool,\n  /**\n      Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false.\n  */\n  isDisabled: bool,\n  /**\n      Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\`\n  */\n  onClick: func,\n  /**\n      Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Any valid React children.\n  */\n  children: any,\n  /**\n      Sets the color of the Icon.  May not be applicable for icons that are tied\n      to specific colors (e.g. DangerIcon).\n  */\n  color: oneOf(_.values(Color))\n};\nIcon.propTypes = propTypes;\nexport default Icon;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","cx","bind","any","string","number","bool","func","oneOf","oneOfType","Color","defaultProps","size","aspectRatio","viewBox","isDisabled","isClickable","color","primary","onClick","noop","onSelect","Icon","props","className","children","width","height","passThroughs","svgRef","createRef","handleClick","event","current","focus","preserveAspectRatio","ref","displayName","peek","description","categories","propTypes","values"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/Icon.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Icon');\n\nconst { any, string, number, bool, func, oneOf, oneOfType } = PropTypes;\n\nexport enum Color {\n\t'neutral-dark' = 'neutral-dark',\n\t'neutral-light' = 'neutral-light',\n\tprimary = 'primary',\n\twhite = 'white',\n\tsuccess = 'success',\n\twarning = 'warning',\n\t'secondary-one' = 'secondary-one',\n\t'secondary-two' = 'secondary-two',\n\t'secondary-three' = 'secondary-three',\n}\n\nexport interface IIconPropsRaw extends StandardProps {\n\t/** Size variations of the icons. `size` directly effects height and width but the developer should also be conscious of the relationship with `viewBox`. */\n\tsize?: number;\n\n\t/** Size handles width and height, whereas `width` can manually override the width that would be set by size. */\n\twidth?: number | string;\n\n\t/** Size handles width and height, whereas `height` can manually override the height that would be set by size. */\n\theight?: number | string;\n\n\t/** `viewBox` is very important for SVGs. You can think of `viewBox` as the \"artboard\" for our SVG while `size` is the presented height and width. */\n\tviewBox?: string;\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio?: string;\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable?: boolean;\n\n\t/** Adds styling that makes the icon appear disabled. Also forces isClickable to be false. */\n\tisDisabled?: boolean;\n\n\t/** Called when the user clicks the `Icon`. */\n\tonClick?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IIconProps;\n\t}) => void;\n\n\t/** Called when the user clicks an active, clickable `Icon`. */\n\tonSelect?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IIconProps;\n\t}) => void;\n\n\t/** Sets the color of the Icon. May not be applicable for icons that are tied to specific colors (e.g. DangerIcon). */\n\tcolor?: keyof typeof Color;\n}\n\nexport type IIconProps = Overwrite<\n\tReact.HTMLProps<SVGSVGElement>,\n\tIIconPropsRaw\n>;\n\nconst defaultProps = {\n\tsize: 16,\n\taspectRatio: 'xMidYMid meet',\n\tviewBox: '0 0 16 16',\n\tisDisabled: false,\n\tisClickable: false,\n\tcolor: Color.primary,\n\tonClick: _.noop,\n\tonSelect: _.noop,\n};\n\nexport const Icon = (props: IIconProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tchildren,\n\t\tcolor,\n\t\tsize,\n\t\twidth,\n\t\theight,\n\t\tviewBox,\n\t\taspectRatio,\n\t\tisClickable,\n\t\tisDisabled,\n\t\tonClick,\n\t\tonSelect,\n\t\t...passThroughs\n\t} = props;\n\n\tconst svgRef = React.createRef<SVGSVGElement>();\n\n\tfunction handleClick(event: React.MouseEvent): void {\n\t\tonClick && onClick({ event, props: props });\n\n\t\tif (isClickable && !isDisabled) {\n\t\t\tonSelect && onSelect({ event, props: props });\n\t\t\tif (svgRef.current) {\n\t\t\t\tsvgRef.current.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<svg\n\t\t\twidth={width ? width : size}\n\t\t\theight={height ? height : size}\n\t\t\tviewBox={viewBox}\n\t\t\tpreserveAspectRatio={aspectRatio}\n\t\t\t{...(passThroughs as any)}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t[`&-color-${color}`]: true,\n\t\t\t\t\t'&-is-clickable': !isDisabled && isClickable,\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tref={svgRef}\n\t\t\tonClick={handleClick}\n\t\t>\n\t\t\t{children}\n\t\t</svg>\n\t);\n};\n\nIcon.displayName = 'Icon';\nIcon.defaultProps = defaultProps;\nIcon.peek = {\n\tdescription: `A basic \\`svg\\` icon. Any props that are not explicitly called out below will be passed through to the native \\`svg\\` component.`,\n\tcategories: ['visual design', 'icons'],\n};\n\nexport const propTypes = {\n\t/**\n\t\tClasses that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library.\n\t*/\n\tclassName: any,\n\n\t/**\n\t\tSize variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`.\n\t*/\n\tsize: number,\n\n\t/**\n\t\tSize handles width and height, whereas \\`width\\` can manually override the width that would be set by size.\n\t*/\n\twidth: oneOfType([number, string]),\n\n\t/**\n\t\tSize handles width and height, whereas \\`height\\` can manually override the height that would be set by size.\n\t*/\n\theight: oneOfType([number, string]),\n\n\t/**\n\t\t\\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth.\n\t*/\n\tviewBox: string,\n\n\t/**\n\t\tAny valid SVG aspect ratio.\n\t*/\n\taspectRatio: string,\n\n\t/**\n\t\tAdds styling that makes the icon appear clickable.\n\t*/\n\tisClickable: bool,\n\n\t/**\n\t\tAdds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false.\n\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\tCalled when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\`\n\t*/\n\tonClick: func,\n\n\t/**\n\t\tCalled when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\`\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: any,\n\n\t/**\n\t\tSets the color of the Icon.  May not be applicable for icons that are tied\n\t\tto specific colors (e.g. DangerIcon).\n\t*/\n\tcolor: oneOf(_.values(Color)),\n};\n\nexport interface IIconWithDirectionProps extends IIconProps {\n\tdirection?: 'up' | 'down' | 'left' | 'right';\n}\n\nIcon.propTypes = propTypes;\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}