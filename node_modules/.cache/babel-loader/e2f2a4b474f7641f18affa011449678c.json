{"ast":null,"code":"/* eslint-disable react/prop-types */\nimport _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { partitionText, propsSearch } from '../../util/text-manipulation';\nimport { getFirst, findTypes } from '../../util/component-types';\nimport { SearchFieldDumb as SearchField } from '../SearchField/SearchField';\nimport { DropMenuDumb as DropMenu } from '../DropMenu/DropMenu';\nimport LoadingIcon from '../Icon/LoadingIcon/LoadingIcon';\nimport Selection from '../Selection/Selection';\nimport { Validation } from '../Validation/Validation';\nimport * as reducers from './SearchableSingleSelect.reducers';\nconst {\n  any,\n  bool,\n  func,\n  number,\n  oneOfType,\n  shape,\n  string,\n  node\n} = PropTypes;\nconst cx = lucidClassNames.bind('&-SearchableSingleSelect');\n/** Option Group */\nconst OptionGroup = _props => null;\nOptionGroup.displayName = 'SearchableSingleSelect.OptionGroup';\nOptionGroup.peek = {\n  description: `\n\t\tA special kind of \\`Option\\` that is always rendered at the top of\n\t\tthe menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n\t\tunselect.\n\t`\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\n/** Search Field */\nconst SearchFieldComponent = _props => null;\nSearchFieldComponent.displayName = 'SearchableSingleSelect.SearchField';\nSearchFieldComponent.peek = {\n  description: `\n\t\tPasses props through to the \\`Search Field\\`.\n\t`\n};\nSearchFieldComponent.propName = 'SearchField';\nSearchFieldComponent.propTypes = SearchField.propTypes;\nSearchFieldComponent.defaultProps = SearchField.defaultProps;\n/** Selected */\nconst Selected = _props => null;\nSelected.displayName = 'SearchableSingleSelect.Option.Selected';\nSelected.peek = {\n  description: `\n\t\tCustomizes the rendering of the Option when it is selected\n\t\tand is displayed instead of the Placeholder.\n\t`\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\nconst Option = _props => null;\nOption.displayName = 'SearchableSingleSelect.Option';\nOption.peek = {\n  description: `\n\t\tA selectable option in the list.\n\t`\n};\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n  /**\n      Customizes the rendering of the Option when it is selected and is\n      displayed instead of the Placeholder.\n  */\n  Selected: any,\n  value: string,\n  filterText: string,\n  ...DropMenu.Option.propTypes\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['children', 'className', 'isDisabled', 'isLoading', 'maxMenuHeight', 'onSearch', 'onSelect', 'optionFilter', 'searchText', 'selectedIndex', 'DropMenu', 'Option', 'Error', 'FixedOption', 'NullOption', 'OptionGroup', 'SearchField', 'initialState', 'callbackId'];\nconst defaultProps = {\n  isDisabled: false,\n  isLoading: false,\n  optionFilter: propsSearch,\n  searchText: '',\n  selectedIndex: null,\n  DropMenu: DropMenu.defaultProps,\n  Error: null,\n  onSearch: _.noop,\n  onSelect: _.noop,\n  SearchField: SearchField.defaultProps\n};\nclass SearchableSingleSelect extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleSearch = (searchText, _ref) => {\n      let {\n        event\n      } = _ref;\n      const {\n        props,\n        props: {\n          onSearch,\n          optionFilter,\n          DropMenu: {\n            onExpand\n          }\n        }\n      } = this;\n      const options = _.map(findTypes(props, SearchableSingleSelect.Option), 'props');\n      const firstVisibleIndex = _.findIndex(options, option => {\n        return optionFilter(searchText, option);\n      });\n      const firstVisibleProps = options[firstVisibleIndex];\n      // Just an extra call to make sure the search results show up when a user\n      // is typing\n      const dropMenuProps = this.props.DropMenu;\n      onExpand && onExpand({\n        event,\n        props: dropMenuProps\n      });\n      return onSearch(searchText, firstVisibleIndex, {\n        event,\n        props: firstVisibleProps\n      });\n    };\n    this.renderUnderlinedChildren = (childText, searchText) => {\n      const [pre, match, post] = partitionText(childText, new RegExp(_.escapeRegExp(searchText), 'i'), searchText.length);\n      return [pre && React.createElement(\"span\", {\n        key: 'pre',\n        className: cx('&-Option-underline-pre')\n      }, pre), match && React.createElement(\"span\", {\n        key: 'match',\n        className: cx('&-Option-underline-match')\n      }, match), post && React.createElement(\"span\", {\n        key: 'post',\n        className: cx('&-Option-underline-post')\n      }, post)];\n    };\n    this.renderOptionContent = (optionProps, searchText) => {\n      return _.isString(optionProps.children) && _.isString(searchText) && searchText.length > 0 ? this.renderUnderlinedChildren(optionProps.children, searchText) : _.isFunction(optionProps.children) ? React.createElement(optionProps.children, {\n        searchText\n      }) : optionProps.children;\n    };\n    this.renderOption = _ref2 => {\n      let {\n        optionProps,\n        optionIndex\n      } = _ref2;\n      const {\n        searchText,\n        isLoading,\n        optionFilter\n      } = this.props;\n      return React.createElement(DropMenu.Option, {\n        key: 'SearchableSingleSelectOption' + optionIndex,\n        ..._.omit(optionProps, ['children', 'Selected', 'filterText']),\n        isHidden: !optionFilter(searchText, optionProps),\n        isDisabled: optionProps.isDisabled || isLoading\n      }, this.renderOptionContent(optionProps, searchText));\n    };\n    this.renderOptions = () => {\n      const {\n        searchText,\n        isLoading\n      } = this.props;\n      const {\n        optionGroups,\n        optionGroupDataLookup,\n        ungroupedOptionData,\n        flattenedOptionsData\n      } = this.state;\n      const visibleOptions = _.reject(flattenedOptionsData, 'optionProps.isHidden');\n      const isAllOptionsHidden = _.isEmpty(visibleOptions);\n      // for each option group passed in, render a DropMenu.OptionGroup, any label will be included in it's children, render each option inside the group\n      const dropMenuOptions = _.map(optionGroups, (optionGroupProps, optionGroupIndex) => React.createElement(DropMenu.OptionGroup, {\n        key: 'SearchableSingleSelectOptionGroup' + optionGroupIndex,\n        ..._.omit(optionGroupProps, 'children', 'Selected')\n      }, optionGroupProps.children, _.map(optionGroupDataLookup[optionGroupIndex], this.renderOption))).concat(\n      // then render all the ungrouped options at the end\n      _.map(ungroupedOptionData, options => this.renderOption(options)));\n      if (!isAllOptionsHidden || _.isEmpty(searchText)) {\n        return dropMenuOptions;\n      }\n      if (!isLoading) {\n        return React.createElement(DropMenu.Option, {\n          isDisabled: true\n        }, React.createElement(\"span\", {\n          className: cx('&-noresults')\n        }, \"No results match \\\"\", searchText, \"\\\"\"));\n      }\n      return null;\n    };\n    this.removeSelection = _ref3 => {\n      let {\n        event,\n        props\n      } = _ref3;\n      const dropMenuProps = this.props.DropMenu;\n      this.props.DropMenu.onCollapse && this.props.DropMenu.onCollapse({\n        event,\n        props: dropMenuProps\n      });\n      this.props.onSearch('', null, {\n        event,\n        props\n      });\n      this.props.onSelect(null, {\n        event,\n        props\n      });\n    };\n    this.render = () => {\n      const {\n        props,\n        props: {\n          className,\n          isLoading,\n          isDisabled,\n          maxMenuHeight,\n          DropMenu: dropMenuProps,\n          DropMenu: {\n            optionContainerStyle\n          },\n          searchText,\n          selectedIndex,\n          onSelect,\n          ...passThroughs\n        }\n      } = this;\n      const searchFieldProps = _.get(getFirst(props, SearchableSingleSelect.SearchField), 'props', {});\n      const errorChildProps = _.first(_.map(findTypes(props, Validation.Error), 'props'));\n      //user made a selection\n      if (!_.isNil(selectedIndex)) {\n        const selectedOptionProps = this.state.flattenedOptionsData[selectedIndex].optionProps;\n        return React.createElement(\"div\", {\n          ..._.omit(passThroughs, nonPassThroughs),\n          className: cx('&', className)\n        }, React.createElement(Selection, {\n          Label: _.isNil(selectedOptionProps.Selected) ? this.renderOptionContent(selectedOptionProps, '') : selectedOptionProps.Selected,\n          className: cx('&', {\n            '&-select-error': errorChildProps && errorChildProps.children && errorChildProps.children !== true\n          }, className),\n          onRemove: this.removeSelection,\n          kind: 'default'\n        }), errorChildProps && errorChildProps.children && errorChildProps.children !== true ? React.createElement(\"div\", {\n          ..._.omit(errorChildProps, ['initialState', 'callbackId']),\n          className: cx('&-error-select-content')\n        }, errorChildProps.children) : null);\n      }\n      return React.createElement(\"div\", {\n        ..._.omit(passThroughs, nonPassThroughs),\n        className: cx('&', className)\n      }, React.createElement(DropMenu, {\n        ...dropMenuProps,\n        selectedIndices: null,\n        className: cx('&-DropMenu', {\n          '&-DropMenu-is-small': true\n        }, dropMenuProps.className),\n        optionContainerStyle: _.assign({}, optionContainerStyle, !_.isNil(maxMenuHeight) ? {\n          maxHeight: maxMenuHeight\n        } : null),\n        isDisabled: isDisabled,\n        onSelect: onSelect,\n        ContextMenu: {\n          alignmentOffset: -13,\n          directonOffset: -1,\n          minWidthOffset: -28\n        }\n      }, React.createElement(DropMenu.Control, null, React.createElement(SearchField, {\n        ...searchFieldProps,\n        autoComplete: searchFieldProps.autoComplete || 'off',\n        isDisabled: isDisabled,\n        className: cx('&-search', {\n          '&-search-is-error': errorChildProps && errorChildProps.children\n        }, searchFieldProps.className),\n        value: searchText,\n        onChange: this.handleSearch\n      })), isLoading ? React.createElement(DropMenu.Option, {\n        key: 'SearchableSingleSelectLoading',\n        className: cx('&-loading'),\n        isDisabled: true\n      }, React.createElement(LoadingIcon, null)) : null, this.renderOptions()), errorChildProps && errorChildProps.children && errorChildProps.children !== true ? React.createElement(\"div\", {\n        ..._.omit(errorChildProps, ['initialState', 'callbackId']),\n        className: cx('&-error-content')\n      }, errorChildProps.children) : null);\n    };\n  }\n  UNSAFE_componentWillMount() {\n    // preprocess the options data before rendering\n    const {\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    } = DropMenu.preprocessOptionData(this.props, SearchableSingleSelect);\n    this.setState({\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    });\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // only preprocess options data when it changes (via new props) - better performance than doing this each render\n    const {\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    } = DropMenu.preprocessOptionData(nextProps, SearchableSingleSelect);\n    this.setState({\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    });\n  }\n}\nSearchableSingleSelect.displayName = 'SearchableSingleSelect';\nSearchableSingleSelect.peek = {\n  description: `A control used to select a single option from a dropdown list using a \\`SearchField\\`.`,\n  categories: ['controls', 'selectors'],\n  madeFrom: ['Checkbox', 'SearchField', 'DropMenu', 'LoadingIcon']\n};\nSearchableSingleSelect.defaultProps = defaultProps;\nSearchableSingleSelect.reducers = reducers;\nSearchableSingleSelect.Option = Option;\nSearchableSingleSelect.OptionGroup = OptionGroup;\nSearchableSingleSelect.SearchField = SearchFieldComponent;\nSearchableSingleSelect.NullOption = DropMenu.NullOption;\nSearchableSingleSelect.FixedOption = DropMenu.FixedOption;\nSearchableSingleSelect.DropMenu = DropMenu;\nSearchableSingleSelect.propTypes = {\n  /**\n      Should be instances of {\\`SearchableSingleSelect.Option\\`}. Other direct\n      child elements will not render.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Disables the control from being clicked or focused.\n  */\n  isDisabled: bool,\n  /**\n      Displays a LoadingIcon to allow for asynchronous loading of options.\n  */\n  isLoading: bool,\n  /**\n      The max height of the fly-out menu.\n  */\n  maxMenuHeight: oneOfType([number, string]),\n  onSearch: func /**\n                 Called when the user enters a value to search for; the set of visible\n                 Options will be filtered using the value.  Signature: \\`(searchText,\n                 firstVisibleIndex, {props, event}) => {}\\` \\`searchText\\` is the value\n                 from the \\`SearchField\\` and \\`firstVisibleIndex\\` is the index of the\n                 first option that will be visible after filtering.\n                 */,\n\n  /**\n      Called when an option is selected.  Signature: \\`(optionIndex, {props,\n      event}) => {}\\` \\`optionIndex\\` is the new \\`selectedIndex\\` or \\`null\\`.\n  */\n  onSelect: func,\n  /**\n      The function that will be run against each Option's props to determine\n      whether it should be visible or not. The default behavior of the function\n      is to match, ignoring case, against any text node descendant of the\n      \\`Option\\`.  Signature: \\`(searchText, optionProps) => {}\\` If \\`true\\`\n      is returned, the option will be visible. If \\`false\\`, the option will\n      not be visible.\n  */\n  optionFilter: func,\n  /**\n      The current search text to filter the list of options by.\n  */\n  searchText: string,\n  /**\n      Currently selected \\`SearchableSingleSelect.Option\\` index\n      or \\`null\\` if nothing is selected.\n  */\n  selectedIndex: number,\n  /**\n      Object of DropMenu props which are passed through to the underlying\n      DropMenu component.\n  */\n  DropMenu: shape(DropMenu.propTypes),\n  Option: any /**\n              *Child Element* - These are menu options. Each \\`Option\\` may be passed a\n              prop called \\`isDisabled\\` to disable selection of that \\`Option\\`. Any\n              other props pass to Option will be available from the \\`onSelect\\`\n              handler.  It also support the \\`Selection\\` prop that can be used to\n              forward along props to the underlying \\`Selection\\` component.\n              */,\n\n  /**\n      In most cases this will be a string, but it also accepts any valid React\n      element. If this is a falsey value, then no error message will be\n      displayed.  If this is the literal \\`true\\`, it will add the\n      \\`-is-error\\` class to the wrapper div, but not render the\n      \\`-error-content\\` \\`div\\`.\n  */\n  Error: any,\n  FixedOption: any /**\n                   *Child Element* - A special kind of \\`Option\\` that is always rendered at the top of\n                   the menu.\n                   */,\n  NullOption: any /**\n                  *Child Element* - A special kind of \\`Option\\` that is always rendered at\n                  the top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n                  unselect.\n                  */,\n  OptionGroup: any /**\n                   *Child Element* - Used to group \\`Option\\`s within the menu. Any\n                   non-\\`Option\\`s passed in will be rendered as a label for the group.\n                   */,\n\n  /**\n   *Child Element* - Passes props through to the \\`SearchField\\` component.\n   */\n  SearchField: any\n};\nexport default buildModernHybridComponent(SearchableSingleSelect, {\n  reducers\n});\nexport { SearchableSingleSelect as SearchableSingleSelectDumb };","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","buildModernHybridComponent","partitionText","propsSearch","getFirst","findTypes","SearchFieldDumb","SearchField","DropMenuDumb","DropMenu","LoadingIcon","Selection","Validation","reducers","any","bool","func","number","oneOfType","shape","string","node","cx","bind","OptionGroup","_props","displayName","peek","description","propName","propTypes","defaultProps","SearchFieldComponent","Selected","Option","value","filterText","nonPassThroughs","isDisabled","isLoading","optionFilter","searchText","selectedIndex","Error","onSearch","noop","onSelect","SearchableSingleSelect","Component","constructor","event","props","onExpand","options","map","firstVisibleIndex","findIndex","option","firstVisibleProps","dropMenuProps","childText","pre","match","post","RegExp","escapeRegExp","length","key","className","optionProps","isString","children","renderUnderlinedChildren","isFunction","createElement","optionIndex","omit","isHidden","renderOptionContent","optionGroups","optionGroupDataLookup","ungroupedOptionData","flattenedOptionsData","state","visibleOptions","reject","isAllOptionsHidden","isEmpty","dropMenuOptions","optionGroupProps","optionGroupIndex","renderOption","concat","onCollapse","maxMenuHeight","optionContainerStyle","passThroughs","searchFieldProps","get","errorChildProps","first","isNil","selectedOptionProps","Label","onRemove","removeSelection","kind","selectedIndices","assign","maxHeight","ContextMenu","alignmentOffset","directonOffset","minWidthOffset","Control","autoComplete","onChange","handleSearch","renderOptions","UNSAFE_componentWillMount","preprocessOptionData","setState","UNSAFE_componentWillReceiveProps","nextProps","categories","madeFrom","NullOption","FixedOption","SearchableSingleSelectDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SearchableSingleSelect/SearchableSingleSelect.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { partitionText, propsSearch } from '../../util/text-manipulation';\nimport {\n\tStandardProps,\n\tgetFirst,\n\tfindTypes,\n\tOverwrite,\n} from '../../util/component-types';\nimport {\n\tSearchFieldDumb as SearchField,\n\tISearchFieldProps,\n} from '../SearchField/SearchField';\nimport {\n\tIDropMenuProps,\n\tIDropMenuState,\n\tIDropMenuOptionProps,\n\tIOptionsData,\n\tIDropMenuOptionGroupProps,\n\tDropMenuDumb as DropMenu,\n} from '../DropMenu/DropMenu';\nimport LoadingIcon from '../Icon/LoadingIcon/LoadingIcon';\nimport Selection from '../Selection/Selection';\nimport { Validation } from '../Validation/Validation';\nimport * as reducers from './SearchableSingleSelect.reducers';\n\nconst { any, bool, func, number, oneOfType, shape, string, node } = PropTypes;\n\nconst cx = lucidClassNames.bind('&-SearchableSingleSelect');\n\n/** Option Group */\nconst OptionGroup = (_props: IDropMenuOptionGroupProps): null => null;\nOptionGroup.displayName = 'SearchableSingleSelect.OptionGroup';\nOptionGroup.peek = {\n\tdescription: `\n\t\tA special kind of \\`Option\\` that is always rendered at the top of\n\t\tthe menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n\t\tunselect.\n\t`,\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\n\n/** Search Field */\nconst SearchFieldComponent = (_props: ISearchFieldProps): null => null;\nSearchFieldComponent.displayName = 'SearchableSingleSelect.SearchField';\nSearchFieldComponent.peek = {\n\tdescription: `\n\t\tPasses props through to the \\`Search Field\\`.\n\t`,\n};\nSearchFieldComponent.propName = 'SearchField';\nSearchFieldComponent.propTypes = SearchField.propTypes;\nSearchFieldComponent.defaultProps = SearchField.defaultProps;\n\n/** Selected */\nconst Selected = (_props: { children?: React.ReactNode }): null => null;\n\nSelected.displayName = 'SearchableSingleSelect.Option.Selected';\nSelected.peek = {\n\tdescription: `\n\t\tCustomizes the rendering of the Option when it is selected\n\t\tand is displayed instead of the Placeholder.\n\t`,\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\n\n/** Option */\nexport interface ISearchableSingleSelectOptionProps\n\textends IDropMenuOptionProps {\n\tdescription?: string;\n\tname?: string;\n\tSelected?: React.ReactNode;\n}\n\nconst Option = (_props: ISearchableSingleSelectOptionProps): null => null;\n\nOption.displayName = 'SearchableSingleSelect.Option';\nOption.peek = {\n\tdescription: `\n\t\tA selectable option in the list.\n\t`,\n};\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n\t/**\n\t\tCustomizes the rendering of the Option when it is selected and is\n\t\tdisplayed instead of the Placeholder.\n\t*/\n\tSelected: any,\n\tvalue: string,\n\tfilterText: string,\n\t...DropMenu.Option.propTypes,\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\n\n/** Searchable Single Select */\nexport interface ISearchableSingleSelectPropsRaw extends StandardProps {\n\thasReset?: boolean;\n\thasSelections?: boolean;\n\tisDisabled: boolean;\n\tisLoading: boolean;\n\tmaxMenuHeight?: string;\n\tselectedIndex: number | null;\n\tsearchText: string;\n\tSearchField: React.ReactNode;\n\tDropMenu: IDropMenuProps;\n\tOption?: React.ReactNode;\n\tOptionGroup?: IDropMenuOptionGroupProps;\n\tError: React.ReactNode;\n\t/** Called when an option is clicked, or when an option has focus and the\n\t\tEnter key is pressed. */\n\tonSelect: (\n\t\toptionIndex: number | null,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: IDropMenuOptionProps | undefined;\n\t\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\t}\n\t) => void;\n\n\tonSearch: (\n\t\tsearchText: string,\n\t\tfirstVisibleIndex: number | null,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: IDropMenuOptionProps;\n\t\t\tevent: React.KeyboardEvent | React.MouseEvent;\n\t\t}\n\t) => void;\n\n\toptionFilter: (searchValue: string, props: any) => boolean;\n}\n\nexport type ISearchableSingleSelectProps = Overwrite<\n\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\n\tISearchableSingleSelectPropsRaw\n>;\n\nexport interface ISearchableSingleSelectState {\n\tDropMenu: IDropMenuState;\n\tselectedIndex: number | null;\n\tsearchText: string | null;\n\toptionGroups: IDropMenuOptionGroupProps[];\n\tflattenedOptionsData: IOptionsData[];\n\tungroupedOptionData: IOptionsData[];\n\toptionGroupDataLookup: { [key: number]: IOptionsData[] };\n}\n\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'children',\n\t'className',\n\t'isDisabled',\n\t'isLoading',\n\t'maxMenuHeight',\n\t'onSearch',\n\t'onSelect',\n\t'optionFilter',\n\t'searchText',\n\t'selectedIndex',\n\t'DropMenu',\n\t'Option',\n\t'Error',\n\t'FixedOption',\n\t'NullOption',\n\t'OptionGroup',\n\t'SearchField',\n\t'initialState',\n\t'callbackId',\n];\n\nconst defaultProps = {\n\tisDisabled: false,\n\tisLoading: false,\n\toptionFilter: propsSearch,\n\tsearchText: '',\n\tselectedIndex: null,\n\tDropMenu: DropMenu.defaultProps,\n\tError: null,\n\tonSearch: _.noop,\n\tonSelect: _.noop,\n\tSearchField: SearchField.defaultProps,\n};\n\nclass SearchableSingleSelect extends React.Component<\n\tISearchableSingleSelectProps,\n\tISearchableSingleSelectState\n> {\n\tstatic displayName = 'SearchableSingleSelect';\n\tstatic peek = {\n\t\tdescription: `A control used to select a single option from a dropdown list using a \\`SearchField\\`.`,\n\t\tcategories: ['controls', 'selectors'],\n\t\tmadeFrom: ['Checkbox', 'SearchField', 'DropMenu', 'LoadingIcon'],\n\t};\n\n\tstatic defaultProps = defaultProps;\n\tstatic reducers = reducers;\n\tstatic Option = Option;\n\tstatic OptionGroup = OptionGroup;\n\tstatic SearchField = SearchFieldComponent;\n\tstatic NullOption = DropMenu.NullOption;\n\tstatic FixedOption = DropMenu.FixedOption;\n\tstatic DropMenu = DropMenu;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tShould be instances of {\\`SearchableSingleSelect.Option\\`}. Other direct\n\t\t\tchild elements will not render.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tDisables the control from being clicked or focused.\n\t\t*/\n\t\tisDisabled: bool,\n\n\t\t/**\n\t\t\tDisplays a LoadingIcon to allow for asynchronous loading of options.\n\t\t*/\n\t\tisLoading: bool,\n\n\t\t/**\n\t\t\tThe max height of the fly-out menu.\n\t\t*/\n\t\tmaxMenuHeight: oneOfType([number, string]),\n\n\t\tonSearch: func /**\n\t\t\tCalled when the user enters a value to search for; the set of visible\n\t\t\tOptions will be filtered using the value.  Signature: \\`(searchText,\n\t\t\tfirstVisibleIndex, {props, event}) => {}\\` \\`searchText\\` is the value\n\t\t\tfrom the \\`SearchField\\` and \\`firstVisibleIndex\\` is the index of the\n\t\t\tfirst option that will be visible after filtering.\n\t\t*/,\n\n\t\t/**\n\t\t\tCalled when an option is selected.  Signature: \\`(optionIndex, {props,\n\t\t\tevent}) => {}\\` \\`optionIndex\\` is the new \\`selectedIndex\\` or \\`null\\`.\n\t\t*/\n\t\tonSelect: func,\n\n\t\t/**\n\t\t\tThe function that will be run against each Option's props to determine\n\t\t\twhether it should be visible or not. The default behavior of the function\n\t\t\tis to match, ignoring case, against any text node descendant of the\n\t\t\t\\`Option\\`.  Signature: \\`(searchText, optionProps) => {}\\` If \\`true\\`\n\t\t\tis returned, the option will be visible. If \\`false\\`, the option will\n\t\t\tnot be visible.\n\t\t*/\n\t\toptionFilter: func,\n\n\t\t/**\n\t\t\tThe current search text to filter the list of options by.\n\t\t*/\n\t\tsearchText: string,\n\n\t\t/**\n\t\t\tCurrently selected \\`SearchableSingleSelect.Option\\` index\n\t\t\tor \\`null\\` if nothing is selected.\n\t\t*/\n\t\tselectedIndex: number,\n\n\t\t/**\n\t\t\tObject of DropMenu props which are passed through to the underlying\n\t\t\tDropMenu component.\n\t\t*/\n\t\tDropMenu: shape(DropMenu.propTypes),\n\n\t\tOption: any /**\n\t\t\t*Child Element* - These are menu options. Each \\`Option\\` may be passed a\n\t\t\tprop called \\`isDisabled\\` to disable selection of that \\`Option\\`. Any\n\t\t\tother props pass to Option will be available from the \\`onSelect\\`\n\t\t\thandler.  It also support the \\`Selection\\` prop that can be used to\n\t\t\tforward along props to the underlying \\`Selection\\` component.\n\t\t*/,\n\n\t\t/**\n\t\t\tIn most cases this will be a string, but it also accepts any valid React\n\t\t\telement. If this is a falsey value, then no error message will be\n\t\t\tdisplayed.  If this is the literal \\`true\\`, it will add the\n\t\t\t\\`-is-error\\` class to the wrapper div, but not render the\n\t\t\t\\`-error-content\\` \\`div\\`.\n\t\t*/\n\t\tError: any,\n\n\t\tFixedOption: any /**\n\t\t\t*Child Element* - A special kind of \\`Option\\` that is always rendered at the top of\n\t\t\tthe menu.\n\t\t*/,\n\n\t\tNullOption: any /**\n\t\t\t*Child Element* - A special kind of \\`Option\\` that is always rendered at\n\t\t\tthe top of the menu and has an \\`optionIndex\\` of \\`null\\`. Useful for\n\t\t\tunselect.\n\t\t*/,\n\n\t\tOptionGroup: any /**\n\t\t\t*Child Element* - Used to group \\`Option\\`s within the menu. Any\n\t\t\tnon-\\`Option\\`s passed in will be rendered as a label for the group.\n\t\t*/,\n\n\t\t/**\n\t\t *Child Element* - Passes props through to the \\`SearchField\\` component.\n\t\t */\n\t\tSearchField: any,\n\t};\n\n\tUNSAFE_componentWillMount(): void {\n\t\t// preprocess the options data before rendering\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(this.props, SearchableSingleSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t}\n\n\tUNSAFE_componentWillReceiveProps(\n\t\tnextProps: ISearchableSingleSelectProps\n\t): void {\n\t\t// only preprocess options data when it changes (via new props) - better performance than doing this each render\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(nextProps, SearchableSingleSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t}\n\n\thandleSearch = (\n\t\tsearchText: string,\n\t\t{\n\t\t\tevent,\n\t\t}: {\n\t\t\tevent:\n\t\t\t\t| React.KeyboardEvent<Element>\n\t\t\t\t| React.MouseEvent<Element, MouseEvent>;\n\t\t}\n\t): void => {\n\t\tconst {\n\t\t\tprops,\n\t\t\tprops: {\n\t\t\t\tonSearch,\n\t\t\t\toptionFilter,\n\t\t\t\tDropMenu: { onExpand },\n\t\t\t},\n\t\t} = this;\n\n\t\tconst options = _.map(\n\t\t\tfindTypes(props, SearchableSingleSelect.Option),\n\t\t\t'props'\n\t\t);\n\t\tconst firstVisibleIndex = _.findIndex(options, (option) => {\n\t\t\treturn optionFilter(searchText, option);\n\t\t});\n\t\tconst firstVisibleProps = options[firstVisibleIndex];\n\t\t// Just an extra call to make sure the search results show up when a user\n\t\t// is typing\n\t\tconst dropMenuProps = this.props.DropMenu;\n\t\tonExpand && onExpand({ event, props: dropMenuProps });\n\n\t\treturn onSearch(searchText, firstVisibleIndex, {\n\t\t\tevent,\n\t\t\tprops: firstVisibleProps,\n\t\t});\n\t};\n\n\trenderUnderlinedChildren = (childText: string, searchText: string): any[] => {\n\t\tconst [pre, match, post] = partitionText(\n\t\t\tchildText,\n\t\t\tnew RegExp(_.escapeRegExp(searchText), 'i'),\n\t\t\tsearchText.length\n\t\t);\n\n\t\treturn [\n\t\t\tpre && (\n\t\t\t\t<span key='pre' className={cx('&-Option-underline-pre')}>\n\t\t\t\t\t{pre}\n\t\t\t\t</span>\n\t\t\t),\n\t\t\tmatch && (\n\t\t\t\t<span key='match' className={cx('&-Option-underline-match')}>\n\t\t\t\t\t{match}\n\t\t\t\t</span>\n\t\t\t),\n\t\t\tpost && (\n\t\t\t\t<span key='post' className={cx('&-Option-underline-post')}>\n\t\t\t\t\t{post}\n\t\t\t\t</span>\n\t\t\t),\n\t\t];\n\t};\n\n\trenderOptionContent = (\n\t\toptionProps: ISearchableSingleSelectOptionProps,\n\t\tsearchText: string\n\t): any => {\n\t\treturn _.isString(optionProps.children) &&\n\t\t\t_.isString(searchText) &&\n\t\t\tsearchText.length > 0\n\t\t\t? this.renderUnderlinedChildren(optionProps.children, searchText)\n\t\t\t: _.isFunction(optionProps.children)\n\t\t\t? React.createElement(optionProps.children, { searchText })\n\t\t\t: optionProps.children;\n\t};\n\n\trenderOption = ({\n\t\toptionProps,\n\t\toptionIndex,\n\t}: {\n\t\toptionProps: ISearchableSingleSelectOptionProps;\n\t\toptionIndex: number | null;\n\t}): any => {\n\t\tconst { searchText, isLoading, optionFilter } = this.props;\n\t\treturn (\n\t\t\t<DropMenu.Option\n\t\t\t\tkey={'SearchableSingleSelectOption' + optionIndex}\n\t\t\t\t{..._.omit(optionProps, ['children', 'Selected', 'filterText'])}\n\t\t\t\tisHidden={!optionFilter(searchText, optionProps)}\n\t\t\t\tisDisabled={optionProps.isDisabled || isLoading}\n\t\t\t>\n\t\t\t\t{this.renderOptionContent(optionProps, searchText)}\n\t\t\t</DropMenu.Option>\n\t\t);\n\t};\n\n\trenderOptions = (): any => {\n\t\tconst { searchText, isLoading } = this.props;\n\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\toptionGroupDataLookup,\n\t\t\tungroupedOptionData,\n\t\t\tflattenedOptionsData,\n\t\t} = this.state;\n\t\tconst visibleOptions = _.reject(\n\t\t\tflattenedOptionsData,\n\t\t\t'optionProps.isHidden'\n\t\t);\n\n\t\tconst isAllOptionsHidden = _.isEmpty(visibleOptions);\n\n\t\t// for each option group passed in, render a DropMenu.OptionGroup, any label will be included in it's children, render each option inside the group\n\t\tconst dropMenuOptions = _.map(\n\t\t\toptionGroups,\n\t\t\t(optionGroupProps, optionGroupIndex) => (\n\t\t\t\t<DropMenu.OptionGroup\n\t\t\t\t\tkey={'SearchableSingleSelectOptionGroup' + optionGroupIndex}\n\t\t\t\t\t{..._.omit(optionGroupProps, 'children', 'Selected')}\n\t\t\t\t>\n\t\t\t\t\t{optionGroupProps.children}\n\t\t\t\t\t{_.map(optionGroupDataLookup[optionGroupIndex], this.renderOption)}\n\t\t\t\t</DropMenu.OptionGroup>\n\t\t\t)\n\t\t).concat(\n\t\t\t// then render all the ungrouped options at the end\n\t\t\t_.map(ungroupedOptionData, (options) => this.renderOption(options))\n\t\t);\n\n\t\tif (!isAllOptionsHidden || _.isEmpty(searchText)) {\n\t\t\treturn dropMenuOptions;\n\t\t}\n\n\t\tif (!isLoading) {\n\t\t\treturn (\n\t\t\t\t<DropMenu.Option isDisabled>\n\t\t\t\t\t<span className={cx('&-noresults')}>\n\t\t\t\t\t\tNo results match \"{searchText}\"\n\t\t\t\t\t</span>\n\t\t\t\t</DropMenu.Option>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tremoveSelection = ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>;\n\t\tprops: ISearchableSingleSelectOptionProps;\n\t}): void => {\n\t\tconst dropMenuProps = this.props.DropMenu;\n\t\tthis.props.DropMenu.onCollapse &&\n\t\t\tthis.props.DropMenu.onCollapse({ event, props: dropMenuProps });\n\t\tthis.props.onSearch('', null, { event, props });\n\t\tthis.props.onSelect(null, { event, props });\n\t};\n\n\trender = () => {\n\t\tconst {\n\t\t\tprops,\n\t\t\tprops: {\n\t\t\t\tclassName,\n\t\t\t\tisLoading,\n\t\t\t\tisDisabled,\n\t\t\t\tmaxMenuHeight,\n\t\t\t\tDropMenu: dropMenuProps,\n\t\t\t\tDropMenu: { optionContainerStyle },\n\t\t\t\tsearchText,\n\t\t\t\tselectedIndex,\n\t\t\t\tonSelect,\n\t\t\t\t...passThroughs\n\t\t\t},\n\t\t} = this;\n\n\t\tconst searchFieldProps = _.get(\n\t\t\tgetFirst(props, SearchableSingleSelect.SearchField),\n\t\t\t'props',\n\t\t\t{}\n\t\t);\n\n\t\tconst errorChildProps = _.first(\n\t\t\t_.map(findTypes(props, Validation.Error), 'props')\n\t\t);\n\n\t\t//user made a selection\n\t\tif (!_.isNil(selectedIndex)) {\n\t\t\tconst selectedOptionProps =\n\t\t\t\tthis.state.flattenedOptionsData[selectedIndex].optionProps;\n\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\t\tclassName={cx('&', className)}\n\t\t\t\t>\n\t\t\t\t\t<Selection\n\t\t\t\t\t\tLabel={\n\t\t\t\t\t\t\t_.isNil(selectedOptionProps.Selected)\n\t\t\t\t\t\t\t\t? this.renderOptionContent(selectedOptionProps, '')\n\t\t\t\t\t\t\t\t: selectedOptionProps.Selected\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t'&',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'&-select-error':\n\t\t\t\t\t\t\t\t\terrorChildProps &&\n\t\t\t\t\t\t\t\t\terrorChildProps.children &&\n\t\t\t\t\t\t\t\t\terrorChildProps.children !== true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclassName\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonRemove={this.removeSelection}\n\t\t\t\t\t\tkind='default'\n\t\t\t\t\t/>\n\t\t\t\t\t{errorChildProps &&\n\t\t\t\t\terrorChildProps.children &&\n\t\t\t\t\terrorChildProps.children !== true ? (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t{..._.omit(errorChildProps, ['initialState', 'callbackId'])}\n\t\t\t\t\t\t\tclassName={cx('&-error-select-content')}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{errorChildProps.children}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t>\n\t\t\t\t<DropMenu\n\t\t\t\t\t{...dropMenuProps}\n\t\t\t\t\tselectedIndices={null}\n\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t'&-DropMenu',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'&-DropMenu-is-small': true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdropMenuProps.className\n\t\t\t\t\t)}\n\t\t\t\t\toptionContainerStyle={_.assign(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\toptionContainerStyle,\n\t\t\t\t\t\t!_.isNil(maxMenuHeight) ? { maxHeight: maxMenuHeight } : null\n\t\t\t\t\t)}\n\t\t\t\t\tisDisabled={isDisabled}\n\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\tContextMenu={{\n\t\t\t\t\t\talignmentOffset: -13,\n\t\t\t\t\t\tdirectonOffset: -1,\n\t\t\t\t\t\tminWidthOffset: -28,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<DropMenu.Control>\n\t\t\t\t\t\t<SearchField\n\t\t\t\t\t\t\t{...searchFieldProps}\n\t\t\t\t\t\t\tautoComplete={searchFieldProps.autoComplete || 'off'}\n\t\t\t\t\t\t\tisDisabled={isDisabled}\n\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t'&-search',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'&-search-is-error':\n\t\t\t\t\t\t\t\t\t\terrorChildProps && errorChildProps.children,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsearchFieldProps.className\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tonChange={this.handleSearch}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</DropMenu.Control>\n\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t<DropMenu.Option\n\t\t\t\t\t\t\tkey='SearchableSingleSelectLoading'\n\t\t\t\t\t\t\tclassName={cx('&-loading')}\n\t\t\t\t\t\t\tisDisabled\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<LoadingIcon />\n\t\t\t\t\t\t</DropMenu.Option>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t</DropMenu>\n\t\t\t\t{errorChildProps &&\n\t\t\t\terrorChildProps.children &&\n\t\t\t\terrorChildProps.children !== true ? (\n\t\t\t\t\t<div\n\t\t\t\t\t\t{..._.omit(errorChildProps, ['initialState', 'callbackId'])}\n\t\t\t\t\t\tclassName={cx('&-error-content')}\n\t\t\t\t\t>\n\t\t\t\t\t\t{errorChildProps.children}\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t};\n}\n\nexport default buildModernHybridComponent<\n\tISearchableSingleSelectProps,\n\tISearchableSingleSelectState,\n\ttypeof SearchableSingleSelect\n>(SearchableSingleSelect as any, { reducers });\nexport { SearchableSingleSelect as SearchableSingleSelectDumb };\n"]},"metadata":{},"sourceType":"module"}