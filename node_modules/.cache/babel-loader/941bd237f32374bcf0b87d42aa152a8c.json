{"ast":null,"code":"import { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport elementResizeDetectorMaker from 'element-resize-detector';\nconst cx = lucidClassNames.bind('&-Resizer');\nconst {\n  func,\n  string\n} = PropTypes;\nclass Resizer extends React.Component {\n  constructor() {\n    super(...arguments);\n    this._element = React.createRef();\n    this.resizeDetector = elementResizeDetectorMaker({\n      strategy: 'scroll'\n    });\n    this.state = {\n      width: 0,\n      height: 0\n    };\n    this.handleResize = _ref => {\n      let {\n        offsetWidth,\n        offsetHeight\n      } = _ref;\n      this.setState({\n        width: offsetWidth,\n        height: offsetHeight\n      });\n    };\n  }\n  componentDidMount() {\n    if (this._element.current) {\n      this.resizeDetector.listenTo(this._element.current, this.handleResize);\n    }\n  }\n  componentWillUnmount() {\n    if (this._element.current) {\n      this.resizeDetector.removeListener(this._element.current, this.handleResize);\n    }\n  }\n  render() {\n    const {\n      className,\n      children,\n      ...passThroughs\n    } = this.props;\n    const {\n      width,\n      height\n    } = this.state;\n    return React.createElement(\"div\", {\n      ...omit(passThroughs, ['className', 'children'].concat(['initialState', 'callbackId'])),\n      className: cx('&', className),\n      ref: this._element\n    }, children && children(width, height));\n  }\n}\nResizer.displayName = 'Resizer';\nResizer.peek = {\n  description: `A helper component used for getting the width and height of a containing element. This component doesn't take normal children. It expects you to pass a single function for children. It will then call that function with new \\`width\\` and \\`height\\` values if the container size changes.`,\n  categories: ['utility']\n};\nResizer.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root elements.\n  */\n  className: string,\n  /**\n      A function that returns your rendered content with the signature:\n      \\`(width, height) => {}\\`\n  */\n  children: func\n};\nexport default Resizer;","map":{"version":3,"mappings":"AAAA,SAAYA,IAAI,QAAQ,QAAQ;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,eAAe,QAAQ,0BAA0B;AAE1D,OAAOC,0BAA0B,MAAM,yBAAyB;AAEhE,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,WAAW,CAAC;AAE5C,MAAM;EAAEC,IAAI;EAAEC;AAAM,CAAE,GAAGN,SAAS;AAiBlC,MAAMO,OAAQ,SAAQR,KAAK,CAACS,SAA2C;EAAvEC;;IAmBS,aAAQ,GAAGV,KAAK,CAACW,SAAS,EAAkB;IAC5C,mBAAc,GAAGR,0BAA0B,CAAC;MAAES,QAAQ,EAAE;IAAQ,CAAE,CAAC;IAE3E,UAAK,GAAG;MACPC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;KACR;IAED,iBAAY,GAAG,QAMJ;MAAA,IANK;QACfC,WAAW;QACXC;MAAY,CAIZ;MACA,IAAI,CAACC,QAAQ,CAAC;QACbJ,KAAK,EAAEE,WAAW;QAClBD,MAAM,EAAEE;OACR,CAAC;IACH,CAAC;EAmCF;EAjCCE,iBAAiB;IAChB,IAAI,IAAI,CAACC,QAAQ,CAACC,OAAO,EAAE;MAC1B,IAAI,CAACC,cAAc,CAACC,QAAQ,CAAC,IAAI,CAACH,QAAQ,CAACC,OAAO,EAAE,IAAI,CAACG,YAAY,CAAC;;EAExE;EAEAC,oBAAoB;IACnB,IAAI,IAAI,CAACL,QAAQ,CAACC,OAAO,EAAE;MAC1B,IAAI,CAACC,cAAc,CAACI,cAAc,CACjC,IAAI,CAACN,QAAQ,CAACC,OAAO,EACrB,IAAI,CAACG,YAAY,CACjB;;EAEH;EAEAG,MAAM;IACL,MAAM;MAAEC,SAAS;MAAEC,QAAQ;MAAE,GAAGC;IAAY,CAAE,GAAG,IAAI,CAACC,KAAK;IAE3D,MAAM;MAAEjB,KAAK;MAAEC;IAAM,CAAE,GAAG,IAAI,CAACiB,KAAK;IAEpC,OACC/B;MAAA,GACKD,IAAI,CACP8B,YAAY,EACZ,CAAC,WAAW,EAAE,UAAU,CAAC,CAACG,MAAM,CAAC,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC,CAChE;MACDL,SAAS,EAAEvB,EAAE,CAAC,GAAG,EAAEuB,SAAS,CAAC;MAC7BM,GAAG,EAAE,IAAI,CAACd;IAAQ,GAEjBS,QAAQ,IAAIA,QAAQ,CAACf,KAAK,EAAEC,MAAM,CAAC,CAC/B;EAER;;AAvEON,mBAAW,GAAG,SAAS;AACvBA,YAAI,GAAG;EACb0B,WAAW,EAAE,+RAA+R;EAC5SC,UAAU,EAAE,CAAC,SAAS;CACtB;AACM3B,iBAAS,GAAG;EAClB;;;EAGAmB,SAAS,EAAEpB,MAAM;EAEjB;;;;EAIAqB,QAAQ,EAAEtB;CACV;AA0DF,eAAeE,OAAO","names":["omit","React","PropTypes","lucidClassNames","elementResizeDetectorMaker","cx","bind","func","string","Resizer","Component","constructor","createRef","strategy","width","height","offsetWidth","offsetHeight","setState","componentDidMount","_element","current","resizeDetector","listenTo","handleResize","componentWillUnmount","removeListener","render","className","children","passThroughs","props","state","concat","ref","description","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Resizer/Resizer.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\nimport elementResizeDetectorMaker from 'element-resize-detector';\n\nconst cx = lucidClassNames.bind('&-Resizer');\n\nconst { func, string } = PropTypes;\n\nexport interface IResizerProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** A function that returns your rendered content. */\n\tchildren?: (width: number, height: number) => React.ReactNode;\n}\n\ninterface IResizerState {\n\twidth: number;\n\theight: number;\n}\n\nclass Resizer extends React.Component<IResizerProps, IResizerState, {}> {\n\tstatic displayName = 'Resizer';\n\tstatic peek = {\n\t\tdescription: `A helper component used for getting the width and height of a containing element. This component doesn't take normal children. It expects you to pass a single function for children. It will then call that function with new \\`width\\` and \\`height\\` values if the container size changes.`,\n\t\tcategories: ['utility'],\n\t};\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root elements.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tA function that returns your rendered content with the signature:\n\t\t\t\\`(width, height) => {}\\`\n\t\t*/\n\t\tchildren: func,\n\t};\n\n\tprivate _element = React.createRef<HTMLDivElement>();\n\tprivate resizeDetector = elementResizeDetectorMaker({ strategy: 'scroll' });\n\n\tstate = {\n\t\twidth: 0,\n\t\theight: 0,\n\t};\n\n\thandleResize = ({\n\t\toffsetWidth,\n\t\toffsetHeight,\n\t}: {\n\t\toffsetWidth: number;\n\t\toffsetHeight: number;\n\t}): void => {\n\t\tthis.setState({\n\t\t\twidth: offsetWidth,\n\t\t\theight: offsetHeight,\n\t\t});\n\t};\n\n\tcomponentDidMount(): void {\n\t\tif (this._element.current) {\n\t\t\tthis.resizeDetector.listenTo(this._element.current, this.handleResize);\n\t\t}\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (this._element.current) {\n\t\t\tthis.resizeDetector.removeListener(\n\t\t\t\tthis._element.current,\n\t\t\t\tthis.handleResize\n\t\t\t);\n\t\t}\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst { className, children, ...passThroughs } = this.props;\n\n\t\tconst { width, height } = this.state;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...omit(\n\t\t\t\t\tpassThroughs,\n\t\t\t\t\t['className', 'children'].concat(['initialState', 'callbackId'])\n\t\t\t\t)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\tref={this._element}\n\t\t\t>\n\t\t\t\t{children && children(width, height)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Resizer;\n"]},"metadata":{},"sourceType":"module"}