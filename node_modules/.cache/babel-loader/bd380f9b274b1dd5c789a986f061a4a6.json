{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nimport SlidePanel from '../SlidePanel/SlidePanel';\nconst cx = lucidClassNames.bind('&-InfiniteSlidePanel');\nconst {\n  func,\n  node,\n  number,\n  oneOfType,\n  string\n} = PropTypes;\nconst modulo = (n, a) => {\n  return a - n * Math.floor(a / n);\n};\nconst InfiniteSlidePanelSlide = _props => null;\nInfiniteSlidePanelSlide.displayName = 'InfiniteSlidePanel.Slide';\nInfiniteSlidePanelSlide.propName = 'Slide';\nInfiniteSlidePanelSlide.peek = {\n  description: `The slide.`\n};\nconst defaultProps = {\n  offset: 0,\n  slidesToShow: 1,\n  onSwipe: _.noop,\n  totalSlides: 8,\n  isAnimated: SlidePanel.defaultProps.isAnimated,\n  isLooped: SlidePanel.defaultProps.isLooped\n};\nexport const InfiniteSlidePanel = props => {\n  const {\n    children,\n    className,\n    offset,\n    slidesToShow,\n    onSwipe,\n    totalSlides,\n    ...passThroughs\n  } = props;\n  const slide = getFirst(props, InfiniteSlidePanel.Slide, React.createElement(InfiniteSlidePanelSlide, null, children));\n  const slideChildRenderFunction = slide.props.children;\n  if (!_.isFunction(slideChildRenderFunction)) {\n    throw new Error('InfiniteSlidePanel children must be a single function `(slideOffset) => { /* returns React.PropTypes.node */ }`');\n  }\n  const halfSlides = Math.floor(totalSlides / 2);\n  const circularOffset = modulo(totalSlides, offset);\n  const forwardSlideOffsets = _.times(totalSlides - halfSlides, n => offset + n);\n  const backwardSlideOffsets = _.times(halfSlides, n => offset + n - halfSlides);\n  const transposedSlideOffsets = forwardSlideOffsets.concat(backwardSlideOffsets);\n  const slideOffsetArray = _.takeRight(transposedSlideOffsets, circularOffset).concat(_.take(transposedSlideOffsets, totalSlides - circularOffset));\n  return React.createElement(SlidePanel, {\n    ...omit(passThroughs, ['Slide', 'initialState']),\n    className: cx('&', className),\n    offset: offset,\n    slidesToShow: slidesToShow,\n    onSwipe: onSwipe,\n    isLooped: true\n  }, _.map(slideOffsetArray, (slideOffset, elementOffset) => React.createElement(SlidePanel.Slide, {\n    key: elementOffset,\n    ...slide.props,\n    className: cx({\n      '&-Slide-in-frame': slideOffset - offset < slidesToShow && slideOffset - offset >= 0\n    }, slide.props.className)\n  }, slideChildRenderFunction(slideOffset))));\n};\nInfiniteSlidePanel.defaultProps = defaultProps;\nInfiniteSlidePanel.Slide = InfiniteSlidePanelSlide;\nInfiniteSlidePanel._isPrivate = true;\nInfiniteSlidePanel.displayName = 'InfiniteSlidePanel';\nInfiniteSlidePanel.peek = {\n  description: `A container for rendering an infinite set of horizontal slides. Translation between slides is controlled by passing in a new \\`offset\\`.  Can hook into touch events to update the \\`offset\\`. This component is made from \\`SlidePanel\\`, so it accepts the same props.`,\n  categories: ['helpers'],\n  madeFrom: ['SlidePanel']\n};\nInfiniteSlidePanel.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  children: oneOfType([node, func]) /**\n                                    The only allowed child is a render function which is passed the current\n                                    slide's offset and returns the slide contents: \\`(slideOffset) => {\n                                    //returns React.PropTypes.node }\\` Alternatively, you could pass one\n                                    \\`<InfiniteSlidePanel.Slide {...}>\\` element with the render function.\n                                    The only reason do to the latter is to pass addiontal props to the slide\n                                    element.\n                                    */,\n\n  /**\n      The offset of the left-most rendered slide.\n  */\n  offset: number,\n  /**\n      Max number of viewable slides to show simultaneously.\n  */\n  slidesToShow: number,\n  /**\n      Called when a user's swipe would change the offset. Callback passes\n      number of slides by the user (positive for forward swipes, negative for\n      backwards swipes).  Signature: \\`(slidesSwiped, { event, props }) => {}\\`\n  */\n  onSwipe: func,\n  /**\n      The number of slides rendered at any given time. A good rule-of-thumb is\n      that this should be at least 4 times the \\`slidesToShow\\` value.\n  */\n  totalSlides: number,\n  /** Child components of SlidePanel */\n  Slide: node\n};\nexport default InfiniteSlidePanel;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","getFirst","SlidePanel","cx","bind","func","node","number","oneOfType","string","modulo","n","a","Math","floor","InfiniteSlidePanelSlide","_props","displayName","propName","peek","description","defaultProps","offset","slidesToShow","onSwipe","noop","totalSlides","isAnimated","isLooped","InfiniteSlidePanel","props","children","className","passThroughs","slide","Slide","slideChildRenderFunction","isFunction","Error","halfSlides","circularOffset","forwardSlideOffsets","times","backwardSlideOffsets","transposedSlideOffsets","concat","slideOffsetArray","takeRight","take","map","slideOffset","elementOffset","key","_isPrivate","categories","madeFrom","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/InfiniteSlidePanel/InfiniteSlidePanel.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { Overwrite, getFirst } from '../../util/component-types';\nimport SlidePanel, {\n\tISlidePanelProps,\n\tISlidePanelSlideProps,\n} from '../SlidePanel/SlidePanel';\n\nconst cx = lucidClassNames.bind('&-InfiniteSlidePanel');\n\nconst { func, node, number, oneOfType, string } = PropTypes;\n\nconst modulo = (n: number, a: number): number => {\n\treturn a - n * Math.floor(a / n);\n};\n\nexport interface IInfiniteSlidePanelSlideProps extends ISlidePanelSlideProps {}\nconst InfiniteSlidePanelSlide = (_props: IInfiniteSlidePanelSlideProps): null =>\n\tnull;\nInfiniteSlidePanelSlide.displayName = 'InfiniteSlidePanel.Slide';\nInfiniteSlidePanelSlide.propName = 'Slide';\nInfiniteSlidePanelSlide.peek = { description: `The slide.` };\n\nexport interface IInfiniteSlidePanelPropsRaw {\n\t/**\tThe only allowed child is a render function which is passed the current\n\t\tslide's offset and returns the slide contents. Alternatively, you could pass one\n\t\t`<InfiniteSlidePanelSlide {...}>` element with the render function.\n\t\tThe only reason do to the latter is to pass addiontal props to the slide\n\t\telement. */\n\tchildren?: React.ReactNode | ((slideOffset: number) => React.ReactNode);\n\n\t/** The number of slides rendered at any given time. A good rule-of-thumb is\n\tthat this should be at least 4 times the \\`slidesToShow\\` value. */\n\ttotalSlides: number;\n\n\t/** Animate slides transitions from changes in `offset`. */\n\tisAnimated: boolean;\n\n\t/** Slides are rendered in a continuous loop, where the first slide repeats\n\t * after the last slide and vice-versa. DOM elements are re-ordered and\n\t * re-used. */\n\tisLooped: boolean;\n\n\t/** Child components of SlidePanel */\n\tSlide?: React.ReactNode;\n}\n\ntype IInfiniteSlidePanelProps = Overwrite<\n\tISlidePanelProps,\n\tIInfiniteSlidePanelPropsRaw\n>;\n\nconst defaultProps = {\n\toffset: 0,\n\tslidesToShow: 1,\n\tonSwipe: _.noop,\n\ttotalSlides: 8,\n\tisAnimated: SlidePanel.defaultProps.isAnimated,\n\tisLooped: SlidePanel.defaultProps.isLooped,\n};\n\nexport const InfiniteSlidePanel = (\n\tprops: IInfiniteSlidePanelProps\n): React.ReactElement => {\n\tconst {\n\t\tchildren,\n\t\tclassName,\n\t\toffset,\n\t\tslidesToShow,\n\t\tonSwipe,\n\t\ttotalSlides,\n\t\t...passThroughs\n\t} = props;\n\n\tconst slide = getFirst(\n\t\tprops,\n\t\tInfiniteSlidePanel.Slide,\n\t\t<InfiniteSlidePanelSlide>{children}</InfiniteSlidePanelSlide>\n\t) as React.ReactElement;\n\tconst slideChildRenderFunction = slide.props.children;\n\tif (!_.isFunction(slideChildRenderFunction)) {\n\t\tthrow new Error(\n\t\t\t'InfiniteSlidePanel children must be a single function `(slideOffset) => { /* returns React.PropTypes.node */ }`'\n\t\t);\n\t}\n\n\tconst halfSlides = Math.floor(totalSlides / 2);\n\tconst circularOffset = modulo(totalSlides, offset);\n\tconst forwardSlideOffsets = _.times(\n\t\ttotalSlides - halfSlides,\n\t\t(n: number): number => offset + n\n\t);\n\tconst backwardSlideOffsets = _.times(\n\t\thalfSlides,\n\t\t(n: number): number => offset + n - halfSlides\n\t);\n\tconst transposedSlideOffsets =\n\t\tforwardSlideOffsets.concat(backwardSlideOffsets);\n\tconst slideOffsetArray = _.takeRight(\n\t\ttransposedSlideOffsets,\n\t\tcircularOffset\n\t).concat(_.take(transposedSlideOffsets, totalSlides - circularOffset));\n\n\treturn (\n\t\t<SlidePanel\n\t\t\t{...omit(passThroughs, ['Slide', 'initialState'] as any)}\n\t\t\tclassName={cx('&', className)}\n\t\t\toffset={offset}\n\t\t\tslidesToShow={slidesToShow}\n\t\t\tonSwipe={onSwipe}\n\t\t\tisLooped\n\t\t>\n\t\t\t{_.map(\n\t\t\t\tslideOffsetArray,\n\t\t\t\t(slideOffset, elementOffset): React.ReactElement => (\n\t\t\t\t\t<SlidePanel.Slide\n\t\t\t\t\t\tkey={elementOffset}\n\t\t\t\t\t\t{...slide.props}\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'&-Slide-in-frame':\n\t\t\t\t\t\t\t\t\tslideOffset - offset < slidesToShow &&\n\t\t\t\t\t\t\t\t\tslideOffset - offset >= 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tslide.props.className\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{slideChildRenderFunction(slideOffset)}\n\t\t\t\t\t</SlidePanel.Slide>\n\t\t\t\t)\n\t\t\t)}\n\t\t</SlidePanel>\n\t);\n};\n\nInfiniteSlidePanel.defaultProps = defaultProps;\nInfiniteSlidePanel.Slide = InfiniteSlidePanelSlide;\nInfiniteSlidePanel._isPrivate = true;\nInfiniteSlidePanel.displayName = 'InfiniteSlidePanel';\nInfiniteSlidePanel.peek = {\n\tdescription: `A container for rendering an infinite set of horizontal slides. Translation between slides is controlled by passing in a new \\`offset\\`.  Can hook into touch events to update the \\`offset\\`. This component is made from \\`SlidePanel\\`, so it accepts the same props.`,\n\tcategories: ['helpers'],\n\tmadeFrom: ['SlidePanel'],\n};\nInfiniteSlidePanel.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\tchildren: oneOfType([node, func]) /**\n\t\tThe only allowed child is a render function which is passed the current\n\t\tslide's offset and returns the slide contents: \\`(slideOffset) => {\n\t\t//returns React.PropTypes.node }\\` Alternatively, you could pass one\n\t\t\\`<InfiniteSlidePanel.Slide {...}>\\` element with the render function.\n\t\tThe only reason do to the latter is to pass addiontal props to the slide\n\t\telement.\n\t*/,\n\n\t/**\n\t\tThe offset of the left-most rendered slide.\n\t*/\n\toffset: number,\n\n\t/**\n\t\tMax number of viewable slides to show simultaneously.\n\t*/\n\tslidesToShow: number,\n\n\t/**\n\t\tCalled when a user's swipe would change the offset. Callback passes\n\t\tnumber of slides by the user (positive for forward swipes, negative for\n\t\tbackwards swipes).  Signature: \\`(slidesSwiped, { event, props }) => {}\\`\n\t*/\n\tonSwipe: func,\n\n\t/**\n\t\tThe number of slides rendered at any given time. A good rule-of-thumb is\n\t\tthat this should be at least 4 times the \\`slidesToShow\\` value.\n\t*/\n\ttotalSlides: number,\n\n\t/** Child components of SlidePanel */\n\tSlide: node,\n};\n\nexport default InfiniteSlidePanel;\n"]},"metadata":{},"sourceType":"module"}