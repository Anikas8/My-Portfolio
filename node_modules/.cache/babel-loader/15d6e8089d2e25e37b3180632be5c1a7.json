{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport * as chartConstants from '../../constants/charts';\nconst cx = lucidClassNames.bind('&-Line');\nconst {\n  string,\n  object,\n  bool\n} = PropTypes;\nconst defaultProps = {\n  color: chartConstants.COLOR_0,\n  isDotted: false\n};\nexport const Line = props => {\n  const {\n    className,\n    color,\n    isDotted,\n    d,\n    style,\n    ...passThroughs\n  } = props;\n  const isCustomColor = _.startsWith(color, '#');\n  const colorStyle = isCustomColor ? {\n    fill: color,\n    stroke: color\n  } : null;\n  return React.createElement(\"path\", {\n    ...passThroughs,\n    style: {\n      ...style,\n      ...colorStyle\n    },\n    className: cx(className, '&', {\n      [`&-${color}`]: !isCustomColor,\n      '&-is-dotted': isDotted\n    }),\n    d: d\n  });\n};\nLine.defaultProps = defaultProps;\nLine.displayName = 'Line';\nLine.peek = {\n  description: `*For use within an \\`svg\\`*. A \\`Line\\` is typically used for line charts and is pretty much a thin wrapper around \\`svg\\` paths.`,\n  categories: ['visualizations', 'geoms']\n};\nLine.propTypes = {\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      The path for the line.\n  */\n  d: string,\n  /**\n      Strings should match an existing color class unless they start with a '#' for specific colors. E.g.:\n       - \\`COLOR_0\\`\n      - \\`COLOR_GOOD\\`\n      - \\`'#123abc'\\`\n  */\n  color: string,\n  /**\n      Display a dotted line.\n  */\n  isDotted: bool\n};\nexport default Line;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,eAAe,QAAQ,0BAA0B;AAE1D,OAAO,KAAKC,cAAc,MAAM,wBAAwB;AAExD,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,QAAQ,CAAC;AAEzC,MAAM;EAAEC,MAAM;EAAEC,MAAM;EAAEC;AAAI,CAAE,GAAGP,SAAS;AAmB1C,MAAMQ,YAAY,GAAG;EACpBC,KAAK,EAAEP,cAAc,CAACQ,OAAO;EAC7BC,QAAQ,EAAE;CACV;AAED,OAAO,MAAMC,IAAI,GAAIC,KAAiB,IAAwB;EAC7D,MAAM;IAAEC,SAAS;IAAEL,KAAK;IAAEE,QAAQ;IAAEI,CAAC;IAAEC,KAAK;IAAE,GAAGC;EAAY,CAAE,GAAGJ,KAAK;EACvE,MAAMK,aAAa,GAAGpB,CAAC,CAACqB,UAAU,CAACV,KAAK,EAAE,GAAG,CAAC;EAC9C,MAAMW,UAAU,GAAGF,aAAa,GAAG;IAAEG,IAAI,EAAEZ,KAAK;IAAEa,MAAM,EAAEb;EAAK,CAAE,GAAG,IAAI;EAExE,OACCV;IAAA,GACKkB,YAAY;IAChBD,KAAK,EAAE;MACN,GAAGA,KAAK;MACR,GAAGI;KACH;IACDN,SAAS,EAAEX,EAAE,CAACW,SAAS,EAAE,GAAG,EAAE;MAC7B,CAAC,KAAKL,KAAK,EAAE,GAAG,CAACS,aAAa;MAC9B,aAAa,EAAEP;KACf,CAAC;IACFI,CAAC,EAAEA;EAAC,EACH;AAEJ,CAAC;AAEDH,IAAI,CAACJ,YAAY,GAAGA,YAAY;AAEhCI,IAAI,CAACW,WAAW,GAAG,MAAM;AACzBX,IAAI,CAACY,IAAI,GAAG;EACXC,WAAW,EAAE,mIAAmI;EAChJC,UAAU,EAAE,CAAC,gBAAgB,EAAE,OAAO;CACtC;AACDd,IAAI,CAACe,SAAS,GAAG;EAChB;;;EAGAX,KAAK,EAAEV,MAAM;EAEb;;;EAGAQ,SAAS,EAAET,MAAM;EAEjB;;;EAGAU,CAAC,EAAEV,MAAM;EAET;;;;;;EAOAI,KAAK,EAAEJ,MAAM;EACb;;;EAGAM,QAAQ,EAAEJ;CACV;AAED,eAAeK,IAAI","names":["_","React","PropTypes","lucidClassNames","chartConstants","cx","bind","string","object","bool","defaultProps","color","COLOR_0","isDotted","Line","props","className","d","style","passThroughs","isCustomColor","startsWith","colorStyle","fill","stroke","displayName","peek","description","categories","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Line/Line.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\nimport * as chartConstants from '../../constants/charts';\n\nconst cx = lucidClassNames.bind('&-Line');\n\nconst { string, object, bool } = PropTypes;\n\nexport interface ILineProps\n\textends StandardProps,\n\t\tReact.SVGProps<SVGPathElement> {\n\t/** The path for the line. */\n\td?: string;\n\n\t/** Strings should match an existing color class unless they start with a '#' for specific colors. E.g.:\n\n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\` */\n\tcolor: string;\n\n\t/** Display a dotted line. */\n\tisDotted: boolean;\n}\n\nconst defaultProps = {\n\tcolor: chartConstants.COLOR_0,\n\tisDotted: false,\n};\n\nexport const Line = (props: ILineProps): React.ReactElement => {\n\tconst { className, color, isDotted, d, style, ...passThroughs } = props;\n\tconst isCustomColor = _.startsWith(color, '#');\n\tconst colorStyle = isCustomColor ? { fill: color, stroke: color } : null;\n\n\treturn (\n\t\t<path\n\t\t\t{...passThroughs}\n\t\t\tstyle={{\n\t\t\t\t...style,\n\t\t\t\t...colorStyle,\n\t\t\t}}\n\t\t\tclassName={cx(className, '&', {\n\t\t\t\t[`&-${color}`]: !isCustomColor,\n\t\t\t\t'&-is-dotted': isDotted,\n\t\t\t})}\n\t\t\td={d}\n\t\t/>\n\t);\n};\n\nLine.defaultProps = defaultProps;\n\nLine.displayName = 'Line';\nLine.peek = {\n\tdescription: `*For use within an \\`svg\\`*. A \\`Line\\` is typically used for line charts and is pretty much a thin wrapper around \\`svg\\` paths.`,\n\tcategories: ['visualizations', 'geoms'],\n};\nLine.propTypes = {\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tThe path for the line.\n\t*/\n\td: string,\n\n\t/**\n\t\tStrings should match an existing color class unless they start with a '#' for specific colors. E.g.:\n\n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\`\n\t*/\n\tcolor: string,\n\t/**\n\t\tDisplay a dotted line.\n\t*/\n\tisDotted: bool,\n};\n\nexport default Line;\n"]},"metadata":{},"sourceType":"module"}