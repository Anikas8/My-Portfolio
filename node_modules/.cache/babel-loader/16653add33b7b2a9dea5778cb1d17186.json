{"ast":null,"code":"import React from 'react';\nimport { omit } from 'lodash';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport classNames from 'classnames';\nconst cx = lucidClassNames.bind('&-Portal');\nconst {\n  any,\n  node,\n  string\n} = PropTypes;\nclass Portal extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isReady: false\n    };\n    this.manuallyCreatedPortal = false;\n    this.portalElement = document.createElement('div');\n  }\n  componentDidMount() {\n    const {\n      portalId\n    } = this.props;\n    let portalElement;\n    if (portalId) {\n      portalElement = document.getElementById(portalId);\n    }\n    if (!portalElement) {\n      this.manuallyCreatedPortal = true;\n      portalElement = document.createElement('div');\n      portalElement.id = portalId;\n      document.body.appendChild(portalElement);\n    }\n    this.portalElement = portalElement;\n    this.setState({\n      isReady: true\n    });\n  }\n  componentWillUnmount() {\n    if (this.manuallyCreatedPortal) {\n      this.portalElement.remove();\n    }\n  }\n  render() {\n    return this.state.isReady ? ReactDOM.createPortal(React.createElement(\"div\", {\n      \"data-test-id\": this.props.className,\n      className: classNames(cx('&'), this.props.className),\n      ...omit(this.props, ['className', 'children', 'portalId', 'initialState', 'callbackId'])\n    }, this.props.children), this.portalElement) : null;\n  }\n}\nPortal.displayName = 'Portal';\nPortal.peek = {\n  description: `A \\`Portal\\` component is used to render content in a container that is appended to \\`document.body\\`.`,\n  categories: ['utility']\n};\nPortal.propTypes = {\n  /**\n      any valid React children\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      The \\`id\\` of the portal element that is appended to \\`document.body\\`.\n  */\n  portalId: string\n};\nexport default Portal;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAYC,IAAI,QAAQ,QAAQ;AAChC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,QAAQ,MAAM,WAAW;AAGhC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,OAAOC,UAAU,MAAM,YAAY;AAEnC,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,UAAU,CAAC;AAE3C,MAAM;EAAEC,GAAG;EAAEC,IAAI;EAAEC;AAAM,CAAE,GAAGR,SAAS;AAavC,MAAMS,MAAO,SAAQX,KAAK,CAACY,SAAyC;EAApEC;;IAwBC,UAAK,GAAG;MACPC,OAAO,EAAE;KACT;IAED,0BAAqB,GAAY,KAAK;IACtC,kBAAa,GAAgBC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EA4C3D;EA1CCC,iBAAiB;IAChB,MAAM;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACC,KAAK;IAE/B,IAAIC,aAAa;IAEjB,IAAIF,QAAQ,EAAE;MACbE,aAAa,GAAGL,QAAQ,CAACM,cAAc,CAACH,QAAQ,CAAC;;IAElD,IAAI,CAACE,aAAa,EAAE;MACnB,IAAI,CAACE,qBAAqB,GAAG,IAAI;MACjCF,aAAa,GAAGL,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC7CI,aAAa,CAACG,EAAE,GAAGL,QAAkB;MACrCH,QAAQ,CAACS,IAAI,CAACC,WAAW,CAACL,aAAa,CAAC;;IAEzC,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACM,QAAQ,CAAC;MAAEZ,OAAO,EAAE;IAAI,CAAE,CAAC;EACjC;EACAa,oBAAoB;IACnB,IAAI,IAAI,CAACL,qBAAqB,EAAE;MAC/B,IAAI,CAACF,aAAa,CAACQ,MAAM,EAAE;;EAE7B;EACAC,MAAM;IACL,OAAO,IAAI,CAACC,KAAK,CAAChB,OAAO,GACtBX,QAAQ,CAAC4B,YAAY,CACrB/B;MAAA,gBACe,IAAI,CAACmB,KAAK,CAACa,SAAS;MAClCA,SAAS,EAAE3B,UAAU,CAACC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAACa,KAAK,CAACa,SAAS,CAAC;MAAA,GAChD/B,IAAI,CAAC,IAAI,CAACkB,KAAK,EAAE,CACpB,WAAW,EACX,UAAU,EACV,UAAU,EACV,cAAc,EACd,YAAY,CACZ;IAAC,GAED,IAAI,CAACA,KAAK,CAACc,QAAQ,CACf,EACN,IAAI,CAACb,aAAa,CACjB,GACD,IAAI;EACR;;AAvEOT,kBAAW,GAAG,QAAQ;AACtBA,WAAI,GAAG;EACbuB,WAAW,EAAE,wGAAwG;EACrHC,UAAU,EAAE,CAAC,SAAS;CACtB;AACMxB,gBAAS,GAAG;EAClB;;;EAGAsB,QAAQ,EAAExB,IAAI;EAEd;;;;EAIAuB,SAAS,EAAExB,GAAG;EAEd;;;EAGAU,QAAQ,EAAER;CACV;AAqDF,eAAeC,MAAM","names":["React","omit","PropTypes","ReactDOM","lucidClassNames","classNames","cx","bind","any","node","string","Portal","Component","constructor","isReady","document","createElement","componentDidMount","portalId","props","portalElement","getElementById","manuallyCreatedPortal","id","body","appendChild","setState","componentWillUnmount","remove","render","state","createPortal","className","children","description","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Portal/Portal.tsx"],"sourcesContent":["import React from 'react';\nimport _, { omit } from 'lodash';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\nimport { StandardProps } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport classNames from 'classnames';\n\nconst cx = lucidClassNames.bind('&-Portal');\n\nconst { any, node, string } = PropTypes;\n\nexport interface IPortalProps\n\textends StandardProps,\n\t\tReact.HTMLProps<HTMLDivElement> {\n\t/** The `id` of the portal element that is appended to `document.body`. */\n\tportalId?: string;\n}\n\ninterface IPortalState {\n\tisReady: boolean;\n}\n\nclass Portal extends React.Component<IPortalProps, IPortalState, {}> {\n\tstatic displayName = 'Portal';\n\tstatic peek = {\n\t\tdescription: `A \\`Portal\\` component is used to render content in a container that is appended to \\`document.body\\`.`,\n\t\tcategories: ['utility'],\n\t};\n\tstatic propTypes = {\n\t\t/**\n\t\t\tany valid React children\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t\tValue is run through the \\`classnames\\` library.\n\t\t*/\n\t\tclassName: any,\n\n\t\t/**\n\t\t\tThe \\`id\\` of the portal element that is appended to \\`document.body\\`.\n\t\t*/\n\t\tportalId: string,\n\t};\n\n\tstate = {\n\t\tisReady: false,\n\t};\n\n\tmanuallyCreatedPortal: boolean = false;\n\tportalElement: HTMLElement = document.createElement('div');\n\n\tcomponentDidMount(): void {\n\t\tconst { portalId } = this.props;\n\n\t\tlet portalElement;\n\n\t\tif (portalId) {\n\t\t\tportalElement = document.getElementById(portalId);\n\t\t}\n\t\tif (!portalElement) {\n\t\t\tthis.manuallyCreatedPortal = true;\n\t\t\tportalElement = document.createElement('div');\n\t\t\tportalElement.id = portalId as string;\n\t\t\tdocument.body.appendChild(portalElement);\n\t\t}\n\t\tthis.portalElement = portalElement;\n\t\tthis.setState({ isReady: true });\n\t}\n\tcomponentWillUnmount(): void {\n\t\tif (this.manuallyCreatedPortal) {\n\t\t\tthis.portalElement.remove();\n\t\t}\n\t}\n\trender(): React.ReactNode {\n\t\treturn this.state.isReady\n\t\t\t? ReactDOM.createPortal(\n\t\t\t\t\t<div\n\t\t\t\t\t\tdata-test-id={this.props.className}\n\t\t\t\t\t\tclassName={classNames(cx('&'), this.props.className)}\n\t\t\t\t\t\t{...omit(this.props, [\n\t\t\t\t\t\t\t'className',\n\t\t\t\t\t\t\t'children',\n\t\t\t\t\t\t\t'portalId',\n\t\t\t\t\t\t\t'initialState',\n\t\t\t\t\t\t\t'callbackId',\n\t\t\t\t\t\t])}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.children}\n\t\t\t\t\t</div>,\n\t\t\t\t\tthis.portalElement\n\t\t\t  )\n\t\t\t: null;\n\t}\n}\n\nexport default Portal;\n"]},"metadata":{},"sourceType":"module"}