{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport reducers from './ButtonGroup.reducers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nconst cx = lucidClassNames.bind('&-ButtonGroup');\nconst {\n  any,\n  func,\n  arrayOf,\n  number\n} = PropTypes;\nconst ButtonGroupButton = _props => null;\nButtonGroupButton.displayName = 'ButtonGroup.Button';\nButtonGroupButton.peek = {\n  description: `Renders a \\`<Button\\`> inside the \\`ButtonGroup\\`.`\n};\nconst defaultProps = {\n  onSelect: _.noop,\n  selectedIndices: []\n};\nconst nonPassThroughs = ['onSelect', 'className', 'children', 'selectedIndices'];\nclass ButtonGroup extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleSelect = (event, childProps, index) => {\n      const clickedButtonProps = _.get(findTypes(this.props, ButtonGroup.Button)[index], 'props', {});\n      // If the consumer passed in an `onClick` to the child `ButtonGroup.Button`\n      // component, we should make sure to call that in addition to the\n      // `ButtonGroup`'s `onSelect`.\n      if (_.isFunction(clickedButtonProps.onClick)) {\n        clickedButtonProps.onClick({\n          event,\n          props: childProps\n        });\n      }\n      this.props.onSelect(index, {\n        event,\n        props: childProps\n      });\n    };\n  }\n  render() {\n    const {\n      selectedIndices,\n      className,\n      children,\n      ...passThroughs\n    } = this.props;\n    const buttonChildProps = _.map(findTypes(this.props, ButtonGroup.Button), 'props');\n    return React.createElement(\"span\", {\n      ..._.omit(passThroughs, nonPassThroughs),\n      className: cx('&', className)\n    }, _.map(buttonChildProps, (buttonChildProp, index) => {\n      return (\n        // The order of the spread operator below is important. If the\n        // consumer puts `isActive` directly on a `ButtonGroup.Button`, we\n        // want that to take precedence over the `selectedIndices` prop on\n        // the parent `ButtonGroup`. However, we want our `onClick` at the\n        // bottom because we manually handle passing the event to the\n        // `ButtonGroup.Button`'s `onClick` if it exists.\n        React.createElement(Button, {\n          isActive: _.includes(selectedIndices, index),\n          ...buttonChildProp,\n          key: index,\n          onClick: _ref => {\n            let {\n              event,\n              props\n            } = _ref;\n            return this.handleSelect(event, props, index);\n          }\n        })\n      );\n    }), children);\n  }\n}\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.peek = {\n  description: `\\`Button Group\\` allows you to pair \\`Buttons\\` together to form a seamless cluster. Any props not explicitly called out are spread on to the root component.`,\n  categories: ['controls', 'buttons'],\n  madeFrom: ['Button']\n};\nButtonGroup.Button = ButtonGroupButton;\nButtonGroup.reducers = reducers;\nButtonGroup.defaultProps = defaultProps;\nButtonGroup.propTypes = {\n  /**\n      A function that is called with the index of the child button clicked.\n      \\`props\\` refers to the child button props.  Signature:\n      \\`(selectedIndex, { event, props }) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      All children should be \\`ButtonGroup.Button\\`s and they support the same\n      props as \\`Button\\`s.\n  */\n  children: any,\n  /**\n      An array of currently selected \\`ButtonGroup.Button\\`s indices. You can\n      also pass the prop \\`isActive\\` to individual \\`ButtonGroup.Button\\`\n      components.\n  */\n  selectedIndices: arrayOf(number)\n};\nexport default buildModernHybridComponent(ButtonGroup, {\n  reducers\n});\nexport { ButtonGroup as ButtonGroupDumb };","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","Button","lucidClassNames","findTypes","reducers","buildModernHybridComponent","cx","bind","any","func","arrayOf","number","ButtonGroupButton","_props","displayName","peek","description","defaultProps","onSelect","noop","selectedIndices","nonPassThroughs","ButtonGroup","Component","constructor","event","childProps","index","clickedButtonProps","get","props","isFunction","onClick","render","className","children","passThroughs","buttonChildProps","map","omit","buttonChildProp","isActive","includes","key","handleSelect","categories","madeFrom","ButtonGroupDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/ButtonGroup/ButtonGroup.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button, { IButtonProps } from '../Button/Button';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, StandardProps } from '../../util/component-types';\nimport reducers from './ButtonGroup.reducers';\nimport { buildModernHybridComponent } from '../../util/state-management';\n\nconst cx = lucidClassNames.bind('&-ButtonGroup');\n\nconst { any, func, arrayOf, number } = PropTypes;\n\nconst ButtonGroupButton = (_props: Partial<IButtonProps>): null => null;\nButtonGroupButton.displayName = 'ButtonGroup.Button';\nButtonGroupButton.peek = {\n\tdescription: `Renders a \\`<Button\\`> inside the \\`ButtonGroup\\`.`,\n};\n\nconst defaultProps = {\n\tonSelect: _.noop,\n\tselectedIndices: [],\n};\n\nconst nonPassThroughs = [\n\t'onSelect',\n\t'className',\n\t'children',\n\t'selectedIndices',\n];\nexport interface IButtonGroupState {\n\tselectedIndices: number[];\n}\n\nexport interface IButtonGroupProps extends StandardProps {\n\t/** A function that is called with the index of the child button clicked. */\n\tonSelect: (\n\t\tselectedIndex: number,\n\t\t{ event, props }: { event: React.MouseEvent; props: IButtonProps }\n\t) => void;\n\n\t/** An array of currently selected \\`ButtonGroup.Button\\`s indices. You can\n\talso pass the prop \\`isActive\\` to individual \\`ButtonGroup.Button\\`\n\tcomponents. */\n\tselectedIndices: number[];\n}\n\nclass ButtonGroup extends React.Component<\n\tIButtonGroupProps,\n\tIButtonGroupState\n> {\n\tstatic displayName = 'ButtonGroup';\n\n\tstatic peek = {\n\t\tdescription: `\\`Button Group\\` allows you to pair \\`Buttons\\` together to form a seamless cluster. Any props not explicitly called out are spread on to the root component.`,\n\t\tcategories: ['controls', 'buttons'],\n\t\tmadeFrom: ['Button'],\n\t};\n\n\tstatic Button = ButtonGroupButton;\n\n\tstatic reducers = reducers;\n\n\tstatic defaultProps = defaultProps;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tA function that is called with the index of the child button clicked.\n\t\t\t\\`props\\` refers to the child button props.  Signature:\n\t\t\t\\`(selectedIndex, { event, props }) => {}\\`\n\t\t*/\n\t\tonSelect: func,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t\tValue is run through the \\`classnames\\` library.\n\t\t*/\n\t\tclassName: any,\n\n\t\t/**\n\t\t\tAll children should be \\`ButtonGroup.Button\\`s and they support the same\n\t\t\tprops as \\`Button\\`s.\n\t\t*/\n\t\tchildren: any,\n\n\t\t/**\n\t\t\tAn array of currently selected \\`ButtonGroup.Button\\`s indices. You can\n\t\t\talso pass the prop \\`isActive\\` to individual \\`ButtonGroup.Button\\`\n\t\t\tcomponents.\n\t\t*/\n\t\tselectedIndices: arrayOf(number),\n\t};\n\n\thandleSelect = (event, childProps, index) => {\n\t\tconst clickedButtonProps = _.get(\n\t\t\tfindTypes(this.props, ButtonGroup.Button)[index],\n\t\t\t'props',\n\t\t\t{}\n\t\t);\n\t\t// If the consumer passed in an `onClick` to the child `ButtonGroup.Button`\n\t\t// component, we should make sure to call that in addition to the\n\t\t// `ButtonGroup`'s `onSelect`.\n\t\tif (_.isFunction(clickedButtonProps.onClick)) {\n\t\t\tclickedButtonProps.onClick({ event, props: childProps });\n\t\t}\n\n\t\tthis.props.onSelect(index, { event, props: childProps });\n\t};\n\n\trender() {\n\t\tconst { selectedIndices, className, children, ...passThroughs } =\n\t\t\tthis.props;\n\n\t\tconst buttonChildProps = _.map(\n\t\t\tfindTypes(this.props, ButtonGroup.Button),\n\t\t\t'props'\n\t\t);\n\n\t\treturn (\n\t\t\t<span\n\t\t\t\t{...(_.omit(passThroughs, nonPassThroughs) as any)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t>\n\t\t\t\t{_.map(buttonChildProps, (buttonChildProp, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t// The order of the spread operator below is important. If the\n\t\t\t\t\t\t// consumer puts `isActive` directly on a `ButtonGroup.Button`, we\n\t\t\t\t\t\t// want that to take precedence over the `selectedIndices` prop on\n\t\t\t\t\t\t// the parent `ButtonGroup`. However, we want our `onClick` at the\n\t\t\t\t\t\t// bottom because we manually handle passing the event to the\n\t\t\t\t\t\t// `ButtonGroup.Button`'s `onClick` if it exists.\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tisActive={_.includes(selectedIndices, index)}\n\t\t\t\t\t\t\t{...buttonChildProp}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tonClick={({ event, props }) =>\n\t\t\t\t\t\t\t\tthis.handleSelect(event, props, index)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t{children}\n\t\t\t</span>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tIButtonGroupProps,\n\tIButtonGroupState,\n\ttypeof ButtonGroup\n>(ButtonGroup as any, { reducers });\n\nexport { ButtonGroup as ButtonGroupDumb };\n"]},"metadata":{},"sourceType":"module"}