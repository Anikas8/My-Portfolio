{"ast":null,"code":"import _ from 'lodash';\nimport classNames from 'classnames';\nconst RANDOM_INTEGER = _.random(0, Number.MAX_SAFE_INTEGER);\n/**\n * bindClassNames\n *\n * Returns a version of the `classnames` functions where `&` is bound to a given\n * value. The returned functions can be further bound to more specific values for\n * `&` which allows your bound classnames to look closer to style selector.\n *\n * Examples:\n *   bindClassNames('lucid')('&-Button') === 'lucid-Button'\n *   bindClassNames('lucid').bind('&-Button')('&-active') === 'lucid-Button-active'\n */\nexport function bindClassNames() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /&/g;\n  // We left `any` here because the classNames @types package doesn't export\n  // the right types for us to be able to use. It accepts a fairly wide range\n  // of input.\n  function cx() {\n    return _.map(classNames(...arguments).split(' '), className => className.replace(variable, value)).join(' ');\n  }\n  return _.assign(cx, {\n    bind() {\n      let nextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : value;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return bindClassNames(nextValue.replace(variable, value), ...args);\n    }\n  });\n}\nexport const NAMESPACE = typeof LUCID_CSS_NAMESPACE !== 'undefined' ? LUCID_CSS_NAMESPACE : 'lucid'; // eslint-disable-line no-undef\n/**\n * Exports a lucid-bound version of classnames, which can be make more specific\n * to a component.\n *\n * Example:\n *   const cx = lucidClassNames.bind('&-Button')\n *\n *   cx('&',{\n *     '&-active': true\n *   }, ['custom-classname']) === 'lucid-Button lucid-Button-active custom-classname'\n */\nexport const lucidClassNames = bindClassNames(NAMESPACE);\nexport function uniqueName(prefix) {\n  return _.uniqueId(`${RANDOM_INTEGER}-${prefix}`);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,UAAU,MAAM,YAAY;AAEnC,MAAMC,cAAc,GAAGF,CAAC,CAACG,MAAM,CAAC,CAAC,EAAEC,MAAM,CAACC,gBAAgB,CAAC;AAE3D;;;;;;;;;;;AAWA,OAAM,SAAUC,cAAc,GAEG;EAAA,IADhCC,4EAAgB,EAAE;EAAA,IAClBC,+EAA4B,IAAI;EAEhC;EACA;EACA;EACA,SAASC,EAAE,GAAe;IACzB,OAAOT,CAAC,CAACU,GAAG,CAACT,UAAU,CAAC,YAAO,CAAC,CAACU,KAAK,CAAC,GAAG,CAAC,EAAGC,SAAS,IACtDA,SAAS,CAACC,OAAO,CAACL,QAAQ,EAAED,KAAK,CAAC,CAClC,CAACO,IAAI,CAAC,GAAG,CAAC;EACZ;EAEA,OAAOd,CAAC,CAACe,MAAM,CAACN,EAAE,EAAE;IACnBO,IAAI,GAAkC;MAAA,IAAjCC,SAAS,uEAAGV,KAAK;MAAA,kCAAKW,IAAW;QAAXA,IAAW;MAAA;MACrC,OAAOZ,cAAc,CAACW,SAAS,CAACJ,OAAO,CAACL,QAAQ,EAAED,KAAK,CAAC,EAAE,GAAGW,IAAI,CAAC;IACnE;GACA,CAAC;AACH;AAQA,OAAO,MAAMC,SAAS,GACrB,OAAOC,mBAAmB,KAAK,WAAW,GAAGA,mBAAmB,GAAG,OAAO,CAAC,CAAC;AAE7E;;;;;;;;;;;AAWA,OAAO,MAAMC,eAAe,GAAGf,cAAc,CAACa,SAAS,CAAC;AAExD,OAAM,SAAUG,UAAU,CAACC,MAAc;EACxC,OAAOvB,CAAC,CAACwB,QAAQ,CAAC,GAAGtB,cAAc,IAAIqB,MAAM,EAAE,CAAC;AACjD","names":["_","classNames","RANDOM_INTEGER","random","Number","MAX_SAFE_INTEGER","bindClassNames","value","variable","cx","map","split","className","replace","join","assign","bind","nextValue","args","NAMESPACE","LUCID_CSS_NAMESPACE","lucidClassNames","uniqueName","prefix","uniqueId"],"sources":["/home/skanda/node_modules/lucid-ui/src/util/style-helpers.ts"],"sourcesContent":["import _ from 'lodash';\nimport classNames from 'classnames';\n\nconst RANDOM_INTEGER = _.random(0, Number.MAX_SAFE_INTEGER);\n\n/**\n * bindClassNames\n *\n * Returns a version of the `classnames` functions where `&` is bound to a given\n * value. The returned functions can be further bound to more specific values for\n * `&` which allows your bound classnames to look closer to style selector.\n *\n * Examples:\n *   bindClassNames('lucid')('&-Button') === 'lucid-Button'\n *   bindClassNames('lucid').bind('&-Button')('&-active') === 'lucid-Button-active'\n */\nexport function bindClassNames(\n\tvalue: string = '',\n\tvariable: RegExp | string = /&/g\n) {\n\t// We left `any` here because the classNames @types package doesn't export\n\t// the right types for us to be able to use. It accepts a fairly wide range\n\t// of input.\n\tfunction cx(...args: any[]) {\n\t\treturn _.map(classNames(...args).split(' '), (className) =>\n\t\t\tclassName.replace(variable, value)\n\t\t).join(' ');\n\t}\n\n\treturn _.assign(cx, {\n\t\tbind(nextValue = value, ...args: any[]) {\n\t\t\treturn bindClassNames(nextValue.replace(variable, value), ...args);\n\t\t},\n\t});\n}\n\n// LUCID_CSS_NAMESPACE is a placeholder that webpack's DefinePlugin can\n// overwrite at compile time. Paired with the `prefix` LESS variable, consumers\n// are able to scope all class names to something custom. This is a really rare\n// use-case. We needed it becuase we sometimes run two copies of the library on\n// a single page and need the styles not to step on each other.\ndeclare const LUCID_CSS_NAMESPACE: string;\nexport const NAMESPACE =\n\ttypeof LUCID_CSS_NAMESPACE !== 'undefined' ? LUCID_CSS_NAMESPACE : 'lucid'; // eslint-disable-line no-undef\n\n/**\n * Exports a lucid-bound version of classnames, which can be make more specific\n * to a component.\n *\n * Example:\n *   const cx = lucidClassNames.bind('&-Button')\n *\n *   cx('&',{\n *     '&-active': true\n *   }, ['custom-classname']) === 'lucid-Button lucid-Button-active custom-classname'\n */\nexport const lucidClassNames = bindClassNames(NAMESPACE);\n\nexport function uniqueName(prefix: string) {\n\treturn _.uniqueId(`${RANDOM_INTEGER}-${prefix}`);\n}\n"]},"metadata":{},"sourceType":"module"}