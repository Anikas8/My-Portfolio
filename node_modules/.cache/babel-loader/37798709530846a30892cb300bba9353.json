{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nconst cx = lucidClassNames.bind('&-Banner');\nconst bannerPropTypes = {\n  /** Pass in a icon component for custom icons within `Banner`. */\n  icon: PropTypes.element,\n  /** Set this to `true` if you want to have a `x` close icon. */\n  isCloseable: PropTypes.bool,\n  /** Defaults to `true`. If set to `false` the banner will not be filled in. */\n  isFilled: PropTypes.bool,\n  /** If set to `true` the banner have smaller padding on the inside. */\n  isSmall: PropTypes.bool,\n  /** Class names that are appended to the defaults. */\n  className: PropTypes.string,\n  /** Any valid React children. */\n  children: PropTypes.node,\n  /** Style variations of the `Banner`. */\n  kind: PropTypes.oneOf(['primary', 'success', 'warning', 'danger', 'info', 'default']),\n  /** Called when the user closes the `Banner`.  Signature: `({ event, props }) => {}` */\n  onClose: PropTypes.func,\n  /** Controls the visibility of the `Banner`. */\n  isClosed: PropTypes.bool\n};\nconst defaultProps = {\n  icon: null,\n  isCloseable: true,\n  isFilled: true,\n  isSmall: false,\n  kind: 'default',\n  onClose: _.noop,\n  isClosed: false\n};\nexport const Banner = props => {\n  const {\n    icon,\n    kind,\n    className,\n    children,\n    isCloseable,\n    isClosed,\n    isFilled,\n    isSmall,\n    onClose,\n    ...passThroughs\n  } = props;\n  const handleClose = _ref => {\n    let {\n      event,\n      props\n    } = _ref;\n    onClose({\n      event,\n      props\n    });\n  };\n  let displayedIcon = null;\n  if (icon) {\n    displayedIcon = icon;\n  }\n  return React.createElement(CSSTransition, {\n    in: !isClosed,\n    classNames: cx('&'),\n    timeout: 300,\n    unmountOnExit: true\n  }, React.createElement(\"section\", {\n    ...passThroughs,\n    className: cx('&', {\n      '&-has-icon': displayedIcon,\n      '&-has-close': isCloseable,\n      '&-primary': kind === 'primary',\n      '&-success': kind === 'success',\n      '&-warning': kind === 'warning',\n      '&-danger': kind === 'danger',\n      '&-info': kind === 'info',\n      '&-small': isSmall,\n      '&-filled': isFilled\n    }, className)\n  }, displayedIcon ? React.createElement(\"span\", {\n    className: cx('&-icon')\n  }, displayedIcon) : null, React.createElement(\"span\", {\n    className: cx('&-content')\n  }, children), isCloseable ? React.createElement(CloseIcon, {\n    isClickable: true,\n    size: 8,\n    className: cx('&-close'),\n    onClick: handleClose\n  }) : null));\n};\nBanner.defaultProps = defaultProps;\nBanner.displayName = 'Banner';\nBanner.peek = {\n  description: `A banner that displays a prominent message.`,\n  notes: {\n    overview: `\n\t\t\tA banner that displays a prominent message.\n\t\t`,\n    intendedUse: `\n\t\t\tCommunicates information, success, a warning, or an error.\n\n\t\t\t**Styling notes**\n\n\t\t\t- Banners usually display at the top of a page.\n\t\t\t- Use the solid filled banner for single-line content.\n\t\t\t- Use the outlined banner for multi-line content.\n\t\t\t- Color use:\n\t\t\t\t- Use \\`kind:\"info\"\\` (blue) for information, like instructions for a feature.\n\t\t\t\t- Use \\`kind:\"success\"\\` (green) for success messages, like completing a task successfully.\n\t\t\t\t- Use \\`kind:\"warning\"\\` (yellow) for warnings, like a line item that is under-delivering.\n\t\t\t\t- Use \\`kind:\"danger\"\\` (orange) for danger messages, like an error message for missing required content.\n\t\t\t\t- Use grey banners for new feature announcements.\n\t\t`,\n    technicalRecommendations: `\n\t\t\tShort single-line content can be passed in as a simple string. Multi-line messages should be passed wrapped in a \\`<p>\\` tag.\n\t\t\tYou can apply styling as needed within a banner, for example using \\`strong\\`, \\`a href\\`, or \\`em\\`.\n\t\t`\n  },\n  categories: ['communication']\n};\nBanner.propTypes = bannerPropTypes;\nexport default Banner;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","CSSTransition","lucidClassNames","CloseIcon","cx","bind","bannerPropTypes","icon","element","isCloseable","bool","isFilled","isSmall","className","string","children","node","kind","oneOf","onClose","func","isClosed","defaultProps","noop","Banner","props","passThroughs","handleClose","event","displayedIcon","in","classNames","timeout","unmountOnExit","isClickable","size","onClick","displayName","peek","description","notes","overview","intendedUse","technicalRecommendations","categories","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Banner/Banner.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CSSTransition } from 'react-transition-group';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nimport { IIconProps } from '../Icon/Icon';\n\nconst cx = lucidClassNames.bind('&-Banner');\n\nconst bannerPropTypes = {\n\t/** Pass in a icon component for custom icons within `Banner`. */\n\ticon: PropTypes.element,\n\n\t/** Set this to `true` if you want to have a `x` close icon. */\n\tisCloseable: PropTypes.bool,\n\n\t/** Defaults to `true`. If set to `false` the banner will not be filled in. */\n\tisFilled: PropTypes.bool,\n\n\t/** If set to `true` the banner have smaller padding on the inside. */\n\tisSmall: PropTypes.bool,\n\n\t/** Class names that are appended to the defaults. */\n\tclassName: PropTypes.string,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.node,\n\n\t/** Style variations of the `Banner`. */\n\tkind: PropTypes.oneOf([\n\t\t'primary',\n\t\t'success',\n\t\t'warning',\n\t\t'danger',\n\t\t'info',\n\t\t'default',\n\t]),\n\n\t/** Called when the user closes the `Banner`.  Signature: `({ event, props }) => {}` */\n\tonClose: PropTypes.func,\n\n\t/** Controls the visibility of the `Banner`. */\n\tisClosed: PropTypes.bool,\n};\n\nexport interface IBannerProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Pass in a icon component for custom icons within `Banner`. */\n\ticon?: React.ReactElement | null;\n\n\t/** Set this to `true` if you want to have a `x` close icon. */\n\tisCloseable?: boolean;\n\n\t/** If set to `false` the banner will not be filled in.\n\t * @default = true\n\t */\n\tisFilled?: boolean;\n\n\t/** If set to `true` the banner have smaller padding on the inside. */\n\tisSmall?: boolean;\n\n\t/** Style variations of the `Banner`. */\n\tkind?: 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'default';\n\n\t/** Called when the user closes the `Banner`. */\n\tonClose: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IIconProps;\n\t}) => void;\n\n\t/** Controls the visibility of the `Banner`. */\n\tisClosed?: boolean;\n}\n\nconst defaultProps = {\n\ticon: null,\n\tisCloseable: true,\n\tisFilled: true,\n\tisSmall: false,\n\tkind: 'default' as const,\n\tonClose: _.noop,\n\tisClosed: false,\n};\n\nexport const Banner = (props: IBannerProps): React.ReactElement => {\n\tconst {\n\t\ticon,\n\t\tkind,\n\t\tclassName,\n\t\tchildren,\n\t\tisCloseable,\n\t\tisClosed,\n\t\tisFilled,\n\t\tisSmall,\n\t\tonClose,\n\t\t...passThroughs\n\t} = props;\n\n\tconst handleClose = ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IIconProps;\n\t}): void => {\n\t\tonClose({ event, props });\n\t};\n\n\tlet displayedIcon: any = null;\n\n\tif (icon) {\n\t\tdisplayedIcon = icon;\n\t}\n\n\treturn (\n\t\t<CSSTransition\n\t\t\tin={!isClosed}\n\t\t\tclassNames={cx('&')}\n\t\t\ttimeout={300}\n\t\t\tunmountOnExit\n\t\t>\n\t\t\t<section\n\t\t\t\t{...(passThroughs as any)}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-has-icon': displayedIcon,\n\t\t\t\t\t\t'&-has-close': isCloseable,\n\t\t\t\t\t\t'&-primary': kind === 'primary',\n\t\t\t\t\t\t'&-success': kind === 'success',\n\t\t\t\t\t\t'&-warning': kind === 'warning',\n\t\t\t\t\t\t'&-danger': kind === 'danger',\n\t\t\t\t\t\t'&-info': kind === 'info',\n\t\t\t\t\t\t'&-small': isSmall,\n\t\t\t\t\t\t'&-filled': isFilled,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{displayedIcon ? (\n\t\t\t\t\t<span className={cx('&-icon')}>{displayedIcon}</span>\n\t\t\t\t) : null}\n\n\t\t\t\t<span className={cx('&-content')}>{children}</span>\n\n\t\t\t\t{isCloseable ? (\n\t\t\t\t\t<CloseIcon\n\t\t\t\t\t\tisClickable\n\t\t\t\t\t\tsize={8}\n\t\t\t\t\t\tclassName={cx('&-close')}\n\t\t\t\t\t\tonClick={handleClose}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</section>\n\t\t</CSSTransition>\n\t);\n};\n\nBanner.defaultProps = defaultProps;\nBanner.displayName = 'Banner';\nBanner.peek = {\n\tdescription: `A banner that displays a prominent message.`,\n\tnotes: {\n\t\toverview: `\n\t\t\tA banner that displays a prominent message.\n\t\t`,\n\t\tintendedUse: `\n\t\t\tCommunicates information, success, a warning, or an error.\n\n\t\t\t**Styling notes**\n\n\t\t\t- Banners usually display at the top of a page.\n\t\t\t- Use the solid filled banner for single-line content.\n\t\t\t- Use the outlined banner for multi-line content.\n\t\t\t- Color use:\n\t\t\t\t- Use \\`kind:\"info\"\\` (blue) for information, like instructions for a feature.\n\t\t\t\t- Use \\`kind:\"success\"\\` (green) for success messages, like completing a task successfully.\n\t\t\t\t- Use \\`kind:\"warning\"\\` (yellow) for warnings, like a line item that is under-delivering.\n\t\t\t\t- Use \\`kind:\"danger\"\\` (orange) for danger messages, like an error message for missing required content.\n\t\t\t\t- Use grey banners for new feature announcements.\n\t\t`,\n\t\ttechnicalRecommendations: `\n\t\t\tShort single-line content can be passed in as a simple string. Multi-line messages should be passed wrapped in a \\`<p>\\` tag.\n\t\t\tYou can apply styling as needed within a banner, for example using \\`strong\\`, \\`a href\\`, or \\`em\\`.\n\t\t`,\n\t},\n\tcategories: ['communication'],\n};\nBanner.propTypes = bannerPropTypes;\n\nexport default Banner;\n"]},"metadata":{},"sourceType":"module"}