{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { filterTypes, findTypes } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './Sidebar.reducers';\nimport SplitVertical from '../SplitVertical/SplitVertical';\nimport Button from '../Button/Button';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport GripperVerticalIcon from '../Icon/GripperVerticalIcon/GripperVerticalIcon';\nconst cx = lucidClassNames.bind('&-Sidebar');\nconst {\n  any,\n  bool,\n  func,\n  node,\n  number,\n  string,\n  object,\n  oneOf,\n  oneOfType\n} = PropTypes;\nconst defaultProps = {\n  isExpanded: true,\n  isAnimated: true,\n  width: 250,\n  position: 'left',\n  isResizeDisabled: false,\n  onResizing: _.noop,\n  onResize: _.noop,\n  onToggle: _.noop\n};\nconst Primary = _props => null;\nPrimary.peek = {\n  description: `Main pane content that will have a paired \\`Bar\\`.`\n};\nPrimary.displayName = 'SplitHorizontal.Primary';\nPrimary.propName = 'Primary';\nconst Title = _props => null;\nTitle.peek = {\n  description: `Sidebar title.`\n};\nTitle.propTypes = {\n  /**\n      Content that will be displayed as the title of the Bar. It's only\n      shown when the user has the Bar expanded.\n  */\n  children: node\n};\nTitle.propTypes = {\n  /**\n      Sidebar title.\n  */\n  children: node\n};\nTitle.displayName = 'Sidebar.Title';\nTitle.propName = ['Title', 'title'];\nconst Bar = _props => null;\nBar.peek = {\n  description: `Content to be placed alongside the \\`Primary\\` pane.`\n};\nBar.displayName = 'Sidebar.Bar';\nBar.propName = 'Bar';\nBar.propTypes = {\n  /**\n      Set the title of the Sidebar. (alias for \\`title\\` and \\`Sidebar.Title\\`)\n  */\n  Title: any,\n  /**\n      Adds default padding to the sidebar content.\n  */\n  hasGutters: bool\n};\nBar.defaultProps = {\n  hasGutters: true\n};\nclass Sidebar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleExpanderClick = event => {\n      const {\n        onToggle\n      } = this.props;\n      onToggle && onToggle({\n        props: this.props,\n        event\n      });\n    };\n    this.handleResizing = (width, _ref) => {\n      let {\n        event\n      } = _ref;\n      const {\n        onResizing\n      } = this.props;\n      onResizing && onResizing(width, {\n        props: this.props,\n        event\n      });\n    };\n    this.handleResize = (width, _ref2) => {\n      let {\n        event\n      } = _ref2;\n      const {\n        onResize\n      } = this.props;\n      onResize && onResize(width, {\n        props: this.props,\n        event\n      });\n    };\n  }\n  render() {\n    const {\n      children,\n      style,\n      className,\n      isExpanded,\n      isAnimated,\n      position,\n      isResizeDisabled,\n      width,\n      ...passThroughs\n    } = this.props;\n    const primaryProps = _.get(_.first(filterTypes(children, Sidebar.Primary)), 'props', {}); // props from first Primary\n    const barProps = _.get(_.first(filterTypes(children, Sidebar.Bar)), 'props', {}); // props from first Bar\n    const titleProps = _.get(findTypes(barProps, Sidebar.Title).concat(findTypes(this.props, Sidebar.Title)),\n    // get titles from Bar and parent Sidebar\n    '[0].props',\n    // select props from the first title element\n    {\n      children: 'Title'\n    } // default props\n    );\n\n    let PrimaryPane, BarPane; // using Left/Right Pane as primary depends on position\n    if (position !== 'right') {\n      PrimaryPane = SplitVertical.RightPane;\n      BarPane = SplitVertical.LeftPane;\n    } else {\n      PrimaryPane = SplitVertical.LeftPane;\n      BarPane = SplitVertical.RightPane;\n    }\n    return React.createElement(SplitVertical, {\n      ...omit(passThroughs, ['width', 'isExpanded', 'isAnimated', 'position', 'isResizeDisabled', 'title', 'Title', 'onResizing', 'onResize', 'onToggle'].concat('initialState')),\n      style: {\n        minWidth: isExpanded ? _.isNumber(width) ? width + 6 : `calc(${width} + 6px)` : undefined,\n        ...style\n      },\n      className: cx('&', {\n        '&-is-resize-disabled': isResizeDisabled,\n        '&-is-position-right': position === 'right',\n        '&-is-position-left': position !== 'right'\n      }, className),\n      isAnimated: isAnimated,\n      isExpanded: isExpanded,\n      collapseShift: 33,\n      onResizing: this.handleResizing,\n      onResize: this.handleResize\n    }, React.createElement(BarPane, {\n      ...omit(barProps, ['hasGutters', 'Title'].concat('initialState')),\n      className: cx('&-Bar', barProps.className),\n      width: width,\n      style: {\n        overflow: isExpanded ? 'auto' : 'hidden'\n      }\n    }, React.createElement(\"div\", {\n      className: cx('&-Bar-overlay')\n    }), React.createElement(\"div\", {\n      className: cx('&-Bar-header')\n    }, React.createElement(\"div\", {\n      ...titleProps,\n      className: cx('&-Bar-Title', titleProps.className)\n    }), React.createElement(Button, {\n      className: cx('&-expander'),\n      kind: 'invisible',\n      onMouseDown: this.handleExpanderClick,\n      hasOnlyIcon: true\n    }, React.createElement(ChevronIcon, {\n      direction: isExpanded && position === 'right' || !isExpanded && position !== 'right' ? 'right' : 'left'\n    }))), React.createElement(\"div\", {\n      className: cx('&-Bar-content', {\n        '&-Bar-content-has-gutters': barProps.hasGutters\n      })\n    }, barProps.children)), React.createElement(SplitVertical.Divider, {\n      className: cx('&-Divider')\n    }, React.createElement(GripperVerticalIcon, {\n      className: cx('&-Divider-gripper')\n    })), React.createElement(PrimaryPane, {\n      ...primaryProps,\n      className: cx('&-Primary', primaryProps.className),\n      isPrimary: true\n    }));\n  }\n}\nSidebar.displayName = 'Sidebar';\nSidebar.Bar = Bar;\nSidebar.Primary = Primary;\nSidebar.Title = Title;\nSidebar.peek = {\n  description: `\\`Sidebar\\` renders a collapsible, resizeable side bar panel next to primary content.`,\n  categories: ['layout']\n};\nSidebar.reducers = reducers;\nSidebar.propTypes = {\n  /**\n      Style object that gets applied to the outer element.\n  */\n  style: object,\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: string,\n  /**\n      Direct children must be types {Sidebar.Primary, Sidebar.Bar,\n      Sidebar.Title}.  All content is composed as children of these respective\n      elements.\n  */\n  children: node,\n  /**\n      Sets the starting width of the Bar.\n  */\n  width: oneOfType([number, string]),\n  /**\n      Force the Sidebar to be expanded or collapsed.\n  */\n  isExpanded: bool,\n  /**\n      Allows animated expand and collapse behavior.\n  */\n  isAnimated: bool,\n  /**\n      Render the Sidebar to the left or right of primary content.\n  */\n  position: oneOf(['left', 'right']),\n  /**\n      Disable user resizing of the Sidebar.\n  */\n  isResizeDisabled: bool,\n  /**\n      Set the title of the Sidebar. (alias for \\`Title\\` and \\`Sidebar.Title\\`)\n  */\n  title: any,\n  /**\n      Set the title of the Sidebar. (alias for \\`title\\` and \\`Sidebar.Title\\`)\n  */\n  Title: any,\n  /**\n      Content to be placed alongside the Primary pane.\n  */\n  Bar: any,\n  /**\n      Main pane content that will have a paired \\`Bar\\`.\n  */\n  Primary: any,\n  /**\n      Called when the user is currently resizing the Sidebar.  Signature:\n      \\`(width, { event, props }) => {}\\`\n  */\n  onResizing: func,\n  /**\n      Called when the user resizes the Sidebar.  Signature: \\`(width, { event,\n      props }) => {}\\`\n  */\n  onResize: func,\n  /**\n      Called when the user expands or collapses the Sidebar.  Signature: \\`({\n      event, props }) => {}\\`\n  */\n  onToggle: func\n};\nSidebar.defaultProps = defaultProps;\nexport default buildModernHybridComponent(Sidebar, {\n  reducers\n});\nexport { Sidebar as SidebarDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","filterTypes","findTypes","buildModernHybridComponent","reducers","SplitVertical","Button","ChevronIcon","GripperVerticalIcon","cx","bind","any","bool","func","node","number","string","object","oneOf","oneOfType","defaultProps","isExpanded","isAnimated","width","position","isResizeDisabled","onResizing","noop","onResize","onToggle","Primary","_props","peek","description","displayName","propName","Title","propTypes","children","Bar","hasGutters","Sidebar","Component","constructor","event","props","render","style","className","passThroughs","primaryProps","get","first","barProps","titleProps","concat","PrimaryPane","BarPane","RightPane","LeftPane","minWidth","isNumber","undefined","collapseShift","handleResizing","handleResize","overflow","kind","onMouseDown","handleExpanderClick","hasOnlyIcon","direction","Divider","isPrimary","categories","title","SidebarDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Sidebar/Sidebar.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport {\n\tStandardProps,\n\tfilterTypes,\n\tfindTypes,\n} from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './Sidebar.reducers';\nimport SplitVertical from '../SplitVertical/SplitVertical';\nimport Button from '../Button/Button';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport GripperVerticalIcon from '../Icon/GripperVerticalIcon/GripperVerticalIcon';\n\nconst cx = lucidClassNames.bind('&-Sidebar');\n\nconst { any, bool, func, node, number, string, object, oneOf, oneOfType } =\n\tPropTypes;\n\nconst defaultProps = {\n\tisExpanded: true,\n\tisAnimated: true,\n\twidth: 250,\n\tposition: 'left' as const,\n\tisResizeDisabled: false,\n\tonResizing: _.noop,\n\tonResize: _.noop,\n\tonToggle: _.noop,\n};\n\nexport interface ISidebarPrimaryProps extends StandardProps {}\n\nexport interface ISidebarTitleProps extends StandardProps {}\n\nexport interface ISidebarBarProps extends StandardProps {\n\tTitle?: ISidebarTitleProps | string;\n\ttitle?: ISidebarTitleProps | string;\n\thasGutters?: boolean;\n}\n\nconst Primary = (_props: ISidebarPrimaryProps): null => null;\nPrimary.peek = {\n\tdescription: `Main pane content that will have a paired \\`Bar\\`.`,\n};\nPrimary.displayName = 'SplitHorizontal.Primary';\nPrimary.propName = 'Primary';\n\nconst Title = (_props: ISidebarTitleProps): null => null;\nTitle.peek = {\n\tdescription: `Sidebar title.`,\n};\nTitle.propTypes = {\n\t/**\n\t\tContent that will be displayed as the title of the Bar. It's only\n\t\tshown when the user has the Bar expanded.\n\t*/\n\tchildren: node,\n};\nTitle.propTypes = {\n\t/**\n\t\tSidebar title.\n\t*/\n\tchildren: node,\n};\nTitle.displayName = 'Sidebar.Title';\nTitle.propName = ['Title', 'title'];\n\nconst Bar = (_props: ISidebarBarProps): null => null;\nBar.peek = {\n\tdescription: `Content to be placed alongside the \\`Primary\\` pane.`,\n};\nBar.displayName = 'Sidebar.Bar';\nBar.propName = 'Bar';\nBar.propTypes = {\n\t/**\n\t\tSet the title of the Sidebar. (alias for \\`title\\` and \\`Sidebar.Title\\`)\n\t*/\n\tTitle: any,\n\n\t/**\n\t\tAdds default padding to the sidebar content.\n\t*/\n\thasGutters: bool,\n};\nBar.defaultProps = {\n\thasGutters: true,\n};\n\nexport interface ISidebarState {\n\tisExpanded: boolean;\n\twidth: number;\n}\n\nexport interface ISidebarProps extends StandardProps {\n\t/** Sets the starting width of the Bar. */\n\twidth?: number;\n\n\t/** Force the Sidebar to be expanded or collapsed. */\n\tisExpanded?: boolean;\n\n\t/** Allows animated expand and collapse behavior. */\n\tisAnimated?: boolean;\n\n\t/** Render the Sidebar to the left or right of primary content. */\n\tposition?: 'left' | 'right';\n\n\t/** Disable user resizing of the Sidebar. */\n\tisResizeDisabled?: boolean;\n\n\t/** Set the title of the Sidebar. (alias for \\`Title\\` and \\`Sidebar.Title\\`) */\n\ttitle?: React.ReactNode;\n\n\t/** Set the title of the Sidebar. (alias for \\`title\\` and \\`Sidebar.Title\\`) */\n\tTitle?: React.ReactNode;\n\n\t/** Called when the user is currently resizing the Sidebar. */\n\tonResizing?: (\n\t\twidth: number,\n\t\t{ event, props }: { event: MouseEvent | TouchEvent; props: ISidebarProps }\n\t) => void;\n\n\t/** Called when the user resizes the Sidebar. */\n\tonResize?: (\n\t\twidth: number,\n\t\t{ event, props }: { event: MouseEvent | TouchEvent; props: ISidebarProps }\n\t) => void;\n\n\t/** \tCalled when the user expands or collapses the Sidebar. */\n\tonToggle?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent<HTMLButtonElement>;\n\t\tprops: ISidebarProps;\n\t}) => void;\n}\n\nclass Sidebar extends React.Component<ISidebarProps, ISidebarState> {\n\tstatic displayName = 'Sidebar';\n\n\tstatic Bar = Bar;\n\tstatic Primary = Primary;\n\tstatic Title = Title;\n\tstatic peek = {\n\t\tdescription: `\\`Sidebar\\` renders a collapsible, resizeable side bar panel next to primary content.`,\n\t\tcategories: ['layout'],\n\t};\n\n\tstatic reducers = reducers;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tStyle object that gets applied to the outer element.\n\t\t*/\n\t\tstyle: object,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t\tValue is run through the \\`classnames\\` library.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tDirect children must be types {Sidebar.Primary, Sidebar.Bar,\n\t\t\tSidebar.Title}.  All content is composed as children of these respective\n\t\t\telements.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tSets the starting width of the Bar.\n\t\t*/\n\t\twidth: oneOfType([number, string]),\n\n\t\t/**\n\t\t\tForce the Sidebar to be expanded or collapsed.\n\t\t*/\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t\tAllows animated expand and collapse behavior.\n\t\t*/\n\t\tisAnimated: bool,\n\n\t\t/**\n\t\t\tRender the Sidebar to the left or right of primary content.\n\t\t*/\n\t\tposition: oneOf(['left', 'right']),\n\n\t\t/**\n\t\t\tDisable user resizing of the Sidebar.\n\t\t*/\n\t\tisResizeDisabled: bool,\n\n\t\t/**\n\t\t\tSet the title of the Sidebar. (alias for \\`Title\\` and \\`Sidebar.Title\\`)\n\t\t*/\n\t\ttitle: any,\n\n\t\t/**\n\t\t\tSet the title of the Sidebar. (alias for \\`title\\` and \\`Sidebar.Title\\`)\n\t\t*/\n\t\tTitle: any,\n\n\t\t/**\n\t\t\tContent to be placed alongside the Primary pane.\n\t\t*/\n\t\tBar: any,\n\n\t\t/**\n\t\t\tMain pane content that will have a paired \\`Bar\\`.\n\t\t*/\n\t\tPrimary: any,\n\n\t\t/**\n\t\t\tCalled when the user is currently resizing the Sidebar.  Signature:\n\t\t\t\\`(width, { event, props }) => {}\\`\n\t\t*/\n\t\tonResizing: func,\n\n\t\t/**\n\t\t\tCalled when the user resizes the Sidebar.  Signature: \\`(width, { event,\n\t\t\tprops }) => {}\\`\n\t\t*/\n\t\tonResize: func,\n\n\t\t/**\n\t\t\tCalled when the user expands or collapses the Sidebar.  Signature: \\`({\n\t\t\tevent, props }) => {}\\`\n\t\t*/\n\t\tonToggle: func,\n\t};\n\n\tstatic defaultProps = defaultProps;\n\n\thandleExpanderClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n\t\tconst { onToggle } = this.props;\n\n\t\tonToggle && onToggle({ props: this.props, event });\n\t};\n\n\thandleResizing = (\n\t\twidth: number,\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t) => {\n\t\tconst { onResizing } = this.props;\n\n\t\tonResizing && onResizing(width, { props: this.props, event });\n\t};\n\n\thandleResize = (\n\t\twidth: number,\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t) => {\n\t\tconst { onResize } = this.props;\n\n\t\tonResize && onResize(width, { props: this.props, event });\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tisExpanded,\n\t\t\tisAnimated,\n\t\t\tposition,\n\t\t\tisResizeDisabled,\n\t\t\twidth,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst primaryProps = _.get(\n\t\t\t_.first(filterTypes(children, Sidebar.Primary)),\n\t\t\t'props',\n\t\t\t{}\n\t\t); // props from first Primary\n\t\tconst barProps = _.get(\n\t\t\t_.first(filterTypes(children, Sidebar.Bar)),\n\t\t\t'props',\n\t\t\t{}\n\t\t); // props from first Bar\n\t\tconst titleProps = _.get(\n\t\t\tfindTypes(barProps, Sidebar.Title).concat(\n\t\t\t\tfindTypes(this.props, Sidebar.Title)\n\t\t\t), // get titles from Bar and parent Sidebar\n\t\t\t'[0].props', // select props from the first title element\n\t\t\t{ children: 'Title' } // default props\n\t\t);\n\n\t\tlet PrimaryPane, BarPane; // using Left/Right Pane as primary depends on position\n\t\tif (position !== 'right') {\n\t\t\tPrimaryPane = SplitVertical.RightPane;\n\t\t\tBarPane = SplitVertical.LeftPane;\n\t\t} else {\n\t\t\tPrimaryPane = SplitVertical.LeftPane;\n\t\t\tBarPane = SplitVertical.RightPane;\n\t\t}\n\n\t\treturn (\n\t\t\t<SplitVertical\n\t\t\t\t{...(omit(\n\t\t\t\t\tpassThroughs,\n\t\t\t\t\t[\n\t\t\t\t\t\t'width',\n\t\t\t\t\t\t'isExpanded',\n\t\t\t\t\t\t'isAnimated',\n\t\t\t\t\t\t'position',\n\t\t\t\t\t\t'isResizeDisabled',\n\t\t\t\t\t\t'title',\n\t\t\t\t\t\t'Title',\n\t\t\t\t\t\t'onResizing',\n\t\t\t\t\t\t'onResize',\n\t\t\t\t\t\t'onToggle',\n\t\t\t\t\t].concat('initialState')\n\t\t\t\t) as any)}\n\t\t\t\tstyle={{\n\t\t\t\t\tminWidth: isExpanded\n\t\t\t\t\t\t? _.isNumber(width)\n\t\t\t\t\t\t\t? width + 6\n\t\t\t\t\t\t\t: `calc(${width} + 6px)`\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\t...style,\n\t\t\t\t}}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-resize-disabled': isResizeDisabled,\n\t\t\t\t\t\t'&-is-position-right': position === 'right',\n\t\t\t\t\t\t'&-is-position-left': position !== 'right',\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tisAnimated={isAnimated}\n\t\t\t\tisExpanded={isExpanded}\n\t\t\t\tcollapseShift={33} // leave 33px of sidebar to stick out when collapsed\n\t\t\t\tonResizing={this.handleResizing}\n\t\t\t\tonResize={this.handleResize}\n\t\t\t>\n\t\t\t\t<BarPane\n\t\t\t\t\t{...omit(barProps, ['hasGutters', 'Title'].concat('initialState'))}\n\t\t\t\t\tclassName={cx('&-Bar', barProps.className)}\n\t\t\t\t\twidth={width}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\toverflow: isExpanded ? 'auto' : 'hidden',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div className={cx('&-Bar-overlay')} />\n\t\t\t\t\t<div className={cx('&-Bar-header')}>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t{...titleProps}\n\t\t\t\t\t\t\tclassName={cx('&-Bar-Title', titleProps.className)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName={cx('&-expander')}\n\t\t\t\t\t\t\tkind='invisible'\n\t\t\t\t\t\t\tonMouseDown={this.handleExpanderClick}\n\t\t\t\t\t\t\thasOnlyIcon={true}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ChevronIcon\n\t\t\t\t\t\t\t\tdirection={\n\t\t\t\t\t\t\t\t\t(isExpanded && position === 'right') ||\n\t\t\t\t\t\t\t\t\t(!isExpanded && position !== 'right')\n\t\t\t\t\t\t\t\t\t\t? 'right'\n\t\t\t\t\t\t\t\t\t\t: 'left'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={cx('&-Bar-content', {\n\t\t\t\t\t\t\t'&-Bar-content-has-gutters': barProps.hasGutters,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\t{barProps.children}\n\t\t\t\t\t</div>\n\t\t\t\t</BarPane>\n\t\t\t\t<SplitVertical.Divider className={cx('&-Divider')}>\n\t\t\t\t\t<GripperVerticalIcon className={cx('&-Divider-gripper')} />\n\t\t\t\t</SplitVertical.Divider>\n\t\t\t\t<PrimaryPane\n\t\t\t\t\t{...primaryProps}\n\t\t\t\t\tclassName={cx('&-Primary', primaryProps.className)}\n\t\t\t\t\tisPrimary\n\t\t\t\t/>\n\t\t\t</SplitVertical>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tISidebarProps,\n\tISidebarState,\n\ttypeof Sidebar\n>(Sidebar as any, { reducers });\nexport { Sidebar as SidebarDumb };\n"]},"metadata":{},"sourceType":"module"}