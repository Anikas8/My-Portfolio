{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport Collapsible from '../Collapsible/Collapsible';\nimport Button from '../Button/Button';\nimport Panel from '../Panel/Panel';\nimport * as reducers from '../Expander/Expander.reducers';\nconst cx = lucidClassNames.bind('&-ExpanderPanel');\nconst {\n  any,\n  bool,\n  func,\n  node,\n  object,\n  string\n} = PropTypes;\nconst Header = _props => null;\nHeader.displayName = 'ExpanderPanel.Header';\nHeader.peek = {\n  description: `Renders a \\`<span>\\` of content next to the \\`ChevronIcon\\` in the \\`Panel.Header\\`.`\n};\nHeader.propName = 'Header';\nHeader.propTypes = {\n  /**\n      Used to identify the purpose of this switch to the user -- can be any\n      renderable content.\n  */\n  children: node\n};\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['className', 'isExpanded', 'onToggle', 'onRest', 'onRestAppliedOnCollapse', 'Header', 'isDisabled', 'hasPadding', 'initialState'];\nclass ExpanderPanel extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleToggle = event => {\n      if (!this.props.isDisabled) {\n        this.props.onToggle(!this.props.isExpanded, {\n          event,\n          props: this.props\n        });\n      }\n    };\n  }\n  render() {\n    const {\n      children,\n      className,\n      isExpanded,\n      isDisabled,\n      hasPadding,\n      onRest,\n      onRestAppliedOnCollapse,\n      style,\n      ...passThroughs\n    } = this.props;\n    const headerChildProps = _.get(getFirst(this.props, ExpanderPanel.Header), 'props');\n    const cleanedOnRest = onRestAppliedOnCollapse || isExpanded ? onRest : undefined;\n    return React.createElement(Panel, {\n      ...omit(passThroughs, nonPassThroughs),\n      className: cx('&', {\n        '&-is-collapsed': !isExpanded,\n        '&-is-disabled': isDisabled\n      }, className),\n      style: style,\n      isGutterless: !hasPadding\n    }, React.createElement(Panel.Header, {\n      className: cx('&-header'),\n      onClick: this.handleToggle\n    }, React.createElement(Button, {\n      className: cx('&-icon'),\n      kind: 'invisible',\n      hasOnlyIcon: true\n    }, React.createElement(ChevronIcon, {\n      direction: isExpanded ? 'up' : 'down'\n    })), React.createElement(\"span\", {\n      ...headerChildProps\n    })), React.createElement(Collapsible, {\n      isExpanded: isExpanded,\n      className: cx('&-content', {\n        '&-content-is-expanded': isExpanded\n      }),\n      onRest: cleanedOnRest\n    }, React.createElement(\"div\", {\n      className: cx('&-content-inner')\n    }, children)));\n  }\n}\nExpanderPanel.displayName = 'ExpanderPanel';\nExpanderPanel.Header = Header;\nExpanderPanel.propTypes = {\n  /**\n      Expandable content.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Indicates that the component is in the \"expanded\" state when true and in\n      the \"unexpanded\" state when false.\n  */\n  isExpanded: bool,\n  /**\n      Indicates that the component is in the \"disabled\" state when true and in\n      the \"enabled\" state when false.\n  */\n  isDisabled: bool,\n  /**\n      Controls the presence of padding on the inner content.\n  */\n  hasPadding: bool,\n  /**\n      Called when the user clicks on the component's header.\n      Signature: \\`(isExpanded, { event, props }) => {}\\`\n  */\n  onToggle: func,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Optional. The callback that fires when the animation comes to a rest.\n  */\n  onRest: func,\n  /*\n      Applies on onRest callback when rest state is closed.\n  */\n  onRestAppliedOnCollapse: bool,\n  /**\n      prop alternative to Header child component passed through to the\n      underlying ExpanderPanel\n  */\n  Header: any\n};\nExpanderPanel.peek = {\n  description: `An expandable container that provides a toggle that controls when the \\`Panel\\` content is shown.`,\n  categories: ['layout'],\n  madeFrom: ['ChevronIcon', 'Expander', 'Panel']\n};\nExpanderPanel.defaultProps = {\n  isExpanded: false,\n  onToggle: _.noop,\n  hasPadding: true,\n  isDisabled: false\n};\nexport default buildModernHybridComponent(ExpanderPanel, {\n  reducers\n});\nexport { ExpanderPanel as ExpanderPanelDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","getFirst","buildModernHybridComponent","ChevronIcon","Collapsible","Button","Panel","reducers","cx","bind","any","bool","func","node","object","string","Header","_props","displayName","peek","description","propName","propTypes","children","nonPassThroughs","ExpanderPanel","Component","constructor","event","props","isDisabled","onToggle","isExpanded","render","className","hasPadding","onRest","onRestAppliedOnCollapse","style","passThroughs","headerChildProps","get","cleanedOnRest","undefined","isGutterless","onClick","handleToggle","kind","hasOnlyIcon","direction","categories","madeFrom","noop","ExpanderPanelDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/ExpanderPanel/ExpanderPanel.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst, StandardProps } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { IExpanderState } from '../Expander/Expander';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport Collapsible from '../Collapsible/Collapsible';\nimport Button from '../Button/Button';\nimport Panel from '../Panel/Panel';\n\nimport * as reducers from '../Expander/Expander.reducers';\n\nconst cx = lucidClassNames.bind('&-ExpanderPanel');\n\nconst { any, bool, func, node, object, string } = PropTypes;\n\n/** Header */\nexport interface IExpanderPanelHeaderProps extends StandardProps {\n\tdescription?: string;\n}\n\nconst Header = (_props: IExpanderPanelHeaderProps): null => null;\nHeader.displayName = 'ExpanderPanel.Header';\nHeader.peek = {\n\tdescription: `Renders a \\`<span>\\` of content next to the \\`ChevronIcon\\` in the \\`Panel.Header\\`.`,\n};\nHeader.propName = 'Header';\nHeader.propTypes = {\n\t/**\n\t\tUsed to identify the purpose of this switch to the user -- can be any\n\t\trenderable content.\n\t*/\n\tchildren: node,\n};\n\n/** ExpanderPanel */\nexport interface IExpanderPanelProps extends StandardProps {\n\t/** Indicates that the component is in the \"expanded\" state when true and in\n\t\t\tthe \"unexpanded\" state when false. */\n\tisExpanded: boolean;\n\n\t/** Indicates that the component is in the \"disabled\" state when true and in\n\t\t\tthe \"enabled\" state when false. */\n\tisDisabled: boolean;\n\n\t/** Controls the presence of padding on the inner content. */\n\thasPadding: boolean;\n\n\t/** Optional. The callback that fires when the animation comes to a rest. */\n\tonRest?: () => void;\n\n\t/** Applies on onRest callback when rest state is closed. */\n\tonRestAppliedOnCollapse?: boolean;\n\n\t/** Called when the user clicks on the component's header. */\n\tonToggle: (\n\t\tisExpanded: boolean,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent;\n\t\t\tprops: IExpanderPanelProps;\n\t\t}\n\t) => void;\n\n\t/** prop alternative to Header child component passed through to the\n\t\t\tunderlying ExpanderPanel */\n\tHeader?: React.ReactNode;\n}\n\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'className',\n\t'isExpanded',\n\t'onToggle',\n\t'onRest',\n\t'onRestAppliedOnCollapse',\n\t'Header',\n\t'isDisabled',\n\t'hasPadding',\n\t'initialState',\n];\n\nclass ExpanderPanel extends React.Component<\n\tIExpanderPanelProps,\n\tIExpanderState\n> {\n\tstatic displayName = 'ExpanderPanel';\n\tstatic Header = Header;\n\tstatic propTypes = {\n\t\t/**\n\t\t\tExpandable content.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tIndicates that the component is in the \"expanded\" state when true and in\n\t\t\tthe \"unexpanded\" state when false.\n\t\t*/\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t\tIndicates that the component is in the \"disabled\" state when true and in\n\t\t\tthe \"enabled\" state when false.\n\t\t*/\n\t\tisDisabled: bool,\n\n\t\t/**\n\t\t\tControls the presence of padding on the inner content.\n\t\t*/\n\t\thasPadding: bool,\n\n\t\t/**\n\t\t\tCalled when the user clicks on the component's header.\n\t\t\tSignature: \\`(isExpanded, { event, props }) => {}\\`\n\t\t*/\n\t\tonToggle: func,\n\n\t\t/**\n\t\t\tPassed through to the root element.\n\t\t*/\n\t\tstyle: object,\n\n\t\t/** \n\t\t \tOptional. The callback that fires when the animation comes to a rest.\n\t\t*/\n\t\tonRest: func,\n\n\t\t/* \n\t\t\tApplies on onRest callback when rest state is closed.\n\t\t*/\n\t\tonRestAppliedOnCollapse: bool,\n\n\t\t/**\n\t\t\tprop alternative to Header child component passed through to the\n\t\t\tunderlying ExpanderPanel\n\t\t*/\n\t\tHeader: any,\n\t};\n\n\tstatic peek = {\n\t\tdescription: `An expandable container that provides a toggle that controls when the \\`Panel\\` content is shown.`,\n\t\tcategories: ['layout'],\n\t\tmadeFrom: ['ChevronIcon', 'Expander', 'Panel'],\n\t};\n\n\tstatic defaultProps = {\n\t\tisExpanded: false,\n\t\tonToggle: _.noop,\n\t\thasPadding: true,\n\t\tisDisabled: false,\n\t};\n\n\thandleToggle = (event: React.MouseEvent) => {\n\t\tif (!this.props.isDisabled) {\n\t\t\tthis.props.onToggle(!this.props.isExpanded, {\n\t\t\t\tevent,\n\t\t\t\tprops: this.props,\n\t\t\t});\n\t\t}\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\tisExpanded,\n\t\t\tisDisabled,\n\t\t\thasPadding,\n\t\t\tonRest,\n\t\t\tonRestAppliedOnCollapse,\n\t\t\tstyle,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst headerChildProps = _.get(\n\t\t\tgetFirst(this.props, ExpanderPanel.Header),\n\t\t\t'props'\n\t\t);\n\n\t\tconst cleanedOnRest =\n\t\t\tonRestAppliedOnCollapse || isExpanded ? onRest : undefined;\n\n\t\treturn (\n\t\t\t<Panel\n\t\t\t\t{...(omit(passThroughs, nonPassThroughs) as any)}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-collapsed': !isExpanded,\n\t\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tstyle={style}\n\t\t\t\tisGutterless={!hasPadding}\n\t\t\t>\n\t\t\t\t<Panel.Header className={cx('&-header')} onClick={this.handleToggle}>\n\t\t\t\t\t<Button className={cx('&-icon')} kind='invisible' hasOnlyIcon={true}>\n\t\t\t\t\t\t<ChevronIcon direction={isExpanded ? 'up' : 'down'} />\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<span {...headerChildProps} />\n\t\t\t\t</Panel.Header>\n\n\t\t\t\t<Collapsible\n\t\t\t\t\tisExpanded={isExpanded}\n\t\t\t\t\tclassName={cx('&-content', {\n\t\t\t\t\t\t'&-content-is-expanded': isExpanded,\n\t\t\t\t\t})}\n\t\t\t\t\tonRest={cleanedOnRest}\n\t\t\t\t>\n\t\t\t\t\t<div className={cx('&-content-inner')}>{children}</div>\n\t\t\t\t</Collapsible>\n\t\t\t</Panel>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tIExpanderPanelProps,\n\tIExpanderState,\n\ttypeof ExpanderPanel\n>(ExpanderPanel as any, { reducers });\nexport { ExpanderPanel as ExpanderPanelDumb };\n"]},"metadata":{},"sourceType":"module"}