{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nimport * as reducers from './ToolTip.reducers';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nconst cx = lucidClassNames.bind('&-ToolTip');\nconst flyOutCx = cx.bind('&-FlyOut');\nconst {\n  bool,\n  func,\n  node,\n  number,\n  object,\n  oneOf,\n  string,\n  oneOfType\n} = PropTypes;\nconst {\n  Target,\n  FlyOut\n} = ContextMenu;\nconst ToolTipTarget = _props => null;\nToolTipTarget.displayName = 'ToolTip.Target';\nToolTipTarget.peek = {\n  description: `The hover target that will trigger the \\`ToolTip\\` to be displayed.`\n};\nToolTipTarget.propName = 'Target';\nconst ToolTipTitle = _props => null;\nToolTipTitle.displayName = 'ToolTip.Title';\nToolTipTitle.peek = {\n  description: `A not recommended title, optionally displayed at the top of the \\`ToolTip\\`.`\n};\nToolTipTitle.propName = 'Title';\nconst ToolTipBody = _props => null;\nToolTipBody.displayName = 'ToolTip.Body';\nToolTipBody.peek = {\n  description: `The body of the \\`ToolTip\\`.`\n};\nToolTipBody.propName = 'Body';\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nexport const nonPassThroughs = ['children', 'className', 'isCloseable', 'isLight', 'onClose', 'style', 'flyOutStyle', 'flyOutMaxWidth', 'direction', 'alignment', 'isExpanded', 'onMouseOver', 'onMouseOut', 'portalId', 'Title', 'Body', 'Target', 'initialState'];\nclass ToolTip extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseOut = event => {\n      setTimeout(() => {\n        const {\n          props,\n          state: {\n            isMouseOverFlyout,\n            isMouseOverTarget\n          },\n          props: {\n            onMouseOut\n          }\n        } = this;\n        if (!isMouseOverFlyout && !isMouseOverTarget) {\n          onMouseOut && onMouseOut({\n            props,\n            event\n          });\n        }\n      }, 100);\n    };\n    this.handleMouseOverFlyout = () => {\n      this.setState({\n        isMouseOverFlyout: true\n      });\n    };\n    this.handleMouseOutFlyout = event => {\n      this.setState({\n        isMouseOverFlyout: false\n      });\n      this.handleMouseOut(event);\n    };\n    this.handleMouseOverTarget = event => {\n      this.setState({\n        isMouseOverTarget: true\n      });\n      this.props.onMouseOver && this.props.onMouseOver({\n        props: this.props,\n        event\n      });\n    };\n    this.handleMouseOutTarget = event => {\n      this.setState({\n        isMouseOverTarget: false\n      });\n      this.handleMouseOut(event);\n    };\n    this.handleClose = _ref => {\n      let {\n        event,\n        props\n      } = _ref;\n      this.props.onClose && this.props.onClose({\n        event,\n        props: this.props\n      });\n    };\n    this.state = {\n      isMouseOverFlyout: false,\n      isMouseOverTarget: false,\n      isExpanded: false\n    };\n  }\n  render() {\n    const {\n      className,\n      alignment,\n      direction,\n      flyOutMaxWidth,\n      flyOutStyle,\n      isCloseable,\n      isExpanded,\n      isLight,\n      portalId,\n      style,\n      ...passThroughs\n    } = this.props;\n    const targetProps = _.first(_.map(findTypes(this.props, ToolTip.Target), 'props'));\n    const title = _.get(_.first(_.map(findTypes(this.props, ToolTip.Title), 'props')), 'children');\n    const body = _.get(_.first(_.map(findTypes(this.props, ToolTip.Body), 'props')), 'children');\n    const getAlignmentOffset = n => alignment === ContextMenu.CENTER ? 0 : alignment === ContextMenu.START ? n / 2 - 22.5 : -(n / 2 - 22.5);\n    return React.createElement(ContextMenu, {\n      className: cx('&', className),\n      // WARNING: Alignment is always set to center because the getAlignmentOffset function\n      // handles the alignment instead of delegating to ContextMenu\n      alignment: ContextMenu.CENTER,\n      direction: direction,\n      directonOffset: 15,\n      getAlignmentOffset: getAlignmentOffset,\n      isExpanded: isExpanded,\n      style: style,\n      portalId: portalId,\n      ...omit(passThroughs, nonPassThroughs),\n      onMouseOver: this.handleMouseOverTarget,\n      onMouseOut: this.handleMouseOutTarget\n    }, React.createElement(Target, {\n      ...targetProps,\n      className: cx(_.get(targetProps, 'className'), '&-Target')\n    }, _.get(targetProps, 'children')), React.createElement(FlyOut, {\n      style: {\n        ...flyOutStyle,\n        maxWidth: flyOutMaxWidth || flyOutStyle && flyOutStyle.maxWidth || 200\n      },\n      className: flyOutCx(className, '&', `&-${direction}`, `&-${alignment}`, isLight ? '&-light' : '&-default'),\n      onMouseOver: this.handleMouseOverFlyout,\n      onMouseOut: this.handleMouseOutFlyout\n    }, isCloseable ? React.createElement(CloseIcon, {\n      isClickable: true,\n      size: 8,\n      onClick: this.handleClose,\n      className: flyOutCx('&-close')\n    }) : null, !_.isNil(title) ? React.createElement(\"h2\", {\n      className: flyOutCx('&-Title')\n    }, title) : null, body));\n  }\n}\nToolTip.displayName = 'ToolTip';\nToolTip.Title = ToolTipTitle;\nToolTip.Target = ToolTipTarget;\nToolTip.Body = ToolTipBody;\nToolTip.peek = {\n  description: `A utility component that creates a transient message anchored to another component.`,\n  notes: {\n    overview: `A text popup shown on hover.`,\n    intendedUse: `\n\t\t\t\t\tUse to provide an explanation for a button, text, or an operation. Often used in conjunction with \\`HelpIcon\\`.\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t**Styling notes**\n\t\t\t\t\t\n\t\t\t\t\t- Use the {direction} and {alignment} that best suit your layout.\n\t\t\t\t\t- Tooltip should typically not use a Title. If one does, it should fit on a single line and not wrap.\n\t\t\t\t\t- Use black tooltips in most interactions. White tooltips are reserved for use within charts, for example \\`LineChart\\`.\n\t\t\t\t`,\n    technicalRecommendations: `\n\t\t\t\t`\n  },\n  categories: ['communication'],\n  madeFrom: ['ContextMenu']\n};\nToolTip.reducers = reducers;\nToolTip.propTypes = {\n  /**\n   * \\`children\\` should include exactly one ToolTip.Target and one ToolTip.FlyOut.\n   */\n  children: node,\n  /**\n   * Appended to the component-specific class names set on the root element.\n   */\n  className: string,\n  /**\n   * Set this to \\`true\\` if you want to have a \\`x\\` close icon.\n   */\n  isCloseable: bool,\n  /**\n   * Offers a lighter style for the tooltip window. Defaults to false.\n   */\n  isLight: bool,\n  /**\n   * Called when the user closes the \\`Banner\\`.\n   * Signature: \\`({ event, props }) => {}\\`\n   */\n  onClose: func,\n  /** Passed through to the root target element.*/\n  style: object,\n  /** Passed through to the root FlyOut element.*/\n  flyOutStyle: object,\n  /**\n   * maximum width of the ToolTip FlyOut. Defaults to 200px.\n   */\n  flyOutMaxWidth: oneOfType([number, string]),\n  /**\n   * direction of the FlyOut relative to Target.\n   */\n  direction: oneOf(['down', 'up', 'right', 'left']),\n  /**\n   * alignment of the Flyout relative to Target in the cross axis from \\`direction\\`.\n   */\n  alignment: oneOf(['start', 'center', 'end']),\n  /**\n   * Indicates whether the ToolTip will render or not.\n   */\n  isExpanded: bool,\n  /**\n   * Called when cursor moves over the target\n   * Signature: \\`({ props, event }) => {}\\`\n   */\n  onMouseOver: func,\n  /**\n   * Called when cursor leaves the target and the ToolTip\n   * Signature: \\`({ props, event }) => {}\\`\n   */\n  onMouseOut: func,\n  /**\n   * The \\`id\\` of the FlyOut portal element that is appended to \\`document.body\\`.\n   * Defaults to a generated \\`id\\`.\n   */\n  portalId: string,\n  /**\n   * Tooltips do not typically have a Title but one can be displayed above the Body.\n   */\n  Title: node,\n  /**\n   * The body of the 'ToolTip'.\n   */\n  Body: node,\n  /**\n   * The hover target that will trigger the ToolTip to be displayed.\n   */\n  Target: node\n};\nToolTip.defaultProps = {\n  alignment: ContextMenu.CENTER,\n  direction: ContextMenu.UP,\n  flyOutStyle: {},\n  isCloseable: false,\n  isExpanded: false,\n  isLight: false,\n  onClose: _.noop,\n  onMouseOut: _.noop,\n  onMouseOver: _.noop,\n  portalId: null\n};\nexport default buildModernHybridComponent(ToolTip, {\n  reducers\n});\nexport { ToolTip as ToolTipDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","ContextMenu","CloseIcon","reducers","lucidClassNames","findTypes","buildModernHybridComponent","cx","bind","flyOutCx","bool","func","node","number","object","oneOf","string","oneOfType","Target","FlyOut","ToolTipTarget","_props","displayName","peek","description","propName","ToolTipTitle","ToolTipBody","nonPassThroughs","ToolTip","Component","constructor","props","event","setTimeout","state","isMouseOverFlyout","isMouseOverTarget","onMouseOut","setState","handleMouseOut","onMouseOver","onClose","isExpanded","render","className","alignment","direction","flyOutMaxWidth","flyOutStyle","isCloseable","isLight","portalId","style","passThroughs","targetProps","first","map","title","get","Title","body","Body","getAlignmentOffset","n","CENTER","START","directonOffset","handleMouseOverTarget","handleMouseOutTarget","maxWidth","handleMouseOverFlyout","handleMouseOutFlyout","isClickable","size","onClick","handleClose","isNil","notes","overview","intendedUse","technicalRecommendations","categories","madeFrom","children","UP","noop","ToolTipDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/ToolTip/ToolTip.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ContextMenu from '../ContextMenu/ContextMenu';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nimport { IIconProps } from '../Icon/Icon';\nimport * as reducers from './ToolTip.reducers';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, findTypes } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\n\nconst cx = lucidClassNames.bind('&-ToolTip');\nconst flyOutCx = cx.bind('&-FlyOut');\n\nconst { bool, func, node, number, object, oneOf, string, oneOfType } =\n\tPropTypes;\n\nconst { Target, FlyOut } = ContextMenu;\n\n/** ToolTip Target */\nexport interface IToolTipTargetProps extends StandardProps {\n\tdescription?: string;\n\telementType?: string;\n}\n\nconst ToolTipTarget = (_props: IToolTipTargetProps): null => null;\nToolTipTarget.displayName = 'ToolTip.Target';\nToolTipTarget.peek = {\n\tdescription: `The hover target that will trigger the \\`ToolTip\\` to be displayed.`,\n};\nToolTipTarget.propName = 'Target';\n\n/** ToolTip Title */\nexport interface IToolTipTitleProps extends StandardProps {\n\tdescription?: string;\n}\n\nconst ToolTipTitle = (_props: IToolTipTitleProps): null => null;\nToolTipTitle.displayName = 'ToolTip.Title';\nToolTipTitle.peek = {\n\tdescription: `A not recommended title, optionally displayed at the top of the \\`ToolTip\\`.`,\n};\nToolTipTitle.propName = 'Title';\n\n/** ToolTip Body */\nexport interface IToolTipBodyProps extends StandardProps {\n\tdescription?: string;\n}\n\nconst ToolTipBody = (_props: IToolTipBodyProps): null => null;\nToolTipBody.displayName = 'ToolTip.Body';\nToolTipBody.peek = {\n\tdescription: `The body of the \\`ToolTip\\`.`,\n};\nToolTipBody.propName = 'Body';\n\n/** ToolTip */\nexport interface IToolTipState {\n\tisExpanded: boolean;\n\tisMouseOverFlyout: boolean;\n\tisMouseOverTarget: boolean;\n}\n\nexport interface IToolTipProps extends StandardProps {\n\t/** Set this to `true` if you want to have a `x` close icon. */\n\tisCloseable?: boolean;\n\n\t/** Offers a lighter style for the tooltip window. Defaults to `false`. */\n\tisLight?: boolean;\n\n\t/** Called when the user closes the `Banner`. */\n\tonClose?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IToolTipProps;\n\t}) => void;\n\n\t/** Passed through to the root `FlyOut` element. */\n\tflyOutStyle?: React.CSSProperties;\n\n\t/** maximum width of the `ToolTip` `FlyOut`. Defaults to `200px`. */\n\tflyOutMaxWidth?: number | string;\n\n\t/** direction of the `FlyOut` relative to `Target`. */\n\tdirection?: 'down' | 'up' | 'right' | 'left';\n\n\t/** alignment of the `Flyout` relative to `Target` in the cross axis from `direction`. */\n\talignment?: 'start' | 'center' | 'end';\n\n\t/** Indicates whether the `ToolTip` will render or not. */\n\tisExpanded?: boolean;\n\n\t/** Called when cursor moves over the `Target`. */\n\tonMouseOver?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IToolTipProps;\n\t}) => void;\n\n\t/** Called when cursor leaves the `Target` and the `ToolTip`. */\n\tonMouseOut?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IToolTipProps;\n\t}) => void;\n\n\t/** The `id` of the `FlyOut` portal element that is appended to `document.body`.\n\t * Defaults to a generated `id`. */\n\tportalId?: string | null;\n}\n\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nexport const nonPassThroughs = [\n\t'children',\n\t'className',\n\t'isCloseable',\n\t'isLight',\n\t'onClose',\n\t'style',\n\t'flyOutStyle',\n\t'flyOutMaxWidth',\n\t'direction',\n\t'alignment',\n\t'isExpanded',\n\t'onMouseOver',\n\t'onMouseOut',\n\t'portalId',\n\t'Title',\n\t'Body',\n\t'Target',\n\t'initialState',\n];\n\nclass ToolTip extends React.Component<IToolTipProps, IToolTipState> {\n\tconstructor(props: IToolTipProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisMouseOverFlyout: false,\n\t\t\tisMouseOverTarget: false,\n\t\t\tisExpanded: false,\n\t\t};\n\t}\n\tstatic displayName = 'ToolTip';\n\n\tstatic Title = ToolTipTitle;\n\tstatic Target = ToolTipTarget;\n\tstatic Body = ToolTipBody;\n\n\tstatic peek = {\n\t\tdescription: `A utility component that creates a transient message anchored to another component.`,\n\t\tnotes: {\n\t\t\toverview: `A text popup shown on hover.`,\n\t\t\tintendedUse: `\n\t\t\t\t\tUse to provide an explanation for a button, text, or an operation. Often used in conjunction with \\`HelpIcon\\`.\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t**Styling notes**\n\t\t\t\t\t\n\t\t\t\t\t- Use the {direction} and {alignment} that best suit your layout.\n\t\t\t\t\t- Tooltip should typically not use a Title. If one does, it should fit on a single line and not wrap.\n\t\t\t\t\t- Use black tooltips in most interactions. White tooltips are reserved for use within charts, for example \\`LineChart\\`.\n\t\t\t\t`,\n\t\t\ttechnicalRecommendations: `\n\t\t\t\t`,\n\t\t},\n\t\tcategories: ['communication'],\n\t\tmadeFrom: ['ContextMenu'],\n\t};\n\n\tstatic reducers = reducers;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t * \\`children\\` should include exactly one ToolTip.Target and one ToolTip.FlyOut.\n\t\t */\n\t\tchildren: node,\n\n\t\t/**\n\t\t * Appended to the component-specific class names set on the root element.\n\t\t */\n\t\tclassName: string,\n\n\t\t/**\n\t\t * Set this to \\`true\\` if you want to have a \\`x\\` close icon.\n\t\t */\n\t\tisCloseable: bool,\n\n\t\t/**\n\t\t * Offers a lighter style for the tooltip window. Defaults to false.\n\t\t */\n\t\tisLight: bool,\n\n\t\t/**\n\t\t * Called when the user closes the \\`Banner\\`.\n\t\t * Signature: \\`({ event, props }) => {}\\`\n\t\t */\n\t\tonClose: func,\n\n\t\t/** Passed through to the root target element.*/\n\t\tstyle: object,\n\n\t\t/** Passed through to the root FlyOut element.*/\n\t\tflyOutStyle: object,\n\n\t\t/**\n\t\t * maximum width of the ToolTip FlyOut. Defaults to 200px.\n\t\t */\n\t\tflyOutMaxWidth: oneOfType([number, string]),\n\n\t\t/**\n\t\t * direction of the FlyOut relative to Target.\n\t\t */\n\t\tdirection: oneOf(['down', 'up', 'right', 'left']),\n\n\t\t/**\n\t\t * alignment of the Flyout relative to Target in the cross axis from \\`direction\\`.\n\t\t */\n\t\talignment: oneOf(['start', 'center', 'end']),\n\n\t\t/**\n\t\t * Indicates whether the ToolTip will render or not.\n\t\t */\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t * Called when cursor moves over the target\n\t\t * Signature: \\`({ props, event }) => {}\\`\n\t\t */\n\t\tonMouseOver: func,\n\n\t\t/**\n\t\t * Called when cursor leaves the target and the ToolTip\n\t\t * Signature: \\`({ props, event }) => {}\\`\n\t\t */\n\t\tonMouseOut: func,\n\n\t\t/**\n\t\t * The \\`id\\` of the FlyOut portal element that is appended to \\`document.body\\`.\n\t\t * Defaults to a generated \\`id\\`.\n\t\t */\n\t\tportalId: string,\n\n\t\t/**\n\t\t * Tooltips do not typically have a Title but one can be displayed above the Body.\n\t\t */\n\t\tTitle: node,\n\n\t\t/**\n\t\t * The body of the 'ToolTip'.\n\t\t */\n\t\tBody: node,\n\n\t\t/**\n\t\t * The hover target that will trigger the ToolTip to be displayed.\n\t\t */\n\t\tTarget: node,\n\t};\n\n\tstatic defaultProps = {\n\t\talignment: ContextMenu.CENTER,\n\t\tdirection: ContextMenu.UP,\n\t\tflyOutStyle: {},\n\t\tisCloseable: false,\n\t\tisExpanded: false,\n\t\tisLight: false,\n\t\tonClose: _.noop,\n\t\tonMouseOut: _.noop,\n\t\tonMouseOver: _.noop,\n\t\tportalId: null,\n\t};\n\n\thandleMouseOut = (event: React.MouseEvent): void => {\n\t\tsetTimeout(() => {\n\t\t\tconst {\n\t\t\t\tprops,\n\t\t\t\tstate: { isMouseOverFlyout, isMouseOverTarget },\n\t\t\t\tprops: { onMouseOut },\n\t\t\t} = this;\n\t\t\tif (!isMouseOverFlyout && !isMouseOverTarget) {\n\t\t\t\tonMouseOut && onMouseOut({ props, event });\n\t\t\t}\n\t\t}, 100);\n\t};\n\n\thandleMouseOverFlyout = () => {\n\t\tthis.setState({ isMouseOverFlyout: true });\n\t};\n\n\thandleMouseOutFlyout = (event: React.MouseEvent) => {\n\t\tthis.setState({ isMouseOverFlyout: false });\n\t\tthis.handleMouseOut(event);\n\t};\n\n\thandleMouseOverTarget = (event: React.MouseEvent) => {\n\t\tthis.setState({ isMouseOverTarget: true });\n\t\tthis.props.onMouseOver &&\n\t\t\tthis.props.onMouseOver({ props: this.props, event });\n\t};\n\n\thandleMouseOutTarget = (event: React.MouseEvent) => {\n\t\tthis.setState({ isMouseOverTarget: false });\n\t\tthis.handleMouseOut(event);\n\t};\n\n\thandleClose = ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IIconProps;\n\t}) => {\n\t\tthis.props.onClose && this.props.onClose({ event, props: this.props });\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tclassName,\n\t\t\talignment,\n\t\t\tdirection,\n\t\t\tflyOutMaxWidth,\n\t\t\tflyOutStyle,\n\t\t\tisCloseable,\n\t\t\tisExpanded,\n\t\t\tisLight,\n\t\t\tportalId,\n\t\t\tstyle,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst targetProps = _.first(\n\t\t\t_.map(findTypes(this.props, ToolTip.Target), 'props')\n\t\t);\n\t\tconst title = _.get(\n\t\t\t_.first(_.map(findTypes(this.props, ToolTip.Title), 'props')),\n\t\t\t'children'\n\t\t);\n\t\tconst body = _.get(\n\t\t\t_.first(_.map(findTypes(this.props, ToolTip.Body), 'props')),\n\t\t\t'children'\n\t\t);\n\t\tconst getAlignmentOffset = (n: number) =>\n\t\t\talignment === ContextMenu.CENTER\n\t\t\t\t? 0\n\t\t\t\t: alignment === ContextMenu.START\n\t\t\t\t? n / 2 - 22.5\n\t\t\t\t: -(n / 2 - 22.5);\n\n\t\treturn (\n\t\t\t<ContextMenu\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\t// WARNING: Alignment is always set to center because the getAlignmentOffset function\n\t\t\t\t// handles the alignment instead of delegating to ContextMenu\n\t\t\t\talignment={ContextMenu.CENTER}\n\t\t\t\tdirection={direction}\n\t\t\t\tdirectonOffset={15}\n\t\t\t\tgetAlignmentOffset={getAlignmentOffset}\n\t\t\t\tisExpanded={isExpanded}\n\t\t\t\tstyle={style}\n\t\t\t\tportalId={portalId}\n\t\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t\tonMouseOver={this.handleMouseOverTarget}\n\t\t\t\tonMouseOut={this.handleMouseOutTarget}\n\t\t\t>\n\t\t\t\t<Target\n\t\t\t\t\t{...targetProps}\n\t\t\t\t\tclassName={cx(_.get(targetProps, 'className'), '&-Target')}\n\t\t\t\t>\n\t\t\t\t\t{_.get(targetProps, 'children')}\n\t\t\t\t</Target>\n\t\t\t\t<FlyOut\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\t...flyOutStyle,\n\t\t\t\t\t\tmaxWidth:\n\t\t\t\t\t\t\tflyOutMaxWidth || (flyOutStyle && flyOutStyle.maxWidth) || 200,\n\t\t\t\t\t}}\n\t\t\t\t\tclassName={flyOutCx(\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t'&',\n\t\t\t\t\t\t`&-${direction}`,\n\t\t\t\t\t\t`&-${alignment}`,\n\t\t\t\t\t\tisLight ? '&-light' : '&-default'\n\t\t\t\t\t)}\n\t\t\t\t\tonMouseOver={this.handleMouseOverFlyout}\n\t\t\t\t\tonMouseOut={this.handleMouseOutFlyout}\n\t\t\t\t>\n\t\t\t\t\t{isCloseable ? (\n\t\t\t\t\t\t<CloseIcon\n\t\t\t\t\t\t\tisClickable\n\t\t\t\t\t\t\tsize={8}\n\t\t\t\t\t\t\tonClick={this.handleClose}\n\t\t\t\t\t\t\tclassName={flyOutCx('&-close')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{!_.isNil(title) ? (\n\t\t\t\t\t\t<h2 className={flyOutCx('&-Title')}>{title}</h2>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{body}\n\t\t\t\t</FlyOut>\n\t\t\t</ContextMenu>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tIToolTipProps,\n\tIToolTipState,\n\ttypeof ToolTip\n>(ToolTip as any, { reducers });\n\nexport { ToolTip as ToolTipDumb };\n"]},"metadata":{},"sourceType":"module"}