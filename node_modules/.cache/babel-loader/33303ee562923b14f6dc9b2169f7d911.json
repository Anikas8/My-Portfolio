{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-BellIcon');\nexport const iconPropTypes = {\n  /** Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`. */\n  size: PropTypes.number,\n  /** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width. */\n  viewBox: PropTypes.string,\n  /** Sets the color of the Icon.  May not be applicable for icons that are tied\n      to specific colors (e.g. DangerIcon). */\n  color: PropTypes.oneOf(['neutral-dark', 'neutral-light', 'neutral-extra-light', 'primary', 'white', 'success', 'warning', 'secondary-one', 'secondary-two', 'secondary-three', 'secondary-five']),\n  /** Any valid SVG aspect ratio. */\n  aspectRatio: PropTypes.string,\n  /** Adds styling that makes the icon appear clickable. */\n  isClickable: PropTypes.bool,\n  /** Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false. */\n  isDisabled: PropTypes.bool,\n  /** Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onClick: PropTypes.func,\n  /** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onSelect: PropTypes.func,\n  /** Any valid React children. */\n  children: PropTypes.element,\n  /** Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library. */\n  className: PropTypes.string,\n  /** Show or hide a dot on the bell to indicate a notification. */\n  hasDot: PropTypes.bool,\n  /** Featured color of the dot */\n  featuredColor: PropTypes.oneOf(['info', 'success', 'warning', 'danger'])\n};\nexport const BellIcon = _ref => {\n  let {\n    className,\n    featuredColor = 'info',\n    hasDot = false,\n    ...passThroughs\n  } = _ref;\n  const showBellDot = hasDot;\n  return React.createElement(Icon, {\n    ..._.omit(passThroughs, ['initialState']),\n    className: cx('&', className)\n  }, showBellDot ? React.createElement(\"g\", null, React.createElement(\"path\", {\n    strokeLinecap: 'butt',\n    d: 'M5.5 12.502v.5c0 1.381 1.119 2.5 2.5 2.5s2.5-1.119 2.5-2.5l.003-.495M3.056 7.432c-.54 2.214-1.556 3.07-1.556 3.07v2h13v-2s-1.884-1.587-1.884-6.024c0-.901-.909-3.976-4.616-3.976-.279 0-.543.017-.791.05'\n  }), React.createElement(\"path\", {\n    className: cx('&', {\n      '&-is-info': featuredColor === 'info',\n      '&-is-success': featuredColor === 'success',\n      '&-is-warning': featuredColor === 'warning',\n      '&-is-danger': featuredColor === 'danger'\n    }, className),\n    d: 'M3.5-.148c1.737 0 3.15 1.413 3.15 3.15s-1.413 3.15-3.15 3.15S.35 4.739.35 3.002 1.763-.148 3.5-.148'\n  })) : React.createElement(\"g\", null, React.createElement(\"path\", {\n    d: 'M5.5 12.5v.5a2.5 2.5 0 1 0 5 0l.003-.495M14.5 12.5v-2s-1.884-1.587-1.884-6.024C12.616 3.575 11.707.5 8 .5S3.384 3.575 3.384 4.476C3.384 8.913 1.5 10.5 1.5 10.5v2h13z'\n  })));\n};\nBellIcon.displayName = 'BellIcon';\nBellIcon.peek = {\n  description: `Typically used for notifications. The dot indicates that there is an unread message.`,\n  categories: ['visual design', 'icons'],\n  extend: 'Icon',\n  madeFrom: ['Icon']\n};\nBellIcon.propTypes = iconPropTypes;\nBellIcon.defaultProps = Icon.defaultProps;\nexport default BellIcon;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","Icon","lucidClassNames","cx","bind","iconPropTypes","size","number","width","oneOfType","string","height","viewBox","color","oneOf","aspectRatio","isClickable","bool","isDisabled","onClick","func","onSelect","children","element","className","hasDot","featuredColor","BellIcon","passThroughs","showBellDot","omit","strokeLinecap","d","displayName","peek","description","categories","extend","madeFrom","propTypes","defaultProps"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/BellIcon/BellIcon.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon, { IIconProps } from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nimport { Overwrite } from '../../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-BellIcon');\n\ninterface IBellIconPropsRaw extends IIconProps {\n\t/** Show or hide a dot on the bell to indicate a notification. */\n\thasDot?: boolean;\n\n\t/** Featured color of the dot */\n\tfeaturedColor?: 'info' | 'success' | 'warning' | 'danger';\n}\n\nexport type IBellIconProps = Overwrite<\n\tReact.SVGAttributes<SVGGElement>,\n\tIBellIconPropsRaw\n>;\n\nexport const iconPropTypes = {\n\t/** Size variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`. */\n\tsize: PropTypes.number,\n\n\t/** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n\twidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n\theight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth. */\n\tviewBox: PropTypes.string,\n\n\t/** Sets the color of the Icon.  May not be applicable for icons that are tied\n\t\tto specific colors (e.g. DangerIcon). */\n\tcolor: PropTypes.oneOf([\n\t\t'neutral-dark',\n\t\t'neutral-light',\n\t\t'neutral-extra-light',\n\t\t'primary',\n\t\t'white',\n\t\t'success',\n\t\t'warning',\n\t\t'secondary-one',\n\t\t'secondary-two',\n\t\t'secondary-three',\n\t\t'secondary-five',\n\t]),\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio: PropTypes.string,\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable: PropTypes.bool,\n\n\t/** Adds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false. */\n\tisDisabled: PropTypes.bool,\n\n\t/** Called when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonClick: PropTypes.func,\n\n\t/** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonSelect: PropTypes.func,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.element,\n\n\t/** Classes that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library. */\n\tclassName: PropTypes.string,\n\n\t/** Show or hide a dot on the bell to indicate a notification. */\n\thasDot: PropTypes.bool,\n\n\t/** Featured color of the dot */\n\tfeaturedColor: PropTypes.oneOf(['info', 'success', 'warning', 'danger']),\n};\n\nexport const BellIcon = ({\n\tclassName,\n\tfeaturedColor = 'info',\n\thasDot = false,\n\t...passThroughs\n}: IBellIconProps) => {\n\tconst showBellDot = hasDot;\n\n\treturn (\n\t\t<Icon\n\t\t\t{..._.omit(passThroughs, ['initialState'])}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t{showBellDot ? (\n\t\t\t\t<g>\n\t\t\t\t\t<path\n\t\t\t\t\t\tstrokeLinecap='butt'\n\t\t\t\t\t\td='M5.5 12.502v.5c0 1.381 1.119 2.5 2.5 2.5s2.5-1.119 2.5-2.5l.003-.495M3.056 7.432c-.54 2.214-1.556 3.07-1.556 3.07v2h13v-2s-1.884-1.587-1.884-6.024c0-.901-.909-3.976-4.616-3.976-.279 0-.543.017-.791.05'\n\t\t\t\t\t/>\n\t\t\t\t\t<path\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t'&',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'&-is-info': featuredColor === 'info',\n\t\t\t\t\t\t\t\t'&-is-success': featuredColor === 'success',\n\t\t\t\t\t\t\t\t'&-is-warning': featuredColor === 'warning',\n\t\t\t\t\t\t\t\t'&-is-danger': featuredColor === 'danger',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclassName\n\t\t\t\t\t\t)}\n\t\t\t\t\t\td='M3.5-.148c1.737 0 3.15 1.413 3.15 3.15s-1.413 3.15-3.15 3.15S.35 4.739.35 3.002 1.763-.148 3.5-.148'\n\t\t\t\t\t/>\n\t\t\t\t</g>\n\t\t\t) : (\n\t\t\t\t<g>\n\t\t\t\t\t<path d='M5.5 12.5v.5a2.5 2.5 0 1 0 5 0l.003-.495M14.5 12.5v-2s-1.884-1.587-1.884-6.024C12.616 3.575 11.707.5 8 .5S3.384 3.575 3.384 4.476C3.384 8.913 1.5 10.5 1.5 10.5v2h13z' />\n\t\t\t\t</g>\n\t\t\t)}\n\t\t</Icon>\n\t);\n};\n\nBellIcon.displayName = 'BellIcon';\nBellIcon.peek = {\n\tdescription: `Typically used for notifications. The dot indicates that there is an unread message.`,\n\tcategories: ['visual design', 'icons'],\n\textend: 'Icon',\n\tmadeFrom: ['Icon'],\n};\n\nBellIcon.propTypes = iconPropTypes;\n\nBellIcon.defaultProps = Icon.defaultProps;\n\nexport default BellIcon;\n"]},"metadata":{},"sourceType":"module"}