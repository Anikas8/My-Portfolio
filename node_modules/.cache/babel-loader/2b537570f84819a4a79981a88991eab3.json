{"ast":null,"code":"import _, { omit, pick } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Overlay, { overlayPropTypes } from '../Overlay/Overlay';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nimport Button from '../Button/Button';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\nconst cx = lucidClassNames.bind('&-Dialog');\nconst {\n  node,\n  oneOf,\n  bool,\n  func\n} = PropTypes;\nexport var EnumSize;\n(function (EnumSize) {\n  EnumSize[\"small\"] = \"small\";\n  EnumSize[\"medium\"] = \"medium\";\n  EnumSize[\"large\"] = \"large\";\n})(EnumSize || (EnumSize = {}));\nconst DialogHeader = _props => null;\nDialogHeader.displayName = 'Dialog.Header';\nDialogHeader.peek = {\n  description: `Renders a \\`<div>\\`.`\n};\nDialogHeader.propName = 'Header';\nconst DialogFooter = _props => null;\nDialogFooter.displayName = 'Dialog.Footer';\nDialogFooter.peek = {\n  description: `Renders a \\`<footer>\\`.`\n};\nDialogFooter.propName = 'Footer';\n/** Dialog */\nconst nonPassThroughs = ['size', 'isComplex', 'hasGutters', 'handleClose', 'Header', 'Footer', 'initialState'];\nconst defaultProps = {\n  ...Overlay.defaultProps,\n  size: EnumSize.medium,\n  isComplex: false,\n  hasGutters: true\n};\nexport const Dialog = props => {\n  const {\n    className,\n    size,\n    handleClose,\n    hasGutters,\n    isShown,\n    isComplex,\n    ...passThroughs\n  } = props;\n  const headerChildProp = _.get(getFirst(props, Dialog.Header), 'props', {});\n  const footerChildProp = _.get(getFirst(props, Dialog.Footer), 'props', null);\n  return React.createElement(Overlay, {\n    ...omit(passThroughs, nonPassThroughs),\n    ...pick(passThroughs, overlayPropTypes),\n    isShown: isShown,\n    className: cx('&', className)\n  }, React.createElement(\"div\", {\n    className: cx('&-window', {\n      '&-window-is-small': size === EnumSize.small,\n      '&-window-is-medium': size === EnumSize.medium,\n      '&-window-is-large': size === EnumSize.large,\n      '&-is-complex': isComplex,\n      '&-no-footer': !footerChildProp\n    })\n  }, React.createElement(\"header\", {\n    className: cx('&-header')\n  }, headerChildProp.children, handleClose && React.createElement(Button, {\n    kind: 'invisible',\n    hasOnlyIcon: true,\n    className: cx('&-close-button'),\n    onClick: handleClose\n  }, React.createElement(CloseIcon, null))), React.createElement(\"section\", {\n    className: cx('&-body', hasGutters ? '' : '&-body-no-gutters')\n  }, props.children), footerChildProp && React.createElement(\"footer\", {\n    ...footerChildProp,\n    className: cx('&-footer')\n  })));\n};\nDialog.displayName = 'Dialog';\nDialog.defaultProps = defaultProps;\nDialog.peek = {\n  description: `\\`Dialog\\` is used to pop open a window so the user doesn't lose the context of the page behind it. Extra props are spread through to the underlying \\`Overlay\\`.`,\n  categories: ['layout'],\n  extend: 'Overlay',\n  madeFrom: ['Portal', 'Overlay']\n};\nDialog.propTypes = {\n  ...Overlay.propTypes,\n  /**\n      Size variations that only affect the width of the dialog. All the sizes\n      will grow in height until they get too big, at which point they will\n      scroll inside.\n  */\n  size: oneOf(['small', 'medium', 'large']),\n  /**\n      If this is truthy (if a function is provided). the close button will show.\n      The function that is called when the close button is triggered.\n  */\n  handleClose: func,\n  /**\n      Defaults to false.\n      Provides a more segregated design to organize more content in the Dialog.\n  */\n  isComplex: bool,\n  /**\n      A true or false value that dictates whether or not the Body has padding.\n  */\n  hasGutters: bool,\n  Header: node,\n  /*\n   *Child Element* - Header contents. Only one \\`Header\\` is used.\n   */\n  Footer: node\n  /*\n   *Child Element* - Footer contents. Only one \\`Footer\\` is used.\n   */\n};\n\nDialog.Header = DialogHeader;\nDialog.Footer = DialogFooter;\nexport default Dialog;","map":{"version":3,"mappings":"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","names":["_","omit","pick","React","PropTypes","Overlay","overlayPropTypes","lucidClassNames","getFirst","Button","CloseIcon","cx","bind","node","oneOf","bool","func","EnumSize","DialogHeader","_props","displayName","peek","description","propName","DialogFooter","nonPassThroughs","defaultProps","size","medium","isComplex","hasGutters","Dialog","props","className","handleClose","isShown","passThroughs","headerChildProp","get","Header","footerChildProp","Footer","small","large","children","kind","hasOnlyIcon","onClick","categories","extend","madeFrom","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Dialog/Dialog.tsx"],"sourcesContent":["import _, { omit, pick } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Overlay, { IOverlayProps, overlayPropTypes } from '../Overlay/Overlay';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, getFirst } from '../../util/component-types';\nimport Button, { IButtonProps } from '../Button/Button';\nimport CloseIcon from '../Icon/CloseIcon/CloseIcon';\n\nconst cx = lucidClassNames.bind('&-Dialog');\n\nconst { node, oneOf, bool, func } = PropTypes;\n\nexport enum EnumSize {\n\tsmall = 'small',\n\tmedium = 'medium',\n\tlarge = 'large',\n}\ntype Size = keyof typeof EnumSize;\n\n/** Dialog Header */\nexport interface IDialogHeaderProps extends StandardProps {\n\tdescription?: string;\n}\nconst DialogHeader = (_props: IDialogHeaderProps): null => null;\nDialogHeader.displayName = 'Dialog.Header';\nDialogHeader.peek = {\n\tdescription: `Renders a \\`<div>\\`.`,\n};\nDialogHeader.propName = 'Header';\n\n/** Dialog Footer */\nexport interface IDialogFooterProps extends StandardProps {\n\tdescription?: string;\n}\nconst DialogFooter = (_props: IDialogFooterProps): null => null;\nDialogFooter.displayName = 'Dialog.Footer';\nDialogFooter.peek = {\n\tdescription: `Renders a \\`<footer>\\`.`,\n};\nDialogFooter.propName = 'Footer';\n\n/** Dialog */\nconst nonPassThroughs = [\n\t'size',\n\t'isComplex',\n\t'hasGutters',\n\t'handleClose',\n\t'Header',\n\t'Footer',\n\t'initialState',\n];\n\nconst defaultProps = {\n\t...Overlay.defaultProps,\n\tsize: EnumSize.medium,\n\tisComplex: false,\n\thasGutters: true,\n};\n\nexport interface IDialogProps extends IOverlayProps {\n\t/** Size variations that only affect the width of the dialog. All the sizes\n\t\twill grow in height until they get too big, at which point they will\n\t\tscroll inside. */\n\tsize: Size;\n\n\t/** If this is truthy (if a function is provided). the close button will show.\n\t\tThe function that is called when the close button is triggered. */\n\thandleClose?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IButtonProps;\n\t}) => void;\n\n\t/** Provides a more segregated design to organize more content in the Dialog.\n\t * @default = false */\n\tisComplex: boolean;\n\n\t/** A true or false value that dictates whether or not the Body has padding. */\n\thasGutters: boolean;\n\n\t/** *Child Element* - Header contents. Only one \\`Header\\` is used. */\n\tHeader?: string | (React.ReactNode & { props: IDialogHeaderProps });\n\n\t/** *Child Element* - Footer contents. Only one \\`Footer\\` is used. */\n\tFooter?: string | (React.ReactNode & { props: IDialogFooterProps });\n}\n\nexport const Dialog = (props: IDialogProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tsize,\n\t\thandleClose,\n\t\thasGutters,\n\t\tisShown,\n\t\tisComplex,\n\t\t...passThroughs\n\t} = props;\n\n\tconst headerChildProp = _.get(getFirst(props, Dialog.Header), 'props', {});\n\tconst footerChildProp = _.get(getFirst(props, Dialog.Footer), 'props', null);\n\n\treturn (\n\t\t<Overlay\n\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t{...pick<any>(passThroughs, overlayPropTypes)}\n\t\t\tisShown={isShown}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={cx('&-window', {\n\t\t\t\t\t'&-window-is-small': size === EnumSize.small,\n\t\t\t\t\t'&-window-is-medium': size === EnumSize.medium,\n\t\t\t\t\t'&-window-is-large': size === EnumSize.large,\n\t\t\t\t\t'&-is-complex': isComplex,\n\t\t\t\t\t'&-no-footer': !footerChildProp,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<header className={cx('&-header')}>\n\t\t\t\t\t{headerChildProp.children}\n\n\t\t\t\t\t{handleClose && (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkind='invisible'\n\t\t\t\t\t\t\thasOnlyIcon\n\t\t\t\t\t\t\tclassName={cx('&-close-button')}\n\t\t\t\t\t\t\tonClick={handleClose}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CloseIcon />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\t\t\t\t</header>\n\n\t\t\t\t<section\n\t\t\t\t\tclassName={cx('&-body', hasGutters ? '' : '&-body-no-gutters')}\n\t\t\t\t>\n\t\t\t\t\t{props.children}\n\t\t\t\t</section>\n\n\t\t\t\t{footerChildProp && (\n\t\t\t\t\t<footer {...footerChildProp} className={cx('&-footer')} />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Overlay>\n\t);\n};\n\nDialog.displayName = 'Dialog';\n\nDialog.defaultProps = defaultProps;\n\nDialog.peek = {\n\tdescription: `\\`Dialog\\` is used to pop open a window so the user doesn't lose the context of the page behind it. Extra props are spread through to the underlying \\`Overlay\\`.`,\n\tcategories: ['layout'],\n\textend: 'Overlay',\n\tmadeFrom: ['Portal', 'Overlay'],\n};\n\nDialog.propTypes = {\n\t...Overlay.propTypes,\n\n\t/**\n\t\tSize variations that only affect the width of the dialog. All the sizes\n\t\twill grow in height until they get too big, at which point they will\n\t\tscroll inside.\n\t*/\n\tsize: oneOf(['small', 'medium', 'large']),\n\n\t/**\n\t\tIf this is truthy (if a function is provided). the close button will show.\n\t\tThe function that is called when the close button is triggered.\n\t*/\n\thandleClose: func,\n\n\t/**\n\t\tDefaults to false.\n\t\tProvides a more segregated design to organize more content in the Dialog.\n\t*/\n\tisComplex: bool,\n\n\t/**\n\t\tA true or false value that dictates whether or not the Body has padding.\n\t*/\n\thasGutters: bool,\n\n\tHeader: node,\n\t/*\n\t *Child Element* - Header contents. Only one \\`Header\\` is used.\n\t */\n\n\tFooter: node,\n\t/*\n\t *Child Element* - Footer contents. Only one \\`Footer\\` is used.\n\t */\n};\nDialog.Header = DialogHeader;\nDialog.Footer = DialogFooter;\n\nexport default Dialog;\n"]},"metadata":{},"sourceType":"module"}