{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport TimeSelectInput from './TimeSelectInput';\nconst cx = lucidClassNames.bind('&-TimeSelect');\nconst getCleanedHour = partialCleanedHour => {\n  return partialCleanedHour < 0 ? 23 : partialCleanedHour > 23 ? 0 : partialCleanedHour;\n};\nconst getCleanedAMHour = nextHour => {\n  const partialCleanedHour = nextHour > 12 ? nextHour - 12 : nextHour < 0 ? nextHour + 12 : nextHour;\n  return getCleanedHour(partialCleanedHour);\n};\nconst getCleanedPMHour = nextHour => {\n  const partialCleanedHour = nextHour === 12 ? 12 : nextHour > 12 ? nextHour : nextHour + 12;\n  return getCleanedHour(partialCleanedHour);\n};\nconst TimeSelectHour = _ref => {\n  let {\n    hour,\n    is24HourClock,\n    time,\n    isAM,\n    isDisabled,\n    onChange\n  } = _ref;\n  const onHourChange = useCallback(nextHourString => {\n    const nextHour = +nextHourString;\n    const updatedTime = new Date(time);\n    if (is24HourClock) {\n      const cleanedNextHour = nextHour < 0 ? -1 : nextHour > 23 ? 24 : nextHour;\n      updatedTime.setHours(cleanedNextHour);\n    } else {\n      const nextHouris12 = nextHour === 12;\n      const shouldRollOver = hour === 11 && nextHouris12;\n      const shouldRollBack = hour === 12 && nextHour === 11;\n      let cleanedHour;\n      if (shouldRollOver) {\n        cleanedHour = isAM ? 12 : 24;\n      } else if (shouldRollBack) {\n        cleanedHour = isAM ? -1 : 11;\n      } else {\n        cleanedHour = isAM ? getCleanedAMHour(nextHour) : getCleanedPMHour(nextHour);\n      }\n      updatedTime.setHours(cleanedHour);\n    }\n    onChange(updatedTime);\n  }, [time, is24HourClock, isAM, hour]);\n  return React.createElement(TimeSelectInput, {\n    className: cx('&-time-hour'),\n    value: hour,\n    name: 'Hour',\n    onChange: onHourChange,\n    disabled: isDisabled\n  });\n};\nexport default TimeSelectHour;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,cAAc,CAAC;AAE/C,MAAMC,cAAc,GAAIC,kBAA0B,IAAI;EACrD,OAAOA,kBAAkB,GAAG,CAAC,GAC1B,EAAE,GACFA,kBAAkB,GAAG,EAAE,GACvB,CAAC,GACDA,kBAAkB;AACtB,CAAC;AAED,MAAMC,gBAAgB,GAAIC,QAAgB,IAAI;EAC7C,MAAMF,kBAAkB,GACvBE,QAAQ,GAAG,EAAE,GAAGA,QAAQ,GAAG,EAAE,GAAGA,QAAQ,GAAG,CAAC,GAAGA,QAAQ,GAAG,EAAE,GAAGA,QAAQ;EACxE,OAAOH,cAAc,CAACC,kBAAkB,CAAC;AAC1C,CAAC;AACD,MAAMG,gBAAgB,GAAID,QAAgB,IAAI;EAC7C,MAAMF,kBAAkB,GACvBE,QAAQ,KAAK,EAAE,GAAG,EAAE,GAAGA,QAAQ,GAAG,EAAE,GAAGA,QAAQ,GAAGA,QAAQ,GAAG,EAAE;EAChE,OAAOH,cAAc,CAACC,kBAAkB,CAAC;AAC1C,CAAC;AAWD,MAAMI,cAAc,GAAG,QAOD;EAAA,IAPE;IACvBC,IAAI;IACJC,aAAa;IACbC,IAAI;IACJC,IAAI;IACJC,UAAU;IACVC;EAAQ,CACS;EACjB,MAAMC,YAAY,GAAGjB,WAAW,CAC9BkB,cAAc,IAAI;IAClB,MAAMV,QAAQ,GAAG,CAACU,cAAc;IAChC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACP,IAAI,CAAC;IAClC,IAAID,aAAa,EAAE;MAClB,MAAMS,eAAe,GACpBb,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGA,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAGA,QAAQ;MAClDW,WAAW,CAACG,QAAQ,CAACD,eAAe,CAAC;KACrC,MAAM;MACN,MAAME,YAAY,GAAGf,QAAQ,KAAK,EAAE;MACpC,MAAMgB,cAAc,GAAGb,IAAI,KAAK,EAAE,IAAIY,YAAY;MAClD,MAAME,cAAc,GAAGd,IAAI,KAAK,EAAE,IAAIH,QAAQ,KAAK,EAAE;MACrD,IAAIkB,WAAW;MACf,IAAIF,cAAc,EAAE;QACnBE,WAAW,GAAGZ,IAAI,GAAG,EAAE,GAAG,EAAE;OAC5B,MAAM,IAAIW,cAAc,EAAE;QAC1BC,WAAW,GAAGZ,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE;OAC5B,MAAM;QACNY,WAAW,GAAGZ,IAAI,GACfP,gBAAgB,CAACC,QAAQ,CAAC,GAC1BC,gBAAgB,CAACD,QAAQ,CAAC;;MAE9BW,WAAW,CAACG,QAAQ,CAACI,WAAW,CAAC;;IAElCV,QAAQ,CAACG,WAAW,CAAC;EACtB,CAAC,EACD,CAACN,IAAI,EAAED,aAAa,EAAEE,IAAI,EAAEH,IAAI,CAAC,CACjC;EAED,OACCZ,oBAACG,eAAe;IACfyB,SAAS,EAAExB,EAAE,CAAC,aAAa,CAAC;IAC5ByB,KAAK,EAAEjB,IAAI;IACXkB,IAAI,EAAC,MAAM;IACXb,QAAQ,EAAEC,YAAY;IACtBa,QAAQ,EAAEf;EAAU,EACnB;AAEJ,CAAC;AAED,eAAeL,cAAc","names":["React","useCallback","lucidClassNames","TimeSelectInput","cx","bind","getCleanedHour","partialCleanedHour","getCleanedAMHour","nextHour","getCleanedPMHour","TimeSelectHour","hour","is24HourClock","time","isAM","isDisabled","onChange","onHourChange","nextHourString","updatedTime","Date","cleanedNextHour","setHours","nextHouris12","shouldRollOver","shouldRollBack","cleanedHour","className","value","name","disabled"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/TimeSelect/TimeSelectHour.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport TimeSelectInput from './TimeSelectInput';\n\nconst cx = lucidClassNames.bind('&-TimeSelect');\n\nconst getCleanedHour = (partialCleanedHour: number) => {\n\treturn partialCleanedHour < 0\n\t\t? 23\n\t\t: partialCleanedHour > 23\n\t\t? 0\n\t\t: partialCleanedHour;\n};\n\nconst getCleanedAMHour = (nextHour: number) => {\n\tconst partialCleanedHour =\n\t\tnextHour > 12 ? nextHour - 12 : nextHour < 0 ? nextHour + 12 : nextHour;\n\treturn getCleanedHour(partialCleanedHour);\n};\nconst getCleanedPMHour = (nextHour: number) => {\n\tconst partialCleanedHour =\n\t\tnextHour === 12 ? 12 : nextHour > 12 ? nextHour : nextHour + 12;\n\treturn getCleanedHour(partialCleanedHour);\n};\n\ninterface ITimeSelectHour {\n\thour: number;\n\ttime: Date;\n\tis24HourClock?: boolean;\n\tisAM: boolean;\n\tisDisabled?: boolean;\n\tonChange(time: Date): void;\n}\n\nconst TimeSelectHour = ({\n\thour,\n\tis24HourClock,\n\ttime,\n\tisAM,\n\tisDisabled,\n\tonChange,\n}: ITimeSelectHour) => {\n\tconst onHourChange = useCallback(\n\t\t(nextHourString) => {\n\t\t\tconst nextHour = +nextHourString;\n\t\t\tconst updatedTime = new Date(time);\n\t\t\tif (is24HourClock) {\n\t\t\t\tconst cleanedNextHour =\n\t\t\t\t\tnextHour < 0 ? -1 : nextHour > 23 ? 24 : nextHour;\n\t\t\t\tupdatedTime.setHours(cleanedNextHour);\n\t\t\t} else {\n\t\t\t\tconst nextHouris12 = nextHour === 12;\n\t\t\t\tconst shouldRollOver = hour === 11 && nextHouris12;\n\t\t\t\tconst shouldRollBack = hour === 12 && nextHour === 11;\n\t\t\t\tlet cleanedHour;\n\t\t\t\tif (shouldRollOver) {\n\t\t\t\t\tcleanedHour = isAM ? 12 : 24;\n\t\t\t\t} else if (shouldRollBack) {\n\t\t\t\t\tcleanedHour = isAM ? -1 : 11;\n\t\t\t\t} else {\n\t\t\t\t\tcleanedHour = isAM\n\t\t\t\t\t\t? getCleanedAMHour(nextHour)\n\t\t\t\t\t\t: getCleanedPMHour(nextHour);\n\t\t\t\t}\n\t\t\t\tupdatedTime.setHours(cleanedHour);\n\t\t\t}\n\t\t\tonChange(updatedTime);\n\t\t},\n\t\t[time, is24HourClock, isAM, hour]\n\t);\n\n\treturn (\n\t\t<TimeSelectInput\n\t\t\tclassName={cx('&-time-hour')}\n\t\t\tvalue={hour}\n\t\t\tname='Hour'\n\t\t\tonChange={onHourChange}\n\t\t\tdisabled={isDisabled}\n\t\t/>\n\t);\n};\n\nexport default TimeSelectHour;\n"]},"metadata":{},"sourceType":"module"}