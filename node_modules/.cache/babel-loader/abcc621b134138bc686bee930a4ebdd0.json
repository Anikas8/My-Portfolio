{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nimport Switch from '../Switch/Switch';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nconst cx = lucidClassNames.bind('&-SwitchLabeled');\nconst {\n  any,\n  node,\n  object,\n  string\n} = PropTypes;\nconst defaultProps = {\n  isDisabled: false,\n  isSelected: false,\n  onSelect: _.noop\n};\nconst defaultState = {\n  _labelKey: 0\n};\nconst SwitchLabeled = props => {\n  const {\n    className,\n    isDisabled,\n    isSelected,\n    onSelect,\n    style,\n    ...passThroughs\n  } = props;\n  const [state, setState] = useState(defaultState);\n  const currentLabel = _.get(getFirst(props, SwitchLabeled.Label), 'props.children', null);\n  useEffect(() => {\n    setState({\n      _labelKey: state._labelKey + 1\n    });\n  }, [currentLabel]);\n  const labelChildProps = _.get(getFirst(props, SwitchLabeled.Label), 'props');\n  const isShown = !!labelChildProps;\n  return React.createElement(\"label\", {\n    className: cx('&', {\n      '&-is-disabled': isDisabled,\n      '&-is-selected': isSelected\n    }, className),\n    style: style\n  }, React.createElement(Switch, {\n    className: className,\n    isDisabled: isDisabled,\n    isSelected: isSelected,\n    onSelect: onSelect,\n    ...omit(passThroughs, ['className', 'style', 'Label', 'isDisabled', 'isSelected', 'onSelect', 'isIncludeExclude'].concat('initialState'))\n  }), labelChildProps && React.createElement(CSSTransition, {\n    in: isShown,\n    classNames: cx('&-text'),\n    timeout: 100,\n    style: {\n      position: 'relative'\n    },\n    className: cx('&-text'),\n    unmountOnExit: true\n  }, React.createElement(\"span\", {\n    key: state._labelKey\n  }, labelChildProps.children || labelChildProps)));\n};\nSwitchLabeled.defaultProps = defaultProps;\nSwitchLabeled.displayName = 'SwitchLabeled';\nSwitchLabeled.peek = {\n  description: `A composite of the \\`Switch\\` component and the native \\`label\\` element.`,\n  categories: ['controls', 'toggles'],\n  madeFrom: ['Switch']\n};\nconst Label = () => {\n  return null;\n};\nLabel.displayName = 'SwitchLabeled.Label';\nLabel.peek = {\n  description: `Label to be shown alongside the \\`Switch\\`.`\n};\nLabel.propName = 'Label';\nLabel.propTypes = {\n  /**\n      Used to identify the purpose of this switch to the user -- can be any\n      renderable content.\n  */\n  children: node\n};\nSwitchLabeled.propTypes = {\n  ...Switch.propTypes,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Child element whose children are used to identify the purpose of this\n      switch to the user.\n  */\n  Label: any\n};\nSwitchLabeled.Label = Label;\nexport default SwitchLabeled;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","CSSTransition","lucidClassNames","getFirst","Switch","useState","useEffect","cx","bind","any","node","object","string","defaultProps","isDisabled","isSelected","onSelect","noop","defaultState","_labelKey","SwitchLabeled","props","className","style","passThroughs","state","setState","currentLabel","get","Label","labelChildProps","isShown","concat","in","classNames","timeout","position","unmountOnExit","key","children","displayName","peek","description","categories","madeFrom","propName","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SwitchLabeled/SwitchLabeled.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst, StandardProps } from '../../util/component-types';\nimport Switch from '../Switch/Switch';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst cx = lucidClassNames.bind('&-SwitchLabeled');\nconst { any, node, object, string } = PropTypes;\n\nconst defaultProps = {\n\tisDisabled: false,\n\tisSelected: false,\n\tonSelect: _.noop,\n};\n\nconst defaultState = {\n\t_labelKey: 0,\n};\n\nexport interface ISwitchLabeledProps extends StandardProps {\n\tisDisabled: boolean;\n\tisSelected: boolean;\n\tonSelect: any;\n}\n\nconst SwitchLabeled = (props: ISwitchLabeledProps) => {\n\tconst {\n\t\tclassName,\n\t\tisDisabled,\n\t\tisSelected,\n\t\tonSelect,\n\t\tstyle,\n\t\t...passThroughs\n\t} = props;\n\n\tconst [state, setState] = useState(defaultState);\n\n\tconst currentLabel = _.get(\n\t\tgetFirst(props, SwitchLabeled.Label),\n\t\t'props.children',\n\t\tnull\n\t);\n\n\tuseEffect(() => {\n\t\tsetState({ _labelKey: state._labelKey + 1 });\n\t}, [currentLabel]);\n\n\tconst labelChildProps = _.get(getFirst(props, SwitchLabeled.Label), 'props');\n\n\tconst isShown = !!labelChildProps;\n\n\treturn (\n\t\t<label\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-selected': isSelected,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t<Switch\n\t\t\t\tclassName={className}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tisSelected={isSelected}\n\t\t\t\tonSelect={onSelect}\n\t\t\t\t{...omit(\n\t\t\t\t\tpassThroughs,\n\t\t\t\t\t[\n\t\t\t\t\t\t'className',\n\t\t\t\t\t\t'style',\n\t\t\t\t\t\t'Label',\n\t\t\t\t\t\t'isDisabled',\n\t\t\t\t\t\t'isSelected',\n\t\t\t\t\t\t'onSelect',\n\t\t\t\t\t\t'isIncludeExclude',\n\t\t\t\t\t].concat('initialState')\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t{labelChildProps && (\n\t\t\t\t<CSSTransition\n\t\t\t\t\tin={isShown}\n\t\t\t\t\tclassNames={cx('&-text')}\n\t\t\t\t\ttimeout={100}\n\t\t\t\t\tstyle={{ position: 'relative' }}\n\t\t\t\t\tclassName={cx('&-text')}\n\t\t\t\t\tunmountOnExit\n\t\t\t\t>\n\t\t\t\t\t<span key={state._labelKey}>\n\t\t\t\t\t\t{labelChildProps.children || labelChildProps}\n\t\t\t\t\t</span>\n\t\t\t\t</CSSTransition>\n\t\t\t)}\n\t\t</label>\n\t);\n};\n\nSwitchLabeled.defaultProps = defaultProps;\n\nSwitchLabeled.displayName = 'SwitchLabeled';\n\nSwitchLabeled.peek = {\n\tdescription: `A composite of the \\`Switch\\` component and the native \\`label\\` element.`,\n\tcategories: ['controls', 'toggles'],\n\tmadeFrom: ['Switch'],\n};\n\nconst Label = () => {\n\treturn null;\n};\n\nLabel.displayName = 'SwitchLabeled.Label';\n\nLabel.peek = {\n\tdescription: `Label to be shown alongside the \\`Switch\\`.`,\n};\n\nLabel.propName = 'Label';\n\nLabel.propTypes = {\n\t/**\n\t\tUsed to identify the purpose of this switch to the user -- can be any\n\t\trenderable content.\n\t*/\n\tchildren: node,\n};\n\nSwitchLabeled.propTypes = {\n\t...Switch.propTypes,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tChild element whose children are used to identify the purpose of this\n\t\tswitch to the user.\n\t*/\n\tLabel: any,\n};\n\nSwitchLabeled.Label = Label;\n\nexport default SwitchLabeled;\n"]},"metadata":{},"sourceType":"module"}