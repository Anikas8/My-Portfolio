{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-Button');\nconst {\n  arrayOf,\n  bool,\n  func,\n  node,\n  oneOf,\n  oneOfType,\n  string\n} = PropTypes;\nconst defaultProps = {\n  isDisabled: false,\n  isActive: false,\n  onClick: _.noop,\n  type: 'button',\n  hasOnlyIcon: false\n};\n/** Button */\nexport const Button = props => {\n  const {\n    isDisabled,\n    isActive,\n    onClick,\n    hasOnlyIcon,\n    kind,\n    size,\n    className,\n    children,\n    type,\n    ...passThroughs\n  } = props;\n  const buttonRef = React.createRef();\n  function handleClick(event) {\n    if (!isDisabled) {\n      // required to correctly apply the focus state in Safari and Firefox\n      // (still valid 2019-07-22)\n      if (buttonRef.current) {\n        buttonRef.current.focus();\n      }\n      onClick({\n        event,\n        props: props\n      });\n    }\n  }\n  return React.createElement(\"button\", {\n    ...passThroughs,\n    ref: buttonRef,\n    className: cx('&', {\n      '&-is-disabled': isDisabled,\n      '&-is-active': isActive,\n      '&-primary': kind === 'primary',\n      '&-link': kind === 'link',\n      '&-invisible': kind === 'invisible',\n      '&-danger': kind === 'danger',\n      '&-short': size === 'short',\n      '&-small': size === 'small',\n      '&-large': size === 'large',\n      '&-has-only-icon': hasOnlyIcon\n    }, className),\n    onClick: handleClick,\n    disabled: isDisabled,\n    type: type\n  }, React.createElement(\"span\", {\n    className: cx('&-content')\n  }, children));\n};\nButton.defaultProps = defaultProps;\nButton.displayName = 'Button';\nButton.peek = {\n  description: `A basic button. Any props that are not explicitly called out below will be passed through to the native \\`Button\\` component.`,\n  categories: ['controls', 'buttons']\n};\nButton.propName = 'Button';\nButton.propTypes = {\n  /**\n      Disables the Button by greying it out\n  */\n  isDisabled: bool,\n  /**\n      Activates the Button by giving it a \"pressed down\" look\n  */\n  isActive: bool,\n  /**\n      Class names that are appended to the defaults\n  */\n  className: string,\n  /**\n      Set this to \\`true\\` if you want the Button to only contain an icon.\n  */\n  hasOnlyIcon: bool,\n  /**\n      Any valid React children\n  */\n  children: oneOfType([node, arrayOf(node)]),\n  /**\n      Style variations of the Button\n  */\n  kind: oneOf(['primary', 'link', 'danger', 'invisible']),\n  /**\n      Size variations of the Button\n  */\n  size: oneOf(['short', 'small', 'large']),\n  /**\n      Called when the user clicks the \\`Button\\`.\n  */\n  onClick: func,\n  /**\n      Form element type variations of Button. Passed through to DOM Button.\n  */\n  type: string\n};\nexport default Button;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,eAAe,QAAQ,0BAA0B;AAG1D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,UAAU,CAAC;AAE3C,MAAM;EAAEC,OAAO;EAAEC,IAAI;EAAEC,IAAI;EAAEC,IAAI;EAAEC,KAAK;EAAEC,SAAS;EAAEC;AAAM,CAAE,GAAGX,SAAS;AAuDzE,MAAMY,YAAY,GAAG;EACpBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,KAAK;EACfC,OAAO,EAAEd,CAAC,CAACe,IAAI;EACfC,IAAI,EAAE,QAAiB;EACvBC,WAAW,EAAE;CACb;AAED;AACA,OAAO,MAAMC,MAAM,GAAIC,KAAmB,IAAwB;EACjE,MAAM;IACLP,UAAU;IACVC,QAAQ;IACRC,OAAO;IACPG,WAAW;IACXG,IAAI;IACJC,IAAI;IACJC,SAAS;IACTC,QAAQ;IACRP,IAAI;IACJ,GAAGQ;EAAY,CACf,GAAGL,KAAK;EAET,MAAMM,SAAS,GAAG3B,KAAK,CAAC4B,SAAS,EAAqB;EAEtD,SAASC,WAAW,CAACC,KAA0C;IAC9D,IAAI,CAAChB,UAAU,EAAE;MAChB;MACA;MAEA,IAAIa,SAAS,CAACI,OAAO,EAAE;QACtBJ,SAAS,CAACI,OAAO,CAACC,KAAK,EAAE;;MAE1BhB,OAAO,CAAC;QAAEc,KAAK;QAAET,KAAK,EAAEA;MAAK,CAAE,CAAC;;EAElC;EACA,OACCrB;IAAA,GACK0B,YAAY;IAChBO,GAAG,EAAEN,SAAS;IACdH,SAAS,EAAEpB,EAAE,CACZ,GAAG,EACH;MACC,eAAe,EAAEU,UAAU;MAC3B,aAAa,EAAEC,QAAQ;MACvB,WAAW,EAAEO,IAAI,KAAK,SAAS;MAC/B,QAAQ,EAAEA,IAAI,KAAK,MAAM;MACzB,aAAa,EAAEA,IAAI,KAAK,WAAW;MACnC,UAAU,EAAEA,IAAI,KAAK,QAAQ;MAC7B,SAAS,EAAEC,IAAI,KAAK,OAAO;MAC3B,SAAS,EAAEA,IAAI,KAAK,OAAO;MAC3B,SAAS,EAAEA,IAAI,KAAK,OAAO;MAC3B,iBAAiB,EAAEJ;KACnB,EACDK,SAAS,CACT;IACDR,OAAO,EAAEa,WAAW;IACpBK,QAAQ,EAAEpB,UAAU;IACpBI,IAAI,EAAEA;EAAI,GAEVlB;IAAMwB,SAAS,EAAEpB,EAAE,CAAC,WAAW;EAAC,GAAGqB,QAAQ,CAAQ,CAC3C;AAEX,CAAC;AAEDL,MAAM,CAACP,YAAY,GAAGA,YAAY;AAElCO,MAAM,CAACe,WAAW,GAAG,QAAQ;AAE7Bf,MAAM,CAACgB,IAAI,GAAG;EACbC,WAAW,EAAE,+HAA+H;EAC5IC,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS;CAClC;AAEDlB,MAAM,CAACmB,QAAQ,GAAG,QAAQ;AAE1BnB,MAAM,CAACoB,SAAS,GAAG;EAClB;;;EAGA1B,UAAU,EAAEP,IAAI;EAEhB;;;EAGAQ,QAAQ,EAAER,IAAI;EAEd;;;EAGAiB,SAAS,EAAEZ,MAAM;EAEjB;;;EAGAO,WAAW,EAAEZ,IAAI;EAEjB;;;EAGAkB,QAAQ,EAAEd,SAAS,CAAC,CAACF,IAAI,EAAEH,OAAO,CAACG,IAAI,CAAC,CAAC,CAAC;EAE1C;;;EAGAa,IAAI,EAAEZ,KAAK,CAAC,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;EAEvD;;;EAGAa,IAAI,EAAEb,KAAK,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;EAExC;;;EAGAM,OAAO,EAAER,IAAI;EAEb;;;EAGAU,IAAI,EAAEN;CACN;AAED,eAAeQ,MAAM","names":["React","PropTypes","_","lucidClassNames","cx","bind","arrayOf","bool","func","node","oneOf","oneOfType","string","defaultProps","isDisabled","isActive","onClick","noop","type","hasOnlyIcon","Button","props","kind","size","className","children","passThroughs","buttonRef","createRef","handleClick","event","current","focus","ref","disabled","displayName","peek","description","categories","propName","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Button/Button.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Button');\n\nconst { arrayOf, bool, func, node, oneOf, oneOfType, string } = PropTypes;\n\nexport interface IButtonPropsRaw extends StandardProps {\n\t/**\n\t * Disables the Button by greying it out\n\t *\n\t * @default false\n\t **/\n\tisDisabled: boolean;\n\n\t/**\n\t * Activates the Button by giving it a \"pressed down\" look\n\t *\n\t * @default false\n\t **/\n\tisActive: boolean;\n\n\t/**\n\t * Set this to `true` if you want the Button to only contain an icon.\n\t *\n\t * @default false\n\t * */\n\thasOnlyIcon: boolean;\n\n\t/** Style variations of the Button */\n\tkind?: 'primary' | 'link' | 'danger' | 'invisible';\n\n\t/** Size variations of the Button */\n\tsize?: 'short' | 'small' | 'large';\n\n\t/** Called when the user clicks the \\`Button\\`. */\n\tonClick: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent<HTMLButtonElement>;\n\t\tprops: IButtonProps;\n\t}) => void;\n\n\t/**\n\t * Form element type variations of Button. Passed through to DOM Button.\n\t *\n\t * @default \"button\"\n\t * */\n\ttype: 'submit' | 'reset' | 'button';\n}\n\nexport type IButtonProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.ButtonHTMLAttributes<HTMLButtonElement>,\n\t\tHTMLButtonElement\n\t>,\n\tIButtonPropsRaw\n>;\n\nconst defaultProps = {\n\tisDisabled: false,\n\tisActive: false,\n\tonClick: _.noop,\n\ttype: 'button' as const,\n\thasOnlyIcon: false,\n};\n\n/** Button */\nexport const Button = (props: IButtonProps): React.ReactElement => {\n\tconst {\n\t\tisDisabled,\n\t\tisActive,\n\t\tonClick,\n\t\thasOnlyIcon,\n\t\tkind,\n\t\tsize,\n\t\tclassName,\n\t\tchildren,\n\t\ttype,\n\t\t...passThroughs\n\t} = props;\n\n\tconst buttonRef = React.createRef<HTMLButtonElement>();\n\n\tfunction handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\n\t\tif (!isDisabled) {\n\t\t\t// required to correctly apply the focus state in Safari and Firefox\n\t\t\t// (still valid 2019-07-22)\n\n\t\t\tif (buttonRef.current) {\n\t\t\t\tbuttonRef.current.focus();\n\t\t\t}\n\t\t\tonClick({ event, props: props });\n\t\t}\n\t}\n\treturn (\n\t\t<button\n\t\t\t{...passThroughs}\n\t\t\tref={buttonRef}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-active': isActive,\n\t\t\t\t\t'&-primary': kind === 'primary',\n\t\t\t\t\t'&-link': kind === 'link',\n\t\t\t\t\t'&-invisible': kind === 'invisible',\n\t\t\t\t\t'&-danger': kind === 'danger',\n\t\t\t\t\t'&-short': size === 'short',\n\t\t\t\t\t'&-small': size === 'small',\n\t\t\t\t\t'&-large': size === 'large',\n\t\t\t\t\t'&-has-only-icon': hasOnlyIcon,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={isDisabled}\n\t\t\ttype={type}\n\t\t>\n\t\t\t<span className={cx('&-content')}>{children}</span>\n\t\t</button>\n\t);\n};\n\nButton.defaultProps = defaultProps;\n\nButton.displayName = 'Button';\n\nButton.peek = {\n\tdescription: `A basic button. Any props that are not explicitly called out below will be passed through to the native \\`Button\\` component.`,\n\tcategories: ['controls', 'buttons'],\n};\n\nButton.propName = 'Button';\n\nButton.propTypes = {\n\t/**\n\t\tDisables the Button by greying it out\n\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\tActivates the Button by giving it a \"pressed down\" look\n\t*/\n\tisActive: bool,\n\n\t/**\n\t\tClass names that are appended to the defaults\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tSet this to \\`true\\` if you want the Button to only contain an icon.\n\t*/\n\thasOnlyIcon: bool,\n\n\t/**\n\t\tAny valid React children\n\t*/\n\tchildren: oneOfType([node, arrayOf(node)]),\n\n\t/**\n\t\tStyle variations of the Button\n\t*/\n\tkind: oneOf(['primary', 'link', 'danger', 'invisible']),\n\n\t/**\n\t\tSize variations of the Button\n\t*/\n\tsize: oneOf(['short', 'small', 'large']),\n\n\t/**\n\t\tCalled when the user clicks the \\`Button\\`.\n\t*/\n\tonClick: func,\n\n\t/**\n\t\tForm element type variations of Button. Passed through to DOM Button.\n\t*/\n\ttype: string,\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}