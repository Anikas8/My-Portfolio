{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport DayPicker from 'react-day-picker';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst {\n  DateUtils\n} = DayPicker;\nconst cx = lucidClassNames.bind('&-CalendarMonth');\nconst {\n  bool,\n  instanceOf,\n  number,\n  oneOf,\n  string\n} = PropTypes;\nclass CalendarMonth extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.modifierRange = day => {\n      const {\n        cursor,\n        from,\n        to,\n        selectMode\n      } = this.props;\n      if (cursor) {\n        if (selectMode === 'day') {\n          return DateUtils.isSameDay(day, new Date(cursor));\n        } else if (from || to) {\n          return DateUtils.isDayInRange(day, {\n            from: new Date(selectMode === 'to' ? from : to),\n            to: new Date(cursor)\n          });\n        }\n        return DateUtils.isSameDay(day, new Date(cursor));\n      }\n      if (from && to) {\n        return DateUtils.isDayInRange(day, {\n          from: new Date(from),\n          to: new Date(to)\n        });\n      }\n      return false;\n    };\n    this.modifierFrom = day => {\n      const {\n        from\n      } = this.props;\n      return DateUtils.isSameDay(day, new Date(from));\n    };\n    this.modifierTo = day => {\n      const {\n        to\n      } = this.props;\n      return DateUtils.isSameDay(day, new Date(to));\n    };\n  }\n  shouldComponentUpdate() {\n    return this.props.shouldComponentUpdate;\n  }\n  render() {\n    const {\n      className,\n      monthOffset,\n      initialMonth,\n      ...passThroughs\n    } = this.props;\n    // It can be tricky to increment months using JavaScript dates, this should\n    // handle the edge cases.\n    // http://stackoverflow.com/questions/499838/javascript-date-next-month\n    const monthDate = new Date(initialMonth.getFullYear(), initialMonth.getMonth() + monthOffset, 1);\n    return (\n      /**typescript boundary with this component is tricky to get right with the way passthrough works\n       * the component is being rewritten in typescript.  Going to punt on this for now\n       * https://github.com/gpbl/react-day-picker/issues/942\n       */\n      //@ts-ignore\n      React.createElement(DayPicker, {\n        key: monthOffset,\n        className: cx('&', className),\n        initialMonth: monthDate,\n        canChangeMonth: false,\n        weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ...passThroughs,\n        modifiers: {\n          range: this.modifierRange,\n          from: this.modifierFrom,\n          to: this.modifierTo,\n          ...passThroughs.modifiers\n        }\n      })\n    );\n  }\n}\nCalendarMonth._isPrivate = true;\nCalendarMonth.displayName = 'CalendarMonth';\nCalendarMonth.peek = {\n  description: `A single calendar month based on \\`react-day-picker\\`.`,\n  categories: ['helpers']\n};\nCalendarMonth.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      The offset of the rendered month, where 0 is the \\`initialMonth\\`.\n      Negative values will show previous months.\n  */\n  monthOffset: number,\n  /**\n      Sets the month of the calendar. The 0 value for the \\`monthOffset\\` prop\n      refers to this month.\n  */\n  initialMonth: instanceOf(Date),\n  /**\n      Set the cursor to target date. Primarily used to preview expected ranges\n      when the cursor is on a target date.\n  */\n  cursor: instanceOf(Date),\n  /**\n      Sets the start date in a date range.\n  */\n  from: instanceOf(Date),\n  /**\n      Sets the end date in a date range.\n  */\n  to: instanceOf(Date),\n  /**\n      The next selection that is expected. Primarily used to preview expected\n      ranges when the cursor is on a target date.\n  */\n  selectMode: oneOf(['day', 'from', 'to']),\n  /**\n      Used to skip re-rendering of this component when true. Primarily used for\n      CalendarMonths which are rendered out of view.\n  */\n  shouldComponentUpdate: bool\n};\nCalendarMonth.defaultProps = {\n  monthOffset: 0,\n  initialMonth: new Date(),\n  cursor: null,\n  from: null,\n  to: null,\n  selectMode: 'day',\n  shouldComponentUpdate: true\n};\nexport default CalendarMonth;","map":{"version":3,"mappings":"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","names":["React","PropTypes","DayPicker","lucidClassNames","DateUtils","cx","bind","bool","instanceOf","number","oneOf","string","CalendarMonth","Component","constructor","day","cursor","from","to","selectMode","props","isSameDay","Date","isDayInRange","shouldComponentUpdate","render","className","monthOffset","initialMonth","passThroughs","monthDate","getFullYear","getMonth","key","canChangeMonth","weekdaysShort","modifiers","range","modifierRange","modifierFrom","modifierTo","description","categories"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/CalendarMonth/CalendarMonth.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport DayPicker from 'react-day-picker';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\n\nconst { DateUtils } = DayPicker;\n\nconst cx = lucidClassNames.bind('&-CalendarMonth');\n\nconst { bool, instanceOf, number, oneOf, string } = PropTypes;\n\nexport interface ICalendarProps extends StandardProps {\n\t/** The offset of the rendered month, where 0 is the \\`initialMonth\\`.\n\t * Negative values will show previous months.\n\t */\n\tmonthOffset: number;\n\n\t/**Sets the month of the calendar. The 0 value for the \\`monthOffset\\` prop\n\t * refers to this month.\n\t */\n\tinitialMonth: Date;\n\n\t/** Set the cursor to target date. Primarily used to preview expected ranges\n\t * when the cursor is on a target date.\n\t */\n\tcursor: Date | null;\n\n\t/** Sets the start date in a date range.\n\t */\n\tfrom?: Date | null;\n\n\t/** Sets the end date in a date range.\n\t */\n\tto?: Date | null;\n\n\t/** The next selection that is expected. Primarily used to preview expected\n\t * ranges when the cursor is on a target date.\n\t */\n\tselectMode: 'day' | 'from' | 'to';\n\n\t/** Used to skip re-rendering of this component when true. Primarily used for\n\t * CalendarMonths which are rendered out of view.\n\t */\n\tshouldComponentUpdate: boolean;\n\n\t/** These are values that we've allowed our API to accept, which will go directly\n\t * into the `modifers` object that we pass to DayPicker.\n\t */\n\tmodifiers?: any;\n\n\t/** Sets selected days. Passed through to \\`CalendarMonth\\` ->\n\t\t\t\\`react-day-picker\\`. */\n\tselectedDays?: Date | ((date: Date) => boolean | Date | Date[]) | null;\n\n\t/** Sets disabled days. Passed through to \\`CalendarMonth\\` ->\n\t\t\t\\`react-day-picker\\`.*/\n\tdisabledDays?: (date: Date) => boolean | Date | Date[];\n\n\t/** Highlight dates and ranges based on cursor position. */\n\tshowCursorHighlight?: boolean;\n\n\tkey?: string | number;\n\n\tonDayClick?: (\n\t\tday: Date,\n\t\t{ disabled }: { disabled: boolean },\n\t\tevent: React.MouseEvent\n\t) => void;\n\n\tonDayMouseEnter?: (day: Date, { disabled }: { disabled: boolean }) => void;\n\n\tonDayMouseLeave?: () => void;\n}\n\nclass CalendarMonth extends React.Component<ICalendarProps, {}, {}> {\n\tstatic _isPrivate = true;\n\tstatic displayName = 'CalendarMonth';\n\tstatic peek = {\n\t\tdescription: `A single calendar month based on \\`react-day-picker\\`.`,\n\t\tcategories: ['helpers'],\n\t};\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tThe offset of the rendered month, where 0 is the \\`initialMonth\\`.\n\t\t\tNegative values will show previous months.\n\t\t*/\n\t\tmonthOffset: number,\n\n\t\t/**\n\t\t\tSets the month of the calendar. The 0 value for the \\`monthOffset\\` prop\n\t\t\trefers to this month.\n\t\t*/\n\t\tinitialMonth: instanceOf(Date),\n\n\t\t/**\n\t\t\tSet the cursor to target date. Primarily used to preview expected ranges\n\t\t\twhen the cursor is on a target date.\n\t\t*/\n\t\tcursor: instanceOf(Date),\n\n\t\t/**\n\t\t\tSets the start date in a date range.\n\t\t*/\n\t\tfrom: instanceOf(Date),\n\n\t\t/**\n\t\t\tSets the end date in a date range.\n\t\t*/\n\t\tto: instanceOf(Date),\n\n\t\t/**\n\t\t\tThe next selection that is expected. Primarily used to preview expected\n\t\t\tranges when the cursor is on a target date.\n\t\t*/\n\t\tselectMode: oneOf(['day', 'from', 'to']),\n\n\t\t/**\n\t\t\tUsed to skip re-rendering of this component when true. Primarily used for\n\t\t\tCalendarMonths which are rendered out of view.\n\t\t*/\n\t\tshouldComponentUpdate: bool,\n\t};\n\n\tstatic defaultProps = {\n\t\tmonthOffset: 0,\n\t\tinitialMonth: new Date(),\n\t\tcursor: null,\n\t\tfrom: null,\n\t\tto: null,\n\t\tselectMode: 'day',\n\t\tshouldComponentUpdate: true,\n\t};\n\n\tmodifierRange = (day: Date): boolean => {\n\t\tconst { cursor, from, to, selectMode } = this.props;\n\n\t\tif (cursor) {\n\t\t\tif (selectMode === 'day') {\n\t\t\t\treturn DateUtils.isSameDay(day, new Date(cursor));\n\t\t\t} else if (from || to) {\n\t\t\t\treturn DateUtils.isDayInRange(day, {\n\t\t\t\t\tfrom: new Date(selectMode === 'to' ? (from as Date) : (to as Date)),\n\t\t\t\t\tto: new Date(cursor),\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn DateUtils.isSameDay(day, new Date(cursor));\n\t\t}\n\n\t\tif (from && to) {\n\t\t\treturn DateUtils.isDayInRange(day, {\n\t\t\t\tfrom: new Date(from),\n\t\t\t\tto: new Date(to),\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tmodifierFrom = (day: Date): boolean => {\n\t\tconst { from } = this.props;\n\n\t\treturn DateUtils.isSameDay(day, new Date(from as Date));\n\t};\n\n\tmodifierTo = (day: Date): boolean => {\n\t\tconst { to } = this.props;\n\n\t\treturn DateUtils.isSameDay(day, new Date(to as Date));\n\t};\n\n\tshouldComponentUpdate(): boolean {\n\t\treturn this.props.shouldComponentUpdate as boolean;\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst { className, monthOffset, initialMonth, ...passThroughs } =\n\t\t\tthis.props;\n\n\t\t// It can be tricky to increment months using JavaScript dates, this should\n\t\t// handle the edge cases.\n\t\t// http://stackoverflow.com/questions/499838/javascript-date-next-month\n\t\tconst monthDate = new Date(\n\t\t\t(initialMonth as Date).getFullYear(),\n\t\t\t(initialMonth as Date).getMonth() + (monthOffset as number),\n\t\t\t1\n\t\t);\n\n\t\treturn (\n\t\t\t/**typescript boundary with this component is tricky to get right with the way passthrough works\n\t\t\t * the component is being rewritten in typescript.  Going to punt on this for now\n\t\t\t * https://github.com/gpbl/react-day-picker/issues/942\n\t\t\t */\n\t\t\t//@ts-ignore\n\t\t\t<DayPicker\n\t\t\t\tkey={monthOffset}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\tinitialMonth={monthDate}\n\t\t\t\tcanChangeMonth={false}\n\t\t\t\tweekdaysShort={['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']}\n\t\t\t\t{...(passThroughs as any)}\n\t\t\t\tmodifiers={{\n\t\t\t\t\trange: this.modifierRange,\n\t\t\t\t\tfrom: this.modifierFrom,\n\t\t\t\t\tto: this.modifierTo,\n\t\t\t\t\t...passThroughs.modifiers,\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default CalendarMonth;\n"]},"metadata":{},"sourceType":"module"}