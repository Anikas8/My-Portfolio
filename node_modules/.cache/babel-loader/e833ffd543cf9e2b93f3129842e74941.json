{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { filterTypes, getFirst } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { Button } from '../Button/Button';\nimport { ButtonGroupDumb as ButtonGroup } from '../ButtonGroup/ButtonGroup';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport { DropMenuDumb as DropMenu } from '../DropMenu/DropMenu';\nimport * as reducers from './SplitButton.reducers';\nconst cx = lucidClassNames.bind('&-SplitButton');\nconst {\n  bool,\n  func,\n  node,\n  oneOf,\n  shape,\n  string\n} = PropTypes;\nconst ButtonChild = _props => null;\nButtonChild.displayName = 'SplitButton.ButtonChild';\nButtonChild.peek = {\n  description: `\n\t\tOne of many potential \\`Button\\`s to render in this\n\t\t\\`SplitButton\\`. The first \\`Button\\` will be used as the Primary\n\t\tbutton, while all others will be rendered within the \\`DropMenu\\`\n\t\tbelow.\n\t`\n};\nButtonChild.propTypes = {\n  /**\n      The children to render within the \\`Button\\`.\n  */\n  children: node,\n  /**\n      Disables selection of the \\`Button\\`.\n  */\n  isDisabled: bool,\n  /**\n      Called when the user clicks the \\`Button\\`.  Signature:\n      \\`({ props, event }) => {}\\`\n  */\n  onClick: func\n};\nclass SplitButton extends React.Component {\n  constructor() {\n    super(...arguments);\n    // Handles select events in the DropMenu\n    this.handleSelect = (optionIndex, _ref) => {\n      let {\n        event\n      } = _ref;\n      const buttonChildProps = _.map(filterTypes(this.props.children, SplitButton.Button), 'props');\n      if (optionIndex !== null) {\n        this.handleButtonClick(buttonChildProps[optionIndex + 1], event);\n      }\n    };\n    // Handles clicks on the Primary Button\n    this.handleClick = _ref2 => {\n      let {\n        event\n      } = _ref2;\n      const clickedButtonProps = _.get(getFirst(this.props, SplitButton.Button), 'props');\n      // Stop propagation to prevent this `Click` from expanding the `DropMenu`\n      event.stopPropagation();\n      this.handleButtonClick(clickedButtonProps, event);\n    };\n    // Handles clicks within handleClick and handleSelect\n    this.handleButtonClick = (buttonProps, event) => {\n      const {\n        DropMenu: {\n          onCollapse\n        }\n      } = this.props;\n      onCollapse && onCollapse({\n        props: this.props.DropMenu,\n        event\n      });\n      if (_.has(buttonProps, 'onClick')) {\n        buttonProps.onClick({\n          event,\n          props: buttonProps\n        });\n      }\n    };\n  }\n  render() {\n    const {\n      className,\n      kind,\n      direction,\n      type,\n      size,\n      DropMenu: dropMenuProps,\n      ...passThroughs\n    } = this.props;\n    const {\n      isExpanded\n    } = dropMenuProps;\n    const [primaryButtonProps, ...buttonChildProps] = _.map(filterTypes(this.props.children, SplitButton.Button), 'props');\n    return React.createElement(DropMenu, {\n      ...dropMenuProps,\n      ...omit(passThroughs, ['DropMenu', 'children', 'className', 'direction', 'kind', 'size', 'type', 'initialState', 'callbackId']),\n      direction: direction,\n      className: cx('&', className),\n      onSelect: this.handleSelect\n    }, React.createElement(DropMenu.Control, null, React.createElement(ButtonGroup, null, React.createElement(Button, {\n      ...primaryButtonProps,\n      className: cx('&-Button-primary', _.get(primaryButtonProps, 'className')),\n      kind: kind,\n      type: type,\n      size: size,\n      onClick: this.handleClick\n    }), React.createElement(Button, {\n      className: cx('&-Button-drop'),\n      size: size,\n      hasOnlyIcon: true,\n      isActive: isExpanded,\n      kind: kind,\n      isDisabled: _.every([primaryButtonProps, ...buttonChildProps], 'isDisabled')\n    }, React.createElement(ChevronIcon, {\n      className: cx('&-ChevronIcon'),\n      direction: direction,\n      size: 10\n    })))), _.map(buttonChildProps, (buttonChildProp, index) => React.createElement(DropMenu.Option, {\n      ...buttonChildProp,\n      key: index\n    })));\n  }\n}\nSplitButton.displayName = 'SplitButton';\nSplitButton.Button = ButtonChild;\nSplitButton.peek = {\n  description: `\\`SplitButton\\` allows you to combine a single main \\`Button\\` together with a list of additional \\`Buttons\\` with actions which will be rendered within a \\`DropMenu\\`.`,\n  categories: ['controls', 'buttons'],\n  madeFrom: ['Button', 'DropMenu']\n};\nSplitButton.reducers = reducers;\nSplitButton.propTypes = {\n  /**\n      Object of DropMenu props which are passed through to the underlying\n      DropMenu component.\n  */\n  DropMenu: shape(DropMenu.propTypes),\n  /**\n      All children should be \\`ButtonGroup.Button\\`s and they support the same\n      props as \\`Button\\`s.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: string,\n  /**\n      Sets the direction the flyout menu will render relative to the\n      SplitButton.\n  */\n  direction: oneOf(['up', 'down']),\n  /**\n      Style variations of the SplitButton.\n  */\n  kind: oneOf(['primary', 'danger']),\n  /**\n      Size variations of the SplitButton.\n  */\n  size: oneOf(['short', 'small', 'large']),\n  /**\n      Form element type variations of SplitButton. Passed through to DOM\n      Button.\n  */\n  type: string\n};\nSplitButton.defaultProps = {\n  direction: 'down',\n  type: 'button',\n  DropMenu: DropMenu.defaultProps\n};\nexport default buildModernHybridComponent(SplitButton, {\n  reducers\n});\nexport { SplitButton as SplitButtonDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","filterTypes","getFirst","buildModernHybridComponent","Button","ButtonGroupDumb","ButtonGroup","ChevronIcon","DropMenuDumb","DropMenu","reducers","cx","bind","bool","func","node","oneOf","shape","string","ButtonChild","_props","displayName","peek","description","propTypes","children","isDisabled","onClick","SplitButton","Component","constructor","optionIndex","event","buttonChildProps","map","props","handleButtonClick","clickedButtonProps","get","stopPropagation","buttonProps","onCollapse","has","render","className","kind","direction","type","size","dropMenuProps","passThroughs","isExpanded","primaryButtonProps","onSelect","handleSelect","Control","handleClick","hasOnlyIcon","isActive","every","buttonChildProp","index","Option","key","categories","madeFrom","defaultProps","SplitButtonDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SplitButton/SplitButton.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport {\n\tfilterTypes,\n\tgetFirst,\n\tStandardProps,\n} from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { IButtonProps, Button } from '../Button/Button';\nimport { ButtonGroupDumb as ButtonGroup } from '../ButtonGroup/ButtonGroup';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport {\n\tIDropMenuState,\n\tIDropMenuProps,\n\tDropMenuDumb as DropMenu,\n} from '../DropMenu/DropMenu';\nimport * as reducers from './SplitButton.reducers';\n\nconst cx = lucidClassNames.bind('&-SplitButton');\n\nconst { bool, func, node, oneOf, shape, string } = PropTypes;\n\n/** SplitButton Button Child Component */\nexport interface ISplitButtonButtonChildProps extends StandardProps {\n\t/** Disables selection of the \\`Button\\`. */\n\tisDisabled?: boolean;\n}\n\nconst ButtonChild = (_props: ISplitButtonButtonChildProps): null => null;\n\nButtonChild.displayName = 'SplitButton.ButtonChild';\nButtonChild.peek = {\n\tdescription: `\n\t\tOne of many potential \\`Button\\`s to render in this\n\t\t\\`SplitButton\\`. The first \\`Button\\` will be used as the Primary\n\t\tbutton, while all others will be rendered within the \\`DropMenu\\`\n\t\tbelow.\n\t`,\n};\nButtonChild.propTypes = {\n\t/**\n\t\tThe children to render within the \\`Button\\`.\n\t*/\n\tchildren: node,\n\t/**\n\t\tDisables selection of the \\`Button\\`.\n\t*/\n\tisDisabled: bool,\n\t/**\n\t\tCalled when the user clicks the \\`Button\\`.  Signature:\n\t\t\\`({ props, event }) => {}\\`\n\t*/\n\tonClick: func,\n};\n\n/** SplitButton */\nexport interface ISplitButtonProps extends StandardProps {\n\t/** Sets the direction the flyout menu will render relative to the SplitButton. */\n\tdirection: 'up' | 'down';\n\n\t/** Style variations of the SplitButton. */\n\tkind?: 'primary' | 'danger';\n\n\t/** Size variations of the SplitButton. */\n\tsize?: 'short' | 'small' | 'large';\n\n\t/** Form element type variations of SplitButton. Passed through to DOM Button. */\n\ttype?: string;\n\n\t/** *Child Element* - props pass through to the underlying DropMenu component */\n\tDropMenu: IDropMenuProps;\n}\n\nclass SplitButton extends React.Component<ISplitButtonProps> {\n\tstatic displayName = 'SplitButton';\n\tstatic Button = ButtonChild;\n\n\tstatic peek = {\n\t\tdescription: `\\`SplitButton\\` allows you to combine a single main \\`Button\\` together with a list of additional \\`Buttons\\` with actions which will be rendered within a \\`DropMenu\\`.`,\n\t\tcategories: ['controls', 'buttons'],\n\t\tmadeFrom: ['Button', 'DropMenu'],\n\t};\n\n\tstatic reducers = reducers;\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tObject of DropMenu props which are passed through to the underlying\n\t\t\tDropMenu component.\n\t\t*/\n\t\tDropMenu: shape(DropMenu.propTypes),\n\n\t\t/**\n\t\t\tAll children should be \\`ButtonGroup.Button\\`s and they support the same\n\t\t\tprops as \\`Button\\`s.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t\tValue is run through the \\`classnames\\` library.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tSets the direction the flyout menu will render relative to the\n\t\t\tSplitButton.\n\t\t*/\n\t\tdirection: oneOf(['up', 'down']),\n\n\t\t/**\n\t\t\tStyle variations of the SplitButton.\n\t\t*/\n\t\tkind: oneOf(['primary', 'danger']),\n\n\t\t/**\n\t\t\tSize variations of the SplitButton.\n\t\t*/\n\t\tsize: oneOf(['short', 'small', 'large']),\n\n\t\t/**\n\t\t\tForm element type variations of SplitButton. Passed through to DOM\n\t\t\tButton.\n\t\t*/\n\t\ttype: string,\n\t};\n\n\tstatic defaultProps = {\n\t\tdirection: 'down' as const,\n\t\ttype: 'button' as const,\n\t\tDropMenu: DropMenu.defaultProps,\n\t};\n\n\t// Handles select events in the DropMenu\n\thandleSelect = (\n\t\toptionIndex: number | null,\n\t\t{\n\t\t\tevent,\n\t\t}: {\n\t\t\tevent:\n\t\t\t\t| React.KeyboardEvent<Element>\n\t\t\t\t| React.MouseEvent<Element, MouseEvent>;\n\t\t}\n\t): void => {\n\t\tconst buttonChildProps = _.map(\n\t\t\tfilterTypes(this.props.children, SplitButton.Button),\n\t\t\t'props'\n\t\t);\n\t\tif (optionIndex !== null) {\n\t\t\tthis.handleButtonClick(buttonChildProps[optionIndex + 1], event);\n\t\t}\n\t};\n\n\t// Handles clicks on the Primary Button\n\thandleClick = ({\n\t\tevent,\n\t}: {\n\t\tevent: React.MouseEvent<HTMLButtonElement>;\n\t}): void => {\n\t\tconst clickedButtonProps = _.get(\n\t\t\tgetFirst(this.props, SplitButton.Button),\n\t\t\t'props'\n\t\t);\n\n\t\t// Stop propagation to prevent this `Click` from expanding the `DropMenu`\n\t\tevent.stopPropagation();\n\t\tthis.handleButtonClick(clickedButtonProps, event);\n\t};\n\n\t// Handles clicks within handleClick and handleSelect\n\thandleButtonClick = (buttonProps: IButtonProps, event: any): void => {\n\t\tconst {\n\t\t\tDropMenu: { onCollapse },\n\t\t} = this.props;\n\n\t\tonCollapse && onCollapse({ props: this.props.DropMenu, event });\n\n\t\tif (_.has(buttonProps, 'onClick')) {\n\t\t\tbuttonProps.onClick({ event, props: buttonProps });\n\t\t}\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tkind,\n\t\t\tdirection,\n\t\t\ttype,\n\t\t\tsize,\n\t\t\tDropMenu: dropMenuProps,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst { isExpanded } = dropMenuProps;\n\n\t\tconst [primaryButtonProps, ...buttonChildProps] = _.map(\n\t\t\tfilterTypes(this.props.children, SplitButton.Button),\n\t\t\t'props'\n\t\t);\n\n\t\treturn (\n\t\t\t<DropMenu\n\t\t\t\t{...dropMenuProps}\n\t\t\t\t{...omit(passThroughs, [\n\t\t\t\t\t'DropMenu',\n\t\t\t\t\t'children',\n\t\t\t\t\t'className',\n\t\t\t\t\t'direction',\n\t\t\t\t\t'kind',\n\t\t\t\t\t'size',\n\t\t\t\t\t'type',\n\t\t\t\t\t'initialState',\n\t\t\t\t\t'callbackId',\n\t\t\t\t])}\n\t\t\t\tdirection={direction}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\tonSelect={this.handleSelect}\n\t\t\t>\n\t\t\t\t<DropMenu.Control>\n\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t{...primaryButtonProps}\n\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t'&-Button-primary',\n\t\t\t\t\t\t\t\t_.get(primaryButtonProps, 'className')\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tkind={kind}\n\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName={cx('&-Button-drop')}\n\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\thasOnlyIcon={true}\n\t\t\t\t\t\t\tisActive={isExpanded}\n\t\t\t\t\t\t\tkind={kind}\n\t\t\t\t\t\t\tisDisabled={_.every(\n\t\t\t\t\t\t\t\t[primaryButtonProps, ...buttonChildProps],\n\t\t\t\t\t\t\t\t'isDisabled'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ChevronIcon\n\t\t\t\t\t\t\t\tclassName={cx('&-ChevronIcon')}\n\t\t\t\t\t\t\t\tdirection={direction}\n\t\t\t\t\t\t\t\tsize={10}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t</DropMenu.Control>\n\t\t\t\t{_.map(buttonChildProps, (buttonChildProp, index) => (\n\t\t\t\t\t<DropMenu.Option {...buttonChildProp} key={index} />\n\t\t\t\t))}\n\t\t\t</DropMenu>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tISplitButtonProps,\n\tIDropMenuState,\n\ttypeof SplitButton\n>(SplitButton as any, { reducers });\n\nexport { SplitButton as SplitButtonDumb };\n"]},"metadata":{},"sourceType":"module"}