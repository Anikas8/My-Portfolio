{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nconst cx = lucidClassNames.bind('&-ProgressBar');\nconst {\n  number,\n  string,\n  oneOf,\n  node\n} = PropTypes;\nconst Title = _props => null;\nTitle.displayName = 'ProgressBar.Title';\nTitle.propName = 'Title';\nTitle.peek = {\n  description: `Content displayed at the top of the \\`ProgressBar\\`.`\n};\nconst defaultProps = {\n  kind: 'default',\n  percentComplete: 0\n};\nexport const ProgressBar = props => {\n  const {\n    kind,\n    percentComplete,\n    className,\n    ...passThroughs\n  } = props;\n  const titleChildProp = _.get(getFirst(props, ProgressBar.Title), 'props', {});\n  return React.createElement(\"div\", {\n    ...passThroughs,\n    className: cx('&', className, {\n      '&-default': kind === 'default',\n      '&-success': kind === 'success',\n      '&-danger': kind === 'danger',\n      '&-info': kind === 'info',\n      '&-warning': kind === 'warning'\n    })\n  }, React.createElement(\"title\", {\n    ...titleChildProp,\n    className: cx('&-title')\n  }), React.createElement(\"div\", {\n    className: cx('&-bar-container')\n  }, React.createElement(\"div\", {\n    className: cx(`&-bar`, `&-bar-${kind}`, {\n      [`&-bar-${kind}-is-pulsed`]: percentComplete < 100\n    })\n  }), React.createElement(\"div\", {\n    className: cx(`&-bar-overlay`),\n    style: {\n      width: `${100 - percentComplete}%`\n    }\n  })));\n};\nProgressBar.defaultProps = defaultProps;\nProgressBar.Title = Title;\nProgressBar.displayName = 'ProgressBar';\nProgressBar.peek = {\n  description: `A \\`ProgressBar\\` is used to indicate progress in a procedure consisting of numerous discrete steps or continuous operation.`,\n  categories: ['communication']\n};\nProgressBar.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Applies a color style for the kind of ProgressBar.\n  */\n  kind: oneOf(['default', 'success', 'danger', 'info', 'warning']),\n  /**\n      Percentage ProgressBar is complete.\n  */\n  percentComplete: number,\n  children: node,\n  /*\n   *Child Element* - Title contents. Only one \\`Title\\` is used.\n   */\n  Title: node\n};\nexport default ProgressBar;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,QAAQ,QAAuB,4BAA4B;AAEpE,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,eAAe,CAAC;AAEhD,MAAM;EAAEC,MAAM;EAAEC,MAAM;EAAEC,KAAK;EAAEC;AAAI,CAAE,GAAGR,SAAS;AAoBjD,MAAMS,KAAK,GAAIC,MAAmB,IAAW,IAAI;AACjDD,KAAK,CAACE,WAAW,GAAG,mBAAmB;AACvCF,KAAK,CAACG,QAAQ,GAAG,OAAO;AACxBH,KAAK,CAACI,IAAI,GAAG;EACZC,WAAW,EAAE;CACb;AAED,MAAMC,YAAY,GAAG;EACpBC,IAAI,EAAE,SAAkB;EACxBC,eAAe,EAAE;CACjB;AAED,OAAO,MAAMC,WAAW,GAAIC,KAAwB,IAAwB;EAC3E,MAAM;IAAEH,IAAI;IAAEC,eAAe;IAAEG,SAAS;IAAE,GAAGC;EAAY,CAAE,GAAGF,KAAK;EAEnE,MAAMG,cAAc,GAAGxB,CAAC,CAACyB,GAAG,CAACrB,QAAQ,CAACiB,KAAK,EAAED,WAAW,CAACT,KAAK,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC;EAE7E,OACCV;IAAA,GACKsB,YAAY;IAChBD,SAAS,EAAEjB,EAAE,CAAC,GAAG,EAAEiB,SAAS,EAAE;MAC7B,WAAW,EAAEJ,IAAI,KAAK,SAAS;MAC/B,WAAW,EAAEA,IAAI,KAAK,SAAS;MAC/B,UAAU,EAAEA,IAAI,KAAK,QAAQ;MAC7B,QAAQ,EAAEA,IAAI,KAAK,MAAM;MACzB,WAAW,EAAEA,IAAI,KAAK;KACtB;EAAC,GAEFjB;IAAA,GAAWuB,cAAc;IAAEF,SAAS,EAAEjB,EAAE,CAAC,SAAS;EAAC,EAAI,EACvDJ;IAAKqB,SAAS,EAAEjB,EAAE,CAAC,iBAAiB;EAAC,GACpCJ;IACCqB,SAAS,EAAEjB,EAAE,CAAC,OAAO,EAAE,SAASa,IAAI,EAAE,EAAE;MACvC,CAAC,SAASA,IAAI,YAAY,GAAGC,eAAe,GAAG;KAC/C;EAAC,EACD,EACFlB;IACCqB,SAAS,EAAEjB,EAAE,CAAC,eAAe,CAAC;IAC9BqB,KAAK,EAAE;MAAEC,KAAK,EAAE,GAAG,GAAG,GAAGR,eAAe;IAAG;EAAE,EAC5C,CACG,CACD;AAER,CAAC;AAEDC,WAAW,CAACH,YAAY,GAAGA,YAAY;AACvCG,WAAW,CAACT,KAAK,GAAGA,KAAK;AACzBS,WAAW,CAACP,WAAW,GAAG,aAAa;AACvCO,WAAW,CAACL,IAAI,GAAG;EAClBC,WAAW,EAAE,8HAA8H;EAC3IY,UAAU,EAAE,CAAC,eAAe;CAC5B;AACDR,WAAW,CAACS,SAAS,GAAG;EACvB;;;EAGAP,SAAS,EAAEd,MAAM;EAEjB;;;EAGAU,IAAI,EAAET,KAAK,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;EAEhE;;;EAGAU,eAAe,EAAEZ,MAAM;EAEvBuB,QAAQ,EAAEpB,IAAI;EAEd;;;EAGAC,KAAK,EAAED;CACP;AAED,eAAeU,WAAW","names":["_","React","PropTypes","lucidClassNames","getFirst","cx","bind","number","string","oneOf","node","Title","_props","displayName","propName","peek","description","defaultProps","kind","percentComplete","ProgressBar","props","className","passThroughs","titleChildProp","get","style","width","categories","propTypes","children"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/ProgressBar/ProgressBar.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst, StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-ProgressBar');\n\nconst { number, string, oneOf, node } = PropTypes;\n\nexport interface ITitleProps extends StandardProps {}\n\nexport interface IProgressBarProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Applies a color style for the kind of ProgressBar. */\n\tkind: 'default' | 'success' | 'danger' | 'info' | 'warning';\n\n\t/** Percentage ProgressBar is complete. */\n\tpercentComplete: number;\n\n\t/** *Child Element* - Title contents. Only one \\`Title\\` is used. */\n\tTitle?: string | (React.ReactNode & { props: ITitleProps });\n}\n\nconst Title = (_props: ITitleProps): null => null;\nTitle.displayName = 'ProgressBar.Title';\nTitle.propName = 'Title';\nTitle.peek = {\n\tdescription: `Content displayed at the top of the \\`ProgressBar\\`.`,\n};\n\nconst defaultProps = {\n\tkind: 'default' as const,\n\tpercentComplete: 0,\n};\n\nexport const ProgressBar = (props: IProgressBarProps): React.ReactElement => {\n\tconst { kind, percentComplete, className, ...passThroughs } = props;\n\n\tconst titleChildProp = _.get(getFirst(props, ProgressBar.Title), 'props', {});\n\n\treturn (\n\t\t<div\n\t\t\t{...passThroughs}\n\t\t\tclassName={cx('&', className, {\n\t\t\t\t'&-default': kind === 'default',\n\t\t\t\t'&-success': kind === 'success',\n\t\t\t\t'&-danger': kind === 'danger',\n\t\t\t\t'&-info': kind === 'info',\n\t\t\t\t'&-warning': kind === 'warning',\n\t\t\t})}\n\t\t>\n\t\t\t<title {...titleChildProp} className={cx('&-title')} />\n\t\t\t<div className={cx('&-bar-container')}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={cx(`&-bar`, `&-bar-${kind}`, {\n\t\t\t\t\t\t[`&-bar-${kind}-is-pulsed`]: percentComplete < 100,\n\t\t\t\t\t})}\n\t\t\t\t/>\n\t\t\t\t<div\n\t\t\t\t\tclassName={cx(`&-bar-overlay`)}\n\t\t\t\t\tstyle={{ width: `${100 - percentComplete}%` }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nProgressBar.defaultProps = defaultProps;\nProgressBar.Title = Title;\nProgressBar.displayName = 'ProgressBar';\nProgressBar.peek = {\n\tdescription: `A \\`ProgressBar\\` is used to indicate progress in a procedure consisting of numerous discrete steps or continuous operation.`,\n\tcategories: ['communication'],\n};\nProgressBar.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tApplies a color style for the kind of ProgressBar.\n\t*/\n\tkind: oneOf(['default', 'success', 'danger', 'info', 'warning']),\n\n\t/**\n\t\tPercentage ProgressBar is complete.\n\t*/\n\tpercentComplete: number,\n\n\tchildren: node,\n\n\t/*\n\t *Child Element* - Title contents. Only one \\`Title\\` is used.\n\t */\n\tTitle: node,\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}