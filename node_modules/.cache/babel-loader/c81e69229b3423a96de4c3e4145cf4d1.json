{"ast":null,"code":"import _ from 'lodash';\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport DotsIcon from '../Icon/DotsIcon/DotsIcon';\nimport * as reducers from './DraggableList.reducers';\nimport { findTypes } from '../../util/component-types';\nconst cx = lucidClassNames.bind('&-DraggableList');\nconst {\n  bool,\n  func,\n  object,\n  number,\n  string\n} = PropTypes;\nconst DraggableListItem = _props => null;\nDraggableListItem.displayName = 'DraggableList.Item';\nDraggableListItem.peek = {\n  description: `\n\tRenders a \\`<div>\\` that acts as an item in the list\n\t`\n};\nDraggableListItem.propName = 'Item';\nDraggableListItem.propTypes = {\n  children: PropTypes.node /**/\n};\n/** Verifies its ok to drop an item given the current drag indexes and\n * provides a typeguard that dragIndex and dragOverIndex aren't undefined\n */\nconst isValidDropIndex = dragIndexes => {\n  const {\n    dragOverIndex,\n    dragIndex\n  } = dragIndexes;\n  return _.isNumber(dragOverIndex) && _.isNumber(dragIndex) && (dragOverIndex < dragIndex || dragOverIndex > dragIndex + 1);\n};\nconst DraggableList = props => {\n  const {\n    style,\n    className,\n    dragIndex,\n    dragOverIndex,\n    hasDragHandle = true,\n    onDragStart = _.noop,\n    onDragEnd = _.noop,\n    onDragOver = _.noop,\n    onDrop = _.noop,\n    ...passThroughs\n  } = props;\n  const lastItemEl = useRef(null);\n  //This object helps handle 'undefined' indexes in a way that makes typescript happy\n  const dragIndexes = {\n    dragIndex,\n    dragOverIndex\n  };\n  const handleDragStart = index => {\n    return event => {\n      const {\n        dataTransfer\n      } = event;\n      dataTransfer.effectAllowed = 'move';\n      dataTransfer.dropEffect = 'move';\n      dataTransfer.setData('drag', 'drag');\n      onDragStart(index, {\n        event,\n        props\n      });\n    };\n  };\n  const handleDragEnd = event => {\n    onDragEnd({\n      event,\n      props\n    });\n    if (isValidDropIndex(dragIndexes)) {\n      onDrop({\n        oldIndex: dragIndex,\n        newIndex: dragIndexes.dragOverIndex > dragIndexes.dragIndex ? dragIndexes.dragOverIndex - 1 : dragOverIndex\n      }, {\n        event,\n        props\n      });\n    }\n  };\n  const handleDragOver = index => {\n    return event => {\n      event.preventDefault();\n      if (dragOverIndex !== index) {\n        onDragOver(index, {\n          event,\n          props\n        });\n      }\n    };\n  };\n  const handleDragLeave = event => {\n    const childCount = findTypes(props, DraggableList.Item).length;\n    const currentLastItemEl = lastItemEl.current;\n    if (currentLastItemEl !== null) {\n      //@ts-ignore\n      const {\n        bottom\n      } = currentLastItemEl.getBoundingClientRect();\n      if (_.isFinite(dragIndex) && event.clientY > bottom) {\n        onDragOver(childCount, {\n          event,\n          props: props\n        });\n      }\n    }\n  };\n  const itemChildProps = _.map(findTypes(props, DraggableList.Item), 'props');\n  const dividerIndex = isValidDropIndex(dragIndexes) ? dragIndexes.dragOverIndex : -1;\n  return React.createElement(\"div\", {\n    ...passThroughs,\n    className: cx('&', {\n      '&-is-dragging': _.isNumber(dragIndex)\n    }, className),\n    style: style,\n    onDragLeave: handleDragLeave\n  }, _.map(itemChildProps, (itemChildProp, index) => {\n    return React.createElement(\"div\", {\n      key: index\n    }, React.createElement(\"hr\", {\n      className: cx('&-Divider', {\n        '&-Divider-is-visible': dividerIndex === index\n      })\n    }), React.createElement(\"div\", {\n      className: cx('&-Item', {\n        '&-Item-is-dragging': dragIndex === index,\n        '&-Item-is-drag-over': dragOverIndex === index\n      }, itemChildProp.className),\n      draggable: true,\n      onDragStart: handleDragStart(index),\n      onDragEnd: handleDragEnd,\n      onDragOver: handleDragOver(index)\n    }, React.createElement(\"div\", {\n      ...itemChildProp,\n      className: cx('&-Item-content'),\n      ref: index === itemChildProps.length - 1 ? lastItemEl : null\n    }), hasDragHandle && React.createElement(\"span\", {\n      className: cx('&-Item-handle')\n    }, React.createElement(DotsIcon, {\n      size: 8\n    }), React.createElement(DotsIcon, {\n      size: 8\n    }))));\n  }), React.createElement(\"hr\", {\n    key: 'divider',\n    className: cx('&-Divider', {\n      '&-Divider-is-visible': dividerIndex >= itemChildProps.length\n    })\n  }));\n};\nDraggableList.Item = DraggableListItem;\nDraggableList.displayName = 'DraggableList';\nDraggableList.peek = {\n  description: `A container that renders \\`divs\\` in a list that can be drag-and-drop reordered.`,\n  categories: ['controls']\n};\nDraggableList.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Render a drag handle on list items\n  */\n  hasDragHandle: bool,\n  /**\n      Index of the item the drag was started on\n  */\n  dragIndex: number,\n  /**\n      Index of the item the dragged item is hovered over\n  */\n  dragOverIndex: number,\n  /**\n      Called when the user starts to drag an item.\n      Signature: \\`(dragIndex, { event, props }) => {}\\`\n  */\n  onDragStart: func,\n  /**\n      Called when the user stops to dragging an item.\n      Signature: \\`({ event, props }) => {}\\`\n  */\n  onDragEnd: func,\n  /**\n      Called when the user drags an item over another item.\n      Signature: \\`(dragOverIndex, { event, props }) => {}\\`\n  */\n  onDragOver: func,\n  /**\n      Called when the user drops an item in the list\n      Signature: \\`({oldIndex, newIndex}, { event, props }) => {}\\`\n  */\n  onDrop: func,\n  /**\n      Props for DraggableList.Item\n  */\n  Item: PropTypes.any\n};\nexport default buildModernHybridComponent(DraggableList, {\n  reducers\n});\nexport { DraggableList as DraggableListDumb };","map":{"version":3,"mappings":"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","names":["_","React","useRef","PropTypes","lucidClassNames","buildModernHybridComponent","DotsIcon","reducers","findTypes","cx","bind","bool","func","object","number","string","DraggableListItem","_props","displayName","peek","description","propName","propTypes","children","node","isValidDropIndex","dragIndexes","dragOverIndex","dragIndex","isNumber","DraggableList","props","style","className","hasDragHandle","onDragStart","noop","onDragEnd","onDragOver","onDrop","passThroughs","lastItemEl","handleDragStart","index","event","dataTransfer","effectAllowed","dropEffect","setData","handleDragEnd","oldIndex","newIndex","handleDragOver","preventDefault","handleDragLeave","childCount","Item","length","currentLastItemEl","current","bottom","getBoundingClientRect","isFinite","clientY","itemChildProps","map","dividerIndex","onDragLeave","itemChildProp","key","draggable","ref","size","categories","any","DraggableListDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/DraggableList/DraggableList.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport DotsIcon from '../Icon/DotsIcon/DotsIcon';\nimport * as reducers from './DraggableList.reducers';\nimport { IDraggableListState } from './DraggableList.reducers';\n\nimport {\n\tfindTypes,\n\tStandardProps,\n\tOverwrite,\n} from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-DraggableList');\n\nconst { bool, func, object, number, string } = PropTypes;\n\nexport interface IDraggableListItemProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {}\n\nconst DraggableListItem = (_props: IDraggableListItemProps): null => null;\nDraggableListItem.displayName = 'DraggableList.Item';\nDraggableListItem.peek = {\n\tdescription: `\n\tRenders a \\`<div>\\` that acts as an item in the list\n\t`,\n};\nDraggableListItem.propName = 'Item';\nDraggableListItem.propTypes = {\n\tchildren: PropTypes.node /**/,\n};\n\ninterface IDraggableListPropsRaw extends StandardProps {\n\t/** Render a drag handle on list items */\n\thasDragHandle?: boolean;\n\t/** Index of the item the drag was started on */\n\tdragIndex?: number;\n\t/** Index of the item the dragged item is hovered over */\n\tdragOverIndex?: number;\n\t/** Called when the user starts to drag an item.\n\tSignature: \\`(dragIndex, { event, props }) => {}\\` */\n\tonDragStart?: (\n\t\tdragIndex: number,\n\t\t{ event, props }: { event: React.DragEvent; props: IDraggableListProps }\n\t) => void;\n\t/** Called when the user stops to dragging an item.\n\tSignature: \\`({ event, props }) => {}\\` */\n\tonDragEnd?: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.DragEvent;\n\t\tprops: IDraggableListProps;\n\t}) => void;\n\t/** Called when the user drags an item over another item.\n\tSignature: \\`(dragOverIndex, { event, props }) => {}\\` */\n\tonDragOver?: (\n\t\tdragOverIndex: number,\n\t\t{ event, props }: { event: React.DragEvent; props: IDraggableListProps }\n\t) => void;\n\t/** Called when the user drops an item in the list\n\tSignature: \\`({oldIndex, newIndex}, { event, props }) => {}\\` */\n\tonDrop?: (\n\t\t{ oldIndex, newIndex }: { newIndex: number; oldIndex: number },\n\t\t{ event, props }: { event: React.DragEvent; props: IDraggableListProps }\n\t) => void;\n\t/** Props for DraggableList.Item */\n\tItem?: React.ReactNode & { props: IDraggableListItemProps };\n}\n\nexport interface IDraggableListProps\n\textends Overwrite<\n\t\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>,\n\t\tIDraggableListPropsRaw\n\t> {}\n\ninterface IDraggableIndexes {\n\tdragIndex: number;\n\tdragOverIndex: number;\n}\n\n/** Verifies its ok to drop an item given the current drag indexes and\n * provides a typeguard that dragIndex and dragOverIndex aren't undefined\n */\nconst isValidDropIndex = (dragIndexes: {\n\tdragIndex?: number;\n\tdragOverIndex?: number;\n}): dragIndexes is IDraggableIndexes => {\n\tconst { dragOverIndex, dragIndex } = dragIndexes;\n\treturn (\n\t\t_.isNumber(dragOverIndex) &&\n\t\t_.isNumber(dragIndex) &&\n\t\t(dragOverIndex < dragIndex || dragOverIndex > dragIndex + 1)\n\t);\n};\n\nconst DraggableList = (props: IDraggableListProps) => {\n\tconst {\n\t\tstyle,\n\t\tclassName,\n\t\tdragIndex,\n\t\tdragOverIndex,\n\t\thasDragHandle = true,\n\t\tonDragStart = _.noop,\n\t\tonDragEnd = _.noop,\n\t\tonDragOver = _.noop,\n\t\tonDrop = _.noop,\n\t\t...passThroughs\n\t} = props;\n\n\tconst lastItemEl = useRef(null);\n\n\t//This object helps handle 'undefined' indexes in a way that makes typescript happy\n\tconst dragIndexes = { dragIndex, dragOverIndex };\n\n\tconst handleDragStart = (index: number) => {\n\t\treturn (event: React.DragEvent) => {\n\t\t\tconst { dataTransfer } = event;\n\t\t\tdataTransfer.effectAllowed = 'move';\n\t\t\tdataTransfer.dropEffect = 'move';\n\t\t\tdataTransfer.setData('drag', 'drag');\n\t\t\tonDragStart(index, { event, props });\n\t\t};\n\t};\n\n\tconst handleDragEnd = (event: React.DragEvent) => {\n\t\tonDragEnd({ event, props });\n\t\tif (isValidDropIndex(dragIndexes)) {\n\t\t\tonDrop(\n\t\t\t\t{\n\t\t\t\t\toldIndex: dragIndex,\n\t\t\t\t\tnewIndex:\n\t\t\t\t\t\tdragIndexes.dragOverIndex > dragIndexes.dragIndex\n\t\t\t\t\t\t\t? dragIndexes.dragOverIndex - 1\n\t\t\t\t\t\t\t: dragOverIndex,\n\t\t\t\t},\n\t\t\t\t{ event, props }\n\t\t\t);\n\t\t}\n\t};\n\n\tconst handleDragOver = (index: number) => {\n\t\treturn (event: React.DragEvent) => {\n\t\t\tevent.preventDefault();\n\t\t\tif (dragOverIndex !== index) {\n\t\t\t\tonDragOver(index, { event, props });\n\t\t\t}\n\t\t};\n\t};\n\n\tconst handleDragLeave = (event: React.DragEvent) => {\n\t\tconst childCount = findTypes(props, DraggableList.Item).length;\n\t\tconst currentLastItemEl = lastItemEl.current;\n\n\t\tif (currentLastItemEl !== null) {\n\t\t\t//@ts-ignore\n\t\t\tconst { bottom } = currentLastItemEl.getBoundingClientRect();\n\t\t\tif (_.isFinite(dragIndex) && event.clientY > bottom) {\n\t\t\t\tonDragOver(childCount, { event, props: props });\n\t\t\t}\n\t\t}\n\t};\n\n\tconst itemChildProps = _.map(findTypes(props, DraggableList.Item), 'props');\n\n\tconst dividerIndex = isValidDropIndex(dragIndexes)\n\t\t? dragIndexes.dragOverIndex\n\t\t: -1;\n\n\treturn (\n\t\t<div\n\t\t\t{...(passThroughs as any)}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-dragging': _.isNumber(dragIndex),\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tstyle={style}\n\t\t\tonDragLeave={handleDragLeave}\n\t\t>\n\t\t\t{_.map(itemChildProps, (itemChildProp, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t<hr\n\t\t\t\t\t\t\tclassName={cx('&-Divider', {\n\t\t\t\t\t\t\t\t'&-Divider-is-visible': dividerIndex === index,\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t'&-Item',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'&-Item-is-dragging': dragIndex === index,\n\t\t\t\t\t\t\t\t\t'&-Item-is-drag-over': dragOverIndex === index,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\titemChildProp.className\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\tonDragStart={handleDragStart(index)}\n\t\t\t\t\t\t\tonDragEnd={handleDragEnd}\n\t\t\t\t\t\t\tonDragOver={handleDragOver(index)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t{...itemChildProp}\n\t\t\t\t\t\t\t\tclassName={cx('&-Item-content')}\n\t\t\t\t\t\t\t\tref={index === itemChildProps.length - 1 ? lastItemEl : null}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{hasDragHandle && (\n\t\t\t\t\t\t\t\t<span className={cx('&-Item-handle')}>\n\t\t\t\t\t\t\t\t\t<DotsIcon size={8} />\n\t\t\t\t\t\t\t\t\t<DotsIcon size={8} />\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<hr\n\t\t\t\tkey='divider'\n\t\t\t\tclassName={cx('&-Divider', {\n\t\t\t\t\t'&-Divider-is-visible': dividerIndex >= itemChildProps.length,\n\t\t\t\t})}\n\t\t\t/>\n\t\t</div>\n\t);\n};\nDraggableList.Item = DraggableListItem;\nDraggableList.displayName = 'DraggableList';\nDraggableList.peek = {\n\tdescription: `A container that renders \\`divs\\` in a list that can be drag-and-drop reordered.`,\n\tcategories: ['controls'],\n};\nDraggableList.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tRender a drag handle on list items\n\t*/\n\thasDragHandle: bool,\n\n\t/**\n\t\tIndex of the item the drag was started on\n\t*/\n\tdragIndex: number,\n\n\t/**\n\t\tIndex of the item the dragged item is hovered over\n\t*/\n\tdragOverIndex: number,\n\n\t/**\n\t\tCalled when the user starts to drag an item.\n\t\tSignature: \\`(dragIndex, { event, props }) => {}\\`\n\t*/\n\tonDragStart: func,\n\n\t/**\n\t\tCalled when the user stops to dragging an item.\n\t\tSignature: \\`({ event, props }) => {}\\`\n\t*/\n\tonDragEnd: func,\n\n\t/**\n\t\tCalled when the user drags an item over another item.\n\t\tSignature: \\`(dragOverIndex, { event, props }) => {}\\`\n\t*/\n\tonDragOver: func,\n\n\t/**\n\t\tCalled when the user drops an item in the list\n\t\tSignature: \\`({oldIndex, newIndex}, { event, props }) => {}\\`\n\t*/\n\tonDrop: func,\n\n\t/**\n\t\tProps for DraggableList.Item\n\t*/\n\tItem: PropTypes.any,\n};\n\nexport default buildModernHybridComponent<\n\tIDraggableListProps,\n\tIDraggableListState,\n\ttypeof DraggableList\n>(DraggableList, { reducers });\n\nexport { DraggableList as DraggableListDumb };\n"]},"metadata":{},"sourceType":"module"}