{"ast":null,"code":"/* eslint-disable react/prop-types */\nimport _, { omit } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport DayPicker from 'react-day-picker';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst } from '../../util/component-types';\nimport * as reducers from './DateSelect.reducers';\nimport InfiniteSlidePanel from '../InfiniteSlidePanel/InfiniteSlidePanel';\nimport CalendarMonth from '../CalendarMonth/CalendarMonth';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nconst cx = lucidClassNames.bind('&-DateSelect');\nconst DateUtils = DayPicker.DateUtils;\nconst NAV_BUTTON_SIZE = 32;\nconst clampMonthsShown = monthsShown => _.clamp(monthsShown, 1, 6);\nconst {\n  any,\n  bool,\n  node,\n  func,\n  instanceOf,\n  number,\n  oneOf,\n  string\n} = PropTypes;\nconst DateSelectCalendarMonth = _props => null;\nDateSelectCalendarMonth.displayName = 'DateSelect.CalendarMonth';\nDateSelectCalendarMonth.peek = {\n  description: `Child component to pass thru props to underlying CalendarMonth.`\n};\nDateSelectCalendarMonth.propName = 'CalendarMonth';\nconst nonPassThroughs = ['className', 'monthsShown', 'calendarsRendered', 'offset', 'from', 'to', 'selectMode', 'initialMonth', 'selectedDays', 'disabledDays', 'showDivider', 'onSwipe', 'onPrev', 'onNext', 'onSelectDate', 'isFontSizeRelative', 'showCursorHighlight', 'useSlidePanel', 'CalendarMonth', 'callbackId', 'initialState'];\nclass DateSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.rootRef = null;\n    this.handleDayClick = (day, _ref, event) => {\n      let {\n        disabled\n      } = _ref;\n      const {\n        onSelectDate\n      } = this.props;\n      if (!disabled) {\n        onSelectDate(day, {\n          event,\n          props: this.props\n        });\n      }\n    };\n    this.handleDayMouseEnter = (day, _ref2) => {\n      let {\n        disabled\n      } = _ref2;\n      if (disabled) {\n        this.setState({\n          cursor: null\n        });\n      } else {\n        this.setState({\n          cursor: day\n        });\n      }\n    };\n    this.handleDayMouseLeave = () => {\n      this.setState({\n        cursor: null\n      });\n    };\n    this.handlePrev = _ref3 => {\n      let {\n        event\n      } = _ref3;\n      this.props.onPrev({\n        event,\n        props: this.props\n      });\n    };\n    this.handleNext = _ref4 => {\n      let {\n        event\n      } = _ref4;\n      this.props.onNext({\n        event,\n        props: this.props\n      });\n    };\n    this.componentDidMount = () => {\n      const {\n        isFontSizeRelative,\n        monthsShown: monthsShownRaw\n      } = this.props;\n      const monthsShown = clampMonthsShown(monthsShownRaw);\n      if (isFontSizeRelative && this.rootRef) {\n        const rootElement = this.rootRef;\n        const {\n          width,\n          height\n        } = rootElement.getBoundingClientRect();\n        const navButtonsWidth = NAV_BUTTON_SIZE * 2;\n        const oneMonthShownWidth = (width - navButtonsWidth) / monthsShown + navButtonsWidth;\n        const size = Math.sqrt(oneMonthShownWidth * height);\n        const relativeFontSize = Math.round(size / 24);\n        const relativeMinWidth = (width - navButtonsWidth) / monthsShown * 10.1075 / relativeFontSize * monthsShown + navButtonsWidth;\n        rootElement.style.fontSize = `${relativeFontSize}px`;\n        rootElement.style.minWidth = `${relativeMinWidth}px`;\n      }\n    };\n    this.renderCalendarMonth = (monthOffset, isRangeSameDay, selectedDays, _ref5) => {\n      let {\n        key,\n        initialMonth,\n        cursor,\n        from,\n        to,\n        disabledDays,\n        selectMode,\n        onDayClick,\n        showCursorHighlight,\n        onDayMouseEnter,\n        onDayMouseLeave,\n        ...rest\n      } = _ref5;\n      return React.createElement(CalendarMonth, {\n        key: key,\n        className: cx('&-CalendarMonth'),\n        monthOffset: monthOffset,\n        initialMonth: initialMonth,\n        cursor: cursor,\n        from: isRangeSameDay ? null : from,\n        to: isRangeSameDay ? null : to,\n        selectedDays: isRangeSameDay ? from : selectedDays,\n        disabledDays: disabledDays,\n        selectMode: selectMode,\n        onDayClick: onDayClick,\n        onDayMouseEnter: showCursorHighlight ? onDayMouseEnter : _.noop,\n        onDayMouseLeave: showCursorHighlight ? onDayMouseLeave : _.noop,\n        ...rest\n      });\n    };\n    this.initialMonth = new Date(this.props.initialMonth);\n    this.state = {\n      offset: 0,\n      cursor: null\n    };\n  }\n  render() {\n    const {\n      className,\n      monthsShown: monthsShownRaw,\n      calendarsRendered,\n      offset,\n      from,\n      to,\n      selectMode,\n      selectedDays,\n      disabledDays,\n      showDivider,\n      onSwipe,\n      showCursorHighlight,\n      useSlidePanel,\n      ...passThroughs\n    } = this.props;\n    const {\n      cursor\n    } = this.state;\n    //@ts-ignore\n    // For some reason react-day-pickers type doesn't allow `null` values but\n    // we seem to be passing them in and it seems to \"work\" at least in that\n    // the code doesn't blow up.\n    const isRangeSameDay = DateUtils.isSameDay(from, to);\n    const calendarMonthProps = _.get(getFirst(this.props, DateSelect.CalendarMonth), 'props');\n    const monthsShown = clampMonthsShown(monthsShownRaw);\n    /* istanbul ignore next */\n    return React.createElement(\"section\", {\n      ref: ref => this.rootRef = ref,\n      className: cx('&', className, {\n        '&-show-divider': showDivider\n      }),\n      style: {\n        minWidth: NAV_BUTTON_SIZE * 2 + 185 * monthsShown,\n        ...passThroughs.style\n      },\n      ...omit(passThroughs, nonPassThroughs)\n    }, React.createElement(\"div\", null, React.createElement(ChevronIcon, {\n      className: cx('&-chevron'),\n      size: NAV_BUTTON_SIZE,\n      isClickable: true,\n      direction: 'left',\n      onClick: this.handlePrev\n    })), useSlidePanel ? React.createElement(InfiniteSlidePanel, {\n      className: cx('&-InfiniteSlidePanel', '&-slidePanel'),\n      totalSlides: calendarsRendered,\n      slidesToShow: monthsShown,\n      offset: offset,\n      onSwipe: onSwipe\n    }, React.createElement(InfiniteSlidePanel.Slide, {\n      className: cx('&-slide')\n    }, slideOffset => React.createElement(\"div\", {\n      className: cx('&-slide-content')\n    }, this.renderCalendarMonth(offset + slideOffset - offset, isRangeSameDay, selectedDays, {\n      key: slideOffset,\n      initialMonth: this.initialMonth,\n      cursor,\n      from,\n      to,\n      disabledDays,\n      selectMode,\n      onDayClick: this.handleDayClick,\n      showCursorHighlight,\n      onDayMouseEnter: this.handleDayMouseEnter,\n      onDayMouseLeave: this.handleDayMouseLeave,\n      ...calendarMonthProps\n    })))) : React.createElement(\"div\", {\n      className: cx('&-slidePanel', '&-slidePanel-simple')\n    }, _.times(monthsShown, calendarIndex => React.createElement(\"div\", {\n      className: cx('&-slide', '&-slide-simple'),\n      key: calendarIndex\n    }, React.createElement(\"div\", {\n      className: cx('&-slide-content')\n    }, this.renderCalendarMonth(offset + calendarIndex, isRangeSameDay, selectedDays, {\n      initialMonth: this.initialMonth,\n      cursor,\n      from,\n      to,\n      disabledDays,\n      selectMode,\n      onDayClick: this.handleDayClick,\n      showCursorHighlight,\n      onDayMouseEnter: this.handleDayMouseEnter,\n      onDayMouseLeave: this.handleDayMouseLeave,\n      ...calendarMonthProps\n    }))))), React.createElement(\"div\", null, React.createElement(ChevronIcon, {\n      className: cx('&-chevron'),\n      size: NAV_BUTTON_SIZE,\n      isClickable: true,\n      direction: 'right',\n      onClick: this.handleNext\n    })));\n  }\n}\nDateSelect.displayName = 'DateSelect';\nDateSelect.CalendarMonth = DateSelectCalendarMonth;\nDateSelect.peek = {\n  description: `A date selection component capabaple of supporting single date and date range selections.`,\n  categories: ['controls', 'selectors'],\n  madeFrom: ['InfiniteSlidePanel', 'CalendarMonth']\n};\nDateSelect.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Number of calendar months to show. Min 1, suggested max 3. Actual max is 6.\n  */\n  monthsShown: number,\n  calendarsRendered: number /**\n                            Number of calendar months rendered at any given time (including those out\n                            of view).  In practice it should be at least (2 * monthsShown) + 2. It's\n                            got some issues that still need to be ironed out but it works.\n                            */,\n\n  /**\n      The offset of the leftmost month in view, where 0 is the\n      \\`initialMonth\\`.  Negative values will show previous months.\n  */\n  offset: number,\n  /**\n      Sets the start date in a date range.\n  */\n  from: instanceOf(Date),\n  /**\n      Sets the end date in a date range.\n  */\n  to: instanceOf(Date),\n  /**\n      The next selection that is expected. Primarily used to preview expected\n      ranges when the cursor is on a target date.\n  */\n  selectMode: oneOf(['day', 'from', 'to']),\n  /**\n      Sets first month in view on render. The 0 value for the \\`offset\\` prop\n      refers to this month.\n  */\n  initialMonth: instanceOf(Date),\n  /**\n      Sets selected days. Passed through to \\`CalendarMonth\\` ->\n      \\`react-day-picker\\`. Can be a \\`Date\\`, array of \\`Date\\`s or a function\n      with the signature \\`(date) => Boolean\\`.\n  */\n  selectedDays: any,\n  /**\n      Sets disabled days. Passed through to \\`CalendarMonth\\` ->\n      \\`react-day-picker\\`. Can be a \\`Date\\`, array of \\`Date\\`s or a function\n      with the signature \\`(date) => Boolean\\`.\n  */\n  disabledDays: any,\n  /**\n      Display a divider between each month.\n  */\n  showDivider: bool,\n  /**\n      Called when user's swipe would change the month \\`offset\\`. Callback\n      passes number of months swiped by the user (positive for forward swipes,\n      negative for backwards swipes).  Signature:\n      \\`(monthsSwiped, { event, props }) => {}\\`\n  */\n  onSwipe: func,\n  /**\n      Called when user clicks the previous button.  Signature:\n      \\`({ event, props }) => {}\\`\n  */\n  onPrev: func,\n  /**\n      Called when user clicks the next button.  Signature:\n      \\`({ event, props }) => {}\\`\n  */\n  onNext: func,\n  /**\n      Called when user selects a date. Callback passes a Date object as the\n      first argument.  Signature: \\`(selectedDate, { event, props }) => {}\\`\n  */\n  onSelectDate: func,\n  /**\n      Render initial font size relative to size of the component so it scales\n      with the calendar size.\n  */\n  isFontSizeRelative: bool,\n  /**\n      Highlight dates and ranges based on cursor position.\n  */\n  showCursorHighlight: bool,\n  /**\n      Render the calendar months in a touch-friendly slider with some being\n      rendered out-of-view. Set to \\`false\\` to disable this feature and gain a\n      performance boost.\n  */\n  useSlidePanel: bool,\n  /**\n      Child component to pass thru props to underlying CalendarMonth.\n  */\n  CalendarMonth: node\n};\nDateSelect.defaultProps = {\n  monthsShown: 1,\n  calendarsRendered: 6,\n  offset: 0,\n  from: null,\n  to: null,\n  initialMonth: new Date(),\n  selectedDays: () => false,\n  disabledDays: () => false,\n  showDivider: false,\n  onSwipe: _.noop,\n  onPrev: _.noop,\n  onNext: _.noop,\n  onSelectDate: _.noop,\n  isFontSizeRelative: false,\n  showCursorHighlight: true,\n  useSlidePanel: true\n};\nDateSelect.reducers = reducers;\nexport default buildModernHybridComponent(DateSelect, {\n  reducers\n});\nexport { DateSelect as DateSelectDumb };","map":{"version":3,"mappings":"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","names":["_","omit","PropTypes","React","DayPicker","buildModernHybridComponent","lucidClassNames","getFirst","reducers","InfiniteSlidePanel","CalendarMonth","ChevronIcon","cx","bind","DateUtils","NAV_BUTTON_SIZE","clampMonthsShown","monthsShown","clamp","any","bool","node","func","instanceOf","number","oneOf","string","DateSelectCalendarMonth","_props","displayName","peek","description","propName","nonPassThroughs","DateSelect","Component","constructor","props","day","event","disabled","onSelectDate","setState","cursor","onPrev","onNext","isFontSizeRelative","monthsShownRaw","rootRef","rootElement","width","height","getBoundingClientRect","navButtonsWidth","oneMonthShownWidth","size","Math","sqrt","relativeFontSize","round","relativeMinWidth","style","fontSize","minWidth","monthOffset","isRangeSameDay","selectedDays","key","initialMonth","from","to","disabledDays","selectMode","onDayClick","showCursorHighlight","onDayMouseEnter","onDayMouseLeave","rest","className","noop","Date","state","offset","render","calendarsRendered","showDivider","onSwipe","useSlidePanel","passThroughs","isSameDay","calendarMonthProps","get","ref","isClickable","direction","onClick","handlePrev","totalSlides","slidesToShow","Slide","slideOffset","renderCalendarMonth","handleDayClick","handleDayMouseEnter","handleDayMouseLeave","times","calendarIndex","handleNext","categories","madeFrom","DateSelectDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/DateSelect/DateSelect.tsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport _, { omit } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport DayPicker from 'react-day-picker';\n\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, getFirst } from '../../util/component-types';\nimport * as reducers from './DateSelect.reducers';\nimport InfiniteSlidePanel from '../InfiniteSlidePanel/InfiniteSlidePanel';\nimport { ISlidePanelProps } from '../SlidePanel/SlidePanel';\nimport CalendarMonth, { ICalendarProps } from '../CalendarMonth/CalendarMonth';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\n\nconst cx = lucidClassNames.bind('&-DateSelect');\nconst DateUtils = DayPicker.DateUtils;\nconst NAV_BUTTON_SIZE = 32;\nconst clampMonthsShown = (monthsShown: number) => _.clamp(monthsShown, 1, 6);\n\nconst { any, bool, node, func, instanceOf, number, oneOf, string } = PropTypes;\n\n/** Date Select Calendar Month */\nexport interface IDateSelectCalendarMonthProps extends StandardProps {\n\tmodifiers: any;\n\tdescription?: string;\n}\n\nconst DateSelectCalendarMonth = (_props: IDateSelectCalendarMonthProps): null =>\n\tnull;\nDateSelectCalendarMonth.displayName = 'DateSelect.CalendarMonth';\nDateSelectCalendarMonth.peek = {\n\tdescription: `Child component to pass thru props to underlying CalendarMonth.`,\n};\nDateSelectCalendarMonth.propName = 'CalendarMonth';\n\n/** Date Select */\nexport interface IDateSelectProps extends StandardProps {\n\t/** Number of calendar months to show. Min 1, suggested max 3. Actual max is 6. */\n\tmonthsShown: number;\n\n\t/** Number of calendar months rendered at any given time (including those out\n\t\t\tof view).  In practice it should be at least (2 * monthsShown) + 2. It's\n\t\t\tgot some issues that still need to be ironed out but it works. */\n\tcalendarsRendered: number;\n\n\t/** The offset of the leftmost month in view, where 0 is the\n\t\t\t\\`initialMonth\\`.  Negative values will show previous months. */\n\toffset: number;\n\n\t/** Sets the start date in a date range. */\n\tfrom: Date | null;\n\n\t/** Sets the end date in a date range. */\n\tto: Date | null;\n\n\t/** The next selection that is expected. Primarily used to preview expected\n\t\t\tranges when the cursor is on a target date. */\n\tselectMode?: 'day' | 'from' | 'to';\n\n\t/** Sets first month in view on render. The 0 value for the \\`offset\\` prop\n\t\t\trefers to this month. */\n\tinitialMonth: Date;\n\n\t/** Sets selected days. Passed through to \\`CalendarMonth\\` ->\n\t\t\t\\`react-day-picker\\`. */\n\tselectedDays: (date: Date) => boolean | Date | Date[];\n\n\t/** Sets disabled days. Passed through to \\`CalendarMonth\\` ->\n\t\t\t\\`react-day-picker\\`.*/\n\tdisabledDays: (date: Date) => boolean | Date | Date[];\n\n\t/** Display a divider between each month. */\n\tshowDivider: boolean;\n\n\t/** Called when user's swipe would change the month \\`offset\\`. Callback\n\t\t\tpasses number of months swiped by the user (positive for forward swipes,\n\t\t\tnegative for backwards swipes). */\n\tonSwipe: (\n\t\tmonthsSwipes: number,\n\t\t{ event, props }: { event: React.TouchEvent; props: ISlidePanelProps }\n\t) => void;\n\n\t/** Called when user clicks the previous button.   */\n\tonPrev: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IDateSelectProps;\n\t}) => void;\n\n\t/** Called when user clicks the next button */\n\tonNext: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IDateSelectProps;\n\t}) => void;\n\n\t/** Called when user selects a date. Callback passes a Date object as the\n\t\t\tfirst argument. */\n\tonSelectDate: (\n\t\tselectedDate: any,\n\t\t{ event, props }: { event: React.MouseEvent; props: IDateSelectProps }\n\t) => void;\n\n\t/** Render initial font size relative to size of the component so it scales\n\t\t\twith the calendar size. */\n\tisFontSizeRelative: boolean;\n\n\t/** Highlight dates and ranges based on cursor position. */\n\tshowCursorHighlight: boolean;\n\n\t/** Render the calendar months in a touch-friendly slider with some being\n\t\t\trendered out-of-view. Set to \\`false\\` to disable this feature and gain a\n\t\t\tperformance boost. */\n\tuseSlidePanel: boolean;\n}\n\nconst nonPassThroughs = [\n\t'className',\n\t'monthsShown',\n\t'calendarsRendered',\n\t'offset',\n\t'from',\n\t'to',\n\t'selectMode',\n\t'initialMonth',\n\t'selectedDays',\n\t'disabledDays',\n\t'showDivider',\n\t'onSwipe',\n\t'onPrev',\n\t'onNext',\n\t'onSelectDate',\n\t'isFontSizeRelative',\n\t'showCursorHighlight',\n\t'useSlidePanel',\n\t'CalendarMonth',\n\t'callbackId',\n\t'initialState',\n];\n\nexport interface IDateSelectState {\n\toffset: number;\n\tcursor: Date | null;\n}\n\nclass DateSelect extends React.Component<IDateSelectProps, IDateSelectState> {\n\tstatic displayName = 'DateSelect';\n\n\tstatic CalendarMonth = DateSelectCalendarMonth;\n\n\tprivate initialMonth: Date;\n\tprivate rootRef: HTMLElement | null = null;\n\n\tconstructor(props: IDateSelectProps) {\n\t\tsuper(props);\n\t\tthis.initialMonth = new Date(this.props.initialMonth);\n\t\tthis.state = {\n\t\t\toffset: 0,\n\t\t\tcursor: null,\n\t\t};\n\t}\n\n\tstatic peek = {\n\t\tdescription: `A date selection component capabaple of supporting single date and date range selections.`,\n\t\tcategories: ['controls', 'selectors'],\n\t\tmadeFrom: ['InfiniteSlidePanel', 'CalendarMonth'],\n\t};\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tNumber of calendar months to show. Min 1, suggested max 3. Actual max is 6.\n\t\t*/\n\t\tmonthsShown: number,\n\n\t\tcalendarsRendered: number /**\n\t\t\tNumber of calendar months rendered at any given time (including those out\n\t\t\tof view).  In practice it should be at least (2 * monthsShown) + 2. It's\n\t\t\tgot some issues that still need to be ironed out but it works.\n\t\t*/,\n\n\t\t/**\n\t\t\tThe offset of the leftmost month in view, where 0 is the\n\t\t\t\\`initialMonth\\`.  Negative values will show previous months.\n\t\t*/\n\t\toffset: number,\n\n\t\t/**\n\t\t\tSets the start date in a date range.\n\t\t*/\n\t\tfrom: instanceOf(Date),\n\n\t\t/**\n\t\t\tSets the end date in a date range.\n\t\t*/\n\t\tto: instanceOf(Date),\n\n\t\t/**\n\t\t\tThe next selection that is expected. Primarily used to preview expected\n\t\t\tranges when the cursor is on a target date.\n\t\t*/\n\t\tselectMode: oneOf(['day', 'from', 'to']),\n\n\t\t/**\n\t\t\tSets first month in view on render. The 0 value for the \\`offset\\` prop\n\t\t\trefers to this month.\n\t\t*/\n\t\tinitialMonth: instanceOf(Date),\n\n\t\t/**\n\t\t\tSets selected days. Passed through to \\`CalendarMonth\\` ->\n\t\t\t\\`react-day-picker\\`. Can be a \\`Date\\`, array of \\`Date\\`s or a function\n\t\t\twith the signature \\`(date) => Boolean\\`.\n\t\t*/\n\t\tselectedDays: any,\n\n\t\t/**\n\t\t\tSets disabled days. Passed through to \\`CalendarMonth\\` ->\n\t\t\t\\`react-day-picker\\`. Can be a \\`Date\\`, array of \\`Date\\`s or a function\n\t\t\twith the signature \\`(date) => Boolean\\`.\n\t\t*/\n\t\tdisabledDays: any,\n\n\t\t/**\n\t\t\tDisplay a divider between each month.\n\t\t*/\n\t\tshowDivider: bool,\n\n\t\t/**\n\t\t\tCalled when user's swipe would change the month \\`offset\\`. Callback\n\t\t\tpasses number of months swiped by the user (positive for forward swipes,\n\t\t\tnegative for backwards swipes).  Signature:\n\t\t\t\\`(monthsSwiped, { event, props }) => {}\\`\n\t\t*/\n\t\tonSwipe: func,\n\n\t\t/**\n\t\t\tCalled when user clicks the previous button.  Signature:\n\t\t\t\\`({ event, props }) => {}\\`\n\t\t*/\n\t\tonPrev: func,\n\n\t\t/**\n\t\t\tCalled when user clicks the next button.  Signature:\n\t\t\t\\`({ event, props }) => {}\\`\n\t\t*/\n\t\tonNext: func,\n\n\t\t/**\n\t\t\tCalled when user selects a date. Callback passes a Date object as the\n\t\t\tfirst argument.  Signature: \\`(selectedDate, { event, props }) => {}\\`\n\t\t*/\n\t\tonSelectDate: func,\n\n\t\t/**\n\t\t\tRender initial font size relative to size of the component so it scales\n\t\t\twith the calendar size.\n\t\t*/\n\t\tisFontSizeRelative: bool,\n\n\t\t/**\n\t\t\tHighlight dates and ranges based on cursor position.\n\t\t*/\n\t\tshowCursorHighlight: bool,\n\n\t\t/**\n\t\t\tRender the calendar months in a touch-friendly slider with some being\n\t\t\trendered out-of-view. Set to \\`false\\` to disable this feature and gain a\n\t\t\tperformance boost.\n\t\t*/\n\t\tuseSlidePanel: bool,\n\n\t\t/**\n\t\t\tChild component to pass thru props to underlying CalendarMonth.\n\t\t*/\n\t\tCalendarMonth: node,\n\t};\n\n\tstatic defaultProps = {\n\t\tmonthsShown: 1,\n\t\tcalendarsRendered: 6,\n\t\toffset: 0,\n\t\tfrom: null,\n\t\tto: null,\n\t\tinitialMonth: new Date(),\n\t\tselectedDays: () => false,\n\t\tdisabledDays: () => false,\n\t\tshowDivider: false,\n\t\tonSwipe: _.noop,\n\t\tonPrev: _.noop,\n\t\tonNext: _.noop,\n\t\tonSelectDate: _.noop,\n\t\tisFontSizeRelative: false,\n\t\tshowCursorHighlight: true,\n\t\tuseSlidePanel: true,\n\t};\n\n\tstatic reducers = reducers;\n\n\thandleDayClick = (\n\t\tday: Date,\n\t\t{ disabled }: { disabled: boolean },\n\t\tevent: React.MouseEvent\n\t): void => {\n\t\tconst { onSelectDate } = this.props;\n\n\t\tif (!disabled) {\n\t\t\tonSelectDate(day, { event, props: this.props });\n\t\t}\n\t};\n\n\thandleDayMouseEnter = (day: Date, { disabled }: { disabled: boolean }) => {\n\t\tif (disabled) {\n\t\t\tthis.setState({\n\t\t\t\tcursor: null,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tcursor: day,\n\t\t\t});\n\t\t}\n\t};\n\n\thandleDayMouseLeave = () => {\n\t\tthis.setState({\n\t\t\tcursor: null,\n\t\t});\n\t};\n\n\thandlePrev = ({ event }: { event: React.MouseEvent }) => {\n\t\tthis.props.onPrev({ event, props: this.props });\n\t};\n\n\thandleNext = ({ event }: { event: React.MouseEvent }) => {\n\t\tthis.props.onNext({ event, props: this.props });\n\t};\n\n\tcomponentDidMount = () => {\n\t\tconst { isFontSizeRelative, monthsShown: monthsShownRaw } = this.props;\n\n\t\tconst monthsShown = clampMonthsShown(monthsShownRaw);\n\n\t\tif (isFontSizeRelative && this.rootRef) {\n\t\t\tconst rootElement = this.rootRef;\n\t\t\tconst { width, height } = rootElement.getBoundingClientRect();\n\t\t\tconst navButtonsWidth = NAV_BUTTON_SIZE * 2;\n\t\t\tconst oneMonthShownWidth =\n\t\t\t\t(width - navButtonsWidth) / monthsShown + navButtonsWidth;\n\t\t\tconst size = Math.sqrt(oneMonthShownWidth * height);\n\t\t\tconst relativeFontSize = Math.round(size / 24);\n\t\t\tconst relativeMinWidth =\n\t\t\t\t((((width - navButtonsWidth) / monthsShown) * 10.1075) /\n\t\t\t\t\trelativeFontSize) *\n\t\t\t\t\tmonthsShown +\n\t\t\t\tnavButtonsWidth;\n\n\t\t\trootElement.style.fontSize = `${relativeFontSize}px`;\n\t\t\trootElement.style.minWidth = `${relativeMinWidth}px`;\n\t\t}\n\t};\n\n\trenderCalendarMonth = (\n\t\tmonthOffset: number,\n\t\tisRangeSameDay: boolean,\n\t\tselectedDays: (date: Date) => boolean | Date[] | Date,\n\t\t{\n\t\t\tkey,\n\t\t\tinitialMonth,\n\t\t\tcursor,\n\t\t\tfrom,\n\t\t\tto,\n\t\t\tdisabledDays,\n\t\t\tselectMode,\n\t\t\tonDayClick,\n\t\t\tshowCursorHighlight,\n\t\t\tonDayMouseEnter,\n\t\t\tonDayMouseLeave,\n\t\t\t...rest\n\t\t}: ICalendarProps\n\t) => {\n\t\treturn (\n\t\t\t<CalendarMonth\n\t\t\t\tkey={key}\n\t\t\t\tclassName={cx('&-CalendarMonth')}\n\t\t\t\tmonthOffset={monthOffset}\n\t\t\t\tinitialMonth={initialMonth}\n\t\t\t\tcursor={cursor}\n\t\t\t\tfrom={isRangeSameDay ? null : from}\n\t\t\t\tto={isRangeSameDay ? null : to}\n\t\t\t\tselectedDays={isRangeSameDay ? from : selectedDays}\n\t\t\t\tdisabledDays={disabledDays}\n\t\t\t\tselectMode={selectMode}\n\t\t\t\tonDayClick={onDayClick}\n\t\t\t\tonDayMouseEnter={showCursorHighlight ? onDayMouseEnter : _.noop}\n\t\t\t\tonDayMouseLeave={showCursorHighlight ? onDayMouseLeave : _.noop}\n\t\t\t\t{...(rest as Partial<ICalendarProps>)}\n\t\t\t/>\n\t\t);\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tmonthsShown: monthsShownRaw,\n\t\t\tcalendarsRendered,\n\t\t\toffset,\n\t\t\tfrom,\n\t\t\tto,\n\t\t\tselectMode,\n\t\t\tselectedDays,\n\t\t\tdisabledDays,\n\t\t\tshowDivider,\n\t\t\tonSwipe,\n\t\t\tshowCursorHighlight,\n\t\t\tuseSlidePanel,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst { cursor } = this.state;\n\n\t\t//@ts-ignore\n\t\t// For some reason react-day-pickers type doesn't allow `null` values but\n\t\t// we seem to be passing them in and it seems to \"work\" at least in that\n\t\t// the code doesn't blow up.\n\t\tconst isRangeSameDay = DateUtils.isSameDay(from, to);\n\n\t\tconst calendarMonthProps = _.get(\n\t\t\tgetFirst(this.props, DateSelect.CalendarMonth),\n\t\t\t'props'\n\t\t);\n\n\t\tconst monthsShown = clampMonthsShown(monthsShownRaw);\n\n\t\t/* istanbul ignore next */\n\t\treturn (\n\t\t\t<section\n\t\t\t\tref={(ref) => (this.rootRef = ref)}\n\t\t\t\tclassName={cx('&', className, {\n\t\t\t\t\t'&-show-divider': showDivider,\n\t\t\t\t})}\n\t\t\t\tstyle={{\n\t\t\t\t\tminWidth: NAV_BUTTON_SIZE * 2 + 185 * monthsShown,\n\t\t\t\t\t...passThroughs.style,\n\t\t\t\t}}\n\t\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<ChevronIcon\n\t\t\t\t\t\tclassName={cx('&-chevron')}\n\t\t\t\t\t\tsize={NAV_BUTTON_SIZE}\n\t\t\t\t\t\tisClickable\n\t\t\t\t\t\tdirection='left'\n\t\t\t\t\t\tonClick={this.handlePrev}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{useSlidePanel ? (\n\t\t\t\t\t<InfiniteSlidePanel\n\t\t\t\t\t\tclassName={cx('&-InfiniteSlidePanel', '&-slidePanel')}\n\t\t\t\t\t\ttotalSlides={calendarsRendered}\n\t\t\t\t\t\tslidesToShow={monthsShown}\n\t\t\t\t\t\toffset={offset}\n\t\t\t\t\t\tonSwipe={onSwipe}\n\t\t\t\t\t>\n\t\t\t\t\t\t<InfiniteSlidePanel.Slide className={cx('&-slide')}>\n\t\t\t\t\t\t\t{(slideOffset: number) => (\n\t\t\t\t\t\t\t\t<div className={cx('&-slide-content')}>\n\t\t\t\t\t\t\t\t\t{this.renderCalendarMonth(\n\t\t\t\t\t\t\t\t\t\toffset + slideOffset - offset,\n\t\t\t\t\t\t\t\t\t\tisRangeSameDay,\n\t\t\t\t\t\t\t\t\t\tselectedDays,\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkey: slideOffset,\n\t\t\t\t\t\t\t\t\t\t\tinitialMonth: this.initialMonth,\n\t\t\t\t\t\t\t\t\t\t\tcursor,\n\t\t\t\t\t\t\t\t\t\t\tfrom,\n\t\t\t\t\t\t\t\t\t\t\tto,\n\t\t\t\t\t\t\t\t\t\t\tdisabledDays,\n\t\t\t\t\t\t\t\t\t\t\tselectMode,\n\t\t\t\t\t\t\t\t\t\t\tonDayClick: this.handleDayClick,\n\t\t\t\t\t\t\t\t\t\t\tshowCursorHighlight,\n\t\t\t\t\t\t\t\t\t\t\tonDayMouseEnter: this.handleDayMouseEnter,\n\t\t\t\t\t\t\t\t\t\t\tonDayMouseLeave: this.handleDayMouseLeave,\n\t\t\t\t\t\t\t\t\t\t\t...calendarMonthProps,\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</InfiniteSlidePanel.Slide>\n\t\t\t\t\t</InfiniteSlidePanel>\n\t\t\t\t) : (\n\t\t\t\t\t<div className={cx('&-slidePanel', '&-slidePanel-simple')}>\n\t\t\t\t\t\t{_.times(monthsShown, (calendarIndex) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={cx('&-slide', '&-slide-simple')}\n\t\t\t\t\t\t\t\tkey={calendarIndex}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className={cx('&-slide-content')}>\n\t\t\t\t\t\t\t\t\t{this.renderCalendarMonth(\n\t\t\t\t\t\t\t\t\t\toffset + calendarIndex,\n\t\t\t\t\t\t\t\t\t\tisRangeSameDay,\n\t\t\t\t\t\t\t\t\t\tselectedDays,\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinitialMonth: this.initialMonth,\n\t\t\t\t\t\t\t\t\t\t\tcursor,\n\t\t\t\t\t\t\t\t\t\t\tfrom,\n\t\t\t\t\t\t\t\t\t\t\tto,\n\t\t\t\t\t\t\t\t\t\t\tdisabledDays,\n\t\t\t\t\t\t\t\t\t\t\tselectMode,\n\t\t\t\t\t\t\t\t\t\t\tonDayClick: this.handleDayClick,\n\t\t\t\t\t\t\t\t\t\t\tshowCursorHighlight,\n\t\t\t\t\t\t\t\t\t\t\tonDayMouseEnter: this.handleDayMouseEnter,\n\t\t\t\t\t\t\t\t\t\t\tonDayMouseLeave: this.handleDayMouseLeave,\n\t\t\t\t\t\t\t\t\t\t\t...calendarMonthProps,\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div>\n\t\t\t\t\t<ChevronIcon\n\t\t\t\t\t\tclassName={cx('&-chevron')}\n\t\t\t\t\t\tsize={NAV_BUTTON_SIZE}\n\t\t\t\t\t\tisClickable\n\t\t\t\t\t\tdirection='right'\n\t\t\t\t\t\tonClick={this.handleNext}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tIDateSelectProps,\n\tIDateSelectState,\n\ttypeof DateSelect\n>(DateSelect as any, { reducers });\nexport { DateSelect as DateSelectDumb };\n"]},"metadata":{},"sourceType":"module"}