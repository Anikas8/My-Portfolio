{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './VerticalListMenu.reducers';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport Collapsible from '../Collapsible/Collapsible';\nconst cx = lucidClassNames.bind('&-VerticalListMenu');\nconst {\n  func,\n  arrayOf,\n  bool,\n  string,\n  number,\n  node,\n  object,\n  shape\n} = PropTypes;\nconst Item = _props => null;\nItem.peek = {\n  description: `\n\t\tA child item that can contain content or another VerticalListMenu.\n\t`\n};\nItem.displayName = 'VerticalListMenu.Item';\nItem.propTypes = {\n  /**\n                  Show or hide the expand button. Should be \\`true\\` if you want to\n                  nest menus.\n              */\n  hasExpander: bool,\n  /**\n              Determines the visibility of nested menus.\n          */\n  isExpanded: bool,\n  /**\n              If \\`true\\` then a small bar on the left side of the item will be\n              shown indicating this item is selected.\n          */\n  isSelected: bool,\n  /**\n              Determines the visibility of the small bar on the left when the user\n              hovers over the item. This should indicate to the user that an item\n              is clickable.\n          */\n  isActionable: bool,\n  /**\n              Called when the user clicks the main body of the item.  Signature:\n              \\`(index, { event, props}) => {}\\`\n          */\n  onSelect: func,\n  /**\n              Called when the user clicks the expand button.  Signature:\n              \\`(index, { event, props}) => {}\\`\n          */\n  onToggle: func,\n  /**\n              Props that are passed through to the underlying Collapsible component\n              if the item has children.\n          */\n  Collapsible: shape(Collapsible.propTypes)\n};\nconst defaultProps = {\n  onSelect: _.noop,\n  onToggle: _.noop,\n  expandedIndices: [],\n  selectedIndices: []\n};\nclass VerticalListMenu extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleToggle = (index, itemChildProp, event) => {\n      const {\n        onToggle\n      } = itemChildProp;\n      // Prevent the user from also selecting the current item.\n      event.stopPropagation();\n      this.props.onToggle(index, {\n        event,\n        props: itemChildProp\n      });\n      if (onToggle) {\n        onToggle(index, {\n          event,\n          props: itemChildProp\n        });\n      }\n    };\n    this.handleClickItem = (index, itemChildProp, event) => {\n      const {\n        onSelect\n      } = itemChildProp;\n      this.props.onSelect(index, {\n        event,\n        props: itemChildProp\n      });\n      if (onSelect) {\n        onSelect(index, {\n          event,\n          props: itemChildProp\n        });\n      }\n    };\n  }\n  render() {\n    const {\n      children,\n      className,\n      style,\n      selectedIndices,\n      expandedIndices,\n      ...passThroughs\n    } = this.props;\n    const itemChildProps = _.map(findTypes(this.props, VerticalListMenu.Item), 'props');\n    return React.createElement(\"ul\", {\n      ...omit(passThroughs, ['children', 'className', 'style', 'selectedIndices', 'expandedIndices', 'onSelect', 'onToggle', 'initialState', 'callbackId']),\n      className: cx('&', className),\n      style: style\n    }, _.map(itemChildProps, (itemChildProp, index) => {\n      const {\n        hasExpander = false,\n        isActionable = true,\n        Collapsible: collapsibleProps = Collapsible.defaultProps\n      } = itemChildProp;\n      const itemChildrenAsArray = React.Children.toArray(itemChildProp.children);\n      // Was not able to get `child.Type` to work correctly, I suspect this\n      // is due to the way we wrap components with createLucidComponentDefinition\n      const listChildren = _.filter(itemChildrenAsArray, child => _.get(child, 'type.displayName', '') === 'VerticalListMenu');\n      const otherChildren = _.filter(itemChildrenAsArray, child => _.get(child, 'type.displayName', '') !== 'VerticalListMenu');\n      // If the prop is found on the child, it should override what was\n      // passed in at the top level for selectedIndices and expandedIndices\n      const actualIsExpanded = _.has(itemChildProp, 'isExpanded') ? _.get(itemChildProp, 'isExpanded', true) : _.includes(expandedIndices, index);\n      const actualIsSelected = _.has(itemChildProp, 'isSelected') ? _.get(itemChildProp, 'isSelected', false) : _.includes(selectedIndices, index);\n      return React.createElement(\"li\", {\n        key: index,\n        ...itemChildProp.passThroughs,\n        className: cx('&-Item', itemChildProp.className)\n      }, React.createElement(\"div\", {\n        className: cx('&-Item-content', {\n          '&-Item-content-is-selected': actualIsSelected,\n          '&-Item-content-is-not-selected': !actualIsSelected,\n          '&-Item-content-is-expanded': actualIsExpanded,\n          '&-Item-content-is-actionable': isActionable\n        }),\n        onClick: _.partial(this.handleClickItem, index, itemChildProp)\n      }, React.createElement(\"div\", {\n        className: cx('&-Item-content-body')\n      }, React.createElement(\"div\", {\n        className: cx('&-Item-content-text')\n      }, otherChildren), hasExpander ? React.createElement(\"div\", {\n        className: cx('&-Item-expander'),\n        onClick: _.partial(this.handleToggle, index, itemChildProp)\n      }, React.createElement(ChevronIcon, {\n        size: 12,\n        direction: actualIsExpanded ? 'up' : 'down'\n      })) : null)), !_.isEmpty(listChildren) ? React.createElement(Collapsible, {\n        ...collapsibleProps,\n        className: cx('&-Item-nested-list'),\n        isExpanded: actualIsExpanded\n      }, listChildren) : null);\n    }), children);\n  }\n}\nVerticalListMenu.displayName = 'VerticalListMenu';\nVerticalListMenu.Item = Item;\nVerticalListMenu.peek = {\n  description: `Used primarily for navigation lists. It supports nesting \\`VerticalListMenu\\`s below \\`VerticalListMenu.Item\\`s and animating expanding of those sub lists.  The default reducer behavior is for only one \\`VerticalListMenu.Item\\` to be selected at any given time; that default is easily overridden by handling \\`onSelect\\` yourself.`,\n  categories: ['navigation'],\n  madeFrom: ['ChevronIcon']\n};\nVerticalListMenu.reducers = reducers;\n// TODO: remove this once we move to only buildModernHybridComponent\nVerticalListMenu.definition = {\n  statics: {\n    Item,\n    reducers,\n    peek: {\n      description: `Used primarily for navigation lists. It supports nesting \\`VerticalListMenu\\`s below \\`VerticalListMenu.Item\\`s and animating expanding of those sub lists.  The default reducer behavior is for only one \\`VerticalListMenu.Item\\` to be selected at any given time; that is easily overridden by handling \\`onSelect\\` yourself.`,\n      categories: ['navigation'],\n      madeFrom: ['ChevronIcon']\n    }\n  }\n};\nVerticalListMenu.propTypes = {\n  /**\n      Regular \\`children\\` aren't really used in this component, but if you do\n      add them they will be placed at the end of the component. You should be\n      using \\`VerticalListMenu.Item\\`s instead of regular children.\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Indicates which of the \\`VerticalListMenu.Item\\` children are currently\n      selected. You can also put the \\`isSelected\\` prop directly on the\n      \\`VerticalListMenu.Item\\`s if you wish.\n  */\n  selectedIndices: arrayOf(number),\n  /**\n      Indicates which of the \\`VerticalListMenu.Item\\` children are currently\n      expanded. You can also put the \\`isExpanded\\` prop directly on the\n      \\`VerticalListMenu.Item\\`s if you wish.\n  */\n  expandedIndices: arrayOf(number),\n  /**\n      Callback fired when the user selects a \\`VerticalListMenu.Item\\`.\n      Signature: \\`(index, { event, props }) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Callback fired when the user expands or collapses an expandable\n      \\`VerticalListMenu.Item\\`.  Signature:\n      \\`(index, { event, props }) => {}\\`\n  */\n  onToggle: func\n};\nVerticalListMenu.defaultProps = defaultProps;\nexport default buildModernHybridComponent(VerticalListMenu, {\n  reducers\n});\nexport { VerticalListMenu as VerticalListMenuDumb };","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","findTypes","buildModernHybridComponent","reducers","ChevronIcon","Collapsible","cx","bind","func","arrayOf","bool","string","number","node","object","shape","Item","_props","peek","description","displayName","propTypes","hasExpander","isExpanded","isSelected","isActionable","onSelect","onToggle","defaultProps","noop","expandedIndices","selectedIndices","VerticalListMenu","Component","constructor","index","itemChildProp","event","stopPropagation","props","render","children","className","style","passThroughs","itemChildProps","map","collapsibleProps","itemChildrenAsArray","Children","toArray","listChildren","filter","child","get","otherChildren","actualIsExpanded","has","includes","actualIsSelected","key","onClick","partial","handleClickItem","handleToggle","size","direction","isEmpty","categories","madeFrom","statics","VerticalListMenuDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/VerticalListMenu/VerticalListMenu.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport {\n\tfindTypes,\n\tStandardProps,\n\tOverwrite,\n} from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './VerticalListMenu.reducers';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nimport Collapsible, { ICollapsibleProps } from '../Collapsible/Collapsible';\n\nconst cx = lucidClassNames.bind('&-VerticalListMenu');\n\nconst { func, arrayOf, bool, string, number, node, object, shape } = PropTypes;\n\nexport interface IVerticalListMenuPropsRaw extends StandardProps {\n\t/** Indicates which of the \\`VerticalListMenu.Item\\` children are currently\n\tselected. You can also put the \\`isSelected\\` prop directly on the\n\t\\`VerticalListMenu.Item\\`s if you wish. */\n\tselectedIndices: number[];\n\n\t/** Indicates which of the \\`VerticalListMenu.Item\\` children are currently\n\texpanded. You can also put the \\`isExpanded\\` prop directly on the\n\t\\`VerticalListMenu.Item\\`s if you wish. */\n\texpandedIndices: number[];\n\n\t/** Callback fired when the user selects a \\`VerticalListMenu.Item\\`.*/\n\tonSelect: (\n\t\tindex: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent;\n\t\t\tprops: IVerticalListMenuItemProps;\n\t\t}\n\t) => void;\n\n\t/** Callback fired when the user expands or collapses an expandable\n\t\\`VerticalListMenu.Item\\`. */\n\tonToggle: (\n\t\tindex: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent;\n\t\t\tprops: IVerticalListMenuItemProps;\n\t\t}\n\t) => void;\n}\n\nexport type IVerticalListMenuProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.HTMLAttributes<HTMLUListElement>,\n\t\tHTMLUListElement\n\t>,\n\tIVerticalListMenuPropsRaw\n>;\n\ninterface IVerticalListMenuItemPropsRaw extends StandardProps {\n\t/**\n\t * Show or hide the expand button. Should be \\`true\\` if you want to nest menus.\n\t */\n\thasExpander?: boolean;\n\n\t/**\n\t * Determines the visibility of nested menus.\n\t */\n\tisExpanded?: boolean;\n\n\t/**\n\t * If \\`true\\` then a small bar on the left side of the item will be\n\t * shown indicating this item is selected.\n\t */\n\tisSelected?: boolean;\n\n\t/**\n\t * Determines the visibility of the small bar on the left when the user\n\t * hovers over the item. This should indicate to the user that an item\n\t * is clickable.\n\t */\n\tisActionable?: boolean;\n\n\t/** Called when the user clicks the main body of the item. */\n\tonSelect?: (\n\t\tindex: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent;\n\t\t\tprops: IVerticalListMenuItemProps;\n\t\t}\n\t) => void;\n\n\t/** Called when the user clicks the expand button. */\n\tonToggle?: (\n\t\tindex: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent;\n\t\t\tprops: IVerticalListMenuItemProps;\n\t\t}\n\t) => void;\n\n\t/** Props that are passed through to the underlying Collapsible component\n\tif the item has children. */\n\tCollapsible?: Partial<ICollapsibleProps>;\n}\n\nexport type IVerticalListMenuItemProps = Overwrite<\n\tReact.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>,\n\tIVerticalListMenuItemPropsRaw\n>;\nconst Item = (_props: IVerticalListMenuItemProps): null => null;\nItem.peek = {\n\tdescription: `\n\t\tA child item that can contain content or another VerticalListMenu.\n\t`,\n};\nItem.displayName = 'VerticalListMenu.Item';\nItem.propTypes = {\n\t/**\n\t\t\t\t\tShow or hide the expand button. Should be \\`true\\` if you want to\n\t\t\t\t\tnest menus.\n\t\t\t\t*/\n\thasExpander: bool,\n\t/**\n\t\t\t\tDetermines the visibility of nested menus.\n\t\t\t*/\n\tisExpanded: bool,\n\n\t/**\n\t\t\t\tIf \\`true\\` then a small bar on the left side of the item will be\n\t\t\t\tshown indicating this item is selected.\n\t\t\t*/\n\tisSelected: bool,\n\n\t/**\n\t\t\t\tDetermines the visibility of the small bar on the left when the user\n\t\t\t\thovers over the item. This should indicate to the user that an item\n\t\t\t\tis clickable.\n\t\t\t*/\n\tisActionable: bool,\n\n\t/**\n\t\t\t\tCalled when the user clicks the main body of the item.  Signature:\n\t\t\t\t\\`(index, { event, props}) => {}\\`\n\t\t\t*/\n\tonSelect: func,\n\n\t/**\n\t\t\t\tCalled when the user clicks the expand button.  Signature:\n\t\t\t\t\\`(index, { event, props}) => {}\\`\n\t\t\t*/\n\tonToggle: func,\n\n\t/**\n\t\t\t\tProps that are passed through to the underlying Collapsible component\n\t\t\t\tif the item has children.\n\t\t\t*/\n\tCollapsible: shape(Collapsible.propTypes),\n};\n\nexport interface IVerticalListMenuState {\n\tselectedIndices?: number[];\n\texpandedIndices?: number[];\n}\n\nconst defaultProps = {\n\tonSelect: _.noop,\n\tonToggle: _.noop,\n\texpandedIndices: [],\n\tselectedIndices: [],\n};\n\nclass VerticalListMenu extends React.Component<\n\tIVerticalListMenuProps,\n\tIVerticalListMenuState\n> {\n\tstatic displayName = 'VerticalListMenu';\n\n\tstatic Item = Item;\n\n\tstatic peek = {\n\t\tdescription: `Used primarily for navigation lists. It supports nesting \\`VerticalListMenu\\`s below \\`VerticalListMenu.Item\\`s and animating expanding of those sub lists.  The default reducer behavior is for only one \\`VerticalListMenu.Item\\` to be selected at any given time; that default is easily overridden by handling \\`onSelect\\` yourself.`,\n\t\tcategories: ['navigation'],\n\t\tmadeFrom: ['ChevronIcon'],\n\t};\n\n\tstatic reducers = reducers;\n\n\t// TODO: remove this once we move to only buildModernHybridComponent\n\tstatic definition = {\n\t\tstatics: {\n\t\t\tItem,\n\t\t\treducers,\n\t\t\tpeek: {\n\t\t\t\tdescription: `Used primarily for navigation lists. It supports nesting \\`VerticalListMenu\\`s below \\`VerticalListMenu.Item\\`s and animating expanding of those sub lists.  The default reducer behavior is for only one \\`VerticalListMenu.Item\\` to be selected at any given time; that is easily overridden by handling \\`onSelect\\` yourself.`,\n\t\t\t\tcategories: ['navigation'],\n\t\t\t\tmadeFrom: ['ChevronIcon'],\n\t\t\t},\n\t\t},\n\t};\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tRegular \\`children\\` aren't really used in this component, but if you do\n\t\t\tadd them they will be placed at the end of the component. You should be\n\t\t\tusing \\`VerticalListMenu.Item\\`s instead of regular children.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tPassed through to the root element.\n\t\t*/\n\t\tstyle: object,\n\n\t\t/**\n\t\t\tIndicates which of the \\`VerticalListMenu.Item\\` children are currently\n\t\t\tselected. You can also put the \\`isSelected\\` prop directly on the\n\t\t\t\\`VerticalListMenu.Item\\`s if you wish.\n\t\t*/\n\t\tselectedIndices: arrayOf(number),\n\n\t\t/**\n\t\t\tIndicates which of the \\`VerticalListMenu.Item\\` children are currently\n\t\t\texpanded. You can also put the \\`isExpanded\\` prop directly on the\n\t\t\t\\`VerticalListMenu.Item\\`s if you wish.\n\t\t*/\n\t\texpandedIndices: arrayOf(number),\n\n\t\t/**\n\t\t\tCallback fired when the user selects a \\`VerticalListMenu.Item\\`.\n\t\t\tSignature: \\`(index, { event, props }) => {}\\`\n\t\t*/\n\t\tonSelect: func,\n\n\t\t/**\n\t\t\tCallback fired when the user expands or collapses an expandable\n\t\t\t\\`VerticalListMenu.Item\\`.  Signature:\n\t\t\t\\`(index, { event, props }) => {}\\`\n\t\t*/\n\t\tonToggle: func,\n\t};\n\n\tstatic defaultProps = defaultProps;\n\n\trender() {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\tstyle,\n\t\t\tselectedIndices,\n\t\t\texpandedIndices,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst itemChildProps = _.map(\n\t\t\tfindTypes(this.props, VerticalListMenu.Item),\n\t\t\t'props'\n\t\t);\n\n\t\treturn (\n\t\t\t<ul\n\t\t\t\t{...(omit(passThroughs, [\n\t\t\t\t\t'children',\n\t\t\t\t\t'className',\n\t\t\t\t\t'style',\n\t\t\t\t\t'selectedIndices',\n\t\t\t\t\t'expandedIndices',\n\t\t\t\t\t'onSelect',\n\t\t\t\t\t'onToggle',\n\t\t\t\t\t'initialState',\n\t\t\t\t\t'callbackId',\n\t\t\t\t]) as any)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\tstyle={style}\n\t\t\t>\n\t\t\t\t{_.map(itemChildProps, (itemChildProp, index) => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\thasExpander = false,\n\t\t\t\t\t\tisActionable = true,\n\t\t\t\t\t\tCollapsible: collapsibleProps = Collapsible.defaultProps,\n\t\t\t\t\t} = itemChildProp;\n\n\t\t\t\t\tconst itemChildrenAsArray = React.Children.toArray(\n\t\t\t\t\t\titemChildProp.children\n\t\t\t\t\t);\n\n\t\t\t\t\t// Was not able to get `child.Type` to work correctly, I suspect this\n\t\t\t\t\t// is due to the way we wrap components with createLucidComponentDefinition\n\t\t\t\t\tconst listChildren = _.filter(\n\t\t\t\t\t\titemChildrenAsArray,\n\t\t\t\t\t\t(child) =>\n\t\t\t\t\t\t\t_.get(child, 'type.displayName', '') === 'VerticalListMenu'\n\t\t\t\t\t);\n\t\t\t\t\tconst otherChildren = _.filter(\n\t\t\t\t\t\titemChildrenAsArray,\n\t\t\t\t\t\t(child) =>\n\t\t\t\t\t\t\t_.get(child, 'type.displayName', '') !== 'VerticalListMenu'\n\t\t\t\t\t);\n\n\t\t\t\t\t// If the prop is found on the child, it should override what was\n\t\t\t\t\t// passed in at the top level for selectedIndices and expandedIndices\n\t\t\t\t\tconst actualIsExpanded = _.has(itemChildProp, 'isExpanded')\n\t\t\t\t\t\t? _.get(itemChildProp, 'isExpanded', true)\n\t\t\t\t\t\t: _.includes(expandedIndices, index);\n\n\t\t\t\t\tconst actualIsSelected = _.has(itemChildProp, 'isSelected')\n\t\t\t\t\t\t? _.get(itemChildProp, 'isSelected', false)\n\t\t\t\t\t\t: _.includes(selectedIndices, index);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t{...itemChildProp.passThroughs}\n\t\t\t\t\t\t\tclassName={cx('&-Item', itemChildProp.className)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={cx('&-Item-content', {\n\t\t\t\t\t\t\t\t\t'&-Item-content-is-selected': actualIsSelected,\n\t\t\t\t\t\t\t\t\t'&-Item-content-is-not-selected': !actualIsSelected,\n\t\t\t\t\t\t\t\t\t'&-Item-content-is-expanded': actualIsExpanded,\n\t\t\t\t\t\t\t\t\t'&-Item-content-is-actionable': isActionable,\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\tonClick={_.partial(this.handleClickItem, index, itemChildProp)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className={cx('&-Item-content-body')}>\n\t\t\t\t\t\t\t\t\t<div className={cx('&-Item-content-text')}>\n\t\t\t\t\t\t\t\t\t\t{otherChildren}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{hasExpander ? (\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tclassName={cx('&-Item-expander')}\n\t\t\t\t\t\t\t\t\t\t\tonClick={_.partial(\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleToggle,\n\t\t\t\t\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\t\t\t\t\titemChildProp\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<ChevronIcon\n\t\t\t\t\t\t\t\t\t\t\t\tsize={12}\n\t\t\t\t\t\t\t\t\t\t\t\tdirection={actualIsExpanded ? 'up' : 'down'}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{!_.isEmpty(listChildren) ? (\n\t\t\t\t\t\t\t\t<Collapsible\n\t\t\t\t\t\t\t\t\t{...collapsibleProps}\n\t\t\t\t\t\t\t\t\tclassName={cx('&-Item-nested-list')}\n\t\t\t\t\t\t\t\t\tisExpanded={actualIsExpanded}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{listChildren}\n\t\t\t\t\t\t\t\t</Collapsible>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t{children}\n\t\t\t</ul>\n\t\t);\n\t}\n\n\thandleToggle = (\n\t\tindex: number,\n\t\titemChildProp: IVerticalListMenuItemProps,\n\t\tevent: React.MouseEvent\n\t) => {\n\t\tconst { onToggle } = itemChildProp;\n\n\t\t// Prevent the user from also selecting the current item.\n\t\tevent.stopPropagation();\n\n\t\tthis.props.onToggle(index, { event, props: itemChildProp });\n\n\t\tif (onToggle) {\n\t\t\tonToggle(index, { event, props: itemChildProp });\n\t\t}\n\t};\n\n\thandleClickItem = (\n\t\tindex: number,\n\t\titemChildProp: IVerticalListMenuItemProps,\n\t\tevent: React.MouseEvent\n\t) => {\n\t\tconst { onSelect } = itemChildProp;\n\n\t\tthis.props.onSelect(index, { event, props: itemChildProp });\n\n\t\tif (onSelect) {\n\t\t\tonSelect(index, { event, props: itemChildProp });\n\t\t}\n\t};\n}\n\nexport default buildModernHybridComponent<\n\tIVerticalListMenuProps,\n\tIVerticalListMenuState,\n\ttypeof VerticalListMenu\n>(VerticalListMenu as any, { reducers });\n\nexport { VerticalListMenu as VerticalListMenuDumb };\n"]},"metadata":{},"sourceType":"module"}