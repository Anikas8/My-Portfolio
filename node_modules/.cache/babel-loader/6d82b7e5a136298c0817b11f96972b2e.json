{"ast":null,"code":"import React from 'react';\nimport ReactPlaceholder from 'react-placeholder';\nimport _ from 'lodash';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport LoadingIndicator from '../LoadingIndicator/LoadingIndicator';\nimport Panel from '../Panel/Panel';\nconst animationStyle = lucidClassNames.bind('&-LoadingSkeleton-animatedSkeleton');\nexport const LoadingSkeleton = props => {\n  const {\n    Skeleton,\n    isLoading,\n    children,\n    className,\n    header,\n    style,\n    width = undefined,\n    height = undefined,\n    isPanel = false,\n    hasOverlay = false,\n    overlayKind = 'light',\n    numRows = 1,\n    numColumns = 1,\n    marginTop = 2,\n    marginBottom = 2,\n    marginRight = 2,\n    marginLeft = 2\n  } = {\n    ...props\n  };\n  if (!isLoading) {\n    return React.createElement(\"div\", {\n      className: className,\n      \"data-test-id\": 'loadingSkeleton-Children'\n    }, children);\n  }\n  if (!Skeleton) {\n    return React.createElement(LoadingIndicator, {\n      \"data-test-id\": 'loadingSkeleton-LoadingIndicator',\n      isLoading: true,\n      isVisible: true,\n      hasOverlay: hasOverlay,\n      overlayKind: overlayKind\n    });\n  }\n  const skeletonProps = {\n    ...style,\n    width,\n    height,\n    display: 'flex'\n  };\n  const skeletonPlaceholder = React.createElement(Skeleton, {\n    \"data-test-id\": 'loadingSkeleton_Skeleton',\n    ...skeletonProps\n  });\n  const matrix = _.times(numColumns, column => React.createElement(\"div\", {\n    key: `column${column}`,\n    style: {\n      display: 'inline-block',\n      marginRight: marginRight,\n      marginLeft: marginLeft\n    },\n    \"data-test-id\": 'loadingSkeleton-SkeletonColumn'\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'inline-block'\n    }\n  }, _.times(numRows, row => React.createElement(\"div\", {\n    className: animationStyle('&', className),\n    \"data-test-id\": 'loadingSkeleton-ReactPlaceholder',\n    key: `row${row}`,\n    style: {\n      marginTop: marginTop,\n      marginBottom: marginBottom\n    }\n  }, React.createElement(\"div\", null, header ? React.createElement(\"div\", {\n    \"data-test-id\": 'loadingSkeleton-SkeletonHeader',\n    style: {\n      marginBottom: 2\n    }\n  }, header) : null, React.createElement(ReactPlaceholder, {\n    showLoadingAnimation: true,\n    ready: !isLoading,\n    customPlaceholder: skeletonPlaceholder\n  })))))));\n  const skeletonMatrix = React.createElement(\"div\", null, matrix);\n  return isPanel ? React.createElement(Panel, {\n    \"data-test-id\": 'loadingSkeleton-Panel'\n  }, skeletonMatrix) : skeletonMatrix;\n};\nexport default LoadingSkeleton;","map":{"version":3,"mappings":"AAAA,OAAOA,KAA2C,MAAM,OAAO;AAC/D,OAAOC,gBAAgB,MAAM,mBAAmB;AAEhD,OAAOC,CAAC,MAAM,QAAQ;AAEtB,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,OAAOC,KAAK,MAAM,gBAAgB;AAsClC,MAAMC,cAAc,GAAGH,eAAe,CAACI,IAAI,CAC1C,oCAAoC,CACpC;AAED,OAAO,MAAMC,eAAe,GAC3BC,KAAK,IACF;EACH,MAAM;IACLC,QAAQ;IACRC,SAAS;IACTC,QAAQ;IACRC,SAAS;IACTC,MAAM;IACNC,KAAK;IACLC,KAAK,GAAGC,SAAS;IACjBC,MAAM,GAAGD,SAAS;IAClBE,OAAO,GAAG,KAAK;IACfC,UAAU,GAAG,KAAK;IAClBC,WAAW,GAAG,OAAO;IACrBC,OAAO,GAAG,CAAC;IACXC,UAAU,GAAG,CAAC;IACdC,SAAS,GAAG,CAAC;IACbC,YAAY,GAAG,CAAC;IAChBC,WAAW,GAAG,CAAC;IACfC,UAAU,GAAG;EAAC,CACd,GAAG;IAAE,GAAGlB;EAAK,CAAE;EAEhB,IAAI,CAACE,SAAS,EAAE;IACf,OACCX;MAAKa,SAAS,EAAEA,SAAS;MAAA,gBAAe;IAA0B,GAChED,QAAQ,CACJ;;EAIR,IAAI,CAACF,QAAQ,EAAE;IACd,OACCV,oBAACI,gBAAgB;MAAA,gBACH,kCAAkC;MAC/CO,SAAS;MACTiB,SAAS;MACTR,UAAU,EAAEA,UAAU;MACtBC,WAAW,EAAEA;IAAW,EACvB;;EAIJ,MAAMQ,aAAa,GAAG;IAAE,GAAGd,KAAK;IAAEC,KAAK;IAAEE,MAAM;IAAEY,OAAO,EAAE;EAAM,CAAE;EAClE,MAAMC,mBAAmB,GACxB/B,oBAACU,QAAQ;IAAA,gBAAc,0BAA0B;IAAA,GAAKmB;EAAa,EACnE;EAED,MAAMG,MAAM,GAAG9B,CAAC,CAAC+B,KAAK,CAACV,UAAU,EAAGW,MAAM,IACzClC;IACCmC,GAAG,EAAE,SAASD,MAAM,EAAE;IACtBnB,KAAK,EAAE;MACNe,OAAO,EAAE,cAAc;MACvBJ,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA;KACZ;IAAA,gBACY;EAAgC,GAE7C3B;IACCe,KAAK,EAAE;MACNe,OAAO,EAAE;;EACT,GAEA5B,CAAC,CAAC+B,KAAK,CAACX,OAAO,EAAGc,GAAG,IACrBpC;IACCa,SAAS,EAAEP,cAAc,CAAC,GAAG,EAAEO,SAAS,CAAC;IAAA,gBAC5B,kCAAkC;IAC/CsB,GAAG,EAAE,MAAMC,GAAG,EAAE;IAChBrB,KAAK,EAAE;MACNS,SAAS,EAAEA,SAAS;MACpBC,YAAY,EAAEA;;EACd,GAEDzB,iCACEc,MAAM,GACNd;IAAA,gBACc,gCAAgC;IAC7Ce,KAAK,EAAE;MACNU,YAAY,EAAE;;EACd,GAEAX,MAAM,CACF,GACH,IAAI,EACRd,oBAACC,gBAAgB;IAChBoC,oBAAoB,EAAE,IAAI;IAC1BC,KAAK,EAAE,CAAC3B,SAAS;IACjB4B,iBAAiB,EAAER;EAAmB,EAGpB,CACd,CAEP,CAAC,CACG,CAEP,CAAC;EAEF,MAAMS,cAAc,GAAGxC,iCAAMgC,MAAM,CAAO;EAE1C,OAAOb,OAAO,GACbnB,oBAACK,KAAK;IAAA,gBAAc;EAAuB,GAAEmC,cAAc,CAAS,GAEpEA,cACA;AACF,CAAC;AAED,eAAehC,eAAe","names":["React","ReactPlaceholder","_","lucidClassNames","LoadingIndicator","Panel","animationStyle","bind","LoadingSkeleton","props","Skeleton","isLoading","children","className","header","style","width","undefined","height","isPanel","hasOverlay","overlayKind","numRows","numColumns","marginTop","marginBottom","marginRight","marginLeft","isVisible","skeletonProps","display","skeletonPlaceholder","matrix","times","column","key","row","showLoadingAnimation","ready","customPlaceholder","skeletonMatrix"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/LoadingSkeletons/LoadingSkeleton.tsx"],"sourcesContent":["import React, { CSSProperties, FunctionComponent } from 'react';\nimport ReactPlaceholder from 'react-placeholder';\nimport CSS from 'csstype';\nimport _ from 'lodash';\nimport { StandardProps } from '../../util/component-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport LoadingIndicator from '../LoadingIndicator/LoadingIndicator';\nimport Panel from '../Panel/Panel';\n\nexport interface IStandardSkeleton extends StandardProps {\n\tclassName?: string;\n\t/** LoadingSkeleton height. */\n\theight?: number | string;\n\t/** LoadingSkeleton width. */\n\twidth?: number | string;\n}\n\nexport interface ILoadingSkeletonProps extends IStandardSkeleton {\n\t/** Allows custom skeleton to be injected. */\n\tSkeleton?: FunctionComponent<IStandardSkeleton>;\n\t/** Controls the visibility of the `LoadingSkeleton`. */\n\tisLoading: boolean;\n\t/** Children controls wrapped by skeleton. */\n\tchildren?: React.ReactNode;\n\t/** Displays LoadingSkeleton custom header. */\n\theader?: React.ReactNode;\n\n\tstyle?: CSSProperties;\n\t/** Controls if LoadingSkeleton is wrapped in Panel. */\n\tisPanel?: boolean;\n\t/** Controls if built-in LoadingIndicator has overlay. Does not apply to other skeletons */\n\thasOverlay?: boolean;\n\t/** Style variations for the overlay behind the loading indicator for built-in LoadingIndicator. Does not apply to other skeletons */\n\toverlayKind?: 'light' | 'dark';\n\t/** Controls if LoadingSkeleton replicated in number of rows. Default = 1. */\n\tnumRows?: number;\n\t/** Controls if LoadingSkeleton replicated in number of columns. Default = 1. */\n\tnumColumns?: number;\n\n\tmarginBottom?: string | number | undefined;\n\tmarginTop?: string | number | undefined;\n\tmarginLeft?: string | number | undefined;\n\tmarginRight?: string | number | undefined;\n}\n\nconst animationStyle = lucidClassNames.bind(\n\t'&-LoadingSkeleton-animatedSkeleton'\n);\n\nexport const LoadingSkeleton: FunctionComponent<ILoadingSkeletonProps> = (\n\tprops\n) => {\n\tconst {\n\t\tSkeleton,\n\t\tisLoading,\n\t\tchildren,\n\t\tclassName,\n\t\theader,\n\t\tstyle,\n\t\twidth = undefined,\n\t\theight = undefined,\n\t\tisPanel = false,\n\t\thasOverlay = false,\n\t\toverlayKind = 'light',\n\t\tnumRows = 1,\n\t\tnumColumns = 1,\n\t\tmarginTop = 2,\n\t\tmarginBottom = 2,\n\t\tmarginRight = 2,\n\t\tmarginLeft = 2,\n\t} = { ...props };\n\n\tif (!isLoading) {\n\t\treturn (\n\t\t\t<div className={className} data-test-id='loadingSkeleton-Children'>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif (!Skeleton) {\n\t\treturn (\n\t\t\t<LoadingIndicator\n\t\t\t\tdata-test-id='loadingSkeleton-LoadingIndicator'\n\t\t\t\tisLoading\n\t\t\t\tisVisible\n\t\t\t\thasOverlay={hasOverlay}\n\t\t\t\toverlayKind={overlayKind}\n\t\t\t/>\n\t\t);\n\t}\n\n\tconst skeletonProps = { ...style, width, height, display: 'flex' };\n\tconst skeletonPlaceholder = (\n\t\t<Skeleton data-test-id='loadingSkeleton_Skeleton' {...skeletonProps} />\n\t);\n\n\tconst matrix = _.times(numColumns, (column) => (\n\t\t<div\n\t\t\tkey={`column${column}`}\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'inline-block',\n\t\t\t\tmarginRight: marginRight,\n\t\t\t\tmarginLeft: marginLeft,\n\t\t\t}}\n\t\t\tdata-test-id='loadingSkeleton-SkeletonColumn'\n\t\t>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{_.times(numRows, (row) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={animationStyle('&', className)}\n\t\t\t\t\t\tdata-test-id='loadingSkeleton-ReactPlaceholder'\n\t\t\t\t\t\tkey={`row${row}`}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginTop: marginTop,\n\t\t\t\t\t\t\tmarginBottom: marginBottom,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{header ? (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tdata-test-id='loadingSkeleton-SkeletonHeader'\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tmarginBottom: 2,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{header}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t<ReactPlaceholder\n\t\t\t\t\t\t\t\tshowLoadingAnimation={true}\n\t\t\t\t\t\t\t\tready={!isLoading}\n\t\t\t\t\t\t\t\tcustomPlaceholder={skeletonPlaceholder}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t</ReactPlaceholder>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t));\n\n\tconst skeletonMatrix = <div>{matrix}</div>;\n\n\treturn isPanel ? (\n\t\t<Panel data-test-id='loadingSkeleton-Panel'>{skeletonMatrix}</Panel>\n\t) : (\n\t\tskeletonMatrix\n\t);\n};\n\nexport default LoadingSkeleton;\n"]},"metadata":{},"sourceType":"module"}