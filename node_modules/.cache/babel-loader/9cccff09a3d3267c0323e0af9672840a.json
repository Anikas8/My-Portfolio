{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-DotsIcon');\nexport const iconPropTypes = {\n  /** Sets the direction of the Icon. */\n  direction: PropTypes.oneOf(['vertical', 'horizontal']),\n  /** Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`. */\n  size: PropTypes.number,\n  /** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width. */\n  viewBox: PropTypes.string,\n  /** Sets the color of the Icon.  May not be applicable for icons that are tied\n      to specific colors (e.g. DangerIcon). */\n  color: PropTypes.oneOf(['neutral-dark', 'neutral-light', 'neutral-extra-light', 'primary', 'white', 'success', 'warning', 'secondary-one', 'secondary-two', 'secondary-three', 'secondary-five']),\n  /** Any valid SVG aspect ratio. */\n  aspectRatio: PropTypes.string,\n  /** Adds styling that makes the icon appear clickable. */\n  isClickable: PropTypes.bool,\n  /** Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false. */\n  isDisabled: PropTypes.bool,\n  /** Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onClick: PropTypes.func,\n  /** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onSelect: PropTypes.func,\n  /** Any valid React children. */\n  children: PropTypes.element,\n  /** Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library. */\n  className: PropTypes.string\n};\nexport const DotsIcon = _ref => {\n  let {\n    className,\n    direction = 'horizontal',\n    color = 'primary',\n    ...passThroughs\n  } = _ref;\n  const isVerticalOrientation = direction === 'vertical';\n  const leftOrTopPosition = {\n    cx: isVerticalOrientation ? '8' : '14.5',\n    cy: isVerticalOrientation ? '14.5' : '8'\n  };\n  const rightOrBottomPosition = {\n    cx: isVerticalOrientation ? '8' : '1.5',\n    cy: isVerticalOrientation ? '1.5' : '8'\n  };\n  return React.createElement(Icon, {\n    ..._.omit(passThroughs, ['initialState']),\n    color: color,\n    className: cx('&', className)\n  }, React.createElement(\"circle\", {\n    className: cx(`&-color-${color}`),\n    cx: '8',\n    cy: '8',\n    r: '1'\n  }), React.createElement(\"circle\", {\n    className: cx(`&-color-${color}`),\n    ...leftOrTopPosition,\n    r: '1'\n  }), React.createElement(\"circle\", {\n    className: cx(`&-color-${color}`),\n    ...rightOrBottomPosition,\n    r: '1'\n  }));\n};\nDotsIcon.displayName = 'DotsIcon';\nDotsIcon.propTypes = iconPropTypes;\nDotsIcon.defaultProps = {\n  ...Icon.defaultProps,\n  direction: 'horizontal'\n};\nexport default DotsIcon;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","Icon","lucidClassNames","cx","bind","iconPropTypes","direction","oneOf","size","number","width","oneOfType","string","height","viewBox","color","aspectRatio","isClickable","bool","isDisabled","onClick","func","onSelect","children","element","className","DotsIcon","passThroughs","isVerticalOrientation","leftOrTopPosition","cy","rightOrBottomPosition","omit","r","displayName","propTypes","defaultProps"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/DotsIcon/DotsIcon.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon, { IIconProps } from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\n\nconst cx = lucidClassNames.bind('&-DotsIcon');\n\nexport interface IDotsIconProps extends IIconProps {\n\tdirection?: 'vertical' | 'horizontal';\n}\n\nexport const iconPropTypes = {\n\t/** Sets the direction of the Icon. */\n\tdirection: PropTypes.oneOf(['vertical', 'horizontal']),\n\n\t/** Size variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`. */\n\tsize: PropTypes.number,\n\n\t/** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n\twidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n\theight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth. */\n\tviewBox: PropTypes.string,\n\n\t/** Sets the color of the Icon.  May not be applicable for icons that are tied\n\t\tto specific colors (e.g. DangerIcon). */\n\tcolor: PropTypes.oneOf([\n\t\t'neutral-dark',\n\t\t'neutral-light',\n\t\t'neutral-extra-light',\n\t\t'primary',\n\t\t'white',\n\t\t'success',\n\t\t'warning',\n\t\t'secondary-one',\n\t\t'secondary-two',\n\t\t'secondary-three',\n\t\t'secondary-five',\n\t]),\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio: PropTypes.string,\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable: PropTypes.bool,\n\n\t/** Adds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false. */\n\tisDisabled: PropTypes.bool,\n\n\t/** Called when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonClick: PropTypes.func,\n\n\t/** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonSelect: PropTypes.func,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.element,\n\n\t/** Classes that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library. */\n\tclassName: PropTypes.string,\n};\n\nexport const DotsIcon = ({\n\tclassName,\n\tdirection = 'horizontal',\n\tcolor = 'primary',\n\t...passThroughs\n}: IDotsIconProps) => {\n\tconst isVerticalOrientation = direction === 'vertical';\n\tconst leftOrTopPosition = {\n\t\tcx: isVerticalOrientation ? '8' : '14.5',\n\t\tcy: isVerticalOrientation ? '14.5' : '8',\n\t};\n\tconst rightOrBottomPosition = {\n\t\tcx: isVerticalOrientation ? '8' : '1.5',\n\t\tcy: isVerticalOrientation ? '1.5' : '8',\n\t};\n\n\treturn (\n\t\t<Icon\n\t\t\t{..._.omit(passThroughs, ['initialState'])}\n\t\t\tcolor={color}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t<circle className={cx(`&-color-${color}`)} cx='8' cy='8' r='1' />\n\t\t\t<circle className={cx(`&-color-${color}`)} {...leftOrTopPosition} r='1' />\n\t\t\t<circle\n\t\t\t\tclassName={cx(`&-color-${color}`)}\n\t\t\t\t{...rightOrBottomPosition}\n\t\t\t\tr='1'\n\t\t\t/>\n\t\t</Icon>\n\t);\n};\n\nDotsIcon.displayName = 'DotsIcon';\n\nDotsIcon.propTypes = iconPropTypes;\n\nDotsIcon.defaultProps = {\n\t...Icon.defaultProps,\n\tdirection: 'horizontal',\n};\n\nexport default DotsIcon;\n"]},"metadata":{},"sourceType":"module"}