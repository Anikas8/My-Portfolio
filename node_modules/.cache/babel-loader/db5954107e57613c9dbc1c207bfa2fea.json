{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React, { createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-Switch');\nconst {\n  bool,\n  func,\n  object,\n  string\n} = PropTypes;\nconst defaultProps = {\n  isDisabled: false,\n  isSelected: false,\n  onSelect: _.noop,\n  isIncludeExclude: false\n};\nexport const Switch = props => {\n  const {\n    className,\n    isDisabled,\n    isSelected,\n    style,\n    isIncludeExclude,\n    onSelect,\n    ...passThroughs\n  } = props;\n  const nativeElement = createRef();\n  function handleClicked(event) {\n    event.preventDefault();\n    if (!isDisabled) {\n      onSelect(!isSelected, {\n        event,\n        props\n      });\n      if (nativeElement.current) {\n        nativeElement.current.focus();\n      }\n    }\n  }\n  return React.createElement(\"span\", {\n    className: cx('&', {\n      '&-is-disabled': isDisabled,\n      '&-is-selected': isSelected,\n      '&-is-include-exclude': isIncludeExclude\n    }, className),\n    onClick: handleClicked,\n    onTouchEnd: handleClicked,\n    style: style\n  }, React.createElement(\"input\", {\n    onChange: _.noop,\n    ...omit(passThroughs, ['className', 'isDisabled', 'isSelected', 'onSelect', 'style', 'isIncludeExclude'].concat(['initialState', 'callbackId', 'children'])),\n    checked: isSelected,\n    className: cx('&-native'),\n    disabled: isDisabled,\n    ref: nativeElement,\n    type: 'checkbox'\n  }), React.createElement(\"span\", {\n    className: cx('&-visualization-container')\n  }), React.createElement(\"span\", {\n    className: cx('&-visualization-handle')\n  }));\n};\nSwitch.defaultProps = defaultProps;\nSwitch.displayName = 'Switch';\nSwitch.peek = {\n  description: `A toggle -- a component that is in one of two particular states at any given moment in time -- that uses a visualization of a physical on/off switch made popular by smartphone OSes to reflect its current state. It uses a hidden native check box control under the hood but leverages other \\`HTML\\` elements to visualize its state.`,\n  categories: ['controls', 'toggles']\n};\nSwitch.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Indicates whether the component should appear and act disabled by having\n      a \"greyed out\" palette and ignoring user interactions.\n  */\n  isDisabled: bool,\n  /**\n      Indicates that the component is in the \"selected\" state when true and in\n      the \"unselected\" state when false.\n  */\n  isSelected: bool,\n  /**\n      Called when the user clicks on the component or when they press the space\n      key while the component is in focus.  Signature:\n      \\`(isSelected, { event, props }) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Offers a red/green styling to the switch.\n  */\n  isIncludeExclude: bool\n};\nexport default Switch;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,IAAIC,IAAI,QAAQ,QAAQ;AAChC,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,eAAe,QAAQ,0BAA0B;AAG1D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,UAAU,CAAC;AAC3C,MAAM;EAAEC,IAAI;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAM,CAAE,GAAGP,SAAS;AAkDhD,MAAMQ,YAAY,GAAG;EACpBC,UAAU,EAAE,KAAK;EACjBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAEf,CAAC,CAACgB,IAAI;EAChBC,gBAAgB,EAAE;CAClB;AAED,OAAO,MAAMC,MAAM,GAAIC,KAAmB,IAAwB;EACjE,MAAM;IACLC,SAAS;IACTP,UAAU;IACVC,UAAU;IACVO,KAAK;IACLJ,gBAAgB;IAChBF,QAAQ;IACR,GAAGO;EAAY,CACf,GAAGH,KAAK;EAET,MAAMI,aAAa,GAAGpB,SAAS,EAAoB;EAEnD,SAASqB,aAAa,CACrBC,KAA4E;IAE5EA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI,CAACb,UAAU,EAAE;MAChBE,QAAQ,CAAC,CAACD,UAAU,EAAE;QAAEW,KAAK;QAAEN;MAAK,CAAE,CAAC;MACvC,IAAII,aAAa,CAACI,OAAO,EAAE;QAC1BJ,aAAa,CAACI,OAAO,CAACC,KAAK,EAAE;;;EAGhC;EAEA,OACC1B;IACCkB,SAAS,EAAEd,EAAE,CACZ,GAAG,EACH;MACC,eAAe,EAAEO,UAAU;MAC3B,eAAe,EAAEC,UAAU;MAC3B,sBAAsB,EAAEG;KACxB,EACDG,SAAS,CACT;IACDS,OAAO,EAAEL,aAAa;IACtBM,UAAU,EAAEN,aAAa;IACzBH,KAAK,EAAEA;EAAK,GAEZnB;IACC6B,QAAQ,EAAE/B,CAAC,CAACgB,IAAI;IAAA,GACZf,IAAI,CACPqB,YAAY,EACZ,CACC,WAAW,EACX,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,OAAO,EACP,kBAAkB,CAClB,CAACU,MAAM,CAAC,CAAC,cAAc,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC,CACpD;IACDC,OAAO,EAAEnB,UAAU;IACnBM,SAAS,EAAEd,EAAE,CAAC,UAAU,CAAC;IACzB4B,QAAQ,EAAErB,UAAU;IACpBsB,GAAG,EAAEZ,aAAa;IAClBa,IAAI,EAAC;EAAU,EACd,EACFlC;IAAMkB,SAAS,EAAEd,EAAE,CAAC,2BAA2B;EAAC,EAAI,EACpDJ;IAAMkB,SAAS,EAAEd,EAAE,CAAC,wBAAwB;EAAC,EAAI,CAC3C;AAET,CAAC;AACDY,MAAM,CAACN,YAAY,GAAGA,YAAY;AAClCM,MAAM,CAACmB,WAAW,GAAG,QAAQ;AAC7BnB,MAAM,CAACoB,IAAI,GAAG;EACbC,WAAW,EAAE,2UAA2U;EACxVC,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS;CAClC;AAEDtB,MAAM,CAACuB,SAAS,GAAG;EAClB;;;EAGArB,SAAS,EAAET,MAAM;EAEjB;;;;EAIAE,UAAU,EAAEL,IAAI;EAEhB;;;;EAIAM,UAAU,EAAEN,IAAI;EAEhB;;;;;EAKAO,QAAQ,EAAEN,IAAI;EAEd;;;EAGAY,KAAK,EAAEX,MAAM;EAEb;;;EAGAO,gBAAgB,EAAET;CAClB;AAED,eAAeU,MAAM","names":["_","omit","React","createRef","PropTypes","lucidClassNames","cx","bind","bool","func","object","string","defaultProps","isDisabled","isSelected","onSelect","noop","isIncludeExclude","Switch","props","className","style","passThroughs","nativeElement","handleClicked","event","preventDefault","current","focus","onClick","onTouchEnd","onChange","concat","checked","disabled","ref","type","displayName","peek","description","categories","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Switch/Switch.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React, { createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Switch');\nconst { bool, func, object, string } = PropTypes;\n\nexport interface ISwitchPropsRaw extends StandardProps {\n\t/** Indicates whether the component should appear and act disabled by having\n\t * a \"greyed out\" palette and ignoring user interactions.\n\t *\n\t * @default false\n\t * */\n\tisDisabled: boolean;\n\n\t/** Indicates that the component is in the \"selected\" state when true and in\n\t * the \"unselected\" state when false.\n\t *\n\t * @default false\n\t * */\n\tisSelected: boolean;\n\n\t/** Called when the user clicks on the component or when they press the space\n\t * key while the component is in focus.\n\t *\n\t * @default _.noop\n\t * */\n\tonSelect: (\n\t\tisSelected: boolean,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent:\n\t\t\t\t| React.MouseEvent<HTMLSpanElement>\n\t\t\t\t| React.TouchEvent<HTMLSpanElement>;\n\t\t\tprops: ISwitchProps;\n\t\t}\n\t) => void;\n\n\t/** Offers a red/green styling to the switch.\n\t *\n\t * @default false\n\t */\n\tisIncludeExclude: boolean;\n}\n\nexport type ISwitchProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.HTMLAttributes<HTMLSpanElement>,\n\t\tHTMLSpanElement\n\t>,\n\tISwitchPropsRaw\n>;\n\nconst defaultProps = {\n\tisDisabled: false,\n\tisSelected: false,\n\tonSelect: _.noop,\n\tisIncludeExclude: false,\n};\n\nexport const Switch = (props: ISwitchProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tisDisabled,\n\t\tisSelected,\n\t\tstyle,\n\t\tisIncludeExclude,\n\t\tonSelect,\n\t\t...passThroughs\n\t} = props;\n\n\tconst nativeElement = createRef<HTMLInputElement>();\n\n\tfunction handleClicked(\n\t\tevent: React.MouseEvent<HTMLSpanElement> | React.TouchEvent<HTMLSpanElement>\n\t): void {\n\t\tevent.preventDefault();\n\n\t\tif (!isDisabled) {\n\t\t\tonSelect(!isSelected, { event, props });\n\t\t\tif (nativeElement.current) {\n\t\t\t\tnativeElement.current.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<span\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-selected': isSelected,\n\t\t\t\t\t'&-is-include-exclude': isIncludeExclude,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tonClick={handleClicked}\n\t\t\tonTouchEnd={handleClicked}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t<input\n\t\t\t\tonChange={_.noop}\n\t\t\t\t{...omit(\n\t\t\t\t\tpassThroughs,\n\t\t\t\t\t[\n\t\t\t\t\t\t'className',\n\t\t\t\t\t\t'isDisabled',\n\t\t\t\t\t\t'isSelected',\n\t\t\t\t\t\t'onSelect',\n\t\t\t\t\t\t'style',\n\t\t\t\t\t\t'isIncludeExclude',\n\t\t\t\t\t].concat(['initialState', 'callbackId', 'children'])\n\t\t\t\t)}\n\t\t\t\tchecked={isSelected}\n\t\t\t\tclassName={cx('&-native')}\n\t\t\t\tdisabled={isDisabled}\n\t\t\t\tref={nativeElement}\n\t\t\t\ttype='checkbox'\n\t\t\t/>\n\t\t\t<span className={cx('&-visualization-container')} />\n\t\t\t<span className={cx('&-visualization-handle')} />\n\t\t</span>\n\t);\n};\nSwitch.defaultProps = defaultProps;\nSwitch.displayName = 'Switch';\nSwitch.peek = {\n\tdescription: `A toggle -- a component that is in one of two particular states at any given moment in time -- that uses a visualization of a physical on/off switch made popular by smartphone OSes to reflect its current state. It uses a hidden native check box control under the hood but leverages other \\`HTML\\` elements to visualize its state.`,\n\tcategories: ['controls', 'toggles'],\n};\n\nSwitch.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tIndicates whether the component should appear and act disabled by having\n\t\ta \"greyed out\" palette and ignoring user interactions.\n\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\tIndicates that the component is in the \"selected\" state when true and in\n\t\tthe \"unselected\" state when false.\n\t*/\n\tisSelected: bool,\n\n\t/**\n\t\tCalled when the user clicks on the component or when they press the space\n\t\tkey while the component is in focus.  Signature:\n\t\t\\`(isSelected, { event, props }) => {}\\`\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tOffers a red/green styling to the switch.\n\t*/\n\tisIncludeExclude: bool,\n};\n\nexport default Switch;\n"]},"metadata":{},"sourceType":"module"}