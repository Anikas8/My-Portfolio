{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport * as chartConstants from '../../constants/charts';\nconst cx = lucidClassNames.bind('&-Bar');\nconst {\n  number,\n  bool,\n  string,\n  object\n} = PropTypes;\nconst defaultProps = {\n  x: 0,\n  y: 0,\n  height: 0,\n  width: 0,\n  color: chartConstants.COLOR_0,\n  hasStroke: false\n};\nexport const Bar = props => {\n  const {\n    className,\n    color,\n    hasStroke,\n    height,\n    width,\n    style,\n    x,\n    y,\n    ...passThroughs\n  } = props;\n  const isCustomColor = _.startsWith(color, '#');\n  const colorStyle = isCustomColor ? {\n    fill: color\n  } : null;\n  return React.createElement(\"rect\", {\n    ...passThroughs,\n    className: cx(className, '&', {\n      '&-has-stroke': hasStroke,\n      [`&-${color}`]: !isCustomColor\n    }),\n    x: x,\n    y: y,\n    height: height,\n    width: width,\n    style: {\n      ...style,\n      ...colorStyle\n    }\n  });\n};\nBar.defaultProps = defaultProps;\nBar.displayName = 'Bar';\nBar.peek = {\n  description: `*For use within an \\`svg\\`*. A \\`Bar\\` is typically used for a \\`Bar Chart\\` and is pretty much a thin wrapper around an \\`svg rect\\`.`,\n  categories: ['visualizations', 'geoms']\n};\nBar.propTypes = {\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      x coordinate.\n  */\n  x: number,\n  /**\n      y coordinate.\n  */\n  y: number,\n  /**\n      Height of the bar.\n  */\n  height: PropTypes.oneOfType([number, string]),\n  /**\n      Width of the bar.\n  */\n  width: PropTypes.oneOfType([number, string]),\n  /**\n      Determines if the bar has a white stroke around it.\n  */\n  hasStroke: bool,\n  /**\n      Strings should match an existing color class unless they start with a '#'\n      for specific colors. E.g.:\n       - \\`COLOR_0\\`\n      - \\`COLOR_GOOD\\`\n      - \\`'#123abc'\\`\n  */\n  color: string\n};\nexport default Bar;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,eAAe,QAAQ,0BAA0B;AAE1D,OAAO,KAAKC,cAAc,MAAM,wBAAwB;AAExD,MAAMC,EAAE,GAAGF,eAAe,CAACG,IAAI,CAAC,OAAO,CAAC;AAExC,MAAM;EAAEC,MAAM;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAM,CAAE,GAAGR,SAAS;AA8BlD,MAAMS,YAAY,GAAG;EACpBC,CAAC,EAAE,CAAC;EACJC,CAAC,EAAE,CAAC;EACJC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAEZ,cAAc,CAACa,OAAO;EAC7BC,SAAS,EAAE;CACX;AAED,OAAO,MAAMC,GAAG,GAAIC,KAAgB,IAAwB;EAC3D,MAAM;IACLC,SAAS;IACTL,KAAK;IACLE,SAAS;IACTJ,MAAM;IACNC,KAAK;IACLO,KAAK;IACLV,CAAC;IACDC,CAAC;IACD,GAAGU;EAAY,CACf,GAAGH,KAAK;EAET,MAAMI,aAAa,GAAGxB,CAAC,CAACyB,UAAU,CAACT,KAAK,EAAE,GAAG,CAAC;EAC9C,MAAMU,UAAU,GAAGF,aAAa,GAAG;IAAEG,IAAI,EAAEX;EAAK,CAAE,GAAG,IAAI;EAEzD,OACCf;IAAA,GACKsB,YAAY;IAChBF,SAAS,EAAEhB,EAAE,CAACgB,SAAS,EAAE,GAAG,EAAE;MAC7B,cAAc,EAAEH,SAAS;MACzB,CAAC,KAAKF,KAAK,EAAE,GAAG,CAACQ;KACjB,CAAC;IACFZ,CAAC,EAAEA,CAAC;IACJC,CAAC,EAAEA,CAAC;IACJC,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEA,KAAK;IACZO,KAAK,EAAE;MACN,GAAGA,KAAK;MACR,GAAGI;;EACH,EACA;AAEJ,CAAC;AAEDP,GAAG,CAACR,YAAY,GAAGA,YAAY;AAC/BQ,GAAG,CAACS,WAAW,GAAG,KAAK;AACvBT,GAAG,CAACU,IAAI,GAAG;EACVC,WAAW,EAAE,wIAAwI;EACrJC,UAAU,EAAE,CAAC,gBAAgB,EAAE,OAAO;CACtC;AACDZ,GAAG,CAACa,SAAS,GAAG;EACf;;;EAGAV,KAAK,EAAEZ,MAAM;EAEb;;;EAGAW,SAAS,EAAEZ,MAAM;EAEjB;;;EAGAG,CAAC,EAAEL,MAAM;EAET;;;EAGAM,CAAC,EAAEN,MAAM;EAET;;;EAGAO,MAAM,EAAEZ,SAAS,CAAC+B,SAAS,CAAC,CAAC1B,MAAM,EAAEE,MAAM,CAAC,CAAC;EAE7C;;;EAGAM,KAAK,EAAEb,SAAS,CAAC+B,SAAS,CAAC,CAAC1B,MAAM,EAAEE,MAAM,CAAC,CAAC;EAE5C;;;EAGAS,SAAS,EAAEV,IAAI;EAEf;;;;;;;EAQAQ,KAAK,EAAEP;CACP;AAED,eAAeU,GAAG","names":["_","React","PropTypes","lucidClassNames","chartConstants","cx","bind","number","bool","string","object","defaultProps","x","y","height","width","color","COLOR_0","hasStroke","Bar","props","className","style","passThroughs","isCustomColor","startsWith","colorStyle","fill","displayName","peek","description","categories","propTypes","oneOfType"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Bar/Bar.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\nimport * as chartConstants from '../../constants/charts';\n\nconst cx = lucidClassNames.bind('&-Bar');\n\nconst { number, bool, string, object } = PropTypes;\n\nexport interface IBarProps\n\textends StandardProps,\n\t\tReact.SVGProps<SVGRectElement> {\n\t/** x coordinate. */\n\tx: number;\n\n\t/** y coordinate. */\n\ty: number;\n\n\t/** Height of the bar. */\n\theight: number | string;\n\n\t/** Width of the bar. */\n\twidth: number | string;\n\n\t/** Determines if the bar has a white stroke around it. */\n\thasStroke: boolean;\n\n\t/** Strings should match an existing color class unless they start with a '#'\n\t\tfor specific colors. E.g.:\n\n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\`\n\t */\n\tcolor: string;\n}\n\nconst defaultProps = {\n\tx: 0,\n\ty: 0,\n\theight: 0,\n\twidth: 0,\n\tcolor: chartConstants.COLOR_0,\n\thasStroke: false,\n};\n\nexport const Bar = (props: IBarProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tcolor,\n\t\thasStroke,\n\t\theight,\n\t\twidth,\n\t\tstyle,\n\t\tx,\n\t\ty,\n\t\t...passThroughs\n\t} = props;\n\n\tconst isCustomColor = _.startsWith(color, '#');\n\tconst colorStyle = isCustomColor ? { fill: color } : null;\n\n\treturn (\n\t\t<rect\n\t\t\t{...passThroughs}\n\t\t\tclassName={cx(className, '&', {\n\t\t\t\t'&-has-stroke': hasStroke,\n\t\t\t\t[`&-${color}`]: !isCustomColor,\n\t\t\t})}\n\t\t\tx={x}\n\t\t\ty={y}\n\t\t\theight={height}\n\t\t\twidth={width}\n\t\t\tstyle={{\n\t\t\t\t...style,\n\t\t\t\t...colorStyle,\n\t\t\t}}\n\t\t/>\n\t);\n};\n\nBar.defaultProps = defaultProps;\nBar.displayName = 'Bar';\nBar.peek = {\n\tdescription: `*For use within an \\`svg\\`*. A \\`Bar\\` is typically used for a \\`Bar Chart\\` and is pretty much a thin wrapper around an \\`svg rect\\`.`,\n\tcategories: ['visualizations', 'geoms'],\n};\nBar.propTypes = {\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tx coordinate.\n\t*/\n\tx: number,\n\n\t/**\n\t\ty coordinate.\n\t*/\n\ty: number,\n\n\t/**\n\t\tHeight of the bar.\n\t*/\n\theight: PropTypes.oneOfType([number, string]),\n\n\t/**\n\t\tWidth of the bar.\n\t*/\n\twidth: PropTypes.oneOfType([number, string]),\n\n\t/**\n\t\tDetermines if the bar has a white stroke around it.\n\t*/\n\thasStroke: bool,\n\n\t/**\n\t\tStrings should match an existing color class unless they start with a '#'\n\t\tfor specific colors. E.g.:\n\n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\`\n\t*/\n\tcolor: string,\n};\n\nexport default Bar;\n"]},"metadata":{},"sourceType":"module"}