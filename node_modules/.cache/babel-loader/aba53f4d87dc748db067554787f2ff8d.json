{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport RadioButton, { defaultProps as radioButtonDefaultProps } from '../RadioButton/RadioButton';\nconst cx = lucidClassNames.bind('&-RadioButtonLabeled');\nconst {\n  any,\n  object,\n  string\n} = PropTypes;\nconst RadioButtonLabeledLabel = _props => null;\nRadioButtonLabeledLabel.displayName = 'RadioButtonLabeled.Label';\nRadioButtonLabeledLabel.peek = {\n  description: `Used to identify the purpose of this radio button to the user -- can be any renderable content.`\n};\nRadioButtonLabeledLabel.propName = 'Label';\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['className', 'style', 'Label'];\nexport const RadioButtonLabeled = props => {\n  const {\n    className,\n    isDisabled,\n    isSelected,\n    onSelect,\n    style,\n    ...passThroughs\n  } = props;\n  const labelChildProps = _.first(_.map(findTypes(props, RadioButtonLabeled.Label), 'props'));\n  return React.createElement(\"label\", {\n    className: cx('&', {\n      '&-is-disabled': isDisabled,\n      '&-is-selected': isSelected\n    }, className),\n    style: style\n  }, React.createElement(RadioButton, {\n    className: className,\n    isDisabled: isDisabled,\n    isSelected: isSelected,\n    onSelect: onSelect,\n    ..._.omit(passThroughs, nonPassThroughs)\n  }), React.createElement(\"div\", {\n    ...labelChildProps,\n    className: cx('&-label')\n  }));\n};\nRadioButtonLabeled.displayName = 'RadioButtonLabeled';\nRadioButtonLabeled.defaultProps = radioButtonDefaultProps;\nRadioButtonLabeled.peek = {\n  description: `A composite of the \\`RadioButton\\` component and the native \\`label\\` element.`,\n  notes: {\n    overview: `\n\t\t\tA round two-state toggle with a label that explains the action or selection. This is a composite of \\`RadioButton\\` and the native\n\t\t\t\\`label\\` element.\t\t`,\n    intendedUse: `\n\t\t\t- Use radio button to allow users to select one item. Commonly used to select filters or settings. For interactions where users can select mutiple options, use \\`CheckboxLabeled\\`. \n\t\t\t- Use radio buttons for 2-3 options where you want to expose all options.\n\t\t\t- Use \\`SingleSelect\\` for 3-10 options where it is not a priority to expose all options.\n\t\t\t- Use \\`RadioButtonLabeled\\` for vertical lists of options. Use \\`RadioGroup\\` for horizontal lists of options.\n\t\t`,\n    technicalRecommendations: `\n\t\t\t- Use the styles on the parent container of \\`RadioButtonLabeled\\` to ensure only the radio buttons and their labels are clickable.\n\t\t\t- Any props that are not explicitly defined in \\`propTypes\\` are passed to the native radio button control.\n\t\t\t`\n  },\n  categories: ['controls', 'toggles'],\n  extend: 'RadioButton',\n  madeFrom: ['RadioButton']\n};\nRadioButtonLabeled.propTypes = {\n  ...RadioButton.propTypes,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Child element whose children are used to identify the purpose of this\n      radio button to the user.\n  */\n  Label: any\n};\nRadioButtonLabeled.Label = RadioButtonLabeledLabel;\nexport default RadioButtonLabeled;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAAwBC,SAAS,QAAQ,4BAA4B;AACrE,OAAOC,WAAW,IAEjBC,YAAY,IAAIC,uBAAuB,QACjC,4BAA4B;AAEnC,MAAMC,EAAE,GAAGL,eAAe,CAACM,IAAI,CAAC,sBAAsB,CAAC;AACvD,MAAM;EAAEC,GAAG;EAAEC,MAAM;EAAEC;AAAM,CAAE,GAAGV,SAAS;AAUzC,MAAMW,uBAAuB,GAAIC,MAAqC,IACrE,IAAI;AACLD,uBAAuB,CAACE,WAAW,GAAG,0BAA0B;AAChEF,uBAAuB,CAACG,IAAI,GAAG;EAC9BC,WAAW,EAAE;CACb;AACDJ,uBAAuB,CAACK,QAAQ,GAAG,OAAO;AAE1C;AACA,MAAMC,eAAe,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC;AAOvD,OAAO,MAAMC,kBAAkB,GAC9BC,KAA+B,IACR;EACvB,MAAM;IACLC,SAAS;IACTC,UAAU;IACVC,UAAU;IACVC,QAAQ;IACRC,KAAK;IACL,GAAGC;EAAY,CACf,GAAGN,KAAK;EAET,MAAMO,eAAe,GAAG5B,CAAC,CAAC6B,KAAK,CAC9B7B,CAAC,CAAC8B,GAAG,CAAC1B,SAAS,CAACiB,KAAK,EAAED,kBAAkB,CAACW,KAAK,CAAC,EAAE,OAAO,CAAC,CAC1D;EAED,OACC9B;IACCqB,SAAS,EAAEd,EAAE,CACZ,GAAG,EACH;MACC,eAAe,EAAEe,UAAU;MAC3B,eAAe,EAAEC;KACjB,EACDF,SAAS,CACT;IACDI,KAAK,EAAEA;EAAK,GAEZzB,oBAACI,WAAW;IACXiB,SAAS,EAAEA,SAAS;IACpBC,UAAU,EAAEA,UAAU;IACtBC,UAAU,EAAEA,UAAU;IACtBC,QAAQ,EAAEA,QAAQ;IAAA,GACdzB,CAAC,CAACgC,IAAI,CAACL,YAAmB,EAAER,eAAe;EAAC,EAC/C,EACFlB;IAAA,GAAS2B,eAAe;IAAEN,SAAS,EAAEd,EAAE,CAAC,SAAS;EAAC,EAAI,CAC/C;AAEV,CAAC;AAEDY,kBAAkB,CAACL,WAAW,GAAG,oBAAoB;AAErDK,kBAAkB,CAACd,YAAY,GAAGC,uBAAuB;AAEzDa,kBAAkB,CAACJ,IAAI,GAAG;EACzBC,WAAW,EAAE,gFAAgF;EAC7FgB,KAAK,EAAE;IACNC,QAAQ,EAAE;;wBAEY;IACtBC,WAAW,EAAE;;;;;GAKZ;IACDC,wBAAwB,EAAE;;;;GAI1B;EACDC,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC;EACnCC,MAAM,EAAE,aAAa;EACrBC,QAAQ,EAAE,CAAC,aAAa;CACxB;AAEDnB,kBAAkB,CAACoB,SAAS,GAAG;EAC9B,GAAGnC,WAAW,CAACmC,SAAS;EAExB;;;EAGAlB,SAAS,EAAEV,MAAM;EAEjB;;;EAGAc,KAAK,EAAEf,MAAM;EAEb;;;;EAIAoB,KAAK,EAAErB;CACP;AAEDU,kBAAkB,CAACW,KAAK,GAAGlB,uBAAuB;AAElD,eAAeO,kBAAkB","names":["_","React","PropTypes","lucidClassNames","findTypes","RadioButton","defaultProps","radioButtonDefaultProps","cx","bind","any","object","string","RadioButtonLabeledLabel","_props","displayName","peek","description","propName","nonPassThroughs","RadioButtonLabeled","props","className","isDisabled","isSelected","onSelect","style","passThroughs","labelChildProps","first","map","Label","omit","notes","overview","intendedUse","technicalRecommendations","categories","extend","madeFrom","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/RadioButtonLabeled/RadioButtonLabeled.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, findTypes } from '../../util/component-types';\nimport RadioButton, {\n\tIRadioButtonProps,\n\tdefaultProps as radioButtonDefaultProps,\n} from '../RadioButton/RadioButton';\n\nconst cx = lucidClassNames.bind('&-RadioButtonLabeled');\nconst { any, object, string } = PropTypes;\n\nexport interface IRadioButtonLabeledLabelProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\tdescription?: string;\n}\nconst RadioButtonLabeledLabel = (_props: IRadioButtonLabeledLabelProps): null =>\n\tnull;\nRadioButtonLabeledLabel.displayName = 'RadioButtonLabeled.Label';\nRadioButtonLabeledLabel.peek = {\n\tdescription: `Used to identify the purpose of this radio button to the user -- can be any renderable content.`,\n};\nRadioButtonLabeledLabel.propName = 'Label';\n\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['className', 'style', 'Label'];\nexport interface IRadioButtonLabeledProps extends IRadioButtonProps {\n\t/** Child element whose children are used to identify the purpose of this\n\t\tradio button to the user. */\n\tLabel?: string | (React.ReactNode & { props: IRadioButtonLabeledLabelProps });\n}\n\nexport const RadioButtonLabeled = (\n\tprops: IRadioButtonLabeledProps\n): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tisDisabled,\n\t\tisSelected,\n\t\tonSelect,\n\t\tstyle,\n\t\t...passThroughs\n\t} = props;\n\n\tconst labelChildProps = _.first(\n\t\t_.map(findTypes(props, RadioButtonLabeled.Label), 'props')\n\t);\n\n\treturn (\n\t\t<label\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-selected': isSelected,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t<RadioButton\n\t\t\t\tclassName={className}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tisSelected={isSelected}\n\t\t\t\tonSelect={onSelect}\n\t\t\t\t{..._.omit(passThroughs as any, nonPassThroughs)}\n\t\t\t/>\n\t\t\t<div {...labelChildProps} className={cx('&-label')} />\n\t\t</label>\n\t);\n};\n\nRadioButtonLabeled.displayName = 'RadioButtonLabeled';\n\nRadioButtonLabeled.defaultProps = radioButtonDefaultProps;\n\nRadioButtonLabeled.peek = {\n\tdescription: `A composite of the \\`RadioButton\\` component and the native \\`label\\` element.`,\n\tnotes: {\n\t\toverview: `\n\t\t\tA round two-state toggle with a label that explains the action or selection. This is a composite of \\`RadioButton\\` and the native\n\t\t\t\\`label\\` element.\t\t`,\n\t\tintendedUse: `\n\t\t\t- Use radio button to allow users to select one item. Commonly used to select filters or settings. For interactions where users can select mutiple options, use \\`CheckboxLabeled\\`. \n\t\t\t- Use radio buttons for 2-3 options where you want to expose all options.\n\t\t\t- Use \\`SingleSelect\\` for 3-10 options where it is not a priority to expose all options.\n\t\t\t- Use \\`RadioButtonLabeled\\` for vertical lists of options. Use \\`RadioGroup\\` for horizontal lists of options.\n\t\t`,\n\t\ttechnicalRecommendations: `\n\t\t\t- Use the styles on the parent container of \\`RadioButtonLabeled\\` to ensure only the radio buttons and their labels are clickable.\n\t\t\t- Any props that are not explicitly defined in \\`propTypes\\` are passed to the native radio button control.\n\t\t\t`,\n\t},\n\tcategories: ['controls', 'toggles'],\n\textend: 'RadioButton',\n\tmadeFrom: ['RadioButton'],\n};\n\nRadioButtonLabeled.propTypes = {\n\t...RadioButton.propTypes,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tChild element whose children are used to identify the purpose of this\n\t\tradio button to the user.\n\t*/\n\tLabel: any,\n};\n\nRadioButtonLabeled.Label = RadioButtonLabeledLabel;\n\nexport default RadioButtonLabeled;\n"]},"metadata":{},"sourceType":"module"}