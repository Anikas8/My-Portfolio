{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-Checkbox');\nconst {\n  bool,\n  func,\n  object,\n  string\n} = PropTypes;\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['children', 'className', 'isIndeterminate', 'isDisabled', 'isSelected', 'onSelect', 'style', 'title'];\nexport const defaultProps = {\n  isIndeterminate: false,\n  isDisabled: false,\n  isSelected: false,\n  onSelect: _.noop\n};\nexport const Checkbox = props => {\n  const {\n    className,\n    isIndeterminate,\n    isSelected,\n    isDisabled,\n    style,\n    title,\n    onSelect,\n    ...passThroughs\n  } = props;\n  const nativeElement = React.createRef();\n  function handleSpanClick(e) {\n    e.preventDefault();\n  }\n  function handleClicked(event) {\n    if (!isDisabled && onSelect) {\n      onSelect(!isSelected, {\n        event,\n        props\n      });\n      if (nativeElement.current) {\n        nativeElement.current.focus();\n      }\n    }\n  }\n  return React.createElement(\"div\", {\n    className: cx('&', {\n      '&-is-disabled': isDisabled,\n      '&-is-selected': isIndeterminate || isSelected\n    }, className),\n    onClick: handleClicked,\n    style: style,\n    title: title\n  }, React.createElement(\"input\", {\n    onChange: _.noop,\n    ..._.omit(passThroughs, nonPassThroughs),\n    checked: isSelected,\n    className: cx('&-native'),\n    disabled: isDisabled,\n    ref: nativeElement,\n    title: title,\n    type: 'checkbox'\n  }), React.createElement(\"span\", {\n    onClick: handleSpanClick,\n    className: cx('&-visualization-glow')\n  }), React.createElement(\"span\", {\n    onClick: handleSpanClick,\n    className: cx('&-visualization-container')\n  }), isIndeterminate ? React.createElement(\"span\", {\n    onClick: handleSpanClick,\n    className: cx('&-visualization-indeterminate')\n  }, React.createElement(\"span\", {\n    className: cx('&-visualization-indeterminate-line')\n  })) : React.createElement(\"span\", {\n    onClick: handleSpanClick,\n    className: cx('&-visualization-checkmark')\n  }, React.createElement(\"span\", {\n    className: cx('&-visualization-checkmark-stem')\n  }), React.createElement(\"span\", {\n    className: cx('&-visualization-checkmark-kick')\n  })));\n};\nCheckbox.displayName = 'Checkbox';\nCheckbox.peek = {\n  description: `\\`Checkbox\\` is a square two-state toggle used to create \\`CheckboxLabeled\\`. It uses a hidden native \\`Checkbox\\` control under the hood but leverages other \\`HTML\\` elements to visualize its state.`,\n  notes: {\n    overview: `\n\t\t\tCheckbox is a square two-state toggle. Use \\`CheckboxLabeled\\` in your applications.\n\t\t`,\n    intendedUse: `\n\t\t\tUsed to create \\`CheckboxLabeled\\`. \t\t\t\n\t\t`,\n    technicalRecommendations: `\n\t\t\t- Use the Selected state when a filter or setting will be applied.\n\t\t\t- Use the Unselected state when a filter or setting will not be applied.\n\t\t\t- Use the Indeterminate state for parent checkboxes where some of the child checkboxes are Selected and some are Unselected. For example, the master checkbox in the header row of the interactive table example in \\`DataTable\\`.\n\t\t`\n  },\n  categories: ['controls', 'toggles']\n};\nCheckbox.defaultProps = defaultProps;\nCheckbox.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Indicates whether the component should appear in an \"indeterminate\" or\n      \"partially checked\" state. This prop takes precedence over\n      \\`isSelected\\`.\n  */\n  isIndeterminate: bool,\n  /**\n      Indicates whether the component should appear and act disabled by having\n      a \"greyed out\" palette and ignoring user interactions.\n  */\n  isDisabled: bool,\n  /**\n      Indicates that the component is in the \"selected\" state when true and in\n      the \"unselected\" state when false. This props is ignored if\n      \\`isIndeterminate\\` is \\`true\\`.\n  */\n  isSelected: bool,\n  /**\n      Called when the user clicks on the component or when they press the space\n      key while the component is in focus.  Signature:\n      \\`(isSelected, { event, props }) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      A string title that is displayed on hover.\n  */\n  title: string\n};\nexport default Checkbox;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,eAAe,QAAQ,0BAA0B;AAG1D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,YAAY,CAAC;AAE7C,MAAM;EAAEC,IAAI;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAM,CAAE,GAAGP,SAAS;AA8ChD;AACA,MAAMQ,eAAe,GAAG,CACvB,UAAU,EACV,WAAW,EACX,iBAAiB,EACjB,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,OAAO,EACP,OAAO,CACP;AAED,OAAO,MAAMC,YAAY,GAAG;EAC3BC,eAAe,EAAE,KAAK;EACtBC,UAAU,EAAE,KAAK;EACjBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAEf,CAAC,CAACgB;CACZ;AAED,OAAO,MAAMC,QAAQ,GAAIC,KAAqB,IAAwB;EACrE,MAAM;IACLC,SAAS;IACTP,eAAe;IACfE,UAAU;IACVD,UAAU;IACVO,KAAK;IACLC,KAAK;IACLN,QAAQ;IACR,GAAGO;EAAY,CACf,GAAGJ,KAAK;EAET,MAAMK,aAAa,GAAGtB,KAAK,CAACuB,SAAS,EAAoB;EAEzD,SAASC,eAAe,CAACC,CAAqC;IAC7DA,CAAC,CAACC,cAAc,EAAE;EACnB;EAEA,SAASC,aAAa,CAACC,KAAyC;IAC/D,IAAI,CAAChB,UAAU,IAAIE,QAAQ,EAAE;MAC5BA,QAAQ,CAAC,CAACD,UAAU,EAAE;QAAEe,KAAK;QAAEX;MAAK,CAAE,CAAC;MACvC,IAAIK,aAAa,CAACO,OAAO,EAAE;QAC1BP,aAAa,CAACO,OAAO,CAACC,KAAK,EAAE;;;EAGhC;EAEA,OACC9B;IACCkB,SAAS,EAAEf,EAAE,CACZ,GAAG,EACH;MACC,eAAe,EAAES,UAAU;MAC3B,eAAe,EAAED,eAAe,IAAIE;KACpC,EACDK,SAAS,CACT;IACDa,OAAO,EAAEJ,aAAa;IACtBR,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAEA;EAAK,GAEZpB;IACCgC,QAAQ,EAAEjC,CAAC,CAACgB,IAAI;IAAA,GACZhB,CAAC,CAACkC,IAAI,CAACZ,YAAY,EAAEZ,eAAe,CAAC;IACzCyB,OAAO,EAAErB,UAAU;IACnBK,SAAS,EAAEf,EAAE,CAAC,UAAU,CAAC;IACzBgC,QAAQ,EAAEvB,UAAU;IACpBwB,GAAG,EAAEd,aAAa;IAClBF,KAAK,EAAEA,KAAK;IACZiB,IAAI,EAAC;EAAU,EACd,EACFrC;IAAM+B,OAAO,EAAEP,eAAe;IAAEN,SAAS,EAAEf,EAAE,CAAC,sBAAsB;EAAC,EAAI,EACzEH;IACC+B,OAAO,EAAEP,eAAe;IACxBN,SAAS,EAAEf,EAAE,CAAC,2BAA2B;EAAC,EACzC,EACDQ,eAAe,GACfX;IACC+B,OAAO,EAAEP,eAAe;IACxBN,SAAS,EAAEf,EAAE,CAAC,+BAA+B;EAAC,GAE9CH;IAAMkB,SAAS,EAAEf,EAAE,CAAC,oCAAoC;EAAC,EAAI,CACvD,GAEPH;IACC+B,OAAO,EAAEP,eAAe;IACxBN,SAAS,EAAEf,EAAE,CAAC,2BAA2B;EAAC,GAE1CH;IAAMkB,SAAS,EAAEf,EAAE,CAAC,gCAAgC;EAAC,EAAI,EACzDH;IAAMkB,SAAS,EAAEf,EAAE,CAAC,gCAAgC;EAAC,EAAI,CAE1D,CACI;AAER,CAAC;AAEDa,QAAQ,CAACsB,WAAW,GAAG,UAAU;AACjCtB,QAAQ,CAACuB,IAAI,GAAG;EACfC,WAAW,EAAE,yMAAyM;EACtNC,KAAK,EAAE;IACNC,QAAQ,EAAE;;GAET;IACDC,WAAW,EAAE;;GAEZ;IACDC,wBAAwB,EAAE;;;;;GAK1B;EACDC,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS;CAClC;AAED7B,QAAQ,CAACN,YAAY,GAAGA,YAAY;AAEpCM,QAAQ,CAAC8B,SAAS,GAAG;EACpB;;;EAGA5B,SAAS,EAAEV,MAAM;EAEjB;;;;;EAKAG,eAAe,EAAEN,IAAI;EAErB;;;;EAIAO,UAAU,EAAEP,IAAI;EAEhB;;;;;EAKAQ,UAAU,EAAER,IAAI;EAEhB;;;;;EAKAS,QAAQ,EAAER,IAAI;EAEd;;;EAGAa,KAAK,EAAEZ,MAAM;EAEb;;;EAGAa,KAAK,EAAEZ;CACP;AAED,eAAeQ,QAAQ","names":["_","React","PropTypes","lucidClassNames","cx","bind","bool","func","object","string","nonPassThroughs","defaultProps","isIndeterminate","isDisabled","isSelected","onSelect","noop","Checkbox","props","className","style","title","passThroughs","nativeElement","createRef","handleSpanClick","e","preventDefault","handleClicked","event","current","focus","onClick","onChange","omit","checked","disabled","ref","type","displayName","peek","description","notes","overview","intendedUse","technicalRecommendations","categories","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Checkbox');\n\nconst { bool, func, object, string } = PropTypes;\n\nexport interface ICheckboxPropsRaw extends StandardProps {\n\t/** Indicates whether the component should appear in an \"indeterminate\" or\n\t * \"partially checked\" state. This prop takes precedence over\n\t * \\`isSelected\\`.\n\t */\n\tisIndeterminate: boolean;\n\n\t/** Indicates whether the component should appear and act disabled by having\n\t * a \"greyed out\" palette and ignoring user interactions.\n\t */\n\tisDisabled: boolean;\n\n\t/** Indicates that the component is in the \"selected\" state when true and in\n\t * the \"unselected\" state when false. This props is ignored if\n\t * \\`isIndeterminate\\` is \\`true\\`.\n\t */\n\tisSelected: boolean;\n\n\t/** Called when the user clicks on the component or when they press the space\n\t * key while the component is in focus.\n\t */\n\tonSelect: (\n\t\tisSelected: boolean,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent<HTMLInputElement>;\n\t\t\tprops: ICheckboxProps;\n\t\t}\n\t) => void;\n\n\t/** A string title that is displayed on hover. */\n\ttitle?: string;\n}\n\nexport type ICheckboxProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.InputHTMLAttributes<HTMLInputElement>,\n\t\tHTMLInputElement\n\t>,\n\tICheckboxPropsRaw\n>;\n\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'children',\n\t'className',\n\t'isIndeterminate',\n\t'isDisabled',\n\t'isSelected',\n\t'onSelect',\n\t'style',\n\t'title',\n];\n\nexport const defaultProps = {\n\tisIndeterminate: false,\n\tisDisabled: false,\n\tisSelected: false,\n\tonSelect: _.noop,\n};\n\nexport const Checkbox = (props: ICheckboxProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tisIndeterminate,\n\t\tisSelected,\n\t\tisDisabled,\n\t\tstyle,\n\t\ttitle,\n\t\tonSelect,\n\t\t...passThroughs\n\t} = props;\n\n\tconst nativeElement = React.createRef<HTMLInputElement>();\n\n\tfunction handleSpanClick(e: React.MouseEvent<HTMLInputElement>): void {\n\t\te.preventDefault();\n\t}\n\n\tfunction handleClicked(event: React.MouseEvent<HTMLInputElement>): void {\n\t\tif (!isDisabled && onSelect) {\n\t\t\tonSelect(!isSelected, { event, props });\n\t\t\tif (nativeElement.current) {\n\t\t\t\tnativeElement.current.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-selected': isIndeterminate || isSelected,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tonClick={handleClicked}\n\t\t\tstyle={style}\n\t\t\ttitle={title}\n\t\t>\n\t\t\t<input\n\t\t\t\tonChange={_.noop}\n\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\tchecked={isSelected}\n\t\t\t\tclassName={cx('&-native')}\n\t\t\t\tdisabled={isDisabled}\n\t\t\t\tref={nativeElement}\n\t\t\t\ttitle={title}\n\t\t\t\ttype='checkbox'\n\t\t\t/>\n\t\t\t<span onClick={handleSpanClick} className={cx('&-visualization-glow')} />\n\t\t\t<span\n\t\t\t\tonClick={handleSpanClick}\n\t\t\t\tclassName={cx('&-visualization-container')}\n\t\t\t/>\n\t\t\t{isIndeterminate ? (\n\t\t\t\t<span\n\t\t\t\t\tonClick={handleSpanClick}\n\t\t\t\t\tclassName={cx('&-visualization-indeterminate')}\n\t\t\t\t>\n\t\t\t\t\t<span className={cx('&-visualization-indeterminate-line')} />\n\t\t\t\t</span>\n\t\t\t) : (\n\t\t\t\t<span\n\t\t\t\t\tonClick={handleSpanClick}\n\t\t\t\t\tclassName={cx('&-visualization-checkmark')}\n\t\t\t\t>\n\t\t\t\t\t<span className={cx('&-visualization-checkmark-stem')} />\n\t\t\t\t\t<span className={cx('&-visualization-checkmark-kick')} />\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nCheckbox.displayName = 'Checkbox';\nCheckbox.peek = {\n\tdescription: `\\`Checkbox\\` is a square two-state toggle used to create \\`CheckboxLabeled\\`. It uses a hidden native \\`Checkbox\\` control under the hood but leverages other \\`HTML\\` elements to visualize its state.`,\n\tnotes: {\n\t\toverview: `\n\t\t\tCheckbox is a square two-state toggle. Use \\`CheckboxLabeled\\` in your applications.\n\t\t`,\n\t\tintendedUse: `\n\t\t\tUsed to create \\`CheckboxLabeled\\`. \t\t\t\n\t\t`,\n\t\ttechnicalRecommendations: `\n\t\t\t- Use the Selected state when a filter or setting will be applied.\n\t\t\t- Use the Unselected state when a filter or setting will not be applied.\n\t\t\t- Use the Indeterminate state for parent checkboxes where some of the child checkboxes are Selected and some are Unselected. For example, the master checkbox in the header row of the interactive table example in \\`DataTable\\`.\n\t\t`,\n\t},\n\tcategories: ['controls', 'toggles'],\n};\n\nCheckbox.defaultProps = defaultProps;\n\nCheckbox.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tIndicates whether the component should appear in an \"indeterminate\" or\n\t\t\"partially checked\" state. This prop takes precedence over\n\t\t\\`isSelected\\`.\n\t*/\n\tisIndeterminate: bool,\n\n\t/**\n\t\tIndicates whether the component should appear and act disabled by having\n\t\ta \"greyed out\" palette and ignoring user interactions.\n\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\tIndicates that the component is in the \"selected\" state when true and in\n\t\tthe \"unselected\" state when false. This props is ignored if\n\t\t\\`isIndeterminate\\` is \\`true\\`.\n\t*/\n\tisSelected: bool,\n\n\t/**\n\t\tCalled when the user clicks on the component or when they press the space\n\t\tkey while the component is in focus.  Signature:\n\t\t\\`(isSelected, { event, props }) => {}\\`\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tA string title that is displayed on hover.\n\t*/\n\ttitle: string,\n};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}