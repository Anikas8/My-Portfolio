{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-ChatIcon');\nexport const iconPropTypes = {\n  /** Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`. */\n  size: PropTypes.number,\n  /** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width. */\n  viewBox: PropTypes.string,\n  /** Sets the color of the Icon.  May not be applicable for icons that are tied\n      to specific colors (e.g. DangerIcon). */\n  color: PropTypes.oneOf(['neutral-dark', 'neutral-light', 'neutral-extra-light', 'primary', 'white', 'success', 'warning', 'secondary-one', 'secondary-two', 'secondary-three', 'secondary-five']),\n  /** Any valid SVG aspect ratio. */\n  aspectRatio: PropTypes.string,\n  /** Adds styling that makes the icon appear clickable. */\n  isClickable: PropTypes.bool,\n  /** Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false. */\n  isDisabled: PropTypes.bool,\n  /** Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onClick: PropTypes.func,\n  /** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onSelect: PropTypes.func,\n  /** Any valid React children. */\n  children: PropTypes.element,\n  /** Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library. */\n  className: PropTypes.string\n};\nexport const ChatIcon = _ref => {\n  let {\n    className,\n    ...passThroughs\n  } = _ref;\n  return React.createElement(Icon, {\n    ..._.omit(passThroughs, ['initialState']),\n    className: cx('&', className)\n  }, React.createElement(\"path\", {\n    d: 'M4.5 6a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zM8 5.5a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1zm4 0a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1z'\n  }), React.createElement(\"path\", {\n    d: 'M7.5 11.5H10c3.025 0 5.5-2.475 5.5-5.5S13.025.5 10 .5H6C2.975.5.5 2.975.5 6c0 2.118 1.234 3.967 3 4.884V14.5l4-3z'\n  }));\n};\nChatIcon.displayName = 'ChatIcon';\nChatIcon.propTypes = iconPropTypes;\nChatIcon.defaultProps = Icon.defaultProps;\nexport default ChatIcon;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAoB,MAAM,SAAS;AAC1C,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,YAAY,CAAC;AAE7C,OAAO,MAAMC,aAAa,GAAG;EAC5B;;;EAGAC,IAAI,EAAEN,SAAS,CAACO,MAAM;EAEtB;EACAC,KAAK,EAAER,SAAS,CAACS,SAAS,CAAC,CAACT,SAAS,CAACO,MAAM,EAAEP,SAAS,CAACU,MAAM,CAAC,CAAC;EAEhE;EACAC,MAAM,EAAEX,SAAS,CAACS,SAAS,CAAC,CAACT,SAAS,CAACO,MAAM,EAAEP,SAAS,CAACU,MAAM,CAAC,CAAC;EAEjE;;;EAGAE,OAAO,EAAEZ,SAAS,CAACU,MAAM;EAEzB;;EAEAG,KAAK,EAAEb,SAAS,CAACc,KAAK,CAAC,CACtB,cAAc,EACd,eAAe,EACf,qBAAqB,EACrB,SAAS,EACT,OAAO,EACP,SAAS,EACT,SAAS,EACT,eAAe,EACf,eAAe,EACf,iBAAiB,EACjB,gBAAgB,CAChB,CAAC;EAEF;EACAC,WAAW,EAAEf,SAAS,CAACU,MAAM;EAE7B;EACAM,WAAW,EAAEhB,SAAS,CAACiB,IAAI;EAE3B;;EAEAC,UAAU,EAAElB,SAAS,CAACiB,IAAI;EAE1B;;EAEAE,OAAO,EAAEnB,SAAS,CAACoB,IAAI;EAEvB;;EAEAC,QAAQ,EAAErB,SAAS,CAACoB,IAAI;EAExB;EACAE,QAAQ,EAAEtB,SAAS,CAACuB,OAAO;EAE3B;;EAEAC,SAAS,EAAExB,SAAS,CAACU;CACrB;AAED,OAAO,MAAMe,QAAQ,GAAG,QAA+C;EAAA,IAA9C;IAAED,SAAS;IAAE,GAAGE;EAAY,CAAc;EAClE,OACC3B,oBAACE,IAAI;IAAA,GACAH,CAAC,CAAC6B,IAAI,CAACD,YAAY,EAAE,CAAC,cAAc,CAAC,CAAC;IAC1CF,SAAS,EAAErB,EAAE,CAAC,GAAG,EAAEqB,SAAS;EAAC,GAE7BzB;IAAM6B,CAAC,EAAC;EAA+G,EAAG,EAC1H7B;IAAM6B,CAAC,EAAC;EAAmH,EAAG,CACxH;AAET,CAAC;AAEDH,QAAQ,CAACI,WAAW,GAAG,UAAU;AAEjCJ,QAAQ,CAACK,SAAS,GAAGzB,aAAa;AAElCoB,QAAQ,CAACM,YAAY,GAAG9B,IAAI,CAAC8B,YAAY;AAEzC,eAAeN,QAAQ","names":["_","React","PropTypes","Icon","lucidClassNames","cx","bind","iconPropTypes","size","number","width","oneOfType","string","height","viewBox","color","oneOf","aspectRatio","isClickable","bool","isDisabled","onClick","func","onSelect","children","element","className","ChatIcon","passThroughs","omit","d","displayName","propTypes","defaultProps"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/ChatIcon/ChatIcon.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon, { IIconProps } from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\n\nconst cx = lucidClassNames.bind('&-ChatIcon');\n\nexport const iconPropTypes = {\n\t/** Size variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`. */\n\tsize: PropTypes.number,\n\n\t/** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n\twidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n\theight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth. */\n\tviewBox: PropTypes.string,\n\n\t/** Sets the color of the Icon.  May not be applicable for icons that are tied\n\t\tto specific colors (e.g. DangerIcon). */\n\tcolor: PropTypes.oneOf([\n\t\t'neutral-dark',\n\t\t'neutral-light',\n\t\t'neutral-extra-light',\n\t\t'primary',\n\t\t'white',\n\t\t'success',\n\t\t'warning',\n\t\t'secondary-one',\n\t\t'secondary-two',\n\t\t'secondary-three',\n\t\t'secondary-five',\n\t]),\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio: PropTypes.string,\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable: PropTypes.bool,\n\n\t/** Adds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false. */\n\tisDisabled: PropTypes.bool,\n\n\t/** Called when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonClick: PropTypes.func,\n\n\t/** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonSelect: PropTypes.func,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.element,\n\n\t/** Classes that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library. */\n\tclassName: PropTypes.string,\n};\n\nexport const ChatIcon = ({ className, ...passThroughs }: IIconProps) => {\n\treturn (\n\t\t<Icon\n\t\t\t{..._.omit(passThroughs, ['initialState'])}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t<path d='M4.5 6a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zM8 5.5a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1zm4 0a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1z' />\n\t\t\t<path d='M7.5 11.5H10c3.025 0 5.5-2.475 5.5-5.5S13.025.5 10 .5H6C2.975.5.5 2.975.5 6c0 2.118 1.234 3.967 3 4.884V14.5l4-3z' />\n\t\t</Icon>\n\t);\n};\n\nChatIcon.displayName = 'ChatIcon';\n\nChatIcon.propTypes = iconPropTypes;\n\nChatIcon.defaultProps = Icon.defaultProps;\n\nexport default ChatIcon;\n"]},"metadata":{},"sourceType":"module"}