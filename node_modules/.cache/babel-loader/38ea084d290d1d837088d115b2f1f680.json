{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { discreteTicks } from '../../util/chart-helpers';\nconst cx = lucidClassNames.bind('&-Axis');\nconst {\n  string,\n  array,\n  func,\n  number,\n  oneOf\n} = PropTypes;\nconst defaultProps = {\n  innerTickSize: 6,\n  outerTickSize: 6,\n  tickPadding: 3,\n  textOrientation: 'horizontal',\n  orient: 'bottom',\n  tickCount: null\n};\nexport const Axis = props => {\n  const {\n    className,\n    scale,\n    orient,\n    tickCount,\n    ticks = 'ticks' in scale ? scale.ticks(tickCount) : discreteTicks(scale.domain(), tickCount),\n    // ordinal scales don't have `ticks` but they do have `domains`\n    innerTickSize,\n    outerTickSize,\n    tickFormat = 'tickFormat' in scale ? scale.tickFormat() : _.identity,\n    tickPadding,\n    textOrientation,\n    ...passThroughs\n  } = props;\n  const tickSpacing = Math.max(innerTickSize, 0) + tickPadding;\n  // Domain\n  const range = scale.range();\n  const sign = orient === 'top' || orient === 'left' ? -1 : 1;\n  const isH = orient === 'top' || orient === 'bottom'; // is horizontal\n  const getOrientationProperties = (orient, textOrientation) => {\n    let textAnchor, x, y, dy;\n    let orientationSign = sign;\n    const transform = textOrientation === 'vertical' ? 'rotate(-90)' : textOrientation === 'horizontal' ? '' : 'rotate(-30)';\n    switch (orient) {\n      case 'bottom':\n        if (textOrientation === 'vertical') {\n          orientationSign = -orientationSign;\n        }\n        textAnchor = textOrientation === 'vertical' ? 'end' : textOrientation === 'diagonal' ? 'end' : 'middle';\n        x = textOrientation === 'vertical' ? orientationSign * tickSpacing : textOrientation === 'diagonal' ? -orientationSign * tickSpacing : 0;\n        y = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n        dy = textOrientation === 'vertical' ? '.32em' : '.71em';\n        break;\n      case 'top':\n        if (textOrientation === 'vertical') {\n          orientationSign = -orientationSign;\n        }\n        textAnchor = textOrientation === 'vertical' ? 'start' : textOrientation === 'diagonal' ? 'start' : 'middle';\n        x = textOrientation === 'vertical' || textOrientation === 'diagonal' ? -orientationSign * tickSpacing : 0;\n        y = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n        dy = textOrientation === 'vertical' || textOrientation === 'diagonal' ? '.32em' : '0em';\n        break;\n      case 'right':\n        textAnchor = textOrientation === 'vertical' ? 'middle' : 'start';\n        x = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n        y = textOrientation === 'vertical' ? orientationSign * tickSpacing : textOrientation === 'horizontal' ? 0 : orientationSign * tickSpacing;\n        dy = textOrientation === 'vertical' ? '.71em' : '.32em';\n        break;\n      case 'left':\n        textAnchor = textOrientation === 'vertical' ? 'middle' : 'end';\n        x = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n        y = textOrientation === 'vertical' || textOrientation === 'diagonal' ? orientationSign * tickSpacing : 0;\n        dy = textOrientation === 'vertical' ? '0em' : textOrientation === 'horizontal' ? '.32em' : '.71em';\n        break;\n      default:\n        textAnchor = 'start';\n        x = 0;\n        y = 0;\n        dy = 'null';\n    }\n    return {\n      transform,\n      textAnchor,\n      x,\n      y,\n      dy\n    };\n  };\n  const orientationProperties = {\n    vertical: getOrientationProperties(orient, 'vertical'),\n    horizontal: getOrientationProperties(orient, 'horizontal'),\n    diagonal: getOrientationProperties(orient, 'diagonal')\n  };\n  const orientationKey = textOrientation || 'horizontal';\n  // Only band scales have `bandwidth`, this conditional helps center the\n  // ticks on the bands\n  const scaleNormalized = 'bandwidth' in scale ? d => scale(d) + scale.bandwidth() / 2 : scale;\n  return React.createElement(\"g\", {\n    ...passThroughs,\n    className: cx(className, '&')\n  }, isH ? React.createElement(\"path\", {\n    className: cx('&-domain'),\n    d: `M${range[0]},${sign * outerTickSize}V0H${range[1]}V${sign * outerTickSize}`\n  }) : React.createElement(\"path\", {\n    className: cx('&-domain'),\n    d: `M${sign * outerTickSize},${range[0]}H0V${range[1]}H${sign * outerTickSize}`\n  }), _.map(ticks, tick => React.createElement(\"g\", {\n    key: tick,\n    transform: `translate(${isH ? scaleNormalized(tick) : 0}, ${isH ? 0 : scaleNormalized(tick)})`\n  }, React.createElement(\"line\", {\n    className: cx('&-tick'),\n    x2: isH ? 0 : sign * innerTickSize,\n    y2: isH ? sign * innerTickSize : 0\n  }), React.createElement(\"text\", {\n    className: cx('&-tick-text'),\n    x: orientationProperties[orientationKey].x,\n    y: orientationProperties[orientationKey].y,\n    dy: orientationProperties[orientationKey].dy,\n    style: {\n      textAnchor: orientationProperties[orientationKey].textAnchor\n    },\n    transform: orientationProperties[orientationKey].transform\n  }, tickFormat(tick)))));\n};\nAxis.defaultProps = defaultProps;\nAxis.displayName = 'Axis';\nAxis.peek = {\n  description: `\\`Axis\\` is used within an \\`svg\\`. An \\`Axis\\` is used to help render human-readable reference marks on charts. It can either be horizontal or vertical and really only needs a scale to be able to draw properly. This component is a very close sister to d3's svg axis and most of the logic was ported from there.`,\n  categories: ['visualizations', 'chart primitives']\n};\nAxis.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Must be a d3 scale. Lucid exposes the \\`lucid.d3Scale\\` library for use\n      here.\n  */\n  scale: func.isRequired,\n  /**\n      Size of the ticks for each discrete tick mark.\n  */\n  innerTickSize: number,\n  /**\n      Size of the tick marks found at the beginning and end of the axis. It's\n      common to set this to \\`0\\` to remove them.\n  */\n  outerTickSize: number,\n  /**\n      An optional function that can format ticks. Generally this shouldn't be\n      needed since d3 has very good default formatters for most data.\n      Signature: \\`(tick) => {}\\`\n  */\n  tickFormat: func,\n  /**\n      If you need fine grained control over the axis ticks, you can pass them\n      in this array.\n  */\n  ticks: array,\n  /**\n      Determines the spacing between each tick and its text.\n  */\n  tickPadding: number,\n  /**\n      Determines the orientation of the ticks. \\`left\\` and \\`right\\` will\n      generate a vertical axis, whereas \\`top\\` and \\`bottom\\` will generate a\n      horizontal axis.\n  */\n  orient: oneOf(['top', 'bottom', 'left', 'right']),\n  /**\n      Control the number of ticks displayed. If the scale is time based or\n      linear, this number acts a \"hint\" per the default behavior of D3. If it's\n      an ordinal scale, this number is treated as an absolute number of ticks\n      to display and is powered by our own utility function \\`discreteTicks\\`.\n  */\n  tickCount: number,\n  /**\n      Determines the orientation of the tick text. This may override what the orient prop\n      tries to determine. This defaults to \\`horizontal\\`.\n  */\n  textOrientation: oneOf(['vertical', 'horizontal', 'diagonal'])\n};\nexport default Axis;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","discreteTicks","cx","bind","string","array","func","number","oneOf","defaultProps","innerTickSize","outerTickSize","tickPadding","textOrientation","orient","tickCount","Axis","props","className","scale","ticks","domain","tickFormat","identity","passThroughs","tickSpacing","Math","max","range","sign","isH","getOrientationProperties","textAnchor","x","y","dy","orientationSign","transform","orientationProperties","vertical","horizontal","diagonal","orientationKey","scaleNormalized","d","bandwidth","map","tick","key","x2","y2","style","displayName","peek","description","categories","propTypes","isRequired"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Axis/Axis.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3scale from 'd3-scale';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { discreteTicks } from '../../util/chart-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Axis');\n\nconst { string, array, func, number, oneOf } = PropTypes;\n\nexport interface IAxisPropsRaw extends StandardProps {\n\t/** Must be a d3 scale. Lucid exposes the \\`lucid.d3Scale\\` library for use here.\n\t We support `ScaleTime | ScaleBand | ScalePoint` and possibly more. */\n\tscale:\n\t\t| d3scale.ScaleBand<number>\n\t\t| d3scale.ScalePoint<number>\n\t\t| d3scale.ScaleContinuousNumeric<number, number>\n\t\t| d3scale.ScaleTime<number, number>;\n\t// | d3scale.ScalePower<number, number>\n\t// | d3scale.ScaleLogarithmic<number, number>;\n\n\t/** Size of the ticks for each discrete tick mark. */\n\tinnerTickSize: number;\n\n\t/** Size of the tick marks found at the beginning and end of the axis. It's\n\t\tcommon to set this to \\`0\\` to remove them. */\n\touterTickSize: number;\n\n\t/** An optional function that can format ticks. Generally this shouldn't be\n\t\tneeded since d3 has very good default formatters for most data. */\n\ttickFormat?: (d: number | Date) => string;\n\n\t/** If you need fine grained control over the axis ticks, you can pass them\n\t\tin this array. */\n\tticks?: Array<number | Date>;\n\n\t/** Determines the spacing between each tick and its text. */\n\ttickPadding: number;\n\n\t/** Determines the orientation of the ticks. \\`left\\` and \\`right\\` will\n\t\tgenerate a vertical axis, whereas \\`top\\` and \\`bottom\\` will generate a\n\t\thorizontal axis. */\n\torient: 'top' | 'bottom' | 'left' | 'right';\n\n\t/** Control the number of ticks displayed. If the scale is time based or\n\t\tlinear, this number acts a \"hint\" per the default behavior of D3. If it's\n\t\tan ordinal scale, this number is treated as an absolute number of ticks\n\t\tto display and is powered by our own utility function \\`discreteTicks\\`. */\n\ttickCount: number | null;\n\n\t/** Determines the orientation of the tick text. This may override what the orient prop\n\t\ttries to determine. This defaults to `horizontal`.  */\n\ttextOrientation: 'vertical' | 'horizontal' | 'diagonal';\n}\n\nexport type IAxisProps = Overwrite<\n\tReact.SVGAttributes<SVGGElement>,\n\tIAxisPropsRaw\n>;\n\nconst defaultProps = {\n\tinnerTickSize: 6, // same as d3\n\touterTickSize: 6, // same as d3\n\ttickPadding: 3, // same as d3\n\ttextOrientation: 'horizontal' as const,\n\torient: 'bottom' as const,\n\ttickCount: null,\n};\n\nexport const Axis = (props: IAxisProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tscale,\n\t\torient,\n\t\ttickCount,\n\t\tticks = 'ticks' in scale\n\t\t\t? scale.ticks(tickCount as number)\n\t\t\t: discreteTicks(scale.domain(), tickCount), // ordinal scales don't have `ticks` but they do have `domains`\n\t\tinnerTickSize,\n\t\touterTickSize,\n\t\ttickFormat = 'tickFormat' in scale ? scale.tickFormat() : _.identity,\n\t\ttickPadding,\n\t\ttextOrientation,\n\t\t...passThroughs\n\t} = props;\n\n\tconst tickSpacing = Math.max(innerTickSize, 0) + tickPadding;\n\n\t// Domain\n\tconst range = scale.range();\n\tconst sign = orient === 'top' || orient === 'left' ? -1 : 1;\n\tconst isH = orient === 'top' || orient === 'bottom'; // is horizontal\n\tconst getOrientationProperties = (\n\t\torient: string,\n\t\ttextOrientation: string\n\t): {\n\t\ttransform: string;\n\t\ttextAnchor: 'end' | 'middle' | 'start';\n\t\tx: number;\n\t\ty: number;\n\t\tdy: string;\n\t} => {\n\t\tlet textAnchor: 'end' | 'middle' | 'start',\n\t\t\tx: number,\n\t\t\ty: number,\n\t\t\tdy: string;\n\t\tlet orientationSign = sign;\n\n\t\tconst transform =\n\t\t\ttextOrientation === 'vertical'\n\t\t\t\t? 'rotate(-90)'\n\t\t\t\t: textOrientation === 'horizontal'\n\t\t\t\t? ''\n\t\t\t\t: 'rotate(-30)';\n\n\t\tswitch (orient) {\n\t\t\tcase 'bottom':\n\t\t\t\tif (textOrientation === 'vertical') {\n\t\t\t\t\torientationSign = -orientationSign;\n\t\t\t\t}\n\t\t\t\ttextAnchor =\n\t\t\t\t\ttextOrientation === 'vertical'\n\t\t\t\t\t\t? 'end'\n\t\t\t\t\t\t: textOrientation === 'diagonal'\n\t\t\t\t\t\t? 'end'\n\t\t\t\t\t\t: 'middle';\n\t\t\t\tx =\n\t\t\t\t\ttextOrientation === 'vertical'\n\t\t\t\t\t\t? orientationSign * tickSpacing\n\t\t\t\t\t\t: textOrientation === 'diagonal'\n\t\t\t\t\t\t? -orientationSign * tickSpacing\n\t\t\t\t\t\t: 0;\n\t\t\t\ty = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n\t\t\t\tdy = textOrientation === 'vertical' ? '.32em' : '.71em';\n\t\t\t\tbreak;\n\t\t\tcase 'top':\n\t\t\t\tif (textOrientation === 'vertical') {\n\t\t\t\t\torientationSign = -orientationSign;\n\t\t\t\t}\n\t\t\t\ttextAnchor =\n\t\t\t\t\ttextOrientation === 'vertical'\n\t\t\t\t\t\t? 'start'\n\t\t\t\t\t\t: textOrientation === 'diagonal'\n\t\t\t\t\t\t? 'start'\n\t\t\t\t\t\t: 'middle';\n\t\t\t\tx =\n\t\t\t\t\ttextOrientation === 'vertical' || textOrientation === 'diagonal'\n\t\t\t\t\t\t? -orientationSign * tickSpacing\n\t\t\t\t\t\t: 0;\n\t\t\t\ty = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n\t\t\t\tdy =\n\t\t\t\t\ttextOrientation === 'vertical' || textOrientation === 'diagonal'\n\t\t\t\t\t\t? '.32em'\n\t\t\t\t\t\t: '0em';\n\t\t\t\tbreak;\n\t\t\tcase 'right':\n\t\t\t\ttextAnchor = textOrientation === 'vertical' ? 'middle' : 'start';\n\t\t\t\tx = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n\t\t\t\ty =\n\t\t\t\t\ttextOrientation === 'vertical'\n\t\t\t\t\t\t? orientationSign * tickSpacing\n\t\t\t\t\t\t: textOrientation === 'horizontal'\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: orientationSign * tickSpacing;\n\t\t\t\tdy = textOrientation === 'vertical' ? '.71em' : '.32em';\n\t\t\t\tbreak;\n\t\t\tcase 'left':\n\t\t\t\ttextAnchor = textOrientation === 'vertical' ? 'middle' : 'end';\n\t\t\t\tx = textOrientation === 'vertical' ? 0 : orientationSign * tickSpacing;\n\t\t\t\ty =\n\t\t\t\t\ttextOrientation === 'vertical' || textOrientation === 'diagonal'\n\t\t\t\t\t\t? orientationSign * tickSpacing\n\t\t\t\t\t\t: 0;\n\t\t\t\tdy =\n\t\t\t\t\ttextOrientation === 'vertical'\n\t\t\t\t\t\t? '0em'\n\t\t\t\t\t\t: textOrientation === 'horizontal'\n\t\t\t\t\t\t? '.32em'\n\t\t\t\t\t\t: '.71em';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttextAnchor = 'start';\n\t\t\t\tx = 0;\n\t\t\t\ty = 0;\n\t\t\t\tdy = 'null';\n\t\t}\n\t\treturn {\n\t\t\ttransform,\n\t\t\ttextAnchor,\n\t\t\tx,\n\t\t\ty,\n\t\t\tdy,\n\t\t};\n\t};\n\tconst orientationProperties = {\n\t\tvertical: getOrientationProperties(orient, 'vertical'),\n\t\thorizontal: getOrientationProperties(orient, 'horizontal'),\n\t\tdiagonal: getOrientationProperties(orient, 'diagonal'),\n\t};\n\tconst orientationKey = textOrientation || 'horizontal';\n\n\t// Only band scales have `bandwidth`, this conditional helps center the\n\t// ticks on the bands\n\tconst scaleNormalized =\n\t\t'bandwidth' in scale\n\t\t\t? (d: number): number => (scale(d) as number) + scale.bandwidth() / 2\n\t\t\t: scale;\n\n\treturn (\n\t\t<g {...(passThroughs as any)} className={cx(className, '&')}>\n\t\t\t{isH ? (\n\t\t\t\t<path\n\t\t\t\t\tclassName={cx('&-domain')}\n\t\t\t\t\td={`M${range[0]},${sign * outerTickSize}V0H${range[1]}V${\n\t\t\t\t\t\tsign * outerTickSize\n\t\t\t\t\t}`}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<path\n\t\t\t\t\tclassName={cx('&-domain')}\n\t\t\t\t\td={`M${sign * outerTickSize},${range[0]}H0V${range[1]}H${\n\t\t\t\t\t\tsign * outerTickSize\n\t\t\t\t\t}`}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{_.map(\n\t\t\t\tticks,\n\t\t\t\t(tick: number): JSX.Element => (\n\t\t\t\t\t<g\n\t\t\t\t\t\tkey={tick}\n\t\t\t\t\t\ttransform={`translate(${isH ? scaleNormalized(tick) : 0}, ${\n\t\t\t\t\t\t\tisH ? 0 : scaleNormalized(tick)\n\t\t\t\t\t\t})`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<line\n\t\t\t\t\t\t\tclassName={cx('&-tick')}\n\t\t\t\t\t\t\tx2={isH ? 0 : sign * innerTickSize}\n\t\t\t\t\t\t\ty2={isH ? sign * innerTickSize : 0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<text\n\t\t\t\t\t\t\tclassName={cx('&-tick-text')}\n\t\t\t\t\t\t\tx={orientationProperties[orientationKey].x}\n\t\t\t\t\t\t\ty={orientationProperties[orientationKey].y}\n\t\t\t\t\t\t\tdy={orientationProperties[orientationKey].dy}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttextAnchor: orientationProperties[orientationKey].textAnchor,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttransform={orientationProperties[orientationKey].transform}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{tickFormat(tick as any)}\n\t\t\t\t\t\t</text>\n\t\t\t\t\t</g>\n\t\t\t\t)\n\t\t\t)}\n\t\t</g>\n\t);\n};\n\nAxis.defaultProps = defaultProps;\nAxis.displayName = 'Axis';\nAxis.peek = {\n\tdescription: `\\`Axis\\` is used within an \\`svg\\`. An \\`Axis\\` is used to help render human-readable reference marks on charts. It can either be horizontal or vertical and really only needs a scale to be able to draw properly. This component is a very close sister to d3's svg axis and most of the logic was ported from there.`,\n\tcategories: ['visualizations', 'chart primitives'],\n};\nAxis.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tMust be a d3 scale. Lucid exposes the \\`lucid.d3Scale\\` library for use\n\t\there.\n\t*/\n\tscale: func.isRequired,\n\n\t/**\n\t\tSize of the ticks for each discrete tick mark.\n\t*/\n\tinnerTickSize: number,\n\n\t/**\n\t\tSize of the tick marks found at the beginning and end of the axis. It's\n\t\tcommon to set this to \\`0\\` to remove them.\n\t*/\n\touterTickSize: number,\n\n\t/**\n\t\tAn optional function that can format ticks. Generally this shouldn't be\n\t\tneeded since d3 has very good default formatters for most data.\n\t\tSignature: \\`(tick) => {}\\`\n\t*/\n\ttickFormat: func,\n\n\t/**\n\t\tIf you need fine grained control over the axis ticks, you can pass them\n\t\tin this array.\n\t*/\n\tticks: array,\n\n\t/**\n\t\tDetermines the spacing between each tick and its text.\n\t*/\n\ttickPadding: number,\n\n\t/**\n\t\tDetermines the orientation of the ticks. \\`left\\` and \\`right\\` will\n\t\tgenerate a vertical axis, whereas \\`top\\` and \\`bottom\\` will generate a\n\t\thorizontal axis.\n\t*/\n\torient: oneOf(['top', 'bottom', 'left', 'right']),\n\n\t/**\n\t\tControl the number of ticks displayed. If the scale is time based or\n\t\tlinear, this number acts a \"hint\" per the default behavior of D3. If it's\n\t\tan ordinal scale, this number is treated as an absolute number of ticks\n\t\tto display and is powered by our own utility function \\`discreteTicks\\`.\n\t*/\n\ttickCount: number,\n\n\t/**\n\t\tDetermines the orientation of the tick text. This may override what the orient prop\n\t\ttries to determine. This defaults to \\`horizontal\\`.\n\t*/\n\ttextOrientation: oneOf(['vertical', 'horizontal', 'diagonal']),\n};\n\nexport default Axis;\n"]},"metadata":{},"sourceType":"module"}