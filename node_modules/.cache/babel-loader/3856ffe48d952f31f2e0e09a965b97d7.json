{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-RadioButton');\nconst {\n  bool,\n  func,\n  object,\n  string\n} = PropTypes;\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['callbackId', 'children', 'className', 'isDisabled', 'isSelected', 'name', 'onSelect', 'style'];\nexport const defaultProps = {\n  isDisabled: false,\n  isSelected: false,\n  onSelect: _.noop\n};\nexport const RadioButton = props => {\n  const {\n    className,\n    isDisabled,\n    isSelected,\n    onSelect,\n    style,\n    ...passThroughs\n  } = props;\n  const nativeElement = React.createRef();\n  function handleClicked(event) {\n    if (!isDisabled && !isSelected) {\n      onSelect(true, {\n        event,\n        props\n      });\n      if (nativeElement.current) {\n        nativeElement.current.focus();\n      }\n    }\n  }\n  function handleSpanClick(e) {\n    e.preventDefault();\n  }\n  return React.createElement(\"span\", {\n    className: cx('&', {\n      '&-is-disabled': isDisabled,\n      '&-is-selected': isSelected\n    }, className),\n    onClick: e => handleClicked(e),\n    style: style\n  }, React.createElement(\"input\", {\n    onChange: _.noop,\n    ..._.omit(passThroughs, nonPassThroughs),\n    checked: isSelected,\n    className: cx('&-native'),\n    disabled: isDisabled,\n    ref: nativeElement,\n    type: 'radio'\n  }), React.createElement(\"span\", {\n    onClick: handleSpanClick,\n    className: cx('&-visualization-glow')\n  }), React.createElement(\"span\", {\n    onClick: handleSpanClick,\n    className: cx('&-visualization-container')\n  }), React.createElement(\"span\", {\n    onClick: handleSpanClick,\n    className: cx('&-visualization-dot')\n  }));\n};\nRadioButton.defaultProps = defaultProps;\nRadioButton.displayName = 'RadioButton';\nRadioButton.peek = {\n  description: `\\`RadioButton\\` is a round two-state toggle used to create \\`RadioButtonLabeled\\`. It uses a hidden native checkbox control under the hood but leverages other \\`HTML\\` elements to visualize its state.`,\n  notes: {\n    overview: `RadioButton is a round two-state toggle. Use \\`RadioButtonLabeled\\` or \\`RadioGroup\\` in your applications.`,\n    intendedUse: `Used to create \\`RadioButtonLabeled\\` and \\`RadioGroup\\`.`,\n    technicalRecommendations: `\n\t\t\t- Use the Selected state when a filter or setting will be applied.\n\t\t\t- Use the Unselected state when a filter or setting will not be applied.\n\t\t\t- Any props that are not explicitly defined in \\`propTypes\\` are passed to the native radio button control.\n\t\t`\n  },\n  categories: ['controls', 'toggles']\n};\nRadioButton.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Indicates whether the component should appear and act disabled by having\n      a \"greyed out\" palette and ignoring user interactions.\n  */\n  isDisabled: bool,\n  /**\n      Indicates that the component is in the \"selected\" state when true and in\n      the \"unselected\" state when false.\n  */\n  isSelected: bool,\n  /**\n  Optional name for the input element.\n  */\n  name: string,\n  /**\n      Called when the user clicks on the component or when they press the space\n      key while the component is in focus, and only called when the component\n      is in the unselected state.  Signature: \\`(true, { event, props }) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Passed through to the root element.\n  */\n  style: object\n};\nexport default RadioButton;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","cx","bind","bool","func","object","string","nonPassThroughs","defaultProps","isDisabled","isSelected","onSelect","noop","RadioButton","props","className","style","passThroughs","nativeElement","createRef","handleClicked","event","current","focus","handleSpanClick","e","preventDefault","onClick","onChange","omit","checked","disabled","ref","type","displayName","peek","description","notes","overview","intendedUse","technicalRecommendations","categories","propTypes","name"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/RadioButton/RadioButton.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-RadioButton');\nconst { bool, func, object, string } = PropTypes;\n\nexport interface IRadioButtonPropsRaw extends StandardProps {\n\t/** Indicates whether the component should appear and act disabled by having\n\t * a \"greyed out\" palette and ignoring user interactions.\n\t *\n\t * @default false\n\t */\n\tisDisabled: boolean;\n\n\t/** Indicates that the component is in the \"selected\" state when true and in\n\t * the \"unselected\" state when false.\n\t *\n\t * @default false\n\t */\n\tisSelected: boolean;\n\n\t/** Optional name for the input element */\n\tname?: string;\n\n\t/** Called when the user clicks on the component or when they press the space\n\t * key while the component is in focus, and only called when the component\n\t * is in the unselected state.\n\t */\n\tonSelect: (\n\t\tisSelected: boolean,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent<HTMLSpanElement>;\n\t\t\tprops: IRadioButtonProps;\n\t\t}\n\t) => void;\n}\n\nexport type IRadioButtonProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.HTMLAttributes<HTMLSpanElement>,\n\t\tHTMLSpanElement\n\t>,\n\tIRadioButtonPropsRaw\n>;\n\n/** TODO: Remove nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'callbackId',\n\t'children',\n\t'className',\n\t'isDisabled',\n\t'isSelected',\n\t'name',\n\t'onSelect',\n\t'style',\n];\n\nexport const defaultProps = {\n\tisDisabled: false,\n\tisSelected: false,\n\tonSelect: _.noop,\n};\n\nexport const RadioButton = (props: IRadioButtonProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tisDisabled,\n\t\tisSelected,\n\t\tonSelect,\n\t\tstyle,\n\t\t...passThroughs\n\t} = props;\n\n\tconst nativeElement = React.createRef<HTMLInputElement>();\n\n\tfunction handleClicked(event: React.MouseEvent<HTMLSpanElement>): void {\n\t\tif (!isDisabled && !isSelected) {\n\t\t\tonSelect(true, { event, props });\n\t\t\tif (nativeElement.current) {\n\t\t\t\tnativeElement.current.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleSpanClick(e: React.MouseEvent<HTMLSpanElement>): void {\n\t\te.preventDefault();\n\t}\n\n\treturn (\n\t\t<span\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-selected': isSelected,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tonClick={(e) => handleClicked(e)}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t<input\n\t\t\t\tonChange={_.noop}\n\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\tchecked={isSelected}\n\t\t\t\tclassName={cx('&-native')}\n\t\t\t\tdisabled={isDisabled}\n\t\t\t\tref={nativeElement}\n\t\t\t\ttype='radio'\n\t\t\t/>\n\t\t\t<span onClick={handleSpanClick} className={cx('&-visualization-glow')} />\n\t\t\t<span\n\t\t\t\tonClick={handleSpanClick}\n\t\t\t\tclassName={cx('&-visualization-container')}\n\t\t\t/>\n\t\t\t<span onClick={handleSpanClick} className={cx('&-visualization-dot')} />\n\t\t</span>\n\t);\n};\n\nRadioButton.defaultProps = defaultProps;\n\nRadioButton.displayName = 'RadioButton';\n\nRadioButton.peek = {\n\tdescription: `\\`RadioButton\\` is a round two-state toggle used to create \\`RadioButtonLabeled\\`. It uses a hidden native checkbox control under the hood but leverages other \\`HTML\\` elements to visualize its state.`,\n\tnotes: {\n\t\toverview: `RadioButton is a round two-state toggle. Use \\`RadioButtonLabeled\\` or \\`RadioGroup\\` in your applications.`,\n\t\tintendedUse: `Used to create \\`RadioButtonLabeled\\` and \\`RadioGroup\\`.`,\n\t\ttechnicalRecommendations: `\n\t\t\t- Use the Selected state when a filter or setting will be applied.\n\t\t\t- Use the Unselected state when a filter or setting will not be applied.\n\t\t\t- Any props that are not explicitly defined in \\`propTypes\\` are passed to the native radio button control.\n\t\t`,\n\t},\n\tcategories: ['controls', 'toggles'],\n};\n\nRadioButton.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tIndicates whether the component should appear and act disabled by having\n\t\ta \"greyed out\" palette and ignoring user interactions.\n\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\tIndicates that the component is in the \"selected\" state when true and in\n\t\tthe \"unselected\" state when false.\n\t*/\n\tisSelected: bool,\n\n\t/**\n\tOptional name for the input element.\n\t*/\n\tname: string,\n\n\t/**\n\t\tCalled when the user clicks on the component or when they press the space\n\t\tkey while the component is in focus, and only called when the component\n\t\tis in the unselected state.  Signature: \\`(true, { event, props }) => {}\\`\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n};\n\nexport default RadioButton;\n"]},"metadata":{},"sourceType":"module"}