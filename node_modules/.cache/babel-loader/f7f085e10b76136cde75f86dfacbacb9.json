{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { getFirst, findTypes } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './Tabs.reducers';\nimport Badge from '../Badge/Badge';\nconst cx = lucidClassNames.bind('&-Tabs');\nconst {\n  bool,\n  func,\n  node,\n  number,\n  string,\n  any\n} = PropTypes;\nconst Title = props => null;\nTitle.peek = {\n  description: `\\`Titles\\` can be provided as a child or prop to a \\`Tab\\`.`\n};\nTitle.displayName = 'Tabs.Title';\nTitle.propName = 'Title';\nconst Tab = props => {\n  const {\n    isDisabled,\n    isLastTab,\n    isOpen,\n    isProgressive,\n    isSelected,\n    Title,\n    className,\n    count,\n    isVariableCountWidth,\n    index = 0,\n    // this defaults should not be invoked unless someone is using `Tab` outside of `Tabs`\n    onSelect = _.noop,\n    // this defaults should not be invoked unless someone is using `Tab` outside of `Tabs`\n    ...passThroughs\n  } = props;\n  const handleClick = event => {\n    if (!isDisabled) {\n      onSelect(index, props, event);\n    }\n  };\n  return React.createElement(\"li\", {\n    className: cx('&-Tab', {\n      '&-Tab-is-active': isSelected,\n      '&-Tab-is-disabled': isDisabled,\n      '&-Tab-is-active-and-open': isOpen && isSelected,\n      '&-Tab-is-progressive': isProgressive && !isLastTab\n    }, className),\n    onClick: handleClick,\n    ...passThroughs\n  }, React.createElement(\"span\", {\n    className: cx('&-Tab-content')\n  }, Title, !_.isNil(count) && React.createElement(Badge, {\n    style: {\n      marginLeft: '12px',\n      width: isVariableCountWidth ? undefined : '20px',\n      minWidth: '20px'\n    },\n    type: 'stroke',\n    kind: isSelected ? 'primary' : 'default'\n  }, count)), isProgressive && !isLastTab && React.createElement(\"span\", {\n    className: cx('&-Tab-arrow')\n  }, React.createElement(\"svg\", {\n    className: cx('&-Tab-arrow-svg'),\n    viewBox: '0 0 8 37',\n    preserveAspectRatio: 'none'\n  }, React.createElement(\"polyline\", {\n    className: cx('&-Tab-arrow-tab-line'),\n    fill: '#fff',\n    points: '0,0 1,1 0,1'\n  }), React.createElement(\"polyline\", {\n    className: cx('&-Tab-arrow-line'),\n    fill: 'none',\n    stroke: '#fff',\n    strokeWidth: '1',\n    points: '0,37 7.3,18.5 0,0'\n  }))));\n};\nTab.peek = {\n  description: `Content that will be rendered in a tab. Be sure to nest a \\`Title\\` inside each \\`Tab\\` or provide it as a prop. Props other than \\`isDisabled\\`, \\`isSelected\\`, and \\`Title\\` can be inferred from the parent \\`Tabs\\` component, but directly provided \\`props\\` will take precedence.`\n};\nTab.displayName = 'Tabs.Tab';\nTab.propName = 'Tab';\nTab.propTypes = {\n  /**\n          Class names that are appended to the defaults.\n      */\n  className: string,\n  /**\n          The index of this \\`Tab\\` within the list of \\`Tabs\\`.\n      */\n  index: number,\n  /**\n          Styles a \\`Tab\\` as disabled. This is typically used with\n          \\`isProgressive\\` to disable steps that have not been completed and\n          should not be selected until the current step has been completed.\n      */\n  isDisabled: bool,\n  /**\n          If \\`true\\`, this \\`Tab\\` is the last \\`Tab\\` in the list of \\`Tabs\\`.\n      */\n  isLastTab: bool,\n  /**\n          If \\`true\\` then the active \\`Tab\\` will appear open on the bottom.\n      */\n  isOpen: bool,\n  /**\n          If \\`true\\`, the \\`Tab\\` will appear as a \\`Progressive\\` tab.\n      */\n  isProgressive: bool,\n  /**\n          If \\`true\\`, the \\`Tab\\` will appear selected.\n      */\n  isSelected: bool,\n  /**\n          Callback for when the user clicks a \\`Tab\\`. Called with the index of the\n          \\`Tab\\` that was clicked.\n      */\n  onSelect: func,\n  /**\n          The content to be rendered as the \\`Title\\` of the \\`Tab\\`.\n      */\n  Title: node,\n  /**\n          Optional prop that will show a count number next to the tab's title.\n      */\n  count: number,\n  /**\n          Defaults to false.\n          Allows the count bubble to grow large. Useful if working with huge numbers.\n      */\n  isVariableCountWidth: bool\n};\n/** TODO: Remove this constant when the component is converted to a functional component */\nconst nonPassThroughs = ['className', 'selectedIndex', 'onSelect', 'isOpen', 'isProgressive', 'isFloating', 'hasMultilineTitle', 'hasFullWidthTabs', 'Tab'];\nclass Tabs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleClicked = (index, tabProps, event) => {\n      const {\n        onSelect\n      } = this.props;\n      onSelect && onSelect(index, {\n        event,\n        props: tabProps\n      });\n    };\n  }\n  render() {\n    const {\n      className,\n      hasMultilineTitle,\n      isOpen,\n      isProgressive,\n      selectedIndex,\n      hasFullWidthTabs,\n      isFloating,\n      ...passThroughs\n    } = this.props;\n    // Grab props array from each Tab\n    const tabChildProps = _.map(findTypes(this.props, Tab), 'props');\n    const selectedIndexFromChildren = _.findLastIndex(tabChildProps, {\n      isSelected: true\n    });\n    const actualSelectedIndex = selectedIndexFromChildren !== -1 ? selectedIndexFromChildren : selectedIndex;\n    return React.createElement(\"div\", {\n      ..._.omit(passThroughs, nonPassThroughs),\n      className: cx('&', className)\n    }, React.createElement(\"ul\", {\n      className: cx('&-bar', {\n        '&-bar-is-multiline': hasMultilineTitle,\n        '&-variable-width': !hasFullWidthTabs,\n        '&-floating': isFloating\n      })\n    }, _.map(tabChildProps, (tabProps, index) => React.createElement(Tab, {\n      key: index,\n      index: index,\n      isLastTab: index === tabChildProps.length - 1,\n      isOpen: isOpen,\n      isProgressive: isProgressive,\n      isSelected: index === actualSelectedIndex,\n      onSelect: this.handleClicked,\n      Title: _.get(getFirst(tabProps, Tabs.Title), 'props.children', ''),\n      ...tabProps\n    }))), React.createElement(\"div\", {\n      className: cx('&-content')\n    }, _.get(tabChildProps, [_.isUndefined(actualSelectedIndex) ? '' : actualSelectedIndex, 'children'])));\n  }\n}\nTabs.displayName = 'Tabs';\nTabs.Title = Title;\nTabs.Tab = Tab;\nTabs.reducers = reducers;\nTabs.peek = {\n  description: `\\`Tabs\\` provides tabbed navigation. It has a flexible interface that allows \\`tab\\` content to be passed as regular \\`React\\` children or through \\`props\\`.`,\n  categories: ['navigation']\n};\nTabs.propTypes = {\n  /**\n      Class names that are appended to the defaults.\n  */\n  className: string,\n  /**\n      Indicates which of the \\`Tabs.Tab\\` children is currently selected. The\n      index of the last \\`Tabs.Tab\\` child with \\`isSelected\\` equal to\n      \\`true\\` takes precedence over this prop.\n  */\n  selectedIndex: number,\n  /**\n      Callback for when the user clicks a tab. Called with the index of the tab\n      that was clicked.\n  */\n  onSelect: func,\n  /**\n      If \\`true\\` then the active tab will appear open on the bottom.\n  */\n  isOpen: bool,\n  /**\n      Style the tabs as a progression. This is typically used for a work flow\n      where the user needs to move forward and backward through a series of\n      steps.\n  */\n  isProgressive: bool,\n  /**\n      Provides a small bottom border that offers a barrier between the tab\n      group and the rest of the page.\n      Useful if the tabs are not anchored to anything.\n  */\n  isFloating: bool,\n  /**\n      Set the multiline className. This is typically used for styling the\n      Tab.Title bar for improved readability when there are multiple React\n      elements in the tab headers.\n  */\n  hasMultilineTitle: bool,\n  /**\n      If \\`true\\` the width will be evenly distributed to all tabs.  \\`False\\`\n      typically used in conjunction with \\`Tab.width\\`\n  */\n  hasFullWidthTabs: bool,\n  Tab: any /**\n           *Child Element* Can be used to define one or more individual \\`Tab\\`s in\n           the sequence of \\`Tabs\\`.\n           */\n};\n\nTabs.defaultProps = {\n  selectedIndex: 0,\n  onSelect: _.noop,\n  isOpen: true,\n  isProgressive: false,\n  isFloating: false,\n  hasMultilineTitle: false,\n  hasFullWidthTabs: false\n};\nexport default buildModernHybridComponent(Tabs, {\n  reducers\n});\nexport { Tabs as TabsDumb };","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","getFirst","findTypes","buildModernHybridComponent","reducers","Badge","cx","bind","bool","func","node","number","string","any","Title","props","peek","description","displayName","propName","Tab","isDisabled","isLastTab","isOpen","isProgressive","isSelected","className","count","isVariableCountWidth","index","onSelect","noop","passThroughs","handleClick","event","onClick","isNil","style","marginLeft","width","undefined","minWidth","type","kind","viewBox","preserveAspectRatio","fill","points","stroke","strokeWidth","propTypes","nonPassThroughs","Tabs","Component","constructor","tabProps","render","hasMultilineTitle","selectedIndex","hasFullWidthTabs","isFloating","tabChildProps","map","selectedIndexFromChildren","findLastIndex","actualSelectedIndex","omit","key","length","handleClicked","get","isUndefined","categories","TabsDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Tabs/Tabs.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport {\n\tgetFirst,\n\tfindTypes,\n\tStandardProps,\n\tOverwrite,\n} from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './Tabs.reducers';\nimport Badge from '../Badge/Badge';\n\nconst cx = lucidClassNames.bind('&-Tabs');\n\nconst { bool, func, node, number, string, any } = PropTypes;\n\n/** TITLE */\nexport interface ITitleProps extends StandardProps {}\nconst Title = (props: ITitleProps): null => null;\nTitle.peek = {\n\tdescription: `\\`Titles\\` can be provided as a child or prop to a \\`Tab\\`.`,\n};\nTitle.displayName = 'Tabs.Title';\nTitle.propName = 'Title';\n\n/** TAB */\nexport interface ITabProps extends StandardProps {\n\t/** The index of this \\`Tab\\` within the list of \\`Tabs\\`. */\n\tindex?: number;\n\n\t/**Styles a \\`Tab\\` as disabled. This is typically used with\n\t\t\t\\`isProgressive\\` to disable steps that have not been completed and\n\t\t\tshould not be selected until the current step has been completed. */\n\tisDisabled?: boolean;\n\n\t/** If \\`true\\`, this \\`Tab\\` is the last \\`Tab\\` in the list of \\`Tabs\\`. */\n\tisLastTab?: boolean;\n\n\t/** If \\`true\\` then the active \\`Tab\\` will appear open on the bottom. */\n\tisOpen?: boolean;\n\n\t/** If \\`true\\`, the \\`Tab\\` will appear as a \\`Progressive\\` tab. */\n\tisProgressive?: boolean;\n\n\t/** If \\`true\\`, the \\`Tab\\` will appear selected. */\n\tisSelected?: boolean;\n\n\t/** Callback for when the user clicks a \\`Tab\\`. Called with the index of the\n\t\t\t\\`Tab\\` that was clicked. */\n\tonSelect?: (\n\t\tindex: number,\n\t\ttabProps: ITabProps,\n\t\tevent: React.MouseEvent<HTMLLIElement>\n\t) => void;\n\n\t/** The content to be rendered as the \\`Title\\` of the \\`Tab\\`. */\n\tTitle?: string | (React.ReactNode & { props: ITitleProps });\n\n\t/** Optional prop that will show a count number next to the tab's title. */\n\tcount?: number | string;\n\n\t/** Defaults to false.\n\t\t\tAllows the count bubble to grow large. Useful if working with huge numbers. */\n\tisVariableCountWidth?: boolean;\n}\n\ntype ITabPropsWithPassThroughs = Overwrite<\n\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLLIElement>, HTMLLIElement>,\n\tITabProps\n>;\n\nconst Tab = (props: ITabPropsWithPassThroughs): React.ReactElement => {\n\tconst {\n\t\tisDisabled,\n\t\tisLastTab,\n\t\tisOpen,\n\t\tisProgressive,\n\t\tisSelected,\n\t\tTitle,\n\t\tclassName,\n\t\tcount,\n\t\tisVariableCountWidth,\n\t\tindex = 0, // this defaults should not be invoked unless someone is using `Tab` outside of `Tabs`\n\t\tonSelect = _.noop, // this defaults should not be invoked unless someone is using `Tab` outside of `Tabs`\n\t\t...passThroughs\n\t} = props;\n\tconst handleClick = (event: React.MouseEvent<HTMLLIElement>) => {\n\t\tif (!isDisabled) {\n\t\t\tonSelect(index, props, event);\n\t\t}\n\t};\n\n\treturn (\n\t\t<li\n\t\t\tclassName={cx(\n\t\t\t\t'&-Tab',\n\t\t\t\t{\n\t\t\t\t\t'&-Tab-is-active': isSelected,\n\t\t\t\t\t'&-Tab-is-disabled': isDisabled,\n\t\t\t\t\t'&-Tab-is-active-and-open': isOpen && isSelected,\n\t\t\t\t\t'&-Tab-is-progressive': isProgressive && !isLastTab,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tonClick={handleClick}\n\t\t\t{...passThroughs}\n\t\t>\n\t\t\t<span className={cx('&-Tab-content')}>\n\t\t\t\t{Title}\n\t\t\t\t{!_.isNil(count) && (\n\t\t\t\t\t<Badge\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginLeft: '12px',\n\t\t\t\t\t\t\twidth: isVariableCountWidth ? undefined : '20px',\n\t\t\t\t\t\t\tminWidth: '20px',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttype='stroke'\n\t\t\t\t\t\tkind={isSelected ? 'primary' : 'default'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{count}\n\t\t\t\t\t</Badge>\n\t\t\t\t)}\n\t\t\t</span>\n\t\t\t{isProgressive && !isLastTab && (\n\t\t\t\t<span className={cx('&-Tab-arrow')}>\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclassName={cx('&-Tab-arrow-svg')}\n\t\t\t\t\t\tviewBox={'0 0 8 37'}\n\t\t\t\t\t\tpreserveAspectRatio='none'\n\t\t\t\t\t>\n\t\t\t\t\t\t<polyline\n\t\t\t\t\t\t\tclassName={cx('&-Tab-arrow-tab-line')}\n\t\t\t\t\t\t\tfill='#fff'\n\t\t\t\t\t\t\tpoints='0,0 1,1 0,1'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<polyline\n\t\t\t\t\t\t\tclassName={cx('&-Tab-arrow-line')}\n\t\t\t\t\t\t\tfill='none'\n\t\t\t\t\t\t\tstroke='#fff'\n\t\t\t\t\t\t\tstrokeWidth='1'\n\t\t\t\t\t\t\tpoints={'0,37 7.3,18.5 0,0'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</li>\n\t);\n};\n\nTab.peek = {\n\tdescription: `Content that will be rendered in a tab. Be sure to nest a \\`Title\\` inside each \\`Tab\\` or provide it as a prop. Props other than \\`isDisabled\\`, \\`isSelected\\`, and \\`Title\\` can be inferred from the parent \\`Tabs\\` component, but directly provided \\`props\\` will take precedence.`,\n};\n\nTab.displayName = 'Tabs.Tab';\n\nTab.propName = 'Tab';\n\nTab.propTypes = {\n\t/**\n\t\t\tClass names that are appended to the defaults.\n\t\t*/\n\tclassName: string,\n\n\t/**\n\t\t\tThe index of this \\`Tab\\` within the list of \\`Tabs\\`.\n\t\t*/\n\tindex: number,\n\n\t/**\n\t\t\tStyles a \\`Tab\\` as disabled. This is typically used with\n\t\t\t\\`isProgressive\\` to disable steps that have not been completed and\n\t\t\tshould not be selected until the current step has been completed.\n\t\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\t\tIf \\`true\\`, this \\`Tab\\` is the last \\`Tab\\` in the list of \\`Tabs\\`.\n\t\t*/\n\tisLastTab: bool,\n\n\t/**\n\t\t\tIf \\`true\\` then the active \\`Tab\\` will appear open on the bottom.\n\t\t*/\n\tisOpen: bool,\n\n\t/**\n\t\t\tIf \\`true\\`, the \\`Tab\\` will appear as a \\`Progressive\\` tab.\n\t\t*/\n\tisProgressive: bool,\n\n\t/**\n\t\t\tIf \\`true\\`, the \\`Tab\\` will appear selected.\n\t\t*/\n\tisSelected: bool,\n\n\t/**\n\t\t\tCallback for when the user clicks a \\`Tab\\`. Called with the index of the\n\t\t\t\\`Tab\\` that was clicked.\n\t\t*/\n\tonSelect: func,\n\n\t/**\n\t\t\tThe content to be rendered as the \\`Title\\` of the \\`Tab\\`.\n\t\t*/\n\tTitle: node,\n\n\t/**\n\t\t\tOptional prop that will show a count number next to the tab's title.\n\t\t*/\n\tcount: number,\n\n\t/**\n\t\t\tDefaults to false.\n\t\t\tAllows the count bubble to grow large. Useful if working with huge numbers.\n\t\t*/\n\tisVariableCountWidth: bool,\n};\n\n/** TABS */\nexport interface ITabsProps extends StandardProps {\n\t/** Indicates which of the \\`Tabs.Tab\\` children is currently selected. The\n\tindex of the last \\`Tabs.Tab\\` child with \\`isSelected\\` equal to\n\t\\`true\\` takes precedence over this prop. */\n\tselectedIndex?: number;\n\n\t/** Callback for when the user clicks a tab. Called with the index of the tab\n\tthat was clicked. */\n\tonSelect?: (\n\t\tindex: number,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: { props: ITabProps; event: React.MouseEvent<HTMLLIElement> }\n\t) => void;\n\n\t/** If \\`true\\` then the active tab will appear open on the bottom. */\n\tisOpen?: boolean;\n\n\t/** Style the tabs as a progression. This is typically used for a work flow\n\twhere the user needs to move forward and backward through a series of\n\tsteps. */\n\tisProgressive?: boolean;\n\n\t/** Provides a small bottom border that offers a barrier between the tab\n\tgroup and the rest of the page.\n\tUseful if the tabs are not anchored to anything. */\n\tisFloating?: boolean;\n\n\t/** Set the multiline className. This is typically used for styling the\n\tTab.Title bar for improved readability when there are multiple React\n\telements in the tab headers. */\n\thasMultilineTitle?: boolean;\n\n\t/** If \\`true\\` the width will be evenly distributed to all tabs.  \\`False\\`\n\ttypically used in conjunction with \\`Tab.width\\` */\n\thasFullWidthTabs?: boolean;\n\n\t/** *Child Element* Can be used to define one or more individual \\`Tab\\`s in\n\tthe sequence of \\`Tabs\\`. */\n\tTab?: string | (React.ReactNode & { props: ITabProps });\n\n\tTitle?: string | (React.ReactNode & { props: ITitleProps });\n}\n\ntype ITabsPropsWithPassThroughs = Overwrite<\n\tReact.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\n\tITabsProps\n>;\n\nexport interface ITabsState {\n\tselectedIndex: number;\n}\n\n/** TODO: Remove this constant when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'className',\n\t'selectedIndex',\n\t'onSelect',\n\t'isOpen',\n\t'isProgressive',\n\t'isFloating',\n\t'hasMultilineTitle',\n\t'hasFullWidthTabs',\n\t'Tab',\n];\n\nclass Tabs extends React.Component<ITabsPropsWithPassThroughs, ITabsState> {\n\tstatic displayName = 'Tabs';\n\tstatic Title = Title;\n\tstatic Tab = Tab;\n\n\tstatic reducers = reducers;\n\n\tstatic peek = {\n\t\tdescription: `\\`Tabs\\` provides tabbed navigation. It has a flexible interface that allows \\`tab\\` content to be passed as regular \\`React\\` children or through \\`props\\`.`,\n\t\tcategories: ['navigation'],\n\t};\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tClass names that are appended to the defaults.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tIndicates which of the \\`Tabs.Tab\\` children is currently selected. The\n\t\t\tindex of the last \\`Tabs.Tab\\` child with \\`isSelected\\` equal to\n\t\t\t\\`true\\` takes precedence over this prop.\n\t\t*/\n\t\tselectedIndex: number,\n\n\t\t/**\n\t\t\tCallback for when the user clicks a tab. Called with the index of the tab\n\t\t\tthat was clicked.\n\t\t*/\n\t\tonSelect: func,\n\n\t\t/**\n\t\t\tIf \\`true\\` then the active tab will appear open on the bottom.\n\t\t*/\n\t\tisOpen: bool,\n\n\t\t/**\n\t\t\tStyle the tabs as a progression. This is typically used for a work flow\n\t\t\twhere the user needs to move forward and backward through a series of\n\t\t\tsteps.\n\t\t*/\n\t\tisProgressive: bool,\n\n\t\t/**\n\t\t\tProvides a small bottom border that offers a barrier between the tab\n\t\t\tgroup and the rest of the page.\n\t\t\tUseful if the tabs are not anchored to anything.\n\t\t*/\n\t\tisFloating: bool,\n\n\t\t/**\n\t\t\tSet the multiline className. This is typically used for styling the\n\t\t\tTab.Title bar for improved readability when there are multiple React\n\t\t\telements in the tab headers.\n\t\t*/\n\t\thasMultilineTitle: bool,\n\n\t\t/**\n\t\t\tIf \\`true\\` the width will be evenly distributed to all tabs.  \\`False\\`\n\t\t\ttypically used in conjunction with \\`Tab.width\\`\n\t\t*/\n\t\thasFullWidthTabs: bool,\n\n\t\tTab: any /**\n\t\t\t*Child Element* Can be used to define one or more individual \\`Tab\\`s in\n\t\t\tthe sequence of \\`Tabs\\`.\n\t\t*/,\n\t};\n\n\tstatic defaultProps = {\n\t\tselectedIndex: 0,\n\t\tonSelect: _.noop,\n\t\tisOpen: true,\n\t\tisProgressive: false,\n\t\tisFloating: false,\n\t\thasMultilineTitle: false,\n\t\thasFullWidthTabs: false,\n\t};\n\n\thandleClicked = (\n\t\tindex: number,\n\t\ttabProps: ITabProps,\n\t\tevent: React.MouseEvent<HTMLLIElement>\n\t): void => {\n\t\tconst { onSelect } = this.props;\n\n\t\tonSelect && onSelect(index, { event, props: tabProps });\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tclassName,\n\t\t\thasMultilineTitle,\n\t\t\tisOpen,\n\t\t\tisProgressive,\n\t\t\tselectedIndex,\n\t\t\thasFullWidthTabs,\n\t\t\tisFloating,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\t// Grab props array from each Tab\n\t\tconst tabChildProps = _.map(findTypes(this.props, Tab), 'props');\n\n\t\tconst selectedIndexFromChildren = _.findLastIndex(tabChildProps, {\n\t\t\tisSelected: true,\n\t\t});\n\n\t\tconst actualSelectedIndex =\n\t\t\tselectedIndexFromChildren !== -1\n\t\t\t\t? selectedIndexFromChildren\n\t\t\t\t: selectedIndex;\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...(_.omit(passThroughs, nonPassThroughs) as any)}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t>\n\t\t\t\t<ul\n\t\t\t\t\tclassName={cx('&-bar', {\n\t\t\t\t\t\t'&-bar-is-multiline': hasMultilineTitle,\n\t\t\t\t\t\t'&-variable-width': !hasFullWidthTabs,\n\t\t\t\t\t\t'&-floating': isFloating,\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{_.map(tabChildProps, (tabProps, index) => (\n\t\t\t\t\t\t<Tab\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\tisLastTab={index === tabChildProps.length - 1}\n\t\t\t\t\t\t\tisOpen={isOpen}\n\t\t\t\t\t\t\tisProgressive={isProgressive}\n\t\t\t\t\t\t\tisSelected={index === actualSelectedIndex}\n\t\t\t\t\t\t\tonSelect={this.handleClicked}\n\t\t\t\t\t\t\tTitle={_.get(\n\t\t\t\t\t\t\t\tgetFirst(tabProps, Tabs.Title),\n\t\t\t\t\t\t\t\t'props.children',\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{...tabProps}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t<div className={cx('&-content')}>\n\t\t\t\t\t{_.get(tabChildProps, [\n\t\t\t\t\t\t_.isUndefined(actualSelectedIndex) ? '' : actualSelectedIndex,\n\t\t\t\t\t\t'children',\n\t\t\t\t\t])}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<ITabsProps, ITabsState, typeof Tabs>(\n\tTabs,\n\t{ reducers }\n);\nexport { Tabs as TabsDumb };\n"]},"metadata":{},"sourceType":"module"}