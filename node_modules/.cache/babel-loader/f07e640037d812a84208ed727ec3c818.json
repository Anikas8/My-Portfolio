{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { filterTypes } from '../../util/component-types';\nimport DragCaptureZone from '../DragCaptureZone/DragCaptureZone';\nimport { Motion, spring } from 'react-motion';\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\nconst cx = lucidClassNames.bind('&-SplitHorizontal');\nconst {\n  bool,\n  func,\n  node,\n  number,\n  string,\n  oneOfType\n} = PropTypes;\nexport const SplitHorizontalTopPane = _props => null;\nSplitHorizontalTopPane.displayName = 'SplitHorizontal.TopPane';\nSplitHorizontalTopPane.peek = {\n  description: `Top pane of the split.`\n};\nSplitHorizontalTopPane.propName = 'TopPane';\nSplitHorizontalTopPane.propTypes = {\n  /**\n      Any valid React children.\n  */\n  children: node,\n  /**\n      Set height of this pane.\n  */\n  height: oneOfType([number, string]),\n  /**\n      Define this pane as the primary content pane. When the split is\n      collapsed, this pane becomes full height.\n  */\n  isPrimary: bool\n};\nSplitHorizontalTopPane.defaultProps = {\n  isPrimary: false\n};\nexport const SplitHorizontalBottomPane = _props => null;\nSplitHorizontalBottomPane.displayName = 'SplitHorizontal.BottomPane';\nSplitHorizontalBottomPane.peek = {\n  description: `Bottom pane of the split.`\n};\nSplitHorizontalBottomPane.propName = 'BottomPane';\nSplitHorizontalBottomPane.propTypes = {\n  /**\n      Any valid React children.\n  */\n  children: node,\n  /**\n      Set height of this pane.\n  */\n  height: oneOfType([number, string]),\n  /**\n      Define this pane as the primary content pane. When the split is\n      collapsed, this pane becomes full height.\n  */\n  isPrimary: bool\n};\nSplitHorizontalBottomPane.defaultProps = {\n  isPrimary: false\n};\nconst SplitHorizontalDivider = _props => null;\nSplitHorizontalDivider.displayName = 'SplitHorizontal.Divider';\nSplitHorizontalDivider.peek = {\n  description: `The area that separates the split panes. Can be dragged to resize them.`\n};\nSplitHorizontalDivider.propName = 'Divider';\nSplitHorizontalDivider.propTypes = {\n  /**\n      Any valid React children.\n  */\n  children: node\n};\nconst nonPassThroughs = ['className', 'children', 'isExpanded', 'isAnimated', 'onResizing', 'onResize', 'collapseShift', 'TopPane', 'BottomPane', 'Divider', 'onSelect', 'onToggle', 'initialState', 'callbackId'];\nclass SplitHorizontal extends React.Component {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.state = {\n      collapseAmount: 250,\n      isAnimated: false,\n      isExpanded: false\n    };\n    this.innerRef = React.createRef();\n    this.topPaneRef = React.createRef();\n    this.bottomPaneRef = React.createRef();\n    this.secondaryStartRect = this.topPaneRef.current ? this.topPaneRef.current.getBoundingClientRect() : null;\n    this.getPanes = () => {\n      const {\n        children\n      } = this.props;\n      const {\n        topPaneRef,\n        bottomPaneRef\n      } = this;\n      const topPaneElement = _.get(filterTypes(children, SplitHorizontal.TopPane), 0, React.createElement(SplitHorizontal.TopPane, null));\n      const bottomPaneElement = _.get(filterTypes(children, SplitHorizontal.BottomPane), 0, React.createElement(SplitHorizontal.BottomPane, null));\n      let primaryElement, primaryRef;\n      let secondaryElement, secondaryRef;\n      if (topPaneElement.props.isPrimary && !bottomPaneElement.props.isPrimary) {\n        primaryElement = topPaneElement;\n        primaryRef = topPaneRef;\n        secondaryElement = bottomPaneElement;\n        secondaryRef = bottomPaneRef;\n      } else {\n        primaryElement = bottomPaneElement;\n        primaryRef = bottomPaneRef;\n        secondaryElement = topPaneElement;\n        secondaryRef = topPaneRef;\n      }\n      return {\n        top: topPaneElement.props,\n        bottom: bottomPaneElement.props,\n        primary: primaryElement.props,\n        primaryRef,\n        secondary: secondaryElement.props,\n        secondaryRef\n      };\n    };\n    this.panes = this.getPanes();\n    // Style changes to DOM nodes are updated here to shortcut the state -> render cycle for better performance. Also the Style updates in this\n    // function are entirely transient and can be flushed with a props update to `height`.\n    this.applyDeltaToSecondaryHeight = function (dY, isExpanded, secondaryStartRect, secondaryRef, secondary, bottom, innerRef, primaryRef) {\n      let collapseShift = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      if (isExpanded) {\n        secondaryRef.current.style.flexBasis = `${secondaryStartRect.height + dY * (secondary === bottom ? -1 : 1)}px`;\n        return secondaryStartRect.height + dY * (secondary === bottom ? -1 : 1);\n      } else {\n        const overlapHeight = (secondary === bottom ? secondaryStartRect.height + dY : secondaryStartRect.height - dY) - collapseShift;\n        if (overlapHeight > 0) {\n          _this.collapseSecondary(overlapHeight);\n          return secondaryStartRect.height - overlapHeight;\n        } else {\n          _this.expandSecondary();\n          secondaryRef.current.style.flexBasis = `${(dY + collapseShift) * (secondary === bottom ? -1 : 1)}px`;\n          return (dY + collapseShift) * (secondary === bottom ? -1 : 1);\n        }\n      }\n    };\n    this.expandSecondary = () => {\n      this.setState({\n        isExpanded: true\n      });\n    };\n    this.collapseSecondary = collapseAmount => {\n      this.setState({\n        isExpanded: false,\n        collapseAmount\n      });\n    };\n    this.disableAnimation = (innerRef, secondaryRef, primaryRef) => {\n      innerRef.current.style.transition = 'all 0s';\n      secondaryRef.current.style.transition = 'all 0s';\n      primaryRef.current.style.transition = 'all 0s';\n    };\n    this.resetAnimation = (innerRef, secondaryRef, primaryRef) => {\n      innerRef.current.style.transition = '';\n      secondaryRef.current.style.transition = '';\n      primaryRef.current.style.transition = '';\n    };\n    this.handleDragStart = () => {\n      this.panes = this.getPanes();\n      const {\n        secondaryRef,\n        primaryRef\n      } = this.panes;\n      this.secondaryStartRect = secondaryRef.current ? secondaryRef.current.getBoundingClientRect() : null;\n      this.disableAnimation(this.innerRef, secondaryRef, primaryRef);\n    };\n    this.handleDrag = (_ref, _ref2) => {\n      let {\n        dY\n      } = _ref;\n      let {\n        event\n      } = _ref2;\n      const {\n        isExpanded,\n        collapseShift,\n        onResizing\n      } = this.props;\n      const {\n        secondaryRef,\n        secondary,\n        bottom,\n        primaryRef\n      } = this.panes;\n      this.secondaryStartRect && onResizing(this.applyDeltaToSecondaryHeight(dY, isExpanded, this.secondaryStartRect, secondaryRef, secondary, bottom, this.innerRef, primaryRef, collapseShift), {\n        event,\n        props: this.props\n      });\n    };\n    this.handleDragEnd = (_ref3, _ref4) => {\n      let {\n        dY\n      } = _ref3;\n      let {\n        event\n      } = _ref4;\n      const {\n        isExpanded,\n        collapseShift,\n        onResize\n      } = this.props;\n      const {\n        secondaryRef,\n        secondary,\n        bottom,\n        primaryRef\n      } = this.panes;\n      this.secondaryStartRect && onResize(this.applyDeltaToSecondaryHeight(dY, isExpanded, this.secondaryStartRect, secondaryRef, secondary, bottom, this.innerRef, primaryRef, collapseShift), {\n        event,\n        props: this.props\n      });\n      this.resetAnimation(this.innerRef, secondaryRef, primaryRef);\n    };\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      isAnimated,\n      isExpanded,\n      collapseShift\n    } = nextProps;\n    const {\n      secondaryRef\n    } = this.getPanes();\n    if (!isExpanded && (\n    // check if collapseShift changed or secondary pane collapsed\n    this.props.isExpanded || this.props.collapseShift !== collapseShift)) {\n      // collapse secondary\n      const secondaryRect = secondaryRef.current ? secondaryRef.current.getBoundingClientRect() : null;\n      secondaryRect && this.collapseSecondary(secondaryRect.height - collapseShift);\n    } else if (!this.props.isExpanded && isExpanded) {\n      // expand secondary\n      this.expandSecondary();\n    }\n    if (this.state.isAnimated !== isAnimated) {\n      this.setState({\n        isAnimated\n      });\n    }\n  }\n  componentDidMount() {\n    const {\n      isAnimated,\n      isExpanded,\n      collapseShift\n    } = this.props;\n    const {\n      secondaryRef\n    } = this.getPanes();\n    if (isExpanded) {\n      // expand secondary\n      this.expandSecondary();\n    } else {\n      // collapse secondary\n      const secondaryRect = secondaryRef.current ? secondaryRef.current.getBoundingClientRect() : null;\n      secondaryRect && this.collapseSecondary(secondaryRect.height - collapseShift);\n    }\n    if (this.state.isAnimated !== isAnimated) {\n      _.defer(() => {\n        this.setState({\n          isAnimated\n        });\n      });\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      ...passThroughs\n    } = this.props;\n    const {\n      isAnimated,\n      isExpanded,\n      collapseAmount\n    } = this.state;\n    const {\n      top: topPaneProps,\n      bottom: bottomPaneProps,\n      secondary\n    } = this.getPanes();\n    const dividerProps = _.get(_.first(filterTypes(children, SplitHorizontalDivider)), 'props', {});\n    let from, to;\n    if (!isExpanded) {\n      from = {\n        slideAmount: 0\n      };\n      to = {\n        slideAmount: collapseAmount\n      };\n    } else {\n      from = {\n        slideAmount: 0\n      };\n      to = {\n        slideAmount: 0\n      };\n    }\n    const isBottomSecondary = bottomPaneProps === secondary;\n    return React.createElement(\"div\", {\n      ...omit(passThroughs, nonPassThroughs),\n      className: cx('&', {\n        '&-is-expanded': this.props.isExpanded,\n        '&-is-animated': this.props.isAnimated\n      }, className),\n      style: {\n        flex: 1,\n        overflow: 'hidden',\n        ...passThroughs.style\n      }\n    }, React.createElement(Motion, {\n      defaultStyle: from,\n      style: isAnimated ? _.mapValues(to, val => spring(val, QUICK_SLIDE_MOTION)) : to\n    }, tween => React.createElement(\"div\", {\n      className: cx('&-inner'),\n      ref: this.innerRef,\n      style: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        transform: `translateY(${(isBottomSecondary ? 1 : -1) * Math.round(tween.slideAmount)}px)`\n      }\n    }, React.createElement(\"div\", {\n      ...omit(topPaneProps, ['height', 'isPrimary', 'initialState', 'callbackId']),\n      className: cx('&-TopPane', {\n        '&-is-secondary': topPaneProps === secondary\n      }, topPaneProps.className),\n      style: {\n        flexGrow: isBottomSecondary ? 1 : 0,\n        flexShrink: isBottomSecondary ? 1 : 0,\n        flexBasis: _.isNil(topPaneProps.height) ? topPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : topPaneProps.height,\n        marginTop: isBottomSecondary ? -Math.round(tween.slideAmount) : undefined,\n        overflow: 'auto',\n        ...topPaneProps.style\n      },\n      ref: this.topPaneRef\n    }, topPaneProps.children), React.createElement(DragCaptureZone, {\n      ...omit(dividerProps, ['children', 'initialState', 'callbackId']),\n      className: cx('&-Divider', dividerProps.className),\n      onDragStart: this.handleDragStart,\n      onDrag: this.handleDrag,\n      onDragEnd: this.handleDragEnd,\n      style: {\n        height: '6px',\n        boxSizing: 'border-box',\n        ...dividerProps.style\n      }\n    }, dividerProps.children || ' '), React.createElement(\"div\", {\n      ...omit(bottomPaneProps, ['height', 'isPrimary', 'initialState', 'callbackId']),\n      className: cx('&-BottomPane', {\n        '&-is-secondary': bottomPaneProps === secondary\n      }, bottomPaneProps.className),\n      style: {\n        flexGrow: !isBottomSecondary ? 1 : 0,\n        flexShrink: !isBottomSecondary ? 1 : 0,\n        flexBasis: _.isNil(bottomPaneProps.height) ? bottomPaneProps === secondary ? 'calc(50% - 3px)' : '0%' : bottomPaneProps.height,\n        marginBottom: isBottomSecondary ? undefined : -Math.round(tween.slideAmount),\n        overflow: 'auto',\n        ...bottomPaneProps.style\n      },\n      ref: this.bottomPaneRef\n    }, bottomPaneProps.children))));\n  }\n}\nSplitHorizontal.displayName = 'SplitHorizontal';\nSplitHorizontal.peek = {\n  description: `\\`SplitHorizontal\\` renders a vertical split.`,\n  categories: ['helpers'],\n  madeFrom: ['DragCaptureZone']\n};\nSplitHorizontal._isPrivate = true;\nSplitHorizontal.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: string,\n  /**\n      Direct children must be types {Splitvertical.Toppane,\n      Splitvertical.Divider, Splitvertical.BottomPane}.\tAll content is\n      composed as children of these respective elements.\n  */\n  children: node,\n  /**\n      Render as expanded or collapsed.\n  */\n  isExpanded: bool,\n  /**\n      Allows animated expand and collapse behavior.\n  */\n  isAnimated: bool,\n  /**\n      Called when the user is currently resizing the split with the Divider.\n      Signature: \\`(height, { event, props }) => {}\\`\n  */\n  onResizing: func,\n  /**\n      Called when the user resizes the split with the Divider.\tSignature:\n      \\`(height, { event, props }) => {}\\`\n  */\n  onResize: func,\n  /**\n      Use this prop to shift the collapsed position by a known value.\n  */\n  collapseShift: number,\n  TopPane: node,\n  BottomPane: node,\n  Divider: node\n};\nSplitHorizontal.defaultProps = {\n  isExpanded: true,\n  isAnimated: false,\n  collapseShift: 0,\n  onResizing: _.noop,\n  onResize: _.noop\n};\nSplitHorizontal.TopPane = SplitHorizontalTopPane;\nSplitHorizontal.BottomPane = SplitHorizontalBottomPane;\nSplitHorizontal.Divider = SplitHorizontalDivider;\nexport default SplitHorizontal;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","filterTypes","DragCaptureZone","Motion","spring","QUICK_SLIDE_MOTION","cx","bind","bool","func","node","number","string","oneOfType","SplitHorizontalTopPane","_props","displayName","peek","description","propName","propTypes","children","height","isPrimary","defaultProps","SplitHorizontalBottomPane","SplitHorizontalDivider","nonPassThroughs","SplitHorizontal","Component","constructor","collapseAmount","isAnimated","isExpanded","createRef","topPaneRef","current","getBoundingClientRect","props","bottomPaneRef","topPaneElement","get","TopPane","bottomPaneElement","BottomPane","primaryElement","primaryRef","secondaryElement","secondaryRef","top","bottom","primary","secondary","getPanes","dY","secondaryStartRect","innerRef","collapseShift","style","flexBasis","overlapHeight","collapseSecondary","expandSecondary","setState","transition","panes","disableAnimation","event","onResizing","applyDeltaToSecondaryHeight","onResize","resetAnimation","UNSAFE_componentWillReceiveProps","nextProps","secondaryRect","state","componentDidMount","defer","render","className","passThroughs","topPaneProps","bottomPaneProps","dividerProps","first","from","to","slideAmount","isBottomSecondary","flex","overflow","defaultStyle","mapValues","val","tween","ref","display","flexDirection","transform","Math","round","flexGrow","flexShrink","isNil","marginTop","undefined","onDragStart","handleDragStart","onDrag","handleDrag","onDragEnd","handleDragEnd","boxSizing","marginBottom","categories","madeFrom","Divider","noop"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SplitHorizontal/SplitHorizontal.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React, { RefObject } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { filterTypes, StandardProps } from '../../util/component-types';\nimport DragCaptureZone from '../DragCaptureZone/DragCaptureZone';\nimport { Motion, spring, OpaqueConfig } from 'react-motion';\nimport { QUICK_SLIDE_MOTION } from '../../constants/motion-spring';\n\nconst cx = lucidClassNames.bind('&-SplitHorizontal');\n\nconst { bool, func, node, number, string, oneOfType } = PropTypes;\n\n/** SplitHorizontal TopPane */\n\nexport interface ISplitHorizontalTopPaneProps extends StandardProps {\n\t/** Set height of this pane. */\n\theight?: number | string;\n\n\t/** Define this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full height. */\n\tisPrimary: boolean;\n}\nexport const SplitHorizontalTopPane = (\n\t_props: ISplitHorizontalTopPaneProps\n): null => null;\nSplitHorizontalTopPane.displayName = 'SplitHorizontal.TopPane';\nSplitHorizontalTopPane.peek = {\n\tdescription: `Top pane of the split.`,\n};\nSplitHorizontalTopPane.propName = 'TopPane';\nSplitHorizontalTopPane.propTypes = {\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n\t/**\n\t\tSet height of this pane.\n\t*/\n\theight: oneOfType([number, string]),\n\t/**\n\t\tDefine this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full height.\n\t*/\n\tisPrimary: bool,\n};\nSplitHorizontalTopPane.defaultProps = {\n\tisPrimary: false,\n};\n\n/** SplitHorizontal Bottom Pane */\nexport interface ISplitHorizontalBottomPaneProps extends StandardProps {\n\t/** Set height of this pane. */\n\theight?: number | string;\n\t/** Define this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full height. */\n\tisPrimary: boolean;\n}\nexport const SplitHorizontalBottomPane = (\n\t_props: ISplitHorizontalBottomPaneProps\n): null => null;\nSplitHorizontalBottomPane.displayName = 'SplitHorizontal.BottomPane';\nSplitHorizontalBottomPane.peek = {\n\tdescription: `Bottom pane of the split.`,\n};\nSplitHorizontalBottomPane.propName = 'BottomPane';\nSplitHorizontalBottomPane.propTypes = {\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n\t/**\n\t\tSet height of this pane.\n\t*/\n\theight: oneOfType([number, string]),\n\t/**\n\t\tDefine this pane as the primary content pane. When the split is\n\t\tcollapsed, this pane becomes full height.\n\t*/\n\tisPrimary: bool,\n};\nSplitHorizontalBottomPane.defaultProps = {\n\tisPrimary: false,\n};\n\n/** SplitHorizontal Divider */\nexport interface ISplitHorizontalDividerProps extends StandardProps {}\nconst SplitHorizontalDivider = (_props: ISplitHorizontalDividerProps): null =>\n\tnull;\nSplitHorizontalDivider.displayName = 'SplitHorizontal.Divider';\nSplitHorizontalDivider.peek = {\n\tdescription: `The area that separates the split panes. Can be dragged to resize them.`,\n};\nSplitHorizontalDivider.propName = 'Divider';\nSplitHorizontalDivider.propTypes = {\n\t/**\n\t\tAny valid React children.\n\t*/\n\tchildren: node,\n};\n\n/** Split Horizontal */\nexport interface ISplitHorizontalProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/** Render as expanded or collapsed. */\n\tisExpanded: boolean;\n\n\t/** Allows animated expand and collapse behavior. */\n\tisAnimated: boolean;\n\n\t/** Called when the user is currently resizing the split with the Divider. */\n\tonResizing: (\n\t\theight: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: MouseEvent | TouchEvent;\n\t\t\tprops: ISplitHorizontalProps;\n\t\t}\n\t) => void;\n\n\t/** Called when the user resizes the split with the Divider. */\n\tonResize: (\n\t\theight: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: MouseEvent | TouchEvent;\n\t\t\tprops: ISplitHorizontalProps;\n\t\t}\n\t) => void;\n\n\t/** Use this prop to shift the collapsed position by a known value. */\n\tcollapseShift: number;\n}\n\nconst nonPassThroughs = [\n\t'className',\n\t'children',\n\t'isExpanded',\n\t'isAnimated',\n\t'onResizing',\n\t'onResize',\n\t'collapseShift',\n\t'TopPane',\n\t'BottomPane',\n\t'Divider',\n\t'onSelect',\n\t'onToggle',\n\t'initialState',\n\t'callbackId',\n];\n\ninterface ISplitHorizontalState {\n\tcollapseAmount: number;\n\tisAnimated: boolean;\n\tisExpanded: boolean;\n}\n\nclass SplitHorizontal extends React.Component<\n\tISplitHorizontalProps,\n\tISplitHorizontalState,\n\t{}\n> {\n\tstatic displayName = 'SplitHorizontal';\n\tstatic peek = {\n\t\tdescription: `\\`SplitHorizontal\\` renders a vertical split.`,\n\t\tcategories: ['helpers'],\n\t\tmadeFrom: ['DragCaptureZone'],\n\t};\n\tstatic _isPrivate = true;\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t\tValue is run through the \\`classnames\\` library.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tDirect children must be types {Splitvertical.Toppane,\n\t\t\tSplitvertical.Divider, Splitvertical.BottomPane}.\tAll content is\n\t\t\tcomposed as children of these respective elements.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tRender as expanded or collapsed.\n\t\t*/\n\t\tisExpanded: bool,\n\n\t\t/**\n\t\t\tAllows animated expand and collapse behavior.\n\t\t*/\n\t\tisAnimated: bool,\n\n\t\t/**\n\t\t\tCalled when the user is currently resizing the split with the Divider.\n\t\t\tSignature: \\`(height, { event, props }) => {}\\`\n\t\t*/\n\t\tonResizing: func,\n\n\t\t/**\n\t\t\tCalled when the user resizes the split with the Divider.\tSignature:\n\t\t\t\\`(height, { event, props }) => {}\\`\n\t\t*/\n\t\tonResize: func,\n\n\t\t/**\n\t\t\tUse this prop to shift the collapsed position by a known value.\n\t\t*/\n\t\tcollapseShift: number,\n\n\t\tTopPane: node,\n\t\tBottomPane: node,\n\t\tDivider: node,\n\t};\n\n\tstatic defaultProps = {\n\t\tisExpanded: true,\n\t\tisAnimated: false,\n\t\tcollapseShift: 0,\n\t\tonResizing: _.noop,\n\t\tonResize: _.noop,\n\t};\n\n\tstate = {\n\t\tcollapseAmount: 250,\n\t\tisAnimated: false,\n\t\tisExpanded: false,\n\t};\n\n\tstatic TopPane = SplitHorizontalTopPane;\n\tstatic BottomPane = SplitHorizontalBottomPane;\n\tstatic Divider = SplitHorizontalDivider;\n\n\tprivate innerRef = React.createRef<HTMLDivElement>();\n\tprivate topPaneRef = React.createRef<HTMLDivElement>();\n\tprivate bottomPaneRef = React.createRef<HTMLDivElement>();\n\n\tsecondaryStartRect = this.topPaneRef.current\n\t\t? this.topPaneRef.current.getBoundingClientRect()\n\t\t: null;\n\n\tgetPanes = (): {\n\t\ttop: ISplitHorizontalTopPaneProps;\n\t\tbottom: ISplitHorizontalBottomPaneProps;\n\t\tprimary: ISplitHorizontalTopPaneProps | ISplitHorizontalBottomPaneProps;\n\t\tsecondary: ISplitHorizontalTopPaneProps | ISplitHorizontalBottomPaneProps;\n\t\tprimaryRef: React.RefObject<HTMLDivElement>;\n\t\tsecondaryRef: React.RefObject<HTMLDivElement>;\n\t} => {\n\t\tconst { children } = this.props;\n\t\tconst { topPaneRef, bottomPaneRef } = this;\n\n\t\tconst topPaneElement = _.get(\n\t\t\tfilterTypes<ISplitHorizontalProps>(children, SplitHorizontal.TopPane),\n\t\t\t0,\n\t\t\t<SplitHorizontal.TopPane />\n\t\t);\n\t\tconst bottomPaneElement = _.get(\n\t\t\tfilterTypes<ISplitHorizontalProps>(children, SplitHorizontal.BottomPane),\n\t\t\t0,\n\t\t\t<SplitHorizontal.BottomPane />\n\t\t);\n\t\tlet primaryElement, primaryRef;\n\t\tlet secondaryElement, secondaryRef;\n\n\t\tif (topPaneElement.props.isPrimary && !bottomPaneElement.props.isPrimary) {\n\t\t\tprimaryElement = topPaneElement;\n\t\t\tprimaryRef = topPaneRef;\n\t\t\tsecondaryElement = bottomPaneElement;\n\t\t\tsecondaryRef = bottomPaneRef;\n\t\t} else {\n\t\t\tprimaryElement = bottomPaneElement;\n\t\t\tprimaryRef = bottomPaneRef;\n\t\t\tsecondaryElement = topPaneElement;\n\t\t\tsecondaryRef = topPaneRef;\n\t\t}\n\n\t\treturn {\n\t\t\ttop: topPaneElement.props,\n\t\t\tbottom: bottomPaneElement.props,\n\t\t\tprimary: primaryElement.props,\n\t\t\tprimaryRef,\n\t\t\tsecondary: secondaryElement.props,\n\t\t\tsecondaryRef,\n\t\t};\n\t};\n\n\tpanes = this.getPanes();\n\n\t// Style changes to DOM nodes are updated here to shortcut the state -> render cycle for better performance. Also the Style updates in this\n\t// function are entirely transient and can be flushed with a props update to `height`.\n\tapplyDeltaToSecondaryHeight = (\n\t\tdY: number,\n\t\tisExpanded: boolean,\n\t\tsecondaryStartRect: ClientRect | DOMRect,\n\t\tsecondaryRef: React.RefObject<HTMLDivElement>,\n\t\tsecondary: ISplitHorizontalTopPaneProps | ISplitHorizontalBottomPaneProps,\n\t\tbottom: ISplitHorizontalBottomPaneProps,\n\t\tinnerRef: React.RefObject<HTMLDivElement>,\n\t\tprimaryRef: React.RefObject<HTMLDivElement>,\n\t\tcollapseShift = 0\n\t): number => {\n\t\tif (isExpanded) {\n\t\t\t(secondaryRef.current as HTMLDivElement).style.flexBasis = `${\n\t\t\t\tsecondaryStartRect.height + dY * (secondary === bottom ? -1 : 1)\n\t\t\t}px`;\n\t\t\treturn secondaryStartRect.height + dY * (secondary === bottom ? -1 : 1);\n\t\t} else {\n\t\t\tconst overlapHeight =\n\t\t\t\t(secondary === bottom\n\t\t\t\t\t? secondaryStartRect.height + dY\n\t\t\t\t\t: secondaryStartRect.height - dY) - collapseShift;\n\n\t\t\tif (overlapHeight > 0) {\n\t\t\t\tthis.collapseSecondary(overlapHeight);\n\t\t\t\treturn secondaryStartRect.height - overlapHeight;\n\t\t\t} else {\n\t\t\t\tthis.expandSecondary();\n\t\t\t\t(secondaryRef.current as HTMLDivElement).style.flexBasis = `${\n\t\t\t\t\t(dY + collapseShift) * (secondary === bottom ? -1 : 1)\n\t\t\t\t}px`;\n\t\t\t\treturn (dY + collapseShift) * (secondary === bottom ? -1 : 1);\n\t\t\t}\n\t\t}\n\t};\n\n\texpandSecondary = (): void => {\n\t\tthis.setState({ isExpanded: true });\n\t};\n\n\tcollapseSecondary = (collapseAmount: number): void => {\n\t\tthis.setState({ isExpanded: false, collapseAmount });\n\t};\n\n\tdisableAnimation = (\n\t\tinnerRef: RefObject<HTMLDivElement>,\n\t\tsecondaryRef: RefObject<HTMLDivElement>,\n\t\tprimaryRef: RefObject<HTMLDivElement>\n\t): void => {\n\t\t(innerRef.current as HTMLDivElement).style.transition = 'all 0s';\n\t\t(secondaryRef.current as HTMLDivElement).style.transition = 'all 0s';\n\t\t(primaryRef.current as HTMLDivElement).style.transition = 'all 0s';\n\t};\n\n\tresetAnimation = (\n\t\tinnerRef: RefObject<HTMLDivElement>,\n\t\tsecondaryRef: RefObject<HTMLDivElement>,\n\t\tprimaryRef: RefObject<HTMLDivElement>\n\t): void => {\n\t\t(innerRef.current as HTMLDivElement).style.transition = '';\n\t\t(secondaryRef.current as HTMLDivElement).style.transition = '';\n\t\t(primaryRef.current as HTMLDivElement).style.transition = '';\n\t};\n\n\thandleDragStart = (): void => {\n\t\tthis.panes = this.getPanes();\n\t\tconst { secondaryRef, primaryRef } = this.panes;\n\t\tthis.secondaryStartRect = secondaryRef.current\n\t\t\t? secondaryRef.current.getBoundingClientRect()\n\t\t\t: null;\n\t\tthis.disableAnimation(this.innerRef, secondaryRef, primaryRef);\n\t};\n\n\thandleDrag = (\n\t\t{ dY }: { dY: number },\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t): void => {\n\t\tconst { isExpanded, collapseShift, onResizing } = this.props;\n\n\t\tconst { secondaryRef, secondary, bottom, primaryRef } = this.panes;\n\n\t\tthis.secondaryStartRect &&\n\t\t\tonResizing(\n\t\t\t\tthis.applyDeltaToSecondaryHeight(\n\t\t\t\t\tdY,\n\t\t\t\t\tisExpanded,\n\t\t\t\t\tthis.secondaryStartRect,\n\t\t\t\t\tsecondaryRef,\n\t\t\t\t\tsecondary,\n\t\t\t\t\tbottom,\n\t\t\t\t\tthis.innerRef,\n\t\t\t\t\tprimaryRef,\n\t\t\t\t\tcollapseShift\n\t\t\t\t),\n\t\t\t\t{ event, props: this.props }\n\t\t\t);\n\t};\n\n\thandleDragEnd = (\n\t\t{ dY }: { dY: number },\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t): void => {\n\t\tconst { isExpanded, collapseShift, onResize } = this.props;\n\n\t\tconst { secondaryRef, secondary, bottom, primaryRef } = this.panes;\n\n\t\tthis.secondaryStartRect &&\n\t\t\tonResize(\n\t\t\t\tthis.applyDeltaToSecondaryHeight(\n\t\t\t\t\tdY,\n\t\t\t\t\tisExpanded,\n\t\t\t\t\tthis.secondaryStartRect,\n\t\t\t\t\tsecondaryRef,\n\t\t\t\t\tsecondary,\n\t\t\t\t\tbottom,\n\t\t\t\t\tthis.innerRef,\n\t\t\t\t\tprimaryRef,\n\t\t\t\t\tcollapseShift\n\t\t\t\t),\n\t\t\t\t{ event, props: this.props }\n\t\t\t);\n\n\t\tthis.resetAnimation(this.innerRef, secondaryRef, primaryRef);\n\t};\n\n\tUNSAFE_componentWillReceiveProps(nextProps: ISplitHorizontalProps): void {\n\t\tconst { isAnimated, isExpanded, collapseShift } = nextProps;\n\n\t\tconst { secondaryRef } = this.getPanes();\n\n\t\tif (\n\t\t\t!isExpanded && // check if collapseShift changed or secondary pane collapsed\n\t\t\t(this.props.isExpanded || this.props.collapseShift !== collapseShift)\n\t\t) {\n\t\t\t// collapse secondary\n\t\t\tconst secondaryRect = secondaryRef.current\n\t\t\t\t? secondaryRef.current.getBoundingClientRect()\n\t\t\t\t: null;\n\t\t\tsecondaryRect &&\n\t\t\t\tthis.collapseSecondary(secondaryRect.height - collapseShift);\n\t\t} else if (!this.props.isExpanded && isExpanded) {\n\t\t\t// expand secondary\n\t\t\tthis.expandSecondary();\n\t\t}\n\n\t\tif (this.state.isAnimated !== isAnimated) {\n\t\t\tthis.setState({\n\t\t\t\tisAnimated,\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tconst { isAnimated, isExpanded, collapseShift } = this.props;\n\n\t\tconst { secondaryRef } = this.getPanes();\n\n\t\tif (isExpanded) {\n\t\t\t// expand secondary\n\t\t\tthis.expandSecondary();\n\t\t} else {\n\t\t\t// collapse secondary\n\t\t\tconst secondaryRect = secondaryRef.current\n\t\t\t\t? secondaryRef.current.getBoundingClientRect()\n\t\t\t\t: null;\n\t\t\tsecondaryRect &&\n\t\t\t\tthis.collapseSecondary(secondaryRect.height - collapseShift);\n\t\t}\n\n\t\tif (this.state.isAnimated !== isAnimated) {\n\t\t\t_.defer((): void => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisAnimated,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst { children, className, ...passThroughs } = this.props;\n\n\t\tconst { isAnimated, isExpanded, collapseAmount } = this.state;\n\n\t\tconst {\n\t\t\ttop: topPaneProps,\n\t\t\tbottom: bottomPaneProps,\n\t\t\tsecondary,\n\t\t} = this.getPanes();\n\n\t\tconst dividerProps = _.get(\n\t\t\t_.first(filterTypes(children, SplitHorizontalDivider)),\n\t\t\t'props',\n\t\t\t{}\n\t\t);\n\n\t\tlet from, to;\n\n\t\tif (!isExpanded) {\n\t\t\tfrom = { slideAmount: 0 };\n\t\t\tto = { slideAmount: collapseAmount };\n\t\t} else {\n\t\t\tfrom = { slideAmount: 0 };\n\t\t\tto = { slideAmount: 0 };\n\t\t}\n\n\t\tconst isBottomSecondary = bottomPaneProps === secondary;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...omit(passThroughs, nonPassThroughs)}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-expanded': this.props.isExpanded,\n\t\t\t\t\t\t'&-is-animated': this.props.isAnimated,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tstyle={{\n\t\t\t\t\tflex: 1,\n\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t...passThroughs.style,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Motion\n\t\t\t\t\tdefaultStyle={from}\n\t\t\t\t\tstyle={\n\t\t\t\t\t\tisAnimated\n\t\t\t\t\t\t\t? _.mapValues(\n\t\t\t\t\t\t\t\t\tto,\n\t\t\t\t\t\t\t\t\t(val): OpaqueConfig => spring(val, QUICK_SLIDE_MOTION)\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: to\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{(tween): JSX.Element => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={cx('&-inner')}\n\t\t\t\t\t\t\tref={this.innerRef}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\theight: '100%',\n\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\t\t\ttransform: `translateY(${\n\t\t\t\t\t\t\t\t\t(isBottomSecondary ? 1 : -1) * Math.round(tween.slideAmount)\n\t\t\t\t\t\t\t\t}px)`,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t{...omit(topPaneProps, [\n\t\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\t\t'isPrimary',\n\t\t\t\t\t\t\t\t\t'initialState',\n\t\t\t\t\t\t\t\t\t'callbackId',\n\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t'&-TopPane',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'&-is-secondary': topPaneProps === secondary,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttopPaneProps.className\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tflexGrow: isBottomSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexShrink: isBottomSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexBasis: _.isNil(topPaneProps.height)\n\t\t\t\t\t\t\t\t\t\t? topPaneProps === secondary\n\t\t\t\t\t\t\t\t\t\t\t? 'calc(50% - 3px)'\n\t\t\t\t\t\t\t\t\t\t\t: '0%'\n\t\t\t\t\t\t\t\t\t\t: topPaneProps.height,\n\t\t\t\t\t\t\t\t\tmarginTop: isBottomSecondary\n\t\t\t\t\t\t\t\t\t\t? -Math.round(tween.slideAmount)\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\t\t\t\t...topPaneProps.style,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tref={this.topPaneRef}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{topPaneProps.children}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<DragCaptureZone\n\t\t\t\t\t\t\t\t{...omit(dividerProps, [\n\t\t\t\t\t\t\t\t\t'children',\n\t\t\t\t\t\t\t\t\t'initialState',\n\t\t\t\t\t\t\t\t\t'callbackId',\n\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t\tclassName={cx('&-Divider', dividerProps.className)}\n\t\t\t\t\t\t\t\tonDragStart={this.handleDragStart}\n\t\t\t\t\t\t\t\tonDrag={this.handleDrag}\n\t\t\t\t\t\t\t\tonDragEnd={this.handleDragEnd}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\theight: '6px',\n\t\t\t\t\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t\t\t\t\t\t...dividerProps.style,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{dividerProps.children || ' '}\n\t\t\t\t\t\t\t</DragCaptureZone>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t{...omit(bottomPaneProps, [\n\t\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\t\t'isPrimary',\n\t\t\t\t\t\t\t\t\t'initialState',\n\t\t\t\t\t\t\t\t\t'callbackId',\n\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t'&-BottomPane',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'&-is-secondary': bottomPaneProps === secondary,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbottomPaneProps.className\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tflexGrow: !isBottomSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexShrink: !isBottomSecondary ? 1 : 0,\n\t\t\t\t\t\t\t\t\tflexBasis: _.isNil(bottomPaneProps.height)\n\t\t\t\t\t\t\t\t\t\t? bottomPaneProps === secondary\n\t\t\t\t\t\t\t\t\t\t\t? 'calc(50% - 3px)'\n\t\t\t\t\t\t\t\t\t\t\t: '0%'\n\t\t\t\t\t\t\t\t\t\t: bottomPaneProps.height,\n\t\t\t\t\t\t\t\t\tmarginBottom: isBottomSecondary\n\t\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t\t: -Math.round(tween.slideAmount),\n\t\t\t\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\t\t\t\t...bottomPaneProps.style,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tref={this.bottomPaneRef}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{bottomPaneProps.children}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</Motion>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SplitHorizontal;\n"]},"metadata":{},"sourceType":"module"}