{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-InfoIcon');\nexport const iconPropTypes = {\n  /** Size variations of the icons. \\`size\\` directly effects height and width\n      but the developer should also be conscious of the relationship with\n      \\`viewBox\\`. */\n  size: PropTypes.number,\n  /** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n      the \"artboard\" for our SVG while \\`size\\` is the presented height and\n      width. */\n  viewBox: PropTypes.string,\n  /** Any valid SVG aspect ratio. */\n  aspectRatio: PropTypes.string,\n  /** Adds styling that makes the icon appear clickable. */\n  isClickable: PropTypes.bool,\n  /** Adds styling that makes the icon appear disabled.  Also forces\n      isClickable to be false. */\n  isDisabled: PropTypes.bool,\n  /** Called when the user clicks the \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onClick: PropTypes.func,\n  /** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n      \\`({event, props}) => {}\\` */\n  onSelect: PropTypes.func,\n  /** Any valid React children. */\n  children: PropTypes.element,\n  /** Classes that are appended to the component defaults. This prop is run\n      through the \\`classnames\\` library. */\n  className: PropTypes.string\n};\nexport const InfoIcon = _ref => {\n  let {\n    className,\n    isDisabled,\n    isClickable,\n    ...passThroughs\n  } = _ref;\n  return React.createElement(Icon\n  // As color is static for this icon, editing the color prop is disallowed\n  , {\n    ..._.omit(passThroughs, ['initialState', 'color']),\n    isClickable: isClickable,\n    isDisabled: isDisabled,\n    className: cx('&', isDisabled && '&-is-disabled', isClickable && '&-is-clickable', className)\n  }, React.createElement(\"circle\", {\n    className: cx('&-background'),\n    cx: '8',\n    cy: '8',\n    r: '7.5'\n  }), React.createElement(\"path\", {\n    className: cx('&-i'),\n    d: 'M7.99 12.5v-6'\n  }), React.createElement(\"circle\", {\n    className: cx('&-i'),\n    cx: '7.99',\n    cy: '4',\n    r: '.293'\n  }));\n};\nInfoIcon.displayName = 'InfoIcon';\nInfoIcon.propTypes = iconPropTypes;\nInfoIcon.defaultProps = Icon.defaultProps;\nexport default InfoIcon;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAoB,MAAM,SAAS;AAC1C,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,YAAY,CAAC;AAE7C,OAAO,MAAMC,aAAa,GAAG;EAC5B;;;EAGAC,IAAI,EAAEN,SAAS,CAACO,MAAM;EAEtB;EACAC,KAAK,EAAER,SAAS,CAACS,SAAS,CAAC,CAACT,SAAS,CAACO,MAAM,EAAEP,SAAS,CAACU,MAAM,CAAC,CAAC;EAEhE;EACAC,MAAM,EAAEX,SAAS,CAACS,SAAS,CAAC,CAACT,SAAS,CAACO,MAAM,EAAEP,SAAS,CAACU,MAAM,CAAC,CAAC;EAEjE;;;EAGAE,OAAO,EAAEZ,SAAS,CAACU,MAAM;EAEzB;EACAG,WAAW,EAAEb,SAAS,CAACU,MAAM;EAE7B;EACAI,WAAW,EAAEd,SAAS,CAACe,IAAI;EAE3B;;EAEAC,UAAU,EAAEhB,SAAS,CAACe,IAAI;EAE1B;;EAEAE,OAAO,EAAEjB,SAAS,CAACkB,IAAI;EAEvB;;EAEAC,QAAQ,EAAEnB,SAAS,CAACkB,IAAI;EAExB;EACAE,QAAQ,EAAEpB,SAAS,CAACqB,OAAO;EAE3B;;EAEAC,SAAS,EAAEtB,SAAS,CAACU;CACrB;AAED,OAAO,MAAMa,QAAQ,GAAG,QAKP;EAAA,IALQ;IACxBD,SAAS;IACTN,UAAU;IACVF,WAAW;IACX,GAAGU;EAAY,CACH;EACZ,OACCzB,oBAACE;EACA;EAAA;OACIH,CAAC,CAAC2B,IAAI,CAACD,YAAY,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACnDV,WAAW,EAAEA,WAAW;IACxBE,UAAU,EAAEA,UAAU;IACtBM,SAAS,EAAEnB,EAAE,CACZ,GAAG,EACHa,UAAU,IAAI,eAAe,EAC7BF,WAAW,IAAI,gBAAgB,EAC/BQ,SAAS;EACT,GAEDvB;IAAQuB,SAAS,EAAEnB,EAAE,CAAC,cAAc,CAAC;IAAEA,EAAE,EAAC,GAAG;IAACuB,EAAE,EAAC,GAAG;IAACC,CAAC,EAAC;EAAK,EAAG,EAC/D5B;IAAMuB,SAAS,EAAEnB,EAAE,CAAC,KAAK,CAAC;IAAEyB,CAAC,EAAC;EAAe,EAAG,EAChD7B;IAAQuB,SAAS,EAAEnB,EAAE,CAAC,KAAK,CAAC;IAAEA,EAAE,EAAC,MAAM;IAACuB,EAAE,EAAC,GAAG;IAACC,CAAC,EAAC;EAAM,EAAG,CACpD;AAET,CAAC;AAEDJ,QAAQ,CAACM,WAAW,GAAG,UAAU;AAEjCN,QAAQ,CAACO,SAAS,GAAGzB,aAAa;AAElCkB,QAAQ,CAACQ,YAAY,GAAG9B,IAAI,CAAC8B,YAAY;AAEzC,eAAeR,QAAQ","names":["_","React","PropTypes","Icon","lucidClassNames","cx","bind","iconPropTypes","size","number","width","oneOfType","string","height","viewBox","aspectRatio","isClickable","bool","isDisabled","onClick","func","onSelect","children","element","className","InfoIcon","passThroughs","omit","cy","r","d","displayName","propTypes","defaultProps"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Icon/InfoIcon/InfoIcon.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon, { IIconProps } from '../Icon';\nimport { lucidClassNames } from '../../../util/style-helpers';\n\nconst cx = lucidClassNames.bind('&-InfoIcon');\n\nexport const iconPropTypes = {\n\t/** Size variations of the icons. \\`size\\` directly effects height and width\n\t\tbut the developer should also be conscious of the relationship with\n\t\t\\`viewBox\\`. */\n\tsize: PropTypes.number,\n\n\t/** Size handles width and height, whereas \\`width\\` can manually override the width that would be set by size. */\n\twidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** Size handles width and height, whereas \\`height\\` can manually override the height that would be set by size. */\n\theight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n\t/** \\`viewBox\\` is very important for SVGs. You can think of \\`viewBox\\` as\n\t\tthe \"artboard\" for our SVG while \\`size\\` is the presented height and\n\t\twidth. */\n\tviewBox: PropTypes.string,\n\n\t/** Any valid SVG aspect ratio. */\n\taspectRatio: PropTypes.string,\n\n\t/** Adds styling that makes the icon appear clickable. */\n\tisClickable: PropTypes.bool,\n\n\t/** Adds styling that makes the icon appear disabled.  Also forces\n\t\tisClickable to be false. */\n\tisDisabled: PropTypes.bool,\n\n\t/** Called when the user clicks the \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonClick: PropTypes.func,\n\n\t/** Called when the user clicks an active, clickable \\`Icon\\`. Signature:\n\t\t\\`({event, props}) => {}\\` */\n\tonSelect: PropTypes.func,\n\n\t/** Any valid React children. */\n\tchildren: PropTypes.element,\n\n\t/** Classes that are appended to the component defaults. This prop is run\n\t\tthrough the \\`classnames\\` library. */\n\tclassName: PropTypes.string,\n};\n\nexport const InfoIcon = ({\n\tclassName,\n\tisDisabled,\n\tisClickable,\n\t...passThroughs\n}: IIconProps) => {\n\treturn (\n\t\t<Icon\n\t\t\t// As color is static for this icon, editing the color prop is disallowed\n\t\t\t{..._.omit(passThroughs, ['initialState', 'color'])}\n\t\t\tisClickable={isClickable}\n\t\t\tisDisabled={isDisabled}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\tisDisabled && '&-is-disabled',\n\t\t\t\tisClickable && '&-is-clickable',\n\t\t\t\tclassName\n\t\t\t)}\n\t\t>\n\t\t\t<circle className={cx('&-background')} cx='8' cy='8' r='7.5' />\n\t\t\t<path className={cx('&-i')} d='M7.99 12.5v-6' />\n\t\t\t<circle className={cx('&-i')} cx='7.99' cy='4' r='.293' />\n\t\t</Icon>\n\t);\n};\n\nInfoIcon.displayName = 'InfoIcon';\n\nInfoIcon.propTypes = iconPropTypes;\n\nInfoIcon.defaultProps = Icon.defaultProps;\n\nexport default InfoIcon;\n"]},"metadata":{},"sourceType":"module"}