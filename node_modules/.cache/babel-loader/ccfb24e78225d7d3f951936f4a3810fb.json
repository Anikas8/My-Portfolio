{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon/Icon';\nimport RadioButtonLabeled from '../RadioButtonLabeled/RadioButtonLabeled';\nimport CheckboxLabeled from '../CheckboxLabeled/CheckboxLabeled';\nimport { lucidClassNames } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-IconSelect');\nconst {\n  arrayOf,\n  bool,\n  func,\n  node,\n  number,\n  oneOf,\n  string,\n  shape\n} = PropTypes;\nconst getFigureParent = domNode => {\n  if (domNode.classList.contains(cx('&-Item'))) {\n    return domNode;\n  }\n  if (domNode === document.body) {\n    throw new Error(`domNode is not a child of .${cx('&-Item')}`);\n  }\n  if (domNode.parentElement) {\n    return getFigureParent(domNode.parentElement);\n  }\n  return;\n};\nconst defaultProps = {\n  kind: 'multiple',\n  isDisabled: false,\n  onSelect: _.noop\n};\nexport const IconSelect = props => {\n  const {\n    className,\n    children,\n    kind,\n    items,\n    isDisabled,\n    onSelect,\n    ...passThroughs\n  } = props;\n  const handleClick = event => {\n    if (!props.isDisabled) {\n      const domNode = getFigureParent(event.target);\n      if (domNode) {\n        const id = domNode.dataset.id;\n        domNode.focus();\n        if (!domNode.hasAttribute('disabled') && id) {\n          onSelect(id, {\n            event,\n            props: props\n          });\n        }\n      }\n    }\n  };\n  const getChildIcon = icon => {\n    return icon ? icon : React.createElement(Icon, null, React.createElement(\"rect\", {\n      x: '0',\n      y: '0',\n      width: '16',\n      height: '16'\n    }), React.createElement(\"rect\", {\n      x: '1',\n      y: '1',\n      width: '14',\n      height: '14',\n      fill: 'white'\n    }));\n  };\n  const getInputComponent = item => {\n    const {\n      kind,\n      className,\n      isDisabled\n    } = props;\n    const Label = item.label;\n    const singleSelect = _.isEqual(kind, 'single');\n    return singleSelect ? React.createElement(RadioButtonLabeled, {\n      Label: Label,\n      className: cx('&-Item-radio', {\n        [`${className}-radio`]: className\n      }),\n      isDisabled: isDisabled || item.isDisabled,\n      isSelected: item.isSelected\n    }) : React.createElement(CheckboxLabeled, {\n      Label: Label,\n      className: cx('&-Item-checkbox', {\n        [`${className}-checkbox`]: className\n      }),\n      isDisabled: isDisabled || item.isDisabled ? true : false,\n      isIndeterminate: item.isPartial ? true : false,\n      isSelected: item.isSelected ? true : false\n    });\n  };\n  return React.createElement(\"span\", {\n    ...omit(passThroughs, ['className', 'children', 'items', 'kind', 'onSelect', 'isDisabled'].concat(['initialState', 'callbackId'])),\n    className: cx('&', className)\n  }, _.map(items, (childItem, index) => {\n    const itemDisabled = isDisabled || childItem.isDisabled;\n    return React.createElement(\"figure\", {\n      key: `iconselectitem_${index}`,\n      className: cx('&-Item', childItem.className, {\n        [`${className}-Item`]: className,\n        '&-Item-is-disabled': itemDisabled,\n        '&-Item-is-partial': childItem.isPartial,\n        '&-Item-is-selected': childItem.isSelected,\n        '&-Item-multi': kind === 'multiple',\n        '&-Item-single': kind === 'single'\n      }),\n      \"data-id\": childItem.id,\n      onClick: itemDisabled ? undefined : handleClick\n    }, childItem.icon && getChildIcon(childItem.icon), React.createElement(\"figcaption\", {\n      className: cx('&-Item-figcaption')\n    }, getInputComponent(childItem)));\n  }), children);\n};\nIconSelect.displayName = 'IconSelect';\nIconSelect.defaultProps = defaultProps;\nIconSelect.peek = {\n  description: `\\`IconSelect\\` allows you to pair icons together to form a related cluster. Any props not explicitly called out are spread on to the root component.`,\n  categories: ['controls', 'selectors']\n};\nIconSelect.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: string,\n  /**\n      Added to the end of the IconSelect group.\n  */\n  children: node,\n  /**\n      Items in the IconSelect group. Each item should have an id.\n  */\n  items: arrayOf(shape({\n    id: string.isRequired,\n    icon: node,\n    label: node,\n    isSelected: bool,\n    isPartial: bool,\n    tabIndex: number,\n    isDisabled: bool,\n    className: string\n  })).isRequired,\n  /**\n      Defines the type of IconSelect box. A 'single' select will create a radio\n      input type Item. A 'multiple' select will create a checkbox input type.\n  */\n  kind: oneOf(['single', 'multiple']),\n  /**\n      A function that is called with the id of the Item in the IconSelect group\n      is clicked.  Signature: \\`(id, { event }) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Disabled all IconSelect Items.\n  */\n  isDisabled: bool\n};\nexport default IconSelect;","map":{"version":3,"mappings":"AAAA,OAAOA,CAAC,IAAIC,IAAI,QAAQ,QAAQ;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,kBAAkB,MAAM,0CAA0C;AACzE,OAAOC,eAAe,MAAM,oCAAoC;AAChE,SAASC,eAAe,QAAQ,0BAA0B;AAG1D,MAAMC,EAAE,GAAGD,eAAe,CAACE,IAAI,CAAC,cAAc,CAAC;AAE/C,MAAM;EAAEC,OAAO;EAAEC,IAAI;EAAEC,IAAI;EAAEC,IAAI;EAAEC,MAAM;EAAEC,KAAK;EAAEC,MAAM;EAAEC;AAAK,CAAE,GAAGd,SAAS;AAE7E,MAAMe,eAAe,GAAIC,OAAoB,IAA6B;EACzE,IAAIA,OAAO,CAACC,SAAS,CAACC,QAAQ,CAACb,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE;IAC7C,OAAOW,OAAO;;EAEf,IAAIA,OAAO,KAAKG,QAAQ,CAACC,IAAI,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,8BAA8BhB,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;;EAE9D,IAAIW,OAAO,CAACM,aAAa,EAAE;IAC1B,OAAOP,eAAe,CAACC,OAAO,CAACM,aAAa,CAAC;;EAG9C;AACD,CAAC;AA8CD,MAAMC,YAAY,GAAG;EACpBC,IAAI,EAAE,UAAmB;EACzBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE7B,CAAC,CAAC8B;CACZ;AAED,OAAO,MAAMC,UAAU,GAAIC,KAAuB,IAAwB;EACzE,MAAM;IACLC,SAAS;IACTC,QAAQ;IACRP,IAAI;IACJQ,KAAK;IACLP,UAAU;IACVC,QAAQ;IACR,GAAGO;EAAY,CACf,GAAGJ,KAAK;EAET,MAAMK,WAAW,GAAIC,KAAuB,IAAU;IACrD,IAAI,CAACN,KAAK,CAACJ,UAAU,EAAE;MACtB,MAAMT,OAAO,GAAGD,eAAe,CAACoB,KAAK,CAACC,MAAqB,CAAC;MAC5D,IAAIpB,OAAO,EAAE;QACZ,MAAMqB,EAAE,GAAGrB,OAAO,CAACsB,OAAO,CAACD,EAAE;QAE7BrB,OAAO,CAACuB,KAAK,EAAE;QACf,IAAI,CAACvB,OAAO,CAACwB,YAAY,CAAC,UAAU,CAAC,IAAIH,EAAE,EAAE;UAC5CX,QAAQ,CAACW,EAAE,EAAE;YAAEF,KAAK;YAAEN,KAAK,EAAEA;UAAK,CAAE,CAAC;;;;EAIzC,CAAC;EAED,MAAMY,YAAY,GAAIC,IAAwB,IAAwB;IACrE,OAAOA,IAAI,GACVA,IAAI,GAEJ3C,oBAACE,IAAI,QACJF;MAAM4C,CAAC,EAAC,GAAG;MAACC,CAAC,EAAC,GAAG;MAACC,KAAK,EAAC,IAAI;MAACC,MAAM,EAAC;IAAI,EAAG,EAC3C/C;MAAM4C,CAAC,EAAC,GAAG;MAACC,CAAC,EAAC,GAAG;MAACC,KAAK,EAAC,IAAI;MAACC,MAAM,EAAC,IAAI;MAACC,IAAI,EAAC;IAAO,EAAG,CAEzD;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAIC,IAAU,IAAI;IACxC,MAAM;MAAEzB,IAAI;MAAEM,SAAS;MAAEL;IAAU,CAAE,GAAGI,KAAK;IAC7C,MAAMqB,KAAK,GAAGD,IAAI,CAACE,KAAK;IACxB,MAAMC,YAAY,GAAGvD,CAAC,CAACwD,OAAO,CAAC7B,IAAI,EAAE,QAAQ,CAAC;IAE9C,OAAO4B,YAAY,GAClBrD,oBAACG,kBAAkB;MAClBgD,KAAK,EAAEA,KAAK;MACZpB,SAAS,EAAEzB,EAAE,CAAC,cAAc,EAAE;QAC7B,CAAC,GAAGyB,SAAS,QAAQ,GAAGA;OACxB,CAAC;MACFL,UAAU,EAAEA,UAAU,IAAIwB,IAAI,CAACxB,UAAU;MACzC6B,UAAU,EAAEL,IAAI,CAACK;IAAU,EAE1B,GAEFvD,oBAACI,eAAe;MACf+C,KAAK,EAAEA,KAAK;MACZpB,SAAS,EAAEzB,EAAE,CAAC,iBAAiB,EAAE;QAChC,CAAC,GAAGyB,SAAS,WAAW,GAAGA;OAC3B,CAAC;MACFL,UAAU,EAAEA,UAAU,IAAIwB,IAAI,CAACxB,UAAU,GAAG,IAAI,GAAG,KAAK;MACxD8B,eAAe,EAAEN,IAAI,CAACO,SAAS,GAAG,IAAI,GAAG,KAAK;MAC9CF,UAAU,EAAEL,IAAI,CAACK,UAAU,GAAG,IAAI,GAAG;IAAK,EAG3C;EACF,CAAC;EAED,OACCvD;IAAA,GACKD,IAAI,CACPmC,YAAY,EACZ,CACC,WAAW,EACX,UAAU,EACV,OAAO,EACP,MAAM,EACN,UAAU,EACV,YAAY,CACZ,CAACwB,MAAM,CAAC,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC,CACxC;IACD3B,SAAS,EAAEzB,EAAE,CAAC,GAAG,EAAEyB,SAAS;EAAC,GAE5BjC,CAAC,CAAC6D,GAAG,CAAC1B,KAAK,EAAE,CAAC2B,SAAS,EAAEC,KAAK,KAAwB;IACtD,MAAMC,YAAY,GAAGpC,UAAU,IAAIkC,SAAS,CAAClC,UAAU;IACvD,OACC1B;MACC+D,GAAG,EAAE,kBAAkBF,KAAK,EAAE;MAC9B9B,SAAS,EAAEzB,EAAE,CAAC,QAAQ,EAAEsD,SAAS,CAAC7B,SAAS,EAAE;QAC5C,CAAC,GAAGA,SAAS,OAAO,GAAGA,SAAS;QAChC,oBAAoB,EAAE+B,YAAY;QAClC,mBAAmB,EAAEF,SAAS,CAACH,SAAS;QACxC,oBAAoB,EAAEG,SAAS,CAACL,UAAU;QAC1C,cAAc,EAAE9B,IAAI,KAAK,UAAU;QACnC,eAAe,EAAEA,IAAI,KAAK;OAC1B,CAAC;MAAA,WACOmC,SAAS,CAACtB,EAAE;MACrB0B,OAAO,EAAEF,YAAY,GAAGG,SAAS,GAAG9B;IAAW,GAE9CyB,SAAS,CAACjB,IAAI,IAAID,YAAY,CAACkB,SAAS,CAACjB,IAAI,CAAC,EAC/C3C;MAAY+B,SAAS,EAAEzB,EAAE,CAAC,mBAAmB;IAAC,GAC5C2C,iBAAiB,CAACW,SAAS,CAAC,CACjB,CACL;EAEX,CAAC,CAAC,EACD5B,QAAQ,CACH;AAET,CAAC;AAEDH,UAAU,CAACqC,WAAW,GAAG,YAAY;AAErCrC,UAAU,CAACL,YAAY,GAAGA,YAAY;AAEtCK,UAAU,CAACsC,IAAI,GAAG;EACjBC,WAAW,EAAE,sJAAsJ;EACnKC,UAAU,EAAE,CAAC,UAAU,EAAE,WAAW;CACpC;AAEDxC,UAAU,CAACyC,SAAS,GAAG;EACtB;;;;EAIAvC,SAAS,EAAEjB,MAAM;EAEjB;;;EAGAkB,QAAQ,EAAErB,IAAI;EAEd;;;EAGAsB,KAAK,EAAEzB,OAAO,CACbO,KAAK,CAAC;IACLuB,EAAE,EAAExB,MAAM,CAACyD,UAAU;IACrB5B,IAAI,EAAEhC,IAAI;IACVyC,KAAK,EAAEzC,IAAI;IACX4C,UAAU,EAAE9C,IAAI;IAChBgD,SAAS,EAAEhD,IAAI;IACf+D,QAAQ,EAAE5D,MAAM;IAChBc,UAAU,EAAEjB,IAAI;IAChBsB,SAAS,EAAEjB;GACX,CAAC,CACF,CAACyD,UAAU;EAEZ;;;;EAIA9C,IAAI,EAAEZ,KAAK,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;EAEnC;;;;EAIAc,QAAQ,EAAEjB,IAAI;EAEd;;;EAGAgB,UAAU,EAAEjB;CACZ;AAED,eAAeoB,UAAU","names":["_","omit","React","PropTypes","Icon","RadioButtonLabeled","CheckboxLabeled","lucidClassNames","cx","bind","arrayOf","bool","func","node","number","oneOf","string","shape","getFigureParent","domNode","classList","contains","document","body","Error","parentElement","defaultProps","kind","isDisabled","onSelect","noop","IconSelect","props","className","children","items","passThroughs","handleClick","event","target","id","dataset","focus","hasAttribute","getChildIcon","icon","x","y","width","height","fill","getInputComponent","item","Label","label","singleSelect","isEqual","isSelected","isIndeterminate","isPartial","concat","map","childItem","index","itemDisabled","key","onClick","undefined","displayName","peek","description","categories","propTypes","isRequired","tabIndex"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/IconSelect/IconSelect.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Icon from '../Icon/Icon';\nimport RadioButtonLabeled from '../RadioButtonLabeled/RadioButtonLabeled';\nimport CheckboxLabeled from '../CheckboxLabeled/CheckboxLabeled';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps, Overwrite } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-IconSelect');\n\nconst { arrayOf, bool, func, node, number, oneOf, string, shape } = PropTypes;\n\nconst getFigureParent = (domNode: HTMLElement): HTMLElement | undefined => {\n\tif (domNode.classList.contains(cx('&-Item'))) {\n\t\treturn domNode;\n\t}\n\tif (domNode === document.body) {\n\t\tthrow new Error(`domNode is not a child of .${cx('&-Item')}`);\n\t}\n\tif (domNode.parentElement) {\n\t\treturn getFigureParent(domNode.parentElement);\n\t}\n\n\treturn;\n};\n\ninterface Item {\n\tid: string;\n\ticon?: React.ReactElement;\n\tlabel?: React.ReactElement | string;\n\tisSelected?: boolean;\n\tisPartial?: boolean;\n\ttabIndex?: number;\n\tisDisabled?: boolean;\n\tclassName?: string;\n}\n\ninterface IIconSelectPropsRaw extends StandardProps {\n\t/** Items in the IconSelect group. Each item should have an id. */\n\titems: Item[];\n\n\t/** Defines the type of IconSelect box. A 'single' select will create a radio\n\t\tinput type Item. A 'multiple' select will create a checkbox input type. */\n\tkind: 'single' | 'multiple';\n\n\t/** A function that is called with the id of the Item in the IconSelect group\n\t\tis clicked. */\n\tonSelect: (\n\t\tid: string,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent;\n\t\t\tprops: IIconSelectProps;\n\t\t}\n\t) => void;\n\n\t/** Disabled all IconSelect Items. */\n\tisDisabled: boolean;\n}\n\nexport type IIconSelectProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.HTMLAttributes<HTMLSpanElement>,\n\t\tHTMLSpanElement\n\t>,\n\tIIconSelectPropsRaw\n>;\n\nconst defaultProps = {\n\tkind: 'multiple' as const,\n\tisDisabled: false,\n\tonSelect: _.noop,\n};\n\nexport const IconSelect = (props: IIconSelectProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tchildren,\n\t\tkind,\n\t\titems,\n\t\tisDisabled,\n\t\tonSelect,\n\t\t...passThroughs\n\t} = props;\n\n\tconst handleClick = (event: React.MouseEvent): void => {\n\t\tif (!props.isDisabled) {\n\t\t\tconst domNode = getFigureParent(event.target as HTMLElement);\n\t\t\tif (domNode) {\n\t\t\t\tconst id = domNode.dataset.id;\n\n\t\t\t\tdomNode.focus();\n\t\t\t\tif (!domNode.hasAttribute('disabled') && id) {\n\t\t\t\t\tonSelect(id, { event, props: props });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst getChildIcon = (icon: React.ReactElement): React.ReactElement => {\n\t\treturn icon ? (\n\t\t\ticon\n\t\t) : (\n\t\t\t<Icon>\n\t\t\t\t<rect x='0' y='0' width='16' height='16' />\n\t\t\t\t<rect x='1' y='1' width='14' height='14' fill='white' />\n\t\t\t</Icon>\n\t\t);\n\t};\n\n\tconst getInputComponent = (item: Item) => {\n\t\tconst { kind, className, isDisabled } = props;\n\t\tconst Label = item.label;\n\t\tconst singleSelect = _.isEqual(kind, 'single');\n\n\t\treturn singleSelect ? (\n\t\t\t<RadioButtonLabeled\n\t\t\t\tLabel={Label}\n\t\t\t\tclassName={cx('&-Item-radio', {\n\t\t\t\t\t[`${className}-radio`]: className,\n\t\t\t\t})}\n\t\t\t\tisDisabled={isDisabled || item.isDisabled}\n\t\t\t\tisSelected={item.isSelected}\n\t\t\t\t// tabIndex={item.tabIndex}\n\t\t\t/>\n\t\t) : (\n\t\t\t<CheckboxLabeled\n\t\t\t\tLabel={Label}\n\t\t\t\tclassName={cx('&-Item-checkbox', {\n\t\t\t\t\t[`${className}-checkbox`]: className,\n\t\t\t\t})}\n\t\t\t\tisDisabled={isDisabled || item.isDisabled ? true : false}\n\t\t\t\tisIndeterminate={item.isPartial ? true : false}\n\t\t\t\tisSelected={item.isSelected ? true : false}\n\t\t\t\t// tabIndex={item.tabIndex}\n\t\t\t/>\n\t\t);\n\t};\n\n\treturn (\n\t\t<span\n\t\t\t{...omit(\n\t\t\t\tpassThroughs,\n\t\t\t\t[\n\t\t\t\t\t'className',\n\t\t\t\t\t'children',\n\t\t\t\t\t'items',\n\t\t\t\t\t'kind',\n\t\t\t\t\t'onSelect',\n\t\t\t\t\t'isDisabled',\n\t\t\t\t].concat(['initialState', 'callbackId'])\n\t\t\t)}\n\t\t\tclassName={cx('&', className)}\n\t\t>\n\t\t\t{_.map(items, (childItem, index): React.ReactElement => {\n\t\t\t\tconst itemDisabled = isDisabled || childItem.isDisabled;\n\t\t\t\treturn (\n\t\t\t\t\t<figure\n\t\t\t\t\t\tkey={`iconselectitem_${index}`}\n\t\t\t\t\t\tclassName={cx('&-Item', childItem.className, {\n\t\t\t\t\t\t\t[`${className}-Item`]: className,\n\t\t\t\t\t\t\t'&-Item-is-disabled': itemDisabled,\n\t\t\t\t\t\t\t'&-Item-is-partial': childItem.isPartial,\n\t\t\t\t\t\t\t'&-Item-is-selected': childItem.isSelected,\n\t\t\t\t\t\t\t'&-Item-multi': kind === 'multiple',\n\t\t\t\t\t\t\t'&-Item-single': kind === 'single',\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tdata-id={childItem.id}\n\t\t\t\t\t\tonClick={itemDisabled ? undefined : handleClick}\n\t\t\t\t\t>\n\t\t\t\t\t\t{childItem.icon && getChildIcon(childItem.icon)}\n\t\t\t\t\t\t<figcaption className={cx('&-Item-figcaption')}>\n\t\t\t\t\t\t\t{getInputComponent(childItem)}\n\t\t\t\t\t\t</figcaption>\n\t\t\t\t\t</figure>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t{children}\n\t\t</span>\n\t);\n};\n\nIconSelect.displayName = 'IconSelect';\n\nIconSelect.defaultProps = defaultProps;\n\nIconSelect.peek = {\n\tdescription: `\\`IconSelect\\` allows you to pair icons together to form a related cluster. Any props not explicitly called out are spread on to the root component.`,\n\tcategories: ['controls', 'selectors'],\n};\n\nIconSelect.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t\tValue is run through the \\`classnames\\` library.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tAdded to the end of the IconSelect group.\n\t*/\n\tchildren: node,\n\n\t/**\n\t\tItems in the IconSelect group. Each item should have an id.\n\t*/\n\titems: arrayOf(\n\t\tshape({\n\t\t\tid: string.isRequired,\n\t\t\ticon: node,\n\t\t\tlabel: node,\n\t\t\tisSelected: bool,\n\t\t\tisPartial: bool,\n\t\t\ttabIndex: number,\n\t\t\tisDisabled: bool,\n\t\t\tclassName: string,\n\t\t})\n\t).isRequired,\n\n\t/**\n\t\tDefines the type of IconSelect box. A 'single' select will create a radio\n\t\tinput type Item. A 'multiple' select will create a checkbox input type.\n\t*/\n\tkind: oneOf(['single', 'multiple']),\n\n\t/**\n\t\tA function that is called with the id of the Item in the IconSelect group\n\t\tis clicked.  Signature: \\`(id, { event }) => {}\\`\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tDisabled all IconSelect Items.\n\t*/\n\tisDisabled: bool,\n};\n\nexport default IconSelect;\n"]},"metadata":{},"sourceType":"module"}