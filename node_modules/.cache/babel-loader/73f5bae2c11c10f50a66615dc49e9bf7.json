{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes, { any } from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport Point from '../Point/Point';\nimport Line from '../Line/Line';\nconst cx = lucidClassNames.bind('&-Legend');\nconst POINT_SIZE = 12;\nconst LINE_WIDTH = 22;\nconst {\n  number,\n  string,\n  oneOf,\n  node,\n  bool,\n  func\n} = PropTypes;\nconst defaultProps = {\n  orient: 'vertical',\n  hasBorders: true,\n  isReversed: false\n};\nconst LegendItem = _props => null;\nconst handleItemClick = (index, props, event) => {\n  const {\n    onClick\n  } = props;\n  if (!onClick) {\n    return;\n  }\n  onClick(index, {\n    props,\n    event\n  });\n};\nexport const Legend = props => {\n  const {\n    className,\n    orient,\n    hasBorders,\n    isReversed,\n    ...passThroughs\n  } = props;\n  const isHorizontal = orient === 'horizontal';\n  const isVertical = orient === 'vertical';\n  const itemProps = _.map(findTypes(props, LegendItem), 'props');\n  const hasSomeLines = isVertical && _.some(itemProps, _ref => {\n    let {\n      hasLine\n    } = _ref;\n    return hasLine;\n  });\n  return React.createElement(\"ul\", {\n    ...passThroughs,\n    className: cx('&', {\n      '&-is-horizontal': isHorizontal,\n      '&-is-vertical': isVertical,\n      '&-has-borders': hasBorders,\n      '&-is-reversed': isReversed\n    }, className)\n  }, _.map(itemProps, (_ref2, index) => {\n    let {\n      hasLine,\n      hasPoint,\n      pointKind = 1,\n      color,\n      children,\n      className: itemClass\n    } = _ref2;\n    return React.createElement(\"li\", {\n      key: index,\n      className: cx(itemClass, '&-Item'),\n      onClick: _.partial(handleItemClick, index, itemProps[index])\n    }, hasPoint || hasLine ? React.createElement(\"svg\", {\n      className: cx('&-Item-indicator'),\n      width: hasLine || hasSomeLines ? LINE_WIDTH : POINT_SIZE,\n      height: POINT_SIZE\n    }, hasPoint ? React.createElement(Point, {\n      x: hasLine || hasSomeLines ? LINE_WIDTH / 2 : POINT_SIZE / 2,\n      y: POINT_SIZE / 2,\n      color: color,\n      kind: pointKind\n    }) : null, hasLine ? React.createElement(Line, {\n      d: `M0,${POINT_SIZE / 2} L${LINE_WIDTH},${POINT_SIZE / 2}`,\n      color: color\n    }) : null) : null, children);\n  }));\n};\nLegend.defaultProps = defaultProps;\nLegend.displayName = 'Legend';\nLegend.peek = {\n  description: `Contrary to the other chart primitives, this component is not rendered in \\`svg\\`. In order to sanely render horizontal legends, we need to know the width of the text elements ahead of rendering time. Since we're using a variable width font, the only way I know of to correctly get the width is with the \\`DOM\\` function \\`getComputedTextLength\\`. Variable widths are much more easy to implement outside of \\`svg\\`.`,\n  categories: ['visualizations', 'chart primitives']\n};\nLegend.HEIGHT = 28; // exposed for consumer convenience\nLegend.propTypes = {\n  /**\n  Child element whose children represent content to be shown inside Legend.\n  */\n  Item: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Determine orientation of the legend.\n  */\n  orient: oneOf(['horizontal', 'vertical']),\n  /**\n      Show the legend borders. Turn this off if you want to put the legend in a\n      \\`ToolTip\\` for example.\n  */\n  hasBorders: bool,\n  /**\n      Reverse the order of items in the legend.\n  */\n  isReversed: bool\n};\nLegendItem.displayName = 'Legend.Item';\nLegend.Item = LegendItem;\nLegendItem.peek = {\n  description: `Renders a \\`<li>\\` that describes the data series.\n\t`\n};\nLegendItem.propName = 'Item';\nLegendItem.propTypes = {\n  children: any\n};\nLegendItem.propTypes = {\n  hasPoint: bool,\n  hasLine: bool,\n  /**\n      Strings should match an existing color class unless they start with a '#' for specific colors. E.g.:\n       - \\`COLOR_0\\`\n      - \\`COLOR_GOOD\\`\n      - \\`'#123abc'\\`\n  */\n  color: string,\n  pointKind: number,\n  onClick: func,\n  /**\n      Class names that are appended to the defaults.\n  */\n  className: string\n};\nexport default Legend;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","any","lucidClassNames","findTypes","Point","Line","cx","bind","POINT_SIZE","LINE_WIDTH","number","string","oneOf","node","bool","func","defaultProps","orient","hasBorders","isReversed","LegendItem","_props","handleItemClick","index","props","event","onClick","Legend","className","passThroughs","isHorizontal","isVertical","itemProps","map","hasSomeLines","some","hasLine","hasPoint","pointKind","color","children","itemClass","key","partial","width","height","x","y","kind","d","displayName","peek","description","categories","HEIGHT","propTypes","Item","propName"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Legend/Legend.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes, { any } from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, StandardProps } from '../../util/component-types';\nimport Point from '../Point/Point';\nimport Line from '../Line/Line';\n\nconst cx = lucidClassNames.bind('&-Legend');\n\nconst POINT_SIZE = 12;\nconst LINE_WIDTH = 22;\n\nconst { number, string, oneOf, node, bool, func } = PropTypes;\n\nconst defaultProps = {\n\torient: 'vertical',\n\thasBorders: true,\n\tisReversed: false,\n};\n\nexport interface ILegendProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLUListElement>,\n\t\t\tHTMLUListElement\n\t\t> {\n\t/** Custom Item element (alias for `Legend.Item`) */\n\tItem?: React.ReactNode;\n\n\t/** Determines if the legend is vertical or horizontal */\n\torient?: 'vertical' | 'horizontal';\n\n\t/** Determines if the legend has borders */\n\thasBorders?: boolean;\n\n\t/** Determines if the sort order of legend items is reversed or not */\n\tisReversed?: boolean;\n}\n\nexport interface ILegendItemProps extends StandardProps {\n\t/** Determines if the legend item has points */\n\thasPoint?: boolean;\n\n\t/** Determines if the legend item has a line */\n\thasLine?: boolean;\n\n\t/** Strings should match an existing color class unless they start with a '#'\n\t\tfor specific colors. E.g.:\n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\`\n\t */\n\tcolor?: string;\n\n\t/** Determines the kind of point */\n\tpointKind?: number;\n\n\t/** Called when a user clicks a legend \\`Item\\`. */\n\tonClick?: (\n\t\tindex: number,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent<HTMLLIElement>;\n\t\t\tprops: ILegendItemProps;\n\t\t}\n\t) => void;\n}\n\nconst LegendItem = (_props: ILegendItemProps): null => null;\n\nconst handleItemClick = (\n\tindex: number,\n\tprops: ILegendItemProps,\n\tevent: React.MouseEvent<HTMLLIElement>\n): void => {\n\tconst { onClick } = props;\n\n\tif (!onClick) {\n\t\treturn;\n\t}\n\n\tonClick(index, { props, event });\n};\n\nexport const Legend = (props: ILegendProps): React.ReactElement => {\n\tconst { className, orient, hasBorders, isReversed, ...passThroughs } = props;\n\n\tconst isHorizontal = orient === 'horizontal';\n\tconst isVertical = orient === 'vertical';\n\tconst itemProps = _.map(findTypes(props, LegendItem), 'props');\n\tconst hasSomeLines =\n\t\tisVertical && _.some(itemProps, ({ hasLine }): boolean => hasLine);\n\n\treturn (\n\t\t<ul\n\t\t\t{...(passThroughs as any)}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-horizontal': isHorizontal,\n\t\t\t\t\t'&-is-vertical': isVertical,\n\t\t\t\t\t'&-has-borders': hasBorders,\n\t\t\t\t\t'&-is-reversed': isReversed,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t>\n\t\t\t{_.map(\n\t\t\t\titemProps,\n\t\t\t\t(\n\t\t\t\t\t{\n\t\t\t\t\t\thasLine,\n\t\t\t\t\t\thasPoint,\n\t\t\t\t\t\tpointKind = 1,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\tclassName: itemClass,\n\t\t\t\t\t},\n\t\t\t\t\tindex\n\t\t\t\t): React.ReactElement => (\n\t\t\t\t\t<li\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tclassName={cx(itemClass, '&-Item')}\n\t\t\t\t\t\tonClick={_.partial(handleItemClick, index, itemProps[index])}\n\t\t\t\t\t>\n\t\t\t\t\t\t{hasPoint || hasLine ? (\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\tclassName={cx('&-Item-indicator')}\n\t\t\t\t\t\t\t\twidth={hasLine || hasSomeLines ? LINE_WIDTH : POINT_SIZE}\n\t\t\t\t\t\t\t\theight={POINT_SIZE}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{hasPoint ? (\n\t\t\t\t\t\t\t\t\t<Point\n\t\t\t\t\t\t\t\t\t\tx={\n\t\t\t\t\t\t\t\t\t\t\thasLine || hasSomeLines ? LINE_WIDTH / 2 : POINT_SIZE / 2\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\ty={POINT_SIZE / 2}\n\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t\tkind={pointKind}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t{hasLine ? (\n\t\t\t\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\t\t\t\td={`M0,${POINT_SIZE / 2} L${LINE_WIDTH},${POINT_SIZE / 2}`}\n\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</li>\n\t\t\t\t)\n\t\t\t)}\n\t\t</ul>\n\t);\n};\n\nLegend.defaultProps = defaultProps;\n\nLegend.displayName = 'Legend';\n\nLegend.peek = {\n\tdescription: `Contrary to the other chart primitives, this component is not rendered in \\`svg\\`. In order to sanely render horizontal legends, we need to know the width of the text elements ahead of rendering time. Since we're using a variable width font, the only way I know of to correctly get the width is with the \\`DOM\\` function \\`getComputedTextLength\\`. Variable widths are much more easy to implement outside of \\`svg\\`.`,\n\tcategories: ['visualizations', 'chart primitives'],\n};\n\nLegend.HEIGHT = 28; // exposed for consumer convenience\n\nLegend.propTypes = {\n\t/**\n\tChild element whose children represent content to be shown inside Legend.\n\t*/\n\tItem: node,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tDetermine orientation of the legend.\n\t*/\n\torient: oneOf(['horizontal', 'vertical']),\n\n\t/**\n\t\tShow the legend borders. Turn this off if you want to put the legend in a\n\t\t\\`ToolTip\\` for example.\n\t*/\n\thasBorders: bool,\n\n\t/**\n\t\tReverse the order of items in the legend.\n\t*/\n\tisReversed: bool,\n};\n\nLegendItem.displayName = 'Legend.Item';\nLegend.Item = LegendItem;\nLegendItem.peek = {\n\tdescription: `Renders a \\`<li>\\` that describes the data series.\n\t`,\n};\nLegendItem.propName = 'Item';\nLegendItem.propTypes = {\n\tchildren: any,\n};\nLegendItem.propTypes = {\n\thasPoint: bool,\n\thasLine: bool,\n\t/**\n\t\tStrings should match an existing color class unless they start with a '#' for specific colors. E.g.:\n\n\t\t- \\`COLOR_0\\`\n\t\t- \\`COLOR_GOOD\\`\n\t\t- \\`'#123abc'\\`\n\t*/\n\tcolor: string,\n\tpointKind: number,\n\tonClick: func,\n\t/**\n\t\tClass names that are appended to the defaults.\n\t*/\n\tclassName: string,\n};\n\nexport default Legend;\n"]},"metadata":{},"sourceType":"module"}