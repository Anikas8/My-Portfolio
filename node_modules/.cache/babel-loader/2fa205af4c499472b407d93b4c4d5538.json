{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport ClockIcon from '../Icon/ClockIcon/ClockIcon';\nimport TimeSelectHour from './TimeSelectHour';\nimport TimeSelectMeridiem from './TimeSelectMeridiem';\nimport TimeSelectMinute from './TimeSelectMinute';\nconst cx = lucidClassNames.bind('&-TimeSelect');\nvar MeridiemType;\n(function (MeridiemType) {\n  MeridiemType[\"AM\"] = \"AM\";\n  MeridiemType[\"PM\"] = \"PM\";\n})(MeridiemType || (MeridiemType = {}));\nconst TimeSelect = _ref => {\n  let {\n    time,\n    is24HourClock,\n    onChange,\n    isDisabled\n  } = _ref;\n  const [inputFocus, setInputFocus] = useState(false);\n  const minute = useMemo(() => time.getMinutes(), [time]);\n  const {\n    hour,\n    meridiem = MeridiemType.AM\n  } = useMemo(() => {\n    const hour = time.getHours();\n    if (is24HourClock) {\n      return {\n        hour\n      };\n    }\n    const cleanedHour = hour === 0 || hour === 12 ? 12 : hour < 12 ? hour : hour - 12;\n    const cleanedMeridiem = hour < 12 ? MeridiemType.AM : MeridiemType.PM;\n    return {\n      hour: cleanedHour,\n      meridiem: cleanedMeridiem\n    };\n  }, [time, is24HourClock]);\n  const isAM = useMemo(() => meridiem === MeridiemType.AM, [meridiem]);\n  const isDisabledClass = isDisabled ? '&-time-disabled' : '';\n  const timeSelectorClass = isDisabled ? '&-isDisabled' : '';\n  const toggleInputFocus = () => setInputFocus(!inputFocus);\n  return React.createElement(\"div\", {\n    className: cx('&', timeSelectorClass),\n    onFocus: toggleInputFocus,\n    onBlur: toggleInputFocus\n  }, React.createElement(TimeSelectHour, {\n    hour: hour,\n    time: time,\n    is24HourClock: is24HourClock,\n    isAM: isAM,\n    isDisabled: isDisabled,\n    onChange: onChange\n  }), React.createElement(\"span\", {\n    className: cx(isDisabledClass)\n  }, \":\"), React.createElement(TimeSelectMinute, {\n    minute: minute,\n    time: time,\n    isDisabled: isDisabled,\n    onChange: onChange\n  }), !is24HourClock && React.createElement(TimeSelectMeridiem, {\n    hour: hour,\n    meridiem: meridiem,\n    time: time,\n    isDisabled: isDisabled,\n    onChange: onChange\n  }), React.createElement(ClockIcon, {\n    className: cx('&-clock', {\n      active: !isDisabled && inputFocus\n    }),\n    disabled: isDisabled\n  }));\n};\nTimeSelect.peek = {\n  description: `A time selector that is tab-able.`,\n  notes: {\n    overview: `\n\t\t\tA time selector that is tab-able. Hour/Minute/Meridiem are tied together. As a user scrolls\n\t\t\tup or down, the hours or minutes and meridiem will corresponding scroll.\n\t\t`,\n    technicalRecommendations: `\n\t\t\tUser must provide value. This component will process and return the next values.\n\t\t\tFor use as a pluggable pure functional component.\n\t\t`,\n    intendedUse: `\n\t\t\tHelp users select a time with less risk of typing incorrect data.\n\t\t`\n  },\n  categories: ['controls', 'selectors']\n};\nTimeSelect.defaultProps = {\n  time: new Date()\n};\nexport default TimeSelect;\nexport { MeridiemType };","map":{"version":3,"mappings":"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","names":["React","useMemo","useState","lucidClassNames","ClockIcon","TimeSelectHour","TimeSelectMeridiem","TimeSelectMinute","cx","bind","MeridiemType","TimeSelect","time","is24HourClock","onChange","isDisabled","inputFocus","setInputFocus","minute","getMinutes","hour","meridiem","AM","getHours","cleanedHour","cleanedMeridiem","PM","isAM","isDisabledClass","timeSelectorClass","toggleInputFocus","className","onFocus","onBlur","active","disabled","peek","description","notes","overview","technicalRecommendations","intendedUse","categories","defaultProps","Date"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/TimeSelect/TimeSelect.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport ClockIcon from '../Icon/ClockIcon/ClockIcon';\nimport TimeSelectHour from './TimeSelectHour';\nimport TimeSelectMeridiem from './TimeSelectMeridiem';\nimport TimeSelectMinute from './TimeSelectMinute';\n\nconst cx = lucidClassNames.bind('&-TimeSelect');\n\nexport interface ITimeSelect {\n\t/** JS Date for the time to display and update\t*/\n\ttime: Date;\n\n\t/** Set to true to display the TimeSelect as a 24 hour clock. Set to false\n\t\t\tto display the TimeSelect as a 12 hour clock */\n\tis24HourClock?: boolean;\n\n\t/** The callback that will take a new Date object */\n\tonChange(time: Date): void;\n\n\t/** Set to true to disable the TimeSelect */\n\tisDisabled?: boolean;\n}\n\nenum MeridiemType {\n\tAM = 'AM',\n\tPM = 'PM',\n}\n\nconst TimeSelect = ({\n\ttime,\n\tis24HourClock,\n\tonChange,\n\tisDisabled,\n}: ITimeSelect) => {\n\tconst [inputFocus, setInputFocus] = useState(false);\n\tconst minute = useMemo(() => time.getMinutes(), [time]);\n\tconst { hour, meridiem = MeridiemType.AM } = useMemo(() => {\n\t\tconst hour = time.getHours();\n\t\tif (is24HourClock) {\n\t\t\treturn { hour };\n\t\t}\n\t\tconst cleanedHour =\n\t\t\thour === 0 || hour === 12 ? 12 : hour < 12 ? hour : hour - 12;\n\t\tconst cleanedMeridiem = hour < 12 ? MeridiemType.AM : MeridiemType.PM;\n\t\treturn { hour: cleanedHour, meridiem: cleanedMeridiem };\n\t}, [time, is24HourClock]);\n\n\tconst isAM = useMemo(() => meridiem === MeridiemType.AM, [meridiem]);\n\tconst isDisabledClass = isDisabled ? '&-time-disabled' : '';\n\tconst timeSelectorClass = isDisabled ? '&-isDisabled' : '';\n\n\tconst toggleInputFocus = () => setInputFocus(!inputFocus);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cx('&', timeSelectorClass)}\n\t\t\tonFocus={toggleInputFocus}\n\t\t\tonBlur={toggleInputFocus}\n\t\t>\n\t\t\t<TimeSelectHour\n\t\t\t\thour={hour}\n\t\t\t\ttime={time}\n\t\t\t\tis24HourClock={is24HourClock}\n\t\t\t\tisAM={isAM}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tonChange={onChange}\n\t\t\t/>\n\t\t\t<span className={cx(isDisabledClass)}>:</span>\n\t\t\t<TimeSelectMinute\n\t\t\t\tminute={minute}\n\t\t\t\ttime={time}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tonChange={onChange}\n\t\t\t/>\n\t\t\t{!is24HourClock && (\n\t\t\t\t<TimeSelectMeridiem\n\t\t\t\t\thour={hour}\n\t\t\t\t\tmeridiem={meridiem}\n\t\t\t\t\ttime={time}\n\t\t\t\t\tisDisabled={isDisabled}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<ClockIcon\n\t\t\t\tclassName={cx('&-clock', { active: !isDisabled && inputFocus })}\n\t\t\t\tdisabled={isDisabled}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nTimeSelect.peek = {\n\tdescription: `A time selector that is tab-able.`,\n\tnotes: {\n\t\toverview: `\n\t\t\tA time selector that is tab-able. Hour/Minute/Meridiem are tied together. As a user scrolls\n\t\t\tup or down, the hours or minutes and meridiem will corresponding scroll.\n\t\t`,\n\t\ttechnicalRecommendations: `\n\t\t\tUser must provide value. This component will process and return the next values.\n\t\t\tFor use as a pluggable pure functional component.\n\t\t`,\n\t\tintendedUse: `\n\t\t\tHelp users select a time with less risk of typing incorrect data.\n\t\t`,\n\t},\n\tcategories: ['controls', 'selectors'],\n};\n\nTimeSelect.defaultProps = {\n\ttime: new Date(),\n};\n\nexport default TimeSelect;\n\nexport { MeridiemType };\n"]},"metadata":{},"sourceType":"module"}