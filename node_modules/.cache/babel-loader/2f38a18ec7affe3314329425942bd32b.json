{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, getFirst } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './SingleSelect.reducers';\nimport { DropMenuDumb as DropMenu } from '../DropMenu/DropMenu';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\nconst cx = lucidClassNames.bind('&-SingleSelect');\nconst {\n  any,\n  bool,\n  func,\n  node,\n  number,\n  object,\n  shape,\n  string,\n  oneOfType\n} = PropTypes;\nconst Placeholder = _props => null;\nPlaceholder.displayName = 'SingleSelect.Placeholder';\nPlaceholder.peek = {\n  description: `Content this is displayed when nothing is selected.`\n};\nPlaceholder.propName = 'Placeholder';\nconst Selected = _props => null;\nSelected.displayName = 'SingleSelect.Option.Selected';\nSelected.peek = {\n  description: `Customizes the rendering of the Option when it is selected and is displayed instead of the Placeholder.`\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\nconst Option = _props => null;\nOption.displayName = 'SingleSelect.Option';\nOption.peek = {\n  description: `\n        A selectable option in the list.\n    `\n};\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n  /**\n      Customizes the rendering of the Option when it is selected and is\n      displayed instead of the Placeholder.\n  */\n  Selected: any,\n  ...DropMenu.Option.propTypes\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\nconst OptionGroup = _props => null;\nOptionGroup.displayName = 'SingleSelect.OptionGroup';\nOptionGroup.peek = {\n  description: `\n        Groups \\`Option\\`s together with a non-selectable heading.\n    `\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\nconst defaultProps = {\n  hasReset: true,\n  isSelectionHighlighted: true,\n  isDisabled: false,\n  isInvisible: false,\n  selectedIndex: null,\n  showIcon: true,\n  DropMenu: DropMenu.defaultProps\n};\nclass SingleSelect extends React.Component {\n  UNSAFE_componentWillMount() {\n    // preprocess the options data before rendering\n    const {\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    } = DropMenu.preprocessOptionData(this.props, SingleSelect);\n    this.setState({\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    });\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // only preprocess options data when it changes (via new props) - better performance than doing this each render\n    const {\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    } = DropMenu.preprocessOptionData(nextProps, SingleSelect);\n    this.setState({\n      optionGroups,\n      flattenedOptionsData,\n      ungroupedOptionData,\n      optionGroupDataLookup\n    });\n  }\n  render() {\n    const {\n      style,\n      className,\n      hasReset,\n      isDisabled,\n      isInvisible,\n      isSelectionHighlighted,\n      selectedIndex,\n      maxMenuHeight,\n      onSelect,\n      showIcon,\n      DropMenu: dropMenuProps,\n      Title\n    } = this.props;\n    const {\n      direction,\n      isExpanded,\n      flyOutStyle\n    } = dropMenuProps;\n    const {\n      optionGroups,\n      optionGroupDataLookup,\n      ungroupedOptionData,\n      flattenedOptionsData\n    } = this.state;\n    const placeholderProps = _.first(_.map(findTypes(this.props, SingleSelect.Placeholder), 'props'));\n    const placeholder = _.get(placeholderProps, 'children', 'Select');\n    const isItemSelected = _.isNumber(selectedIndex);\n    const isHighlighted = !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted;\n    const isNullOptionSelected = selectedIndex === null;\n    const title = _.isEmpty(Title) ? null : React.createElement(\"span\", {\n      className: 'select-title'\n    }, Title, \":\");\n    return React.createElement(DropMenu, {\n      ...dropMenuProps,\n      isDisabled: isDisabled,\n      selectedIndices: _.isNumber(selectedIndex) ? [selectedIndex] : [],\n      className: cx('&', className),\n      onSelect: onSelect,\n      style: style,\n      flyOutStyle: _.assign({}, flyOutStyle, !_.isNil(maxMenuHeight) ? {\n        maxHeight: maxMenuHeight\n      } : null),\n      ContextMenu: {\n        directonOffset: isNullOptionSelected ? -1 : 0\n      }\n    }, React.createElement(DropMenu.Control, null, React.createElement(\"div\", {\n      tabIndex: 0,\n      className: cx('&-Control', {\n        '&-Control-is-highlighted': isHighlighted,\n        '&-Control-is-selected': isHighlighted,\n        '&-Control-is-expanded': isExpanded,\n        '&-Control-is-disabled': isDisabled,\n        '&-Control-is-invisible': isInvisible,\n        '&-Control-is-null-option': isNullOptionSelected\n      })\n    }, title, React.createElement(\"span\", {\n      ...(!isItemSelected ? placeholderProps : null),\n      className: cx('&-Control-content', !isItemSelected ? _.get(placeholderProps, 'className') : null)\n    }, isItemSelected ? _.get(getFirst(flattenedOptionsData[selectedIndex].optionProps, SingleSelect.Option.Selected), 'props.children') || flattenedOptionsData[selectedIndex].optionProps.children : placeholder), showIcon && React.createElement(ChevronIcon, {\n      size: 12,\n      direction: isExpanded ? direction : 'down'\n    }))), hasReset && isItemSelected ? React.createElement(DropMenu.NullOption, {\n      ...placeholderProps\n    }, placeholder) : null, _.map(optionGroups, (optionGroupProps, optionGroupIndex) => React.createElement(DropMenu.OptionGroup, {\n      key: 'SingleSelectOptionGroup' + optionGroupIndex,\n      ...optionGroupProps\n    }, optionGroupProps.children, _.map(_.get(optionGroupDataLookup, optionGroupIndex), _ref => {\n      let {\n        optionProps,\n        optionIndex\n      } = _ref;\n      return React.createElement(DropMenu.Option, {\n        key: 'SingleSelectOption' + optionIndex,\n        ..._.omit(optionProps, 'Selected')\n      });\n    }))).concat(\n    // then render all the ungrouped options at the end\n    _.map(ungroupedOptionData, _ref2 => {\n      let {\n        optionProps,\n        optionIndex\n      } = _ref2;\n      return React.createElement(DropMenu.Option, {\n        key: 'SingleSelectOption' + optionIndex,\n        ..._.omit(optionProps, 'Selected')\n      });\n    })));\n  }\n}\nSingleSelect.displayName = 'SingleSelect';\nSingleSelect.peek = {\n  description: `\\`SingleSelect\\` is a dropdown list.`,\n  notes: {\n    overview: `\n\t\t\t\t\t\tA dropdown list. When you click on the trigger a dropdown menu appears, allows you to choose one option, and execute relevant actions.\n\t\t\t\t\t`,\n    intendedUse: `\n\t\t\t\t\t\tAllow users to select one option from a list of 3-10 options.\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t**Styling notes**\n\t\t\t\t\t\t\n\t\t\t\t\t\t- Use the default style in forms. The blue outline helps users clearly see that a selection has been made.\n\t\t\t\t\t\t- Use \\`isSelectedHighlighted='false'\\` if the default selection is All or a null state. See the \\`no selection highlighting\\` example.\n\t\t\t\t\t\t- Use \\`isInvisible\\` for filters within a full page table header. See the \\`invisible\\` example.\n\t\t\t\t\t`,\n    technicalRecommendations: `\n\t\t\t\t\t`\n  },\n  categories: ['controls', 'selectors'],\n  madeFrom: ['DropMenu']\n};\nSingleSelect.defaultProps = defaultProps;\nSingleSelect.reducers = reducers;\nSingleSelect.Placeholder = Placeholder;\nSingleSelect.Option = Option;\nSingleSelect.Selected = Selected;\nSingleSelect.OptionGroup = OptionGroup;\nSingleSelect.NullOption = DropMenu.NullOption;\nSingleSelect.FixedOption = DropMenu.FixedOption;\nSingleSelect.propTypes = {\n  /**\n      Should be instances of: \\`SingleSelect.Placeholder\\`,\n      \\`SingleSelect.Option\\`, \\`SingleSelect.OptionGroup\\`. Other direct\n      child elements will not render.\n  */\n  children: node,\n  className: string /**\n                    Appended to the component-specific class names set on the root elements.\n                    Applies to *both* the control and the flyout menu.\n                    */,\n\n  /**\n      Styles that are passed through to root element.\n  */\n  style: object,\n  /**\n      Applies primary color styling to the control when an item is selected.\n  */\n  isSelectionHighlighted: bool,\n  /**\n      Allows user to reset the \\`optionIndex\\` to \\`null\\` if they select the\n      placeholder at the top of the options list.  If \\`false\\`, it will not\n      render the placeholder in the menu.\n  */\n  hasReset: bool,\n  /**\n      Disables the \\`SingleSelect\\` from being clicked or focused.\n  */\n  isDisabled: bool,\n  /**\n      Gives the effect of an 'invisible button'. Essentially, there is no grey border,\n      but there is still a blue border on a selection.\n  */\n  isInvisible: bool,\n  /**\n      The currently selected \\`SingleSelect.Option\\` index or \\`null\\` if\n      nothing is selected.\n  */\n  selectedIndex: number,\n  /**\n      The max height of the fly-out menu.\n  */\n  maxMenuHeight: oneOfType([number, string]),\n  /**\n                  Show or hide the dropndown icon\n          */\n  showIcon: bool,\n  /**\n      Object of \\`DropMenu\\` props which are passed thru to the underlying \\`DropMenu\\`\n      component.\n  */\n  DropMenu: shape(DropMenu.propTypes),\n  /**\n      Called when an option is selected.  Has the signature \\`(optionIndex,\n      {props, event}) => {}\\` where \\`optionIndex\\` is the new\n      \\`selectedIndex\\` or \\`null\\` and \\`props\\` are the \\`props\\` for the\n      selected \\`Option\\`.\n  */\n  onSelect: func,\n  Placeholder: any /**\n                   *Child Element* - The content rendered in the control when there is no\n                   option is selected. Also rendered in the option list to remove current\n                   selection.\n                   */,\n  Option: any /**\n              *Child Element* - A drop menu option. The \\`optionIndex\\` is in-order\n              of rendering regardless of group nesting, starting with index \\`0\\`.\n              Each \\`Option\\` may be passed a prop called \\`isDisabled\\` to disable\n              selection of that \\`Option\\`.  Any other props pass to Option will be\n              available from the \\`onSelect\\` handler.\n              */,\n  OptionGroup: any /**\n                   *Child Element* - Used to group \\`Option\\`s within the menu. Any\n                   non-\\`Option\\`s passed in will be rendered as a label for the group.\n                   */,\n\n  /**\n      Optional Title.\n  */\n  Title: string\n};\nexport default buildModernHybridComponent(SingleSelect, {\n  reducers\n});\nexport { SingleSelect as SingleSelectDumb };","map":{"version":3,"mappings":"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","names":["React","PropTypes","_","lucidClassNames","findTypes","getFirst","buildModernHybridComponent","reducers","DropMenuDumb","DropMenu","ChevronIcon","cx","bind","any","bool","func","node","number","object","shape","string","oneOfType","Placeholder","_props","displayName","peek","description","propName","Selected","propTypes","Option","defaultProps","OptionGroup","hasReset","isSelectionHighlighted","isDisabled","isInvisible","selectedIndex","showIcon","SingleSelect","Component","UNSAFE_componentWillMount","optionGroups","flattenedOptionsData","ungroupedOptionData","optionGroupDataLookup","preprocessOptionData","props","setState","UNSAFE_componentWillReceiveProps","nextProps","render","style","className","maxMenuHeight","onSelect","dropMenuProps","Title","direction","isExpanded","flyOutStyle","state","placeholderProps","first","map","placeholder","get","isItemSelected","isNumber","isHighlighted","isNullOptionSelected","title","isEmpty","selectedIndices","assign","isNil","maxHeight","ContextMenu","directonOffset","Control","tabIndex","optionProps","children","size","NullOption","optionGroupProps","optionGroupIndex","key","optionIndex","omit","concat","notes","overview","intendedUse","technicalRecommendations","categories","madeFrom","FixedOption","SingleSelectDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/SingleSelect/SingleSelect.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, getFirst, StandardProps } from '../../util/component-types';\nimport { buildModernHybridComponent } from '../../util/state-management';\nimport * as reducers from './SingleSelect.reducers';\nimport {\n\tIDropMenuProps,\n\tIDropMenuState,\n\tIDropMenuOptionProps,\n\tIDropMenuOptionGroupProps,\n\tDropMenuDumb as DropMenu,\n\tIOptionsData,\n} from '../DropMenu/DropMenu';\nimport ChevronIcon from '../Icon/ChevronIcon/ChevronIcon';\n\nconst cx = lucidClassNames.bind('&-SingleSelect');\n\nconst { any, bool, func, node, number, object, shape, string, oneOfType } =\n\tPropTypes;\n\n/** Placeholder Child Component */\nexport interface ISingleSelectPlaceholderProps extends StandardProps {\n\tdescription?: string;\n}\n\nconst Placeholder = (_props: ISingleSelectPlaceholderProps): null => null;\n\nPlaceholder.displayName = 'SingleSelect.Placeholder';\nPlaceholder.peek = {\n\tdescription: `Content this is displayed when nothing is selected.`,\n};\nPlaceholder.propName = 'Placeholder';\n\n/** Option Child Component */\nexport interface ISingleSelectOptionProps extends IDropMenuOptionProps {\n\tdescription?: string;\n\tname?: string;\n\t/** Custom Option component (alias for `SingleSelect.Option.Selected`)  */\n\tSelected?: React.ReactNode;\n}\n\nconst Selected = (_props: { children?: React.ReactNode }): null => null;\n\nSelected.displayName = 'SingleSelect.Option.Selected';\nSelected.peek = {\n\tdescription: `Customizes the rendering of the Option when it is selected and is displayed instead of the Placeholder.`,\n};\nSelected.propName = 'Selected';\nSelected.propTypes = {};\n\nconst Option = (_props: ISingleSelectOptionProps): null => null;\n\nOption.displayName = 'SingleSelect.Option';\nOption.peek = {\n\tdescription: `\n        A selectable option in the list.\n    `,\n};\nOption.Selected = Selected;\nOption.propName = 'Option';\nOption.propTypes = {\n\t/**\n        Customizes the rendering of the Option when it is selected and is\n        displayed instead of the Placeholder.\n    */\n\tSelected: any,\n\t...DropMenu.Option.propTypes,\n};\nOption.defaultProps = DropMenu.Option.defaultProps;\n\nconst OptionGroup = (_props: IDropMenuOptionGroupProps): null => null;\n\nOptionGroup.displayName = 'SingleSelect.OptionGroup';\nOptionGroup.peek = {\n\tdescription: `\n        Groups \\`Option\\`s together with a non-selectable heading.\n    `,\n};\nOptionGroup.propName = 'OptionGroup';\nOptionGroup.propTypes = DropMenu.OptionGroup.propTypes;\nOptionGroup.defaultProps = DropMenu.OptionGroup.defaultProps;\n\ntype ISingleSelectDropMenuProps = Partial<IDropMenuProps>;\n\n/** Single Select Component */\nexport interface ISingleSelectProps extends StandardProps {\n\t/** Custom Placeholder component (alias for `SingleSelect.Placeholder`)  */\n\tPlaceholder?: React.ReactNode;\n\n\t/** Custom Option component (alias for `SingleSelect.Option`)  */\n\tOption?: React.ReactNode;\n\n\t//TODO: Remove? Seems like this belongs on OptionProps not SingleSelectProps\n\t/** Custom Option component (alias for `SingleSelect.Option.Selected`)  */\n\tSelected?: React.ReactNode;\n\n\t/** Custom OptionGroup component (alias for `SingleSelect.OptionGroup`)  */\n\tOptionGroup?: IDropMenuOptionGroupProps;\n\n\thasReset: boolean;\n\n\tisSelectionHighlighted: boolean;\n\n\tisDisabled: boolean;\n\n\tisInvisible: boolean;\n\n\tselectedIndex: number | null;\n\n\tDropMenu: ISingleSelectDropMenuProps;\n\n\tmaxMenuHeight?: number | string;\n\n\tshowIcon?: boolean;\n\n\tonSelect?: (\n\t\toptionIndex: number | null,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: ISingleSelectOptionProps | undefined;\n\t\t\tevent: React.MouseEvent | React.KeyboardEvent;\n\t\t}\n\t) => void;\n\n\tTitle?: string | null;\n}\n\nexport interface ISingleSelectState {\n\tselectedIndex: number | null;\n\toptionGroups: IDropMenuOptionGroupProps[];\n\tflattenedOptionsData: IOptionsData[];\n\tungroupedOptionData: IOptionsData[];\n\toptionGroupDataLookup: { [key: number]: IOptionsData[] };\n\tDropMenu: IDropMenuState;\n\tTitle: string | null;\n}\n\nconst defaultProps = {\n\thasReset: true,\n\tisSelectionHighlighted: true,\n\tisDisabled: false,\n\tisInvisible: false,\n\tselectedIndex: null,\n\tshowIcon: true,\n\tDropMenu: DropMenu.defaultProps,\n};\n\nclass SingleSelect extends React.Component<\n\tISingleSelectProps,\n\tISingleSelectState\n> {\n\tstatic displayName = 'SingleSelect';\n\n\tstatic peek = {\n\t\tdescription: `\\`SingleSelect\\` is a dropdown list.`,\n\t\tnotes: {\n\t\t\toverview: `\n\t\t\t\t\t\tA dropdown list. When you click on the trigger a dropdown menu appears, allows you to choose one option, and execute relevant actions.\n\t\t\t\t\t`,\n\t\t\tintendedUse: `\n\t\t\t\t\t\tAllow users to select one option from a list of 3-10 options.\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t**Styling notes**\n\t\t\t\t\t\t\n\t\t\t\t\t\t- Use the default style in forms. The blue outline helps users clearly see that a selection has been made.\n\t\t\t\t\t\t- Use \\`isSelectedHighlighted='false'\\` if the default selection is All or a null state. See the \\`no selection highlighting\\` example.\n\t\t\t\t\t\t- Use \\`isInvisible\\` for filters within a full page table header. See the \\`invisible\\` example.\n\t\t\t\t\t`,\n\t\t\ttechnicalRecommendations: `\n\t\t\t\t\t`,\n\t\t},\n\t\tcategories: ['controls', 'selectors'],\n\t\tmadeFrom: ['DropMenu'],\n\t};\n\n\tstatic defaultProps = defaultProps;\n\tstatic reducers = reducers;\n\tstatic Placeholder = Placeholder;\n\tstatic Option = Option;\n\tstatic Selected = Selected;\n\tstatic OptionGroup = OptionGroup;\n\tstatic NullOption = DropMenu.NullOption;\n\tstatic FixedOption = DropMenu.FixedOption;\n\n\tstatic propTypes = {\n\t\t/**\n            Should be instances of: \\`SingleSelect.Placeholder\\`,\n            \\`SingleSelect.Option\\`, \\`SingleSelect.OptionGroup\\`. Other direct\n            child elements will not render.\n        */\n\t\tchildren: node,\n\n\t\tclassName: string /**\n            Appended to the component-specific class names set on the root elements.\n            Applies to *both* the control and the flyout menu.\n        */,\n\n\t\t/**\n            Styles that are passed through to root element.\n        */\n\t\tstyle: object,\n\n\t\t/**\n            Applies primary color styling to the control when an item is selected.\n        */\n\t\tisSelectionHighlighted: bool,\n\n\t\t/**\n            Allows user to reset the \\`optionIndex\\` to \\`null\\` if they select the\n            placeholder at the top of the options list.  If \\`false\\`, it will not\n            render the placeholder in the menu.\n        */\n\t\thasReset: bool,\n\n\t\t/**\n            Disables the \\`SingleSelect\\` from being clicked or focused.\n        */\n\t\tisDisabled: bool,\n\n\t\t/**\n            Gives the effect of an 'invisible button'. Essentially, there is no grey border,\n            but there is still a blue border on a selection.\n        */\n\t\tisInvisible: bool,\n\n\t\t/**\n            The currently selected \\`SingleSelect.Option\\` index or \\`null\\` if\n            nothing is selected.\n        */\n\t\tselectedIndex: number,\n\n\t\t/**\n            The max height of the fly-out menu.\n        */\n\t\tmaxMenuHeight: oneOfType([number, string]),\n\n\t\t/**\n\t\t\t\t\t\tShow or hide the dropndown icon\n\t\t\t\t*/\n\t\tshowIcon: bool,\n\n\t\t/**\n            Object of \\`DropMenu\\` props which are passed thru to the underlying \\`DropMenu\\`\n            component.\n        */\n\t\tDropMenu: shape(DropMenu.propTypes),\n\n\t\t/**\n            Called when an option is selected.  Has the signature \\`(optionIndex,\n            {props, event}) => {}\\` where \\`optionIndex\\` is the new\n            \\`selectedIndex\\` or \\`null\\` and \\`props\\` are the \\`props\\` for the\n            selected \\`Option\\`.\n        */\n\t\tonSelect: func,\n\n\t\tPlaceholder: any /**\n            *Child Element* - The content rendered in the control when there is no\n            option is selected. Also rendered in the option list to remove current\n            selection.\n        */,\n\n\t\tOption: any /**\n            *Child Element* - A drop menu option. The \\`optionIndex\\` is in-order\n            of rendering regardless of group nesting, starting with index \\`0\\`.\n            Each \\`Option\\` may be passed a prop called \\`isDisabled\\` to disable\n            selection of that \\`Option\\`.  Any other props pass to Option will be\n            available from the \\`onSelect\\` handler.\n        */,\n\n\t\tOptionGroup: any /**\n            *Child Element* - Used to group \\`Option\\`s within the menu. Any\n            non-\\`Option\\`s passed in will be rendered as a label for the group.\n        */,\n\n\t\t/**\n            Optional Title.\n        */\n\t\tTitle: string,\n\t};\n\n\tUNSAFE_componentWillMount() {\n\t\t// preprocess the options data before rendering\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(this.props, SingleSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t}\n\n\tUNSAFE_componentWillReceiveProps(nextProps: ISingleSelectProps): void {\n\t\t// only preprocess options data when it changes (via new props) - better performance than doing this each render\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t} = DropMenu.preprocessOptionData(nextProps, SingleSelect);\n\n\t\tthis.setState({\n\t\t\toptionGroups,\n\t\t\tflattenedOptionsData,\n\t\t\tungroupedOptionData,\n\t\t\toptionGroupDataLookup,\n\t\t});\n\t}\n\n\trender(): React.ReactNode {\n\t\tconst {\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\thasReset,\n\t\t\tisDisabled,\n\t\t\tisInvisible,\n\t\t\tisSelectionHighlighted,\n\t\t\tselectedIndex,\n\t\t\tmaxMenuHeight,\n\t\t\tonSelect,\n\t\t\tshowIcon,\n\t\t\tDropMenu: dropMenuProps,\n\t\t\tTitle,\n\t\t} = this.props;\n\n\t\tconst { direction, isExpanded, flyOutStyle } = dropMenuProps;\n\n\t\tconst {\n\t\t\toptionGroups,\n\t\t\toptionGroupDataLookup,\n\t\t\tungroupedOptionData,\n\t\t\tflattenedOptionsData,\n\t\t} = this.state;\n\n\t\tconst placeholderProps = _.first(\n\t\t\t_.map(findTypes(this.props, SingleSelect.Placeholder), 'props')\n\t\t);\n\t\tconst placeholder = _.get(placeholderProps, 'children', 'Select');\n\t\tconst isItemSelected = _.isNumber(selectedIndex);\n\t\tconst isHighlighted =\n\t\t\t(!isDisabled && isItemSelected && isSelectionHighlighted) ||\n\t\t\t(isExpanded && isSelectionHighlighted);\n\t\tconst isNullOptionSelected = selectedIndex === null;\n\t\tconst title = _.isEmpty(Title) ? null : (\n\t\t\t<span className='select-title'>{Title}:</span>\n\t\t);\n\n\t\treturn (\n\t\t\t<DropMenu\n\t\t\t\t{...dropMenuProps}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tselectedIndices={_.isNumber(selectedIndex) ? [selectedIndex] : []}\n\t\t\t\tclassName={cx('&', className)}\n\t\t\t\tonSelect={onSelect}\n\t\t\t\tstyle={style}\n\t\t\t\tflyOutStyle={_.assign(\n\t\t\t\t\t{},\n\t\t\t\t\tflyOutStyle,\n\t\t\t\t\t!_.isNil(maxMenuHeight) ? { maxHeight: maxMenuHeight } : null\n\t\t\t\t)}\n\t\t\t\tContextMenu={{ directonOffset: isNullOptionSelected ? -1 : 0 }}\n\t\t\t>\n\t\t\t\t<DropMenu.Control>\n\t\t\t\t\t<div\n\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\tclassName={cx('&-Control', {\n\t\t\t\t\t\t\t'&-Control-is-highlighted': isHighlighted,\n\t\t\t\t\t\t\t'&-Control-is-selected': isHighlighted,\n\t\t\t\t\t\t\t'&-Control-is-expanded': isExpanded,\n\t\t\t\t\t\t\t'&-Control-is-disabled': isDisabled,\n\t\t\t\t\t\t\t'&-Control-is-invisible': isInvisible,\n\t\t\t\t\t\t\t'&-Control-is-null-option': isNullOptionSelected,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t{...(!isItemSelected ? placeholderProps : null)}\n\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t'&-Control-content',\n\t\t\t\t\t\t\t\t!isItemSelected ? _.get(placeholderProps, 'className') : null\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isItemSelected\n\t\t\t\t\t\t\t\t? _.get(\n\t\t\t\t\t\t\t\t\t\tgetFirst(\n\t\t\t\t\t\t\t\t\t\t\tflattenedOptionsData[selectedIndex as number].optionProps,\n\t\t\t\t\t\t\t\t\t\t\tSingleSelect.Option.Selected\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t'props.children'\n\t\t\t\t\t\t\t\t  ) ||\n\t\t\t\t\t\t\t\t  flattenedOptionsData[selectedIndex as number].optionProps\n\t\t\t\t\t\t\t\t\t\t.children\n\t\t\t\t\t\t\t\t: placeholder}\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t{showIcon && (\n\t\t\t\t\t\t\t<ChevronIcon\n\t\t\t\t\t\t\t\tsize={12}\n\t\t\t\t\t\t\t\tdirection={isExpanded ? direction : 'down'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</DropMenu.Control>\n\n\t\t\t\t{hasReset && isItemSelected ? (\n\t\t\t\t\t<DropMenu.NullOption {...placeholderProps}>\n\t\t\t\t\t\t{placeholder}\n\t\t\t\t\t</DropMenu.NullOption>\n\t\t\t\t) : null}\n\t\t\t\t{_.map(optionGroups, (optionGroupProps, optionGroupIndex) => (\n\t\t\t\t\t<DropMenu.OptionGroup\n\t\t\t\t\t\tkey={'SingleSelectOptionGroup' + optionGroupIndex}\n\t\t\t\t\t\t{...optionGroupProps}\n\t\t\t\t\t>\n\t\t\t\t\t\t{optionGroupProps.children}\n\t\t\t\t\t\t{_.map(\n\t\t\t\t\t\t\t_.get(optionGroupDataLookup, optionGroupIndex),\n\t\t\t\t\t\t\t({ optionProps, optionIndex }) => (\n\t\t\t\t\t\t\t\t<DropMenu.Option\n\t\t\t\t\t\t\t\t\tkey={'SingleSelectOption' + optionIndex}\n\t\t\t\t\t\t\t\t\t{..._.omit(optionProps, 'Selected')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</DropMenu.OptionGroup>\n\t\t\t\t)).concat(\n\t\t\t\t\t// then render all the ungrouped options at the end\n\t\t\t\t\t_.map(ungroupedOptionData, ({ optionProps, optionIndex }) => (\n\t\t\t\t\t\t<DropMenu.Option\n\t\t\t\t\t\t\tkey={'SingleSelectOption' + optionIndex}\n\t\t\t\t\t\t\t{..._.omit(optionProps, 'Selected')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t\t</DropMenu>\n\t\t);\n\t}\n}\n\nexport default buildModernHybridComponent<\n\tISingleSelectProps,\n\tISingleSelectState,\n\ttypeof SingleSelect\n>(SingleSelect as any, { reducers });\n\nexport { SingleSelect as SingleSelectDumb };\n"]},"metadata":{},"sourceType":"module"}