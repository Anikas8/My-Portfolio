{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { transformFromCenter } from '../../util/chart-helpers';\nimport * as chartConstants from '../../constants/charts';\nconst cx = lucidClassNames.bind('&-Point');\nconst {\n  number,\n  bool,\n  string,\n  object\n} = PropTypes;\n// These were originally built in a 12x12 grid, except triangles which were\n// 14x12 cause triangles are poo.\nconst PATHS = ['M6,12 C2.686,12 0,9.314 0,6 C0,2.686 2.686,0 6,0 C9.314,-0 12,2.686 12,6 C12,9.314 9.314,12 6,12 z', 'M6,12 C0,12 0,12 0,6 C0,0 -0,0 6,0 C12,0 12,0 12,6 C12,12 12,12 6,12 z', 'M6.034,1.656 C7,0 7,0 7.966,1.656 L13.034,10.344 C14,12 13,12 12,12 L2,12 C1,12 0,12 0.966,10.344 L6.034,1.656 z', 'M7.966,10.344 C7,12 7,12 6.034,10.344 L0.966,1.656 C-0,0 1,0 2,0 L12,0 C13,0 14,0 13.034,1.656 L7.966,10.344 z', 'M2.594,9.406 C-0.812,6 -0.812,6 2.594,2.594 C6,-0.812 6,-0.812 9.406,2.594 C12.812,6 12.812,6 9.406,9.406 C6,12.812 6,12.812 2.594,9.406 z'];\nexport var Kind;\n(function (Kind) {\n  Kind[Kind[\"Circle\"] = 0] = \"Circle\";\n  Kind[Kind[\"Square\"] = 1] = \"Square\";\n  Kind[Kind[\"TriangleUp\"] = 2] = \"TriangleUp\";\n  Kind[Kind[\"TriangleDown\"] = 3] = \"TriangleDown\";\n  Kind[Kind[\"Diamond\"] = 4] = \"Diamond\";\n})(Kind || (Kind = {}));\nconst defaultProps = {\n  x: 0,\n  y: 0,\n  kind: 0,\n  color: chartConstants.COLOR_0,\n  hasStroke: false,\n  scale: 1\n};\nexport const Point = props => {\n  const {\n    color,\n    hasStroke,\n    kind,\n    x,\n    y,\n    scale,\n    className,\n    style,\n    ...passThroughs\n  } = props;\n  const kindIndex = kind % 5;\n  const isCustomColor = _.startsWith(color, '#');\n  const colorStyle = isCustomColor ? {\n    fill: color\n  } : null;\n  // These transforms are used to center the icon on the x y coordinate\n  // provided.\n  const transforms = [transformFromCenter(x, y, 6, 6, scale), transformFromCenter(x, y, 6, 6, scale), transformFromCenter(x, y, 7, 6, scale), transformFromCenter(x, y, 7, 6, scale), transformFromCenter(x, y, 6, 6, scale)];\n  return React.createElement(\"path\", {\n    ...passThroughs,\n    style: {\n      ...style,\n      ...colorStyle\n    },\n    className: cx(className, '&', {\n      '&-has-stroke': hasStroke,\n      [`&-${color}`]: !isCustomColor\n    }),\n    transform: transforms[kindIndex],\n    d: PATHS[kindIndex]\n  });\n};\nPoint.defaultProps = defaultProps;\nPoint.displayName = 'Point';\nPoint.peek = {\n  description: `*For use within an \\`svg\\`*. A \\`Point\\` is typically used for scatter plots or overlaying shapes on lines.`,\n  categories: ['visualizations', 'geoms']\n};\nPoint.propTypes = {\n  /**\n          Passed through to the root element.\n      */\n  style: object,\n  /**\n          Appended to the component-specific class names set on the root element.\n      */\n  className: string,\n  /**\n          Determines if the point has a white stroke around it.\n      */\n  hasStroke: bool,\n  /**\n          x coordinate\n      */\n  x: number,\n  /**\n          y coordinate\n      */\n  y: number,\n  /**\n          Zero-based set of shapes. It's recommended that you pass the index of\n          your array for shapes.\n      */\n  kind: number,\n  /**\n          Strings should match an existing color class unless they start with a '#'\n          for specific colors. E.g.:\n           - \\`COLOR_0\\`\n          - \\`COLOR_GOOD\\`\n          - \\`'#123abc'\\`\n      */\n  color: string,\n  /**\n          Scale up the size of the symbol. 2 would be double the original size.\n      */\n  scale: number\n};\nexport default Point;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","transformFromCenter","chartConstants","cx","bind","number","bool","string","object","PATHS","Kind","defaultProps","x","y","kind","color","COLOR_0","hasStroke","scale","Point","props","className","style","passThroughs","kindIndex","isCustomColor","startsWith","colorStyle","fill","transforms","transform","d","displayName","peek","description","categories","propTypes"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Point/Point.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\nimport { transformFromCenter } from '../../util/chart-helpers';\nimport * as chartConstants from '../../constants/charts';\n\nconst cx = lucidClassNames.bind('&-Point');\n\nconst { number, bool, string, object } = PropTypes;\n\n// These were originally built in a 12x12 grid, except triangles which were\n// 14x12 cause triangles are poo.\nconst PATHS = [\n\t'M6,12 C2.686,12 0,9.314 0,6 C0,2.686 2.686,0 6,0 C9.314,-0 12,2.686 12,6 C12,9.314 9.314,12 6,12 z',\n\t'M6,12 C0,12 0,12 0,6 C0,0 -0,0 6,0 C12,0 12,0 12,6 C12,12 12,12 6,12 z',\n\t'M6.034,1.656 C7,0 7,0 7.966,1.656 L13.034,10.344 C14,12 13,12 12,12 L2,12 C1,12 0,12 0.966,10.344 L6.034,1.656 z',\n\t'M7.966,10.344 C7,12 7,12 6.034,10.344 L0.966,1.656 C-0,0 1,0 2,0 L12,0 C13,0 14,0 13.034,1.656 L7.966,10.344 z',\n\t'M2.594,9.406 C-0.812,6 -0.812,6 2.594,2.594 C6,-0.812 6,-0.812 9.406,2.594 C12.812,6 12.812,6 9.406,9.406 C6,12.812 6,12.812 2.594,9.406 z',\n];\n\nexport enum Kind {\n\tCircle,\n\tSquare,\n\tTriangleUp,\n\tTriangleDown,\n\tDiamond,\n}\n\nexport interface IPointProps\n\textends StandardProps,\n\t\tReact.SVGProps<SVGPathElement> {\n\thasStroke: boolean;\n\tkind: Kind;\n\tcolor: string;\n\tscale: number;\n\tx: number;\n\ty: number;\n}\n\nconst defaultProps = {\n\tx: 0,\n\ty: 0,\n\tkind: 0,\n\tcolor: chartConstants.COLOR_0,\n\thasStroke: false,\n\tscale: 1,\n};\n\nexport const Point = (props: IPointProps): React.ReactElement => {\n\tconst {\n\t\tcolor,\n\t\thasStroke,\n\t\tkind,\n\t\tx,\n\t\ty,\n\t\tscale,\n\t\tclassName,\n\t\tstyle,\n\t\t...passThroughs\n\t} = props;\n\n\tconst kindIndex = kind % 5;\n\n\tconst isCustomColor = _.startsWith(color, '#');\n\tconst colorStyle = isCustomColor ? { fill: color } : null;\n\n\t// These transforms are used to center the icon on the x y coordinate\n\t// provided.\n\tconst transforms = [\n\t\ttransformFromCenter(x, y, 6, 6, scale),\n\t\ttransformFromCenter(x, y, 6, 6, scale),\n\t\ttransformFromCenter(x, y, 7, 6, scale), // triangle\n\t\ttransformFromCenter(x, y, 7, 6, scale), // triangle\n\t\ttransformFromCenter(x, y, 6, 6, scale),\n\t];\n\n\treturn (\n\t\t<path\n\t\t\t{...passThroughs}\n\t\t\tstyle={{\n\t\t\t\t...style,\n\t\t\t\t...colorStyle,\n\t\t\t}}\n\t\t\tclassName={cx(className, '&', {\n\t\t\t\t'&-has-stroke': hasStroke,\n\t\t\t\t[`&-${color}`]: !isCustomColor,\n\t\t\t})}\n\t\t\ttransform={transforms[kindIndex]}\n\t\t\td={PATHS[kindIndex]}\n\t\t/>\n\t);\n};\n\nPoint.defaultProps = defaultProps;\n\nPoint.displayName = 'Point';\n\nPoint.peek = {\n\tdescription: `*For use within an \\`svg\\`*. A \\`Point\\` is typically used for scatter plots or overlaying shapes on lines.`,\n\tcategories: ['visualizations', 'geoms'],\n};\n\nPoint.propTypes = {\n\t/**\n\t\t\tPassed through to the root element.\n\t\t*/\n\tstyle: object,\n\n\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\tclassName: string,\n\n\t/**\n\t\t\tDetermines if the point has a white stroke around it.\n\t\t*/\n\thasStroke: bool,\n\n\t/**\n\t\t\tx coordinate\n\t\t*/\n\tx: number,\n\n\t/**\n\t\t\ty coordinate\n\t\t*/\n\ty: number,\n\n\t/**\n\t\t\tZero-based set of shapes. It's recommended that you pass the index of\n\t\t\tyour array for shapes.\n\t\t*/\n\tkind: number,\n\n\t/**\n\t\t\tStrings should match an existing color class unless they start with a '#'\n\t\t\tfor specific colors. E.g.:\n\n\t\t\t- \\`COLOR_0\\`\n\t\t\t- \\`COLOR_GOOD\\`\n\t\t\t- \\`'#123abc'\\`\n\t\t*/\n\tcolor: string,\n\n\t/**\n\t\t\tScale up the size of the symbol. 2 would be double the original size.\n\t\t*/\n\tscale: number,\n};\n\nexport default Point;\n"]},"metadata":{},"sourceType":"module"}