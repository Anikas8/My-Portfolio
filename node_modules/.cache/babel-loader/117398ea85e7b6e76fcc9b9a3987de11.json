{"ast":null,"code":"import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { filterTypes } from '../../util/component-types';\nimport ArrowIcon from '../Icon/ArrowIcon/ArrowIcon';\nimport DragCaptureZone from '../DragCaptureZone/DragCaptureZone';\nconst cx = lucidClassNames.bind('&-Table');\nconst {\n  any,\n  bool,\n  func,\n  node,\n  number,\n  object,\n  string,\n  oneOf,\n  oneOfType\n} = PropTypes;\nconst Thead = props => {\n  const {\n    children,\n    className,\n    ...passThroughs\n  } = props;\n  return React.createElement(\"thead\", {\n    ...omit(passThroughs, ['className', 'children', 'initialState', 'callbackId']),\n    className: cx('&-Thead', className)\n  }, renderRowsWithIdentifiedEdges(filterTypes(children, Tr), Th));\n};\nThead.displayName = 'Table.Thead';\nThead.peek = {\n  description: `\n\t\t\\`Thead\\` renders <thead>.\n\t`\n};\nThead.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      any valid React children\n  */\n  children: node\n};\nconst Tbody = props => {\n  const {\n    children,\n    className,\n    ...passThroughs\n  } = props;\n  return React.createElement(\"tbody\", {\n    ...omit(passThroughs, ['className', 'children', 'initialState', 'callbackId']),\n    className: cx('&-Tbody', className)\n  }, renderRowsWithIdentifiedEdges(filterTypes(children, Tr), Td));\n};\nTbody.displayName = 'Table.Tbody';\nTbody.peek = {\n  description: `\n\t\t\\`Tbody\\` renders <tbody>.\n\t`\n};\nTbody.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      any valid React children\n  */\n  children: node\n};\nconst Tr = props => {\n  const {\n    className,\n    children,\n    isDisabled,\n    isSelected,\n    isActive,\n    ...passThroughs\n  } = props;\n  return React.createElement(\"tr\", {\n    ...omit(passThroughs, ['children', 'className', 'isDisabled', 'isSelected', 'isActive', 'isActionable', 'initialState', 'callbackId']),\n    className: cx('&-Tr', {\n      '&-is-disabled': isDisabled,\n      '&-is-selected': isSelected,\n      '&-is-active': isActive\n    }, className)\n  }, children);\n};\nTr.defaultProps = {\n  isDisabled: false,\n  isSelected: false,\n  isActive: false\n};\nTr.displayName = 'Table.Tr';\nTr.peek = {\n  description: `\n\t\t\\`Tr\\` renders <tr>.\n\t`\n};\nTr.propTypes = {\n  /**\n      any valid React children\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      Applies disabled styles to the row.\n  */\n  isDisabled: bool,\n  /**\n      Applies styles to the row for when the row is selected, usually by a\n      checkbox.\n  */\n  isSelected: bool,\n  /**\n      Applies active styles to the row, usually when the row has been clicked.\n  */\n  isActive: bool\n};\nexport class Th extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.rootRef = React.createRef();\n    this.state = {\n      // Represents the actively changing width as the cell is resized.\n      activeWidth: this.props.width || null,\n      // Indicates if a `width` prop was explicitly provided.\n      hasSetWidth: !!this.props.width,\n      // Indicates whether the cell is currently being resized.\n      isResizing: false,\n      // Indicates a mouse drag is in progress\n      isDragging: false,\n      // Represents the width when the cell is not actively being resized.\n      passiveWidth: this.props.width || null\n    };\n    this.getWidth = () => {\n      const styleWidth = _.get(this.rootRef, 'style.width');\n      if (_.endsWith(styleWidth, 'px')) {\n        return parseInt(styleWidth);\n      }\n      if (this.rootRef.current) {\n        return this.rootRef.current.getBoundingClientRect().width;\n      }\n      return null;\n    };\n    this.handleClickCapture = event => {\n      if (this.state.isDragging) {\n        event.stopPropagation();\n        this.setState({\n          isDragging: false\n        });\n      }\n    };\n    this.handleMouseEnter = () => {\n      this.setState({\n        isDragging: this.state.isResizing\n      });\n    };\n    this.handleMouseUp = () => {\n      this.setState({\n        isDragging: this.state.isResizing\n      });\n    };\n    this.handleDragEnded = (coordinates, _ref) => {\n      let {\n        event\n      } = _ref;\n      this.setState({\n        isResizing: false,\n        passiveWidth: this.state.activeWidth\n      });\n      window.document.body.style.cursor = '';\n      if (this.props.onResize) {\n        this.props.onResize(this.state.activeWidth, {\n          event,\n          props: this.props\n        });\n      }\n    };\n    this.handleDragged = (coordinates, _ref2) => {\n      let {\n        event,\n        props\n      } = _ref2;\n      let passiveWidth = this.state.passiveWidth;\n      const minWidth = this.props.minWidth !== null && _.isString(this.props.minWidth) ? parseInt(this.props.minWidth) : this.props.minWidth;\n      if (passiveWidth === null) {\n        return;\n      } else if (_.isString(passiveWidth)) {\n        passiveWidth = parseInt(passiveWidth);\n      }\n      const activeWidth = minWidth && passiveWidth + coordinates.dX > minWidth || !minWidth ? passiveWidth + coordinates.dX : minWidth;\n      this.setState({\n        activeWidth\n      });\n      if (this.props.onResize) {\n        this.props.onResize(activeWidth, {\n          event,\n          props: this.props\n        });\n      }\n    };\n    this.handleDragStarted = (coordinates, _ref3) => {\n      let {\n        event,\n        props\n      } = _ref3;\n      const startingWidth = this.getWidth();\n      this.setState({\n        activeWidth: startingWidth,\n        hasSetWidth: true,\n        isResizing: true,\n        isDragging: true,\n        passiveWidth: startingWidth\n      });\n      window.document.body.style.cursor = 'ew-resize';\n      if (this.props.onResize) {\n        this.props.onResize(startingWidth, {\n          event,\n          props: this.props\n        });\n      }\n    };\n  }\n  UNSAFE_componentWillReceiveProps(_ref4) {\n    let {\n      width\n    } = _ref4;\n    if (!_.isNil(width) && width !== this.props.width) {\n      this.setState({\n        hasSetWidth: true,\n        passiveWidth: width\n      });\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      hasBorderRight,\n      hasBorderLeft,\n      isFirstRow,\n      isLastRow,\n      isFirstCol,\n      isFirstSingle,\n      isLastCol,\n      align,\n      isResizable,\n      isSortable,\n      isSorted,\n      sortDirection,\n      style,\n      truncateContent,\n      ...passThroughs\n    } = this.props;\n    const {\n      activeWidth,\n      hasSetWidth,\n      isResizing,\n      passiveWidth\n    } = this.state;\n    return React.createElement(\"th\", {\n      ...omit(passThroughs, ['className', 'children', 'style', 'align', 'hasBorderRight', 'hasBorderLeft', 'isResizable', 'isSortable', 'isSorted', 'onResize', 'sortDirection', 'width', 'minWidth', 'isFirstRow', 'isLastRow', 'isFirstCol', 'isLastCol', 'isFirstSingle', 'field', 'truncateContent', 'initialState', 'callbackId']),\n      className: cx('&-Th', {\n        '&-is-first-row': isFirstRow,\n        '&-is-last-row': isLastRow,\n        '&-is-first-col': isFirstCol,\n        '&-is-first-single': isFirstSingle,\n        '&-is-last-col': isLastCol,\n        '&-align-left': align === 'left',\n        '&-align-center': align === 'center',\n        '&-align-right': align === 'right',\n        '&-is-resizable': isResizable,\n        '&-is-resizing': isResizing,\n        '&-is-sortable': isSortable === false ? isSortable : isSorted || isSortable,\n        '&-is-sorted': isSorted,\n        '&-has-border-right': hasBorderRight,\n        '&-has-border-left': hasBorderLeft,\n        '&-truncate-content': truncateContent\n      }, className),\n      ref: this.rootRef,\n      onClickCapture: this.handleClickCapture,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseUp: this.handleMouseUp,\n      style: hasSetWidth ? _.assign({}, style, {\n        width: isResizing ? activeWidth : passiveWidth\n      }) : style\n    }, React.createElement(\"div\", {\n      className: cx('&-Th-inner')\n    }, React.createElement(\"div\", {\n      className: cx('&-Th-inner-content')\n    }, children), isSorted || isSortable ? React.createElement(\"div\", {\n      className: cx('&-Th-inner-caret')\n    }, React.createElement(ArrowIcon, {\n      className: cx('&-sort-icon'),\n      direction: sortDirection,\n      size: 10\n    })) : null, isResizable ? React.createElement(DragCaptureZone, {\n      className: cx('&-Th-inner-resize'),\n      onDrag: this.handleDragged,\n      onDragEnd: this.handleDragEnded,\n      onDragStart: this.handleDragStarted\n    }) : null));\n  }\n}\nTh.displayName = 'Table.Th';\nTh.defaultProps = {\n  align: 'left',\n  isResizable: false,\n  isSorted: false,\n  sortDirection: 'up',\n  rowSpan: 1\n};\nTh.peek = {\n  description: `\n\t\t\t\\`Th\\` renders <th>.\n\t\t`\n};\nTh.propTypes = {\n  /**\n      Aligns the content of a cell. Can be \\`left\\`, \\`center\\`, or \\`right\\`.\n  */\n  align: string,\n  /**\n      any valid React children\n  */\n  children: node,\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      Should be \\`true\\` to render a right border.\n  */\n  hasBorderRight: bool,\n  /**\n      Should be \\`true\\` to render a left border.\n  */\n  hasBorderLeft: bool,\n  /**\n      Styles the cell to indicate it should be resizable and sets up drag-\n      related events to enable this resizing functionality.\n  */\n  isResizable: bool,\n  /**\n      Styles the cell to allow column sorting.\n  */\n  isSortable: bool,\n  /**\n      Renders a caret icon to show that the column is sorted.\n  */\n  isSorted: bool,\n  /**\n      Called as the user drags the resize handle to resize the column atop\n      which this table header cell sits.\n  */\n  onResize: func,\n  /**\n      Sets the direction of the caret icon when \\`isSorted\\` is also set.\n  */\n  sortDirection: oneOf(['left', 'up', 'right', 'down', undefined]),\n  /**\n      Styles that are passed through to root element.\n  */\n  style: object,\n  /**\n      Sets the width of the cell.\n  */\n  width: oneOfType([number, string]),\n  /**\n      Sets the min width of the cell.\n  */\n  minWidth: oneOfType([number, string]),\n  /**\n      Define the cell as being in the first row.\n  */\n  isFirstRow: bool,\n  /**\n      Define the cell as being in the last row.\n  */\n  isLastRow: bool,\n  /**\n      Define the cell as being in the first column.\n  */\n  isFirstCol: bool,\n  /**\n      Define the cell as being in the last column.\n  */\n  isLastCol: bool,\n  /**\n      Define the cell as being the first 1-height cell in the row.\n  */\n  isFirstSingle: bool,\n  /**\n      Sets the field value for the cell.\n  */\n  field: string,\n  /** Truncates `Table.Td` content with ellipses, must be used with `hasFixedHeader` */\n  /**\n      Truncates header and adds ellipses.\n  */\n  truncateContent: bool\n};\nconst Td = props => {\n  const {\n    className,\n    isFirstRow,\n    isLastRow,\n    isFirstCol,\n    isLastCol,\n    isFirstSingle,\n    align,\n    hasBorderRight,\n    hasBorderLeft,\n    truncateContent,\n    ...passThroughs\n  } = props;\n  return React.createElement(\"td\", {\n    ...omit(passThroughs, ['className', 'align', 'hasBorderRight', 'hasBorderLeft', 'isFirstRow', 'isLastRow', 'isFirstCol', 'isLastCol', 'isFirstSingle', 'isEmpty', 'truncateContent', 'initialState', 'callbackId', 'sortDirection']),\n    className: cx('&-Td', {\n      '&-is-first-row': isFirstRow,\n      '&-is-last-row': isLastRow,\n      '&-is-first-col': isFirstCol,\n      '&-is-last-col': isLastCol,\n      '&-is-first-single': isFirstSingle,\n      '&-align-left': align === 'left',\n      '&-align-center': align === 'center',\n      '&-align-right': align === 'right',\n      '&-has-border-right': hasBorderRight,\n      '&-has-border-left': hasBorderLeft,\n      '&-truncate-content': truncateContent\n    }, className)\n  });\n};\nTd.displayName = 'Table.Td';\nTd.defaultProps = {\n  align: 'left',\n  hasBorderRight: false,\n  hasBorderLeft: false,\n  rowSpan: 1\n};\nTd.peek = {\n  description: `\n\t\t\\`Td\\` renders <td>.\n\t`,\n  categories: [],\n  madeFrom: []\n};\nTd.propTypes = {\n  /**\n      Aligns the content of a cell. Can be \\`left\\`, \\`center\\`, or \\`right\\`.\n  */\n  align: oneOf(['left', 'center', 'right']),\n  /**\n      Appended to the component-specific class names set on the root element.\n      Value is run through the \\`classnames\\` library.\n  */\n  className: any,\n  /**\n      Should be \\`true\\` to render a right border.\n  */\n  hasBorderRight: bool,\n  /**\n      Should be \\`true\\` to render a left border.\n  */\n  hasBorderLeft: bool,\n  /**\n      Define the cell as being in the first row.\n  */\n  isFirstRow: bool,\n  /**\n      Define the cell as being in the last row.\n  */\n  isLastRow: bool,\n  /**\n      Define the cell as being in the first column.\n  */\n  isFirstCol: bool,\n  /**\n      Define the cell as being in the last column.\n  */\n  isLastCol: bool,\n  /**\n      Define the cell as being the first 1-height cell in the row.\n  */\n  isFirstSingle: bool,\n  /**\n      Indicates if the cell has any data or not.\n  */\n  isEmpty: bool,\n  /**\n      Truncates \\`Table.Td\\` content with ellipses, must be used with \\`hasFixedHeader\\`\n  */\n  truncateContent: bool\n};\nconst Table = props => {\n  const {\n    className,\n    hasBorder,\n    density,\n    hasWordWrap,\n    hasLightHeader,\n    hasHover,\n    style,\n    ...passThroughs\n  } = props;\n  return React.createElement(\"table\", {\n    ...omit(passThroughs, ['density', 'hasLightHeader', 'hasBorder', 'hasWordWrap', 'hasHover', 'initialState', 'callbackId']),\n    style: style,\n    className: cx('&', {\n      '&-density-extended': density === 'extended',\n      '&-density-compressed': density === 'compressed',\n      '&-has-border': hasBorder,\n      '&-has-word-wrap': hasWordWrap,\n      '&-has-light-header': hasLightHeader,\n      '&-no-hover': !hasHover\n    }, className)\n  });\n};\nTable.displayName = 'Table';\nTable.defaultProps = {\n  density: 'extended',\n  hasBorder: false,\n  hasWordWrap: true,\n  hasLightHeader: true,\n  hasHover: true\n};\nTable.peek = {\n  description: `\\`Table\\` provides the most basic components to create a lucid table. It is recommended to create a wrapper around this component rather than using it directly in an app.`,\n  categories: ['table'],\n  madeFrom: ['ArrowIcon', 'DragCaptureZone']\n};\nTable.propTypes = {\n  /**\n      Styles that are passed through to the root container.\n  */\n  style: object,\n  /**\n      Class names that are appended to the defaults.\n  */\n  className: string,\n  /**\n      Adjusts the row density of the table to have more or less spacing.\n  */\n  density: oneOf(['compressed', 'extended']),\n  /**\n      Allows light header.\n  */\n  hasLightHeader: bool,\n  /**\n      Render the table with borders on the outer edge.\n  */\n  hasBorder: bool,\n  /**\n      Enables word wrapping in tables cells.\n  */\n  hasWordWrap: bool,\n  /**\n      Applies a row hover to rows. Defaults to true.\n  */\n  hasHover: bool\n};\n/** ChildComponents */\nTable.Thead = Thead;\nTable.Th = Th;\nTable.Tbody = Tbody;\nTable.Tr = Tr;\nTable.Td = Td;\nfunction mapToGrid(trList) {\n  let cellType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Td;\n  let mapFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _.property('element');\n  const cellRowList = _.map(trList, trElement => _.map(filterTypes(trElement.props.children, cellType)));\n  const grid = [];\n  if (_.isEmpty(cellRowList)) {\n    return [];\n  }\n  // iterate over each row\n  for (let rowIndex = 0; rowIndex < cellRowList.length; rowIndex++) {\n    const cellRow = cellRowList[rowIndex];\n    if (_.isNil(grid[rowIndex])) {\n      grid[rowIndex] = [];\n    }\n    const canonicalRow = rowIndex;\n    // build out each horizonal duplicates of each cell\n    for (let cellElementIndex = 0; cellElementIndex < cellRow.length; cellElementIndex++) {\n      const cellElement = cellRow[cellElementIndex];\n      let colSpan = 1;\n      let isCellIncluded = false;\n      if (_.isNumber(cellElement.props.colSpan)) {\n        colSpan = cellElement.props.colSpan;\n      }\n      const nilCellIndex = _.findIndex(grid[canonicalRow], _.isNil);\n      const originCol = nilCellIndex !== -1 ? nilCellIndex : grid[canonicalRow].length;\n      for (let currentColSpan = 0; currentColSpan < colSpan; currentColSpan++) {\n        grid[canonicalRow][originCol + currentColSpan] = {\n          element: cellElement,\n          canonicalPosition: {\n            row: canonicalRow,\n            col: originCol\n          },\n          isOriginal: !isCellIncluded\n        };\n        isCellIncluded = true;\n      }\n    }\n    // build out each vertial duplicates of each cell using the new row in the full grid\n    for (let colIndex = 0; colIndex < grid[canonicalRow].length; colIndex++) {\n      const gridCell = grid[canonicalRow][colIndex];\n      if (gridCell.isOriginal) {\n        const cellElement = _.get(gridCell, 'element');\n        let rowSpan = 1;\n        if (_.isNumber(_.get(cellElement, 'props.rowSpan'))) {\n          rowSpan = _.get(cellElement, 'props.rowSpan');\n        }\n        for (let currentRowSpan = 1; currentRowSpan < rowSpan; currentRowSpan++) {\n          if (_.isNil(grid[canonicalRow + currentRowSpan])) {\n            grid[canonicalRow + currentRowSpan] = [];\n          }\n          grid[canonicalRow + currentRowSpan][colIndex] = _.assign({}, grid[canonicalRow + currentRowSpan - 1][colIndex], {\n            isOriginal: false\n          });\n        }\n      }\n    }\n  }\n  // map new values to each cell in the final grid\n  const finalGrid = [];\n  for (let rowIndex = 0; rowIndex < grid.length; rowIndex++) {\n    finalGrid[rowIndex] = [];\n    for (let colIndex = 0; colIndex < grid[rowIndex].length; colIndex++) {\n      finalGrid[rowIndex][colIndex] = mapFn(grid[rowIndex][colIndex], {\n        row: rowIndex,\n        col: colIndex\n      }, finalGrid);\n    }\n  }\n  return finalGrid;\n}\n/**\n * renderRowsWithIdentifiedEdges\n *\n * Returns an equivalent list of Tr's where each cell on the perimeter has props set for: `isFirstRow`, `isLastRow`, `isFirstCol`, `isLastCol`, and `isFirstSingle`\n */\nfunction renderRowsWithIdentifiedEdges(trList) {\n  let cellType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Td;\n  const duplicateReferences = [];\n  const fullCellGrid = mapToGrid(trList, cellType, (_ref5, currentPos, grid) => {\n    let {\n      element: {\n        props\n      },\n      isOriginal,\n      canonicalPosition\n    } = _ref5;\n    if (!isOriginal) {\n      // if cell spans multiple positions\n      // store current position and return original cell props reference\n      duplicateReferences.push(currentPos);\n      return grid[canonicalPosition.row][canonicalPosition.col];\n    }\n    return _.assign({}, props); // return a new props object based on old cell\n  });\n\n  if (_.isEmpty(fullCellGrid)) {\n    return [];\n  }\n  const firstRow = _.first(fullCellGrid);\n  if (_.isUndefined(firstRow)) {\n    return [];\n  }\n  const firstRowIndex = 0;\n  const lastRowIndex = fullCellGrid.length - 1;\n  const firstColIndex = 0;\n  const lastColIndex = firstRow.length - 1;\n  const firstSingleLookup = {};\n  // decorate the props of each cell with props that indicate its role in the table\n  _.forEach(fullCellGrid, (cellList, rowIndex) => _.forEach(cellList, (cellProps, colIndex) => {\n    if (!_.isNull(cellProps)) {\n      if (rowIndex === firstRowIndex) {\n        cellProps.isFirstRow = true;\n      }\n      if (rowIndex === lastRowIndex) {\n        cellProps.isLastRow = true;\n      }\n      if (colIndex === firstColIndex) {\n        cellProps.isFirstCol = true;\n      }\n      if (colIndex === lastColIndex) {\n        cellProps.isLastCol = true;\n      }\n      if (!_.has(firstSingleLookup, rowIndex)) {\n        _.set(firstSingleLookup, rowIndex, false);\n      }\n      if (!_.get(firstSingleLookup, rowIndex) && _.get(cellProps, 'rowSpan', 1) === 1) {\n        _.set(firstSingleLookup, rowIndex, true);\n        cellProps.isFirstSingle = true;\n      }\n    }\n  }));\n  _.forEach(duplicateReferences, _ref6 => {\n    let {\n      row,\n      col\n    } = _ref6;\n    fullCellGrid[row][col] = null; // remove duplicate references from grid\n  });\n  // render the grid back to elements using the updated cell props\n  return _.map(trList, (trElement, rowIndex) => React.createElement(Tr, {\n    ...trElement.props,\n    key: rowIndex\n  }, _.reduce(fullCellGrid[rowIndex], (rowChildren, cellProps, colIndex) => rowChildren.concat(!_.isNull(cellProps) ? [React.createElement(cellType, _.assign({}, cellProps, {\n    key: colIndex\n  }))] : []), [])));\n}\nexport default Table;","map":{"version":3,"mappings":"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","names":["_","omit","React","PropTypes","lucidClassNames","filterTypes","ArrowIcon","DragCaptureZone","cx","bind","any","bool","func","node","number","object","string","oneOf","oneOfType","Thead","props","children","className","passThroughs","renderRowsWithIdentifiedEdges","Tr","Th","displayName","peek","description","propTypes","Tbody","Td","isDisabled","isSelected","isActive","defaultProps","Component","constructor","createRef","activeWidth","width","hasSetWidth","isResizing","isDragging","passiveWidth","styleWidth","get","rootRef","endsWith","parseInt","current","getBoundingClientRect","event","state","stopPropagation","setState","coordinates","window","document","body","style","cursor","onResize","minWidth","isString","dX","startingWidth","getWidth","UNSAFE_componentWillReceiveProps","isNil","render","hasBorderRight","hasBorderLeft","isFirstRow","isLastRow","isFirstCol","isFirstSingle","isLastCol","align","isResizable","isSortable","isSorted","sortDirection","truncateContent","ref","onClickCapture","handleClickCapture","onMouseEnter","handleMouseEnter","onMouseUp","handleMouseUp","assign","direction","size","onDrag","handleDragged","onDragEnd","handleDragEnded","onDragStart","handleDragStarted","rowSpan","undefined","field","categories","madeFrom","isEmpty","Table","hasBorder","density","hasWordWrap","hasLightHeader","hasHover","mapToGrid","trList","cellType","mapFn","property","cellRowList","map","trElement","grid","rowIndex","length","cellRow","canonicalRow","cellElementIndex","cellElement","colSpan","isCellIncluded","isNumber","nilCellIndex","findIndex","originCol","currentColSpan","element","canonicalPosition","row","col","isOriginal","colIndex","gridCell","currentRowSpan","finalGrid","duplicateReferences","fullCellGrid","currentPos","push","firstRow","first","isUndefined","firstRowIndex","lastRowIndex","firstColIndex","lastColIndex","firstSingleLookup","forEach","cellList","cellProps","isNull","has","set","key","reduce","rowChildren","concat","createElement"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Table/Table.tsx"],"sourcesContent":["import _, { omit } from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport {\n\tfilterTypes,\n\tStandardProps,\n\tOverwrite,\n} from '../../util/component-types';\nimport ArrowIcon from '../Icon/ArrowIcon/ArrowIcon';\nimport DragCaptureZone, {\n\tIDragCaptureZoneProps,\n} from '../DragCaptureZone/DragCaptureZone';\n\nconst cx = lucidClassNames.bind('&-Table');\n\nconst { any, bool, func, node, number, object, string, oneOf, oneOfType } =\n\tPropTypes;\n\n/** Thead <Thead>: The Table Head component */\nexport interface ITheadPropsRaw extends StandardProps {}\n\ntype ITheadProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.HTMLAttributes<HTMLTableHeaderCellElement>,\n\t\tHTMLTableHeaderCellElement\n\t>,\n\tITheadPropsRaw\n>;\n\nconst Thead = (props: ITheadProps) => {\n\tconst { children, className, ...passThroughs } = props;\n\n\treturn (\n\t\t<thead\n\t\t\t{...omit(passThroughs, [\n\t\t\t\t'className',\n\t\t\t\t'children',\n\t\t\t\t'initialState',\n\t\t\t\t'callbackId',\n\t\t\t] as any)}\n\t\t\tclassName={cx('&-Thead', className)}\n\t\t>\n\t\t\t{renderRowsWithIdentifiedEdges(filterTypes(children, Tr), Th as any)}\n\t\t</thead>\n\t);\n};\n\nThead.displayName = 'Table.Thead';\n\nThead.peek = {\n\tdescription: `\n\t\t\\`Thead\\` renders <thead>.\n\t`,\n};\n\nThead.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t\tValue is run through the \\`classnames\\` library.\n\t*/\n\tclassName: any,\n\n\t/**\n\t\tany valid React children\n\t*/\n\tchildren: node,\n};\n\n/** Tbody <Tbody>: The Table Body component */\nexport interface ITBodyPropsRaw extends StandardProps {}\n\ntype ITBodyProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.HTMLAttributes<HTMLTableSectionElement>,\n\t\tHTMLTableSectionElement\n\t>,\n\tITBodyPropsRaw\n>;\n\nconst Tbody = (props: ITBodyProps) => {\n\tconst { children, className, ...passThroughs } = props;\n\n\treturn (\n\t\t<tbody\n\t\t\t{...omit(passThroughs, [\n\t\t\t\t'className',\n\t\t\t\t'children',\n\t\t\t\t'initialState',\n\t\t\t\t'callbackId',\n\t\t\t])}\n\t\t\tclassName={cx('&-Tbody', className)}\n\t\t>\n\t\t\t{renderRowsWithIdentifiedEdges(filterTypes(children, Tr), Td)}\n\t\t</tbody>\n\t);\n};\n\nTbody.displayName = 'Table.Tbody';\n\nTbody.peek = {\n\tdescription: `\n\t\t\\`Tbody\\` renders <tbody>.\n\t`,\n};\n\nTbody.propTypes = {\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t\tValue is run through the \\`classnames\\` library.\n\t*/\n\tclassName: any,\n\n\t/**\n\t\tany valid React children\n\t*/\n\tchildren: node,\n};\n\n/** Tr <Tr>: The Table Row component */\nexport interface ITrPropsRaw extends StandardProps {\n\t/** Applies disabled styles to the row. */\n\tisDisabled: boolean;\n\n\t/** Applies styles to the row for when the row is selected, usually by a\n\t\tcheckbox. */\n\tisSelected: boolean;\n\n\t/** Applies active styles to the row, usually when the row has been clicked. */\n\tisActive: boolean;\n\n\t/**  */\n\tisActionable?: boolean;\n}\n\ntype ITrProps = Overwrite<\n\tReact.DetailedHTMLProps<\n\t\tReact.HTMLAttributes<HTMLTableRowElement>,\n\t\tHTMLTableRowElement\n\t>,\n\tITrPropsRaw\n>;\n\nconst Tr = (props: ITrProps) => {\n\tconst {\n\t\tclassName,\n\t\tchildren,\n\t\tisDisabled,\n\t\tisSelected,\n\t\tisActive,\n\t\t...passThroughs\n\t} = props;\n\n\treturn (\n\t\t<tr\n\t\t\t{...omit(passThroughs, [\n\t\t\t\t'children',\n\t\t\t\t'className',\n\t\t\t\t'isDisabled',\n\t\t\t\t'isSelected',\n\t\t\t\t'isActive',\n\t\t\t\t'isActionable',\n\t\t\t\t'initialState',\n\t\t\t\t'callbackId',\n\t\t\t])}\n\t\t\tclassName={cx(\n\t\t\t\t'&-Tr',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-selected': isSelected,\n\t\t\t\t\t'&-is-active': isActive,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</tr>\n\t);\n};\n\nTr.defaultProps = {\n\tisDisabled: false,\n\tisSelected: false,\n\tisActive: false,\n};\n\nTr.displayName = 'Table.Tr';\n\nTr.peek = {\n\tdescription: `\n\t\t\\`Tr\\` renders <tr>.\n\t`,\n};\n\nTr.propTypes = {\n\t/**\n\t\tany valid React children\n\t*/\n\tchildren: node,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t\tValue is run through the \\`classnames\\` library.\n\t*/\n\tclassName: any,\n\n\t/**\n\t\tApplies disabled styles to the row.\n\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\tApplies styles to the row for when the row is selected, usually by a\n\t\tcheckbox.\n\t*/\n\tisSelected: bool,\n\n\t/**\n\t\tApplies active styles to the row, usually when the row has been clicked.\n\t*/\n\tisActive: bool,\n};\n\n/** Th <Th>: The Table Header Cell components */\nexport interface IThProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLTableHeaderCellElement>,\n\t\t\tHTMLTableHeaderCellElement\n\t\t> {\n\t/** Aligns the content of a cell. Can be \\`left\\`, \\`center\\`, or \\`right\\`. */\n\talign?: 'left' | 'center' | 'right';\n\n\t/*Should be \\`true\\` to render a right border. */\n\thasBorderRight?: boolean;\n\n\t/** Should be \\`true\\` to render a left border. */\n\thasBorderLeft?: boolean;\n\n\t/** Styles the cell to indicate it should be resizable and sets up drag-\n\t\trelated events to enable this resizing functionality. */\n\tisResizable?: boolean;\n\n\t/** Styles the cell to allow column sorting. */\n\tisSortable?: boolean;\n\n\t/** Renders a caret icon to show that the column is sorted. */\n\tisSorted?: boolean;\n\n\t/** Callback triggered as the user drags the resize handle to resize the column atop\n\t\twhich this table header cell sits. */\n\tonResize?: (\n\t\twidth: number | string | null,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent;\n\t\t\tprops: IThProps;\n\t\t}\n\t) => void;\n\n\t/** Sets the direction of the caret icon when \\`isSorted\\` is also set. */\n\tsortDirection?: 'left' | 'up' | 'right' | 'down' | undefined;\n\n\t/** Sets the width of the cell. */\n\twidth?: number | string;\n\n\t/** Sets the min width of the cell. */\n\tminWidth?: number | string;\n\n\t/** Indicates for how many columns the cell extends */\n\tcolSpan?: number;\n\n\t/** Define the cell as being in the first row. */\n\tisFirstRow?: boolean;\n\n\t/** Define the cell as being in the last row. */\n\tisLastRow?: boolean;\n\n\t/** Define the cell as being in the first column. */\n\tisFirstCol?: boolean;\n\n\t/** Define the cell as being in the last column. */\n\tisLastCol?: boolean;\n\n\t/** Define the cell as being the first 1-height cell in the row. */\n\tisFirstSingle?: boolean;\n\n\t/** Sets the field value for the cell. */\n\tfield?: string;\n\n\trowSpan?: number | null;\n\n\t/** Truncates `Table.Th` content with ellipses, must be used with `hasFixedHeader` */\n\ttruncateContent?: boolean;\n}\n\ninterface IThState {\n\t// The actively changing width as the cell is resized.\n\tactiveWidth: number | string | null;\n\n\t// Indicates if a `width` prop was explicitly provided.\n\thasSetWidth: boolean;\n\n\t// Indicates whether the cell is currently being resized.\n\tisResizing: boolean;\n\n\t// Indicates a mouse drag is in progress\n\tisDragging: boolean;\n\n\t// The width when the cell is not actively being resized.\n\tpassiveWidth: number | string | null;\n}\n\ninterface ICoordinates {\n\tdX: number;\n\tdY: number;\n\tpageX: number;\n\tpageY: number;\n}\n\nexport class Th extends React.Component<IThProps, IThState> {\n\tstatic displayName = 'Table.Th';\n\n\tstatic defaultProps = {\n\t\talign: 'left',\n\t\tisResizable: false,\n\t\tisSorted: false,\n\t\tsortDirection: 'up',\n\t\trowSpan: 1,\n\t};\n\n\tstatic peek = {\n\t\tdescription: `\n\t\t\t\\`Th\\` renders <th>.\n\t\t`,\n\t};\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAligns the content of a cell. Can be \\`left\\`, \\`center\\`, or \\`right\\`.\n\t\t*/\n\t\talign: string,\n\n\t\t/**\n\t\t\tany valid React children\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t\tValue is run through the \\`classnames\\` library.\n\t\t*/\n\t\tclassName: any,\n\n\t\t/**\n\t\t\tShould be \\`true\\` to render a right border.\n\t\t*/\n\t\thasBorderRight: bool,\n\n\t\t/**\n\t\t\tShould be \\`true\\` to render a left border.\n\t\t*/\n\t\thasBorderLeft: bool,\n\n\t\t/**\n\t\t\tStyles the cell to indicate it should be resizable and sets up drag-\n\t\t\trelated events to enable this resizing functionality.\n\t\t*/\n\t\tisResizable: bool,\n\n\t\t/**\n\t\t\tStyles the cell to allow column sorting.\n\t\t*/\n\t\tisSortable: bool,\n\n\t\t/**\n\t\t\tRenders a caret icon to show that the column is sorted.\n\t\t*/\n\t\tisSorted: bool,\n\n\t\t/**\n\t\t\tCalled as the user drags the resize handle to resize the column atop\n\t\t\twhich this table header cell sits.\n\t\t*/\n\t\tonResize: func,\n\n\t\t/**\n\t\t\tSets the direction of the caret icon when \\`isSorted\\` is also set.\n\t\t*/\n\t\tsortDirection: oneOf(['left', 'up', 'right', 'down', undefined]),\n\n\t\t/**\n\t\t\tStyles that are passed through to root element.\n\t\t*/\n\t\tstyle: object,\n\n\t\t/**\n\t\t\tSets the width of the cell.\n\t\t*/\n\t\twidth: oneOfType([number, string]),\n\n\t\t/**\n\t\t\tSets the min width of the cell.\n\t\t*/\n\t\tminWidth: oneOfType([number, string]),\n\n\t\t/**\n\t\t\tDefine the cell as being in the first row.\n\t\t*/\n\t\tisFirstRow: bool,\n\n\t\t/**\n\t\t\tDefine the cell as being in the last row.\n\t\t*/\n\t\tisLastRow: bool,\n\n\t\t/**\n\t\t\tDefine the cell as being in the first column.\n\t\t*/\n\t\tisFirstCol: bool,\n\n\t\t/**\n\t\t\tDefine the cell as being in the last column.\n\t\t*/\n\t\tisLastCol: bool,\n\n\t\t/**\n\t\t\tDefine the cell as being the first 1-height cell in the row.\n\t\t*/\n\t\tisFirstSingle: bool,\n\n\t\t/**\n\t\t\tSets the field value for the cell.\n\t\t*/\n\t\tfield: string,\n\n\t\t/** Truncates `Table.Td` content with ellipses, must be used with `hasFixedHeader` */\n\t\t/**\n\t\t\tTruncates header and adds ellipses.\n\t\t*/\n\t\ttruncateContent: bool,\n\t};\n\n\tprivate rootRef = React.createRef<HTMLTableHeaderCellElement>();\n\n\tstate = {\n\t\t// Represents the actively changing width as the cell is resized.\n\t\tactiveWidth: this.props.width || null,\n\n\t\t// Indicates if a `width` prop was explicitly provided.\n\t\thasSetWidth: !!this.props.width,\n\n\t\t// Indicates whether the cell is currently being resized.\n\t\tisResizing: false,\n\n\t\t// Indicates a mouse drag is in progress\n\t\tisDragging: false,\n\n\t\t// Represents the width when the cell is not actively being resized.\n\t\tpassiveWidth: this.props.width || null,\n\t};\n\n\tUNSAFE_componentWillReceiveProps({\n\t\twidth,\n\t}: {\n\t\twidth?: number | string | null;\n\t}) {\n\t\tif (!_.isNil(width) && width !== this.props.width) {\n\t\t\tthis.setState({\n\t\t\t\thasSetWidth: true,\n\t\t\t\tpassiveWidth: width,\n\t\t\t});\n\t\t}\n\t}\n\n\tgetWidth = (): number | null => {\n\t\tconst styleWidth = _.get(this.rootRef, 'style.width');\n\t\tif (_.endsWith(styleWidth, 'px')) {\n\t\t\treturn parseInt(styleWidth);\n\t\t}\n\t\tif (this.rootRef.current) {\n\t\t\treturn this.rootRef.current.getBoundingClientRect().width;\n\t\t}\n\t\treturn null;\n\t};\n\n\thandleClickCapture = (event: React.MouseEvent | KeyboardEvent): void => {\n\t\tif (this.state.isDragging) {\n\t\t\tevent.stopPropagation();\n\t\t\tthis.setState({\n\t\t\t\tisDragging: false,\n\t\t\t});\n\t\t}\n\t};\n\n\thandleMouseEnter = (): void => {\n\t\tthis.setState({\n\t\t\tisDragging: this.state.isResizing,\n\t\t});\n\t};\n\n\thandleMouseUp = (): void => {\n\t\tthis.setState({\n\t\t\tisDragging: this.state.isResizing,\n\t\t});\n\t};\n\n\thandleDragEnded = (\n\t\tcoordinates: ICoordinates,\n\t\t{ event }: { event: MouseEvent | TouchEvent }\n\t): void => {\n\t\tthis.setState({\n\t\t\tisResizing: false,\n\t\t\tpassiveWidth: this.state.activeWidth,\n\t\t});\n\n\t\twindow.document.body.style.cursor = '';\n\n\t\tif (this.props.onResize) {\n\t\t\tthis.props.onResize(this.state.activeWidth, {\n\t\t\t\tevent,\n\t\t\t\tprops: this.props,\n\t\t\t});\n\t\t}\n\t};\n\n\thandleDragged = (\n\t\tcoordinates: ICoordinates,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent: MouseEvent | TouchEvent;\n\t\t\tprops: IDragCaptureZoneProps;\n\t\t}\n\t): void => {\n\t\tlet passiveWidth = this.state.passiveWidth;\n\n\t\tconst minWidth =\n\t\t\tthis.props.minWidth !== null && _.isString(this.props.minWidth)\n\t\t\t\t? parseInt(this.props.minWidth)\n\t\t\t\t: this.props.minWidth;\n\t\tif (passiveWidth === null) {\n\t\t\treturn;\n\t\t} else if (_.isString(passiveWidth)) {\n\t\t\tpassiveWidth = parseInt(passiveWidth);\n\t\t}\n\n\t\tconst activeWidth =\n\t\t\t(minWidth && passiveWidth + coordinates.dX > minWidth) || !minWidth\n\t\t\t\t? passiveWidth + coordinates.dX\n\t\t\t\t: minWidth;\n\n\t\tthis.setState({ activeWidth });\n\n\t\tif (this.props.onResize) {\n\t\t\tthis.props.onResize(activeWidth, {\n\t\t\t\tevent,\n\t\t\t\tprops: this.props,\n\t\t\t});\n\t\t}\n\t};\n\n\thandleDragStarted = (\n\t\tcoordinates: ICoordinates,\n\t\t{\n\t\t\tevent,\n\t\t\tprops,\n\t\t}: {\n\t\t\tevent:\n\t\t\t\t| React.MouseEvent<HTMLDivElement, MouseEvent>\n\t\t\t\t| React.TouchEvent<HTMLDivElement>;\n\t\t\tprops: IDragCaptureZoneProps;\n\t\t}\n\t): void => {\n\t\tconst startingWidth = this.getWidth();\n\n\t\tthis.setState({\n\t\t\tactiveWidth: startingWidth,\n\t\t\thasSetWidth: true,\n\t\t\tisResizing: true,\n\t\t\tisDragging: true,\n\t\t\tpassiveWidth: startingWidth,\n\t\t});\n\n\t\twindow.document.body.style.cursor = 'ew-resize';\n\n\t\tif (this.props.onResize) {\n\t\t\tthis.props.onResize(startingWidth, {\n\t\t\t\tevent,\n\t\t\t\tprops: this.props,\n\t\t\t});\n\t\t}\n\t};\n\n\trender(): React.ReactNode {\n\t\tconst {\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\thasBorderRight,\n\t\t\thasBorderLeft,\n\t\t\tisFirstRow,\n\t\t\tisLastRow,\n\t\t\tisFirstCol,\n\t\t\tisFirstSingle,\n\t\t\tisLastCol,\n\t\t\talign,\n\t\t\tisResizable,\n\t\t\tisSortable,\n\t\t\tisSorted,\n\t\t\tsortDirection,\n\t\t\tstyle,\n\t\t\ttruncateContent,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst { activeWidth, hasSetWidth, isResizing, passiveWidth } = this.state;\n\n\t\treturn (\n\t\t\t<th\n\t\t\t\t{...omit(passThroughs, [\n\t\t\t\t\t'className',\n\t\t\t\t\t'children',\n\t\t\t\t\t'style',\n\t\t\t\t\t'align',\n\t\t\t\t\t'hasBorderRight',\n\t\t\t\t\t'hasBorderLeft',\n\t\t\t\t\t'isResizable',\n\t\t\t\t\t'isSortable',\n\t\t\t\t\t'isSorted',\n\t\t\t\t\t'onResize',\n\t\t\t\t\t'sortDirection',\n\t\t\t\t\t'width',\n\t\t\t\t\t'minWidth',\n\t\t\t\t\t'isFirstRow',\n\t\t\t\t\t'isLastRow',\n\t\t\t\t\t'isFirstCol',\n\t\t\t\t\t'isLastCol',\n\t\t\t\t\t'isFirstSingle',\n\t\t\t\t\t'field',\n\t\t\t\t\t'truncateContent',\n\t\t\t\t\t'initialState',\n\t\t\t\t\t'callbackId',\n\t\t\t\t] as any)}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t'&-Th',\n\t\t\t\t\t{\n\t\t\t\t\t\t'&-is-first-row': isFirstRow,\n\t\t\t\t\t\t'&-is-last-row': isLastRow,\n\t\t\t\t\t\t'&-is-first-col': isFirstCol,\n\t\t\t\t\t\t'&-is-first-single': isFirstSingle,\n\t\t\t\t\t\t'&-is-last-col': isLastCol,\n\t\t\t\t\t\t'&-align-left': align === 'left',\n\t\t\t\t\t\t'&-align-center': align === 'center',\n\t\t\t\t\t\t'&-align-right': align === 'right',\n\t\t\t\t\t\t'&-is-resizable': isResizable,\n\t\t\t\t\t\t'&-is-resizing': isResizing,\n\t\t\t\t\t\t'&-is-sortable':\n\t\t\t\t\t\t\tisSortable === false ? isSortable : isSorted || isSortable,\n\t\t\t\t\t\t'&-is-sorted': isSorted,\n\t\t\t\t\t\t'&-has-border-right': hasBorderRight,\n\t\t\t\t\t\t'&-has-border-left': hasBorderLeft,\n\t\t\t\t\t\t'&-truncate-content': truncateContent,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tref={this.rootRef}\n\t\t\t\tonClickCapture={this.handleClickCapture}\n\t\t\t\tonMouseEnter={this.handleMouseEnter}\n\t\t\t\tonMouseUp={this.handleMouseUp}\n\t\t\t\tstyle={\n\t\t\t\t\thasSetWidth\n\t\t\t\t\t\t? _.assign({}, style, {\n\t\t\t\t\t\t\t\twidth: isResizing ? activeWidth : passiveWidth,\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: style\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div className={cx('&-Th-inner')}>\n\t\t\t\t\t<div className={cx('&-Th-inner-content')}>{children}</div>\n\t\t\t\t\t{isSorted || isSortable ? (\n\t\t\t\t\t\t<div className={cx('&-Th-inner-caret')}>\n\t\t\t\t\t\t\t<ArrowIcon\n\t\t\t\t\t\t\t\tclassName={cx('&-sort-icon')}\n\t\t\t\t\t\t\t\tdirection={sortDirection}\n\t\t\t\t\t\t\t\tsize={10}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{isResizable ? (\n\t\t\t\t\t\t<DragCaptureZone\n\t\t\t\t\t\t\tclassName={cx('&-Th-inner-resize')}\n\t\t\t\t\t\t\tonDrag={this.handleDragged}\n\t\t\t\t\t\t\tonDragEnd={this.handleDragEnded}\n\t\t\t\t\t\t\tonDragStart={this.handleDragStarted}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</th>\n\t\t);\n\t}\n}\n\n/** Td <td>: The Table Data Cell element */\nexport interface ITdProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLTableHeaderCellElement>,\n\t\t\tHTMLTableHeaderCellElement\n\t\t> {\n\t/** Aligns the content of a cell. Can be \\`left\\`, \\`center\\`, or \\`right\\`. */\n\talign: 'left' | 'center' | 'right';\n\n\t/** Should be \\`true\\` to render a right border. */\n\thasBorderRight: boolean;\n\n\t/** Should be \\`true\\` to render a left border. */\n\thasBorderLeft: boolean;\n\n\t/** Define the cell as being in the first row. */\n\tisFirstRow?: boolean;\n\n\t/** Define the cell as being in the last row. */\n\tisLastRow?: boolean;\n\n\t/** Define the cell as being in the first column. */\n\tisFirstCol?: boolean;\n\n\t/** Define the cell as being in the last column. */\n\tisLastCol?: boolean;\n\n\t/** Define the cell as being the first 1-height cell in the row. */\n\tisFirstSingle?: boolean;\n\n\t/** Indicates if the cell has any data or not */\n\tisEmpty?: boolean;\n\n\trowSpan: number | null;\n\n\t/** Truncates `Table.Td` content with ellipses, must be used with `hasFixedHeader` */\n\ttruncateContent?: boolean;\n\n\t/** Sets the width of the cell. */\n\twidth?: number | string;\n}\n\nconst Td = (props: ITdProps): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tisFirstRow,\n\t\tisLastRow,\n\t\tisFirstCol,\n\t\tisLastCol,\n\t\tisFirstSingle,\n\t\talign,\n\t\thasBorderRight,\n\t\thasBorderLeft,\n\t\ttruncateContent,\n\t\t...passThroughs\n\t} = props;\n\n\treturn (\n\t\t<td\n\t\t\t{...omit(passThroughs, [\n\t\t\t\t'className',\n\t\t\t\t'align',\n\t\t\t\t'hasBorderRight',\n\t\t\t\t'hasBorderLeft',\n\t\t\t\t'isFirstRow',\n\t\t\t\t'isLastRow',\n\t\t\t\t'isFirstCol',\n\t\t\t\t'isLastCol',\n\t\t\t\t'isFirstSingle',\n\t\t\t\t'isEmpty',\n\t\t\t\t'truncateContent',\n\t\t\t\t'initialState',\n\t\t\t\t'callbackId',\n\t\t\t\t'sortDirection',\n\t\t\t] as any)}\n\t\t\tclassName={cx(\n\t\t\t\t'&-Td',\n\t\t\t\t{\n\t\t\t\t\t'&-is-first-row': isFirstRow,\n\t\t\t\t\t'&-is-last-row': isLastRow,\n\t\t\t\t\t'&-is-first-col': isFirstCol,\n\t\t\t\t\t'&-is-last-col': isLastCol,\n\t\t\t\t\t'&-is-first-single': isFirstSingle,\n\t\t\t\t\t'&-align-left': align === 'left',\n\t\t\t\t\t'&-align-center': align === 'center',\n\t\t\t\t\t'&-align-right': align === 'right',\n\t\t\t\t\t'&-has-border-right': hasBorderRight,\n\t\t\t\t\t'&-has-border-left': hasBorderLeft,\n\t\t\t\t\t'&-truncate-content': truncateContent,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t/>\n\t);\n};\n\nTd.displayName = 'Table.Td';\n\nTd.defaultProps = {\n\talign: 'left',\n\thasBorderRight: false,\n\thasBorderLeft: false,\n\trowSpan: 1,\n};\n\nTd.peek = {\n\tdescription: `\n\t\t\\`Td\\` renders <td>.\n\t`,\n\tcategories: [],\n\tmadeFrom: [],\n};\n\nTd.propTypes = {\n\t/**\n\t\tAligns the content of a cell. Can be \\`left\\`, \\`center\\`, or \\`right\\`.\n\t*/\n\talign: oneOf(['left', 'center', 'right']),\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t\tValue is run through the \\`classnames\\` library.\n\t*/\n\tclassName: any,\n\n\t/**\n\t\tShould be \\`true\\` to render a right border.\n\t*/\n\thasBorderRight: bool,\n\n\t/**\n\t\tShould be \\`true\\` to render a left border.\n\t*/\n\thasBorderLeft: bool,\n\n\t/**\n\t\tDefine the cell as being in the first row.\n\t*/\n\tisFirstRow: bool,\n\n\t/**\n\t\tDefine the cell as being in the last row.\n\t*/\n\tisLastRow: bool,\n\n\t/**\n\t\tDefine the cell as being in the first column.\n\t*/\n\tisFirstCol: bool,\n\n\t/**\n\t\tDefine the cell as being in the last column.\n\t*/\n\tisLastCol: bool,\n\n\t/**\n\t\tDefine the cell as being the first 1-height cell in the row.\n\t*/\n\tisFirstSingle: bool,\n\n\t/**\n\t\tIndicates if the cell has any data or not.\n\t*/\n\tisEmpty: bool,\n\n\t/**\n\t\tTruncates \\`Table.Td\\` content with ellipses, must be used with \\`hasFixedHeader\\`\n\t*/\n\ttruncateContent: bool,\n};\n\n/** Table <Table> The Table Component */\nexport interface ITableProps extends StandardProps {\n\t/** Adjusts the row density of the table to have more or less spacing. */\n\tdensity?: 'compressed' | 'extended';\n\n\t/** Allows light header. */\n\thasLightHeader?: boolean;\n\n\t/** Render the table with borders on the outer edge. */\n\thasBorder?: boolean;\n\n\t/** Enables word wrapping in tables cells. */\n\thasWordWrap?: boolean;\n\n\t/** Applies a row hover to rows. Defaults to true. */\n\thasHover?: boolean;\n}\n\nconst Table = (props: ITableProps) => {\n\tconst {\n\t\tclassName,\n\t\thasBorder,\n\t\tdensity,\n\t\thasWordWrap,\n\t\thasLightHeader,\n\t\thasHover,\n\t\tstyle,\n\t\t...passThroughs\n\t} = props;\n\n\treturn (\n\t\t<table\n\t\t\t{...omit(passThroughs, [\n\t\t\t\t'density',\n\t\t\t\t'hasLightHeader',\n\t\t\t\t'hasBorder',\n\t\t\t\t'hasWordWrap',\n\t\t\t\t'hasHover',\n\t\t\t\t'initialState',\n\t\t\t\t'callbackId',\n\t\t\t])}\n\t\t\tstyle={style}\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-density-extended': density === 'extended',\n\t\t\t\t\t'&-density-compressed': density === 'compressed',\n\t\t\t\t\t'&-has-border': hasBorder,\n\t\t\t\t\t'&-has-word-wrap': hasWordWrap,\n\t\t\t\t\t'&-has-light-header': hasLightHeader,\n\t\t\t\t\t'&-no-hover': !hasHover,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t/>\n\t);\n};\n\nTable.displayName = 'Table';\n\nTable.defaultProps = {\n\tdensity: 'extended',\n\thasBorder: false,\n\thasWordWrap: true,\n\thasLightHeader: true,\n\thasHover: true,\n};\n\nTable.peek = {\n\tdescription: `\\`Table\\` provides the most basic components to create a lucid table. It is recommended to create a wrapper around this component rather than using it directly in an app.`,\n\tcategories: ['table'],\n\tmadeFrom: ['ArrowIcon', 'DragCaptureZone'],\n};\n\nTable.propTypes = {\n\t/**\n\t\tStyles that are passed through to the root container.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tClass names that are appended to the defaults.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tAdjusts the row density of the table to have more or less spacing.\n\t*/\n\tdensity: oneOf(['compressed', 'extended']),\n\n\t/**\n\t\tAllows light header.\n\t*/\n\thasLightHeader: bool,\n\n\t/**\n\t\tRender the table with borders on the outer edge.\n\t*/\n\thasBorder: bool,\n\n\t/**\n\t\tEnables word wrapping in tables cells.\n\t*/\n\thasWordWrap: bool,\n\n\t/**\n\t\tApplies a row hover to rows. Defaults to true.\n\t*/\n\thasHover: bool,\n};\n\n/** ChildComponents */\nTable.Thead = Thead;\nTable.Th = Th;\nTable.Tbody = Tbody;\nTable.Tr = Tr;\nTable.Td = Td;\n\n/**\n * mapToGrid\n *\n * Returns a 2 dimensional array of cell elements of the given component type. The map function can modify value of a cell.\n */\n\ninterface IGridCell extends StandardProps {\n\telement: React.ReactElement;\n\n\tcanonicalPosition: {\n\t\trow: number;\n\t\tcol: number;\n\t};\n\n\tisOriginal: boolean;\n}\n\ninterface IFinalGridCell extends StandardProps {\n\tgrid: IGridCell;\n\tisFirstRow?: boolean;\n\tisLastRow?: boolean;\n\tisFirstCol?: boolean;\n\tisLastCol?: boolean;\n\tisFirstSingle?: boolean;\n}\n\nfunction mapToGrid(\n\ttrList: Array<{ props: StandardProps }>,\n\tcellType: Th | typeof Td = Td,\n\tmapFn: (gridcell: IGridCell, ...args: any[]) => any = _.property('element')\n) {\n\tconst cellRowList = _.map(trList, (trElement) =>\n\t\t_.map(filterTypes(trElement.props.children, cellType))\n\t);\n\tconst grid: IGridCell[][] = [];\n\n\tif (_.isEmpty(cellRowList)) {\n\t\treturn [];\n\t}\n\n\t// iterate over each row\n\tfor (let rowIndex = 0; rowIndex < cellRowList.length; rowIndex++) {\n\t\tconst cellRow = cellRowList[rowIndex];\n\n\t\tif (_.isNil(grid[rowIndex])) {\n\t\t\tgrid[rowIndex] = [];\n\t\t}\n\n\t\tconst canonicalRow = rowIndex;\n\n\t\t// build out each horizonal duplicates of each cell\n\t\tfor (\n\t\t\tlet cellElementIndex = 0;\n\t\t\tcellElementIndex < cellRow.length;\n\t\t\tcellElementIndex++\n\t\t) {\n\t\t\tconst cellElement = cellRow[cellElementIndex];\n\n\t\t\tlet colSpan = 1;\n\t\t\tlet isCellIncluded = false;\n\n\t\t\tif (_.isNumber(cellElement.props.colSpan)) {\n\t\t\t\tcolSpan = cellElement.props.colSpan;\n\t\t\t}\n\n\t\t\tconst nilCellIndex = _.findIndex(grid[canonicalRow], _.isNil);\n\t\t\tconst originCol =\n\t\t\t\tnilCellIndex !== -1 ? nilCellIndex : grid[canonicalRow].length;\n\n\t\t\tfor (let currentColSpan = 0; currentColSpan < colSpan; currentColSpan++) {\n\t\t\t\tgrid[canonicalRow][originCol + currentColSpan] = {\n\t\t\t\t\telement: cellElement,\n\t\t\t\t\tcanonicalPosition: {\n\t\t\t\t\t\trow: canonicalRow,\n\t\t\t\t\t\tcol: originCol,\n\t\t\t\t\t},\n\t\t\t\t\tisOriginal: !isCellIncluded,\n\t\t\t\t};\n\t\t\t\tisCellIncluded = true;\n\t\t\t}\n\t\t}\n\n\t\t// build out each vertial duplicates of each cell using the new row in the full grid\n\t\tfor (let colIndex = 0; colIndex < grid[canonicalRow].length; colIndex++) {\n\t\t\tconst gridCell = grid[canonicalRow][colIndex];\n\t\t\tif (gridCell.isOriginal) {\n\t\t\t\tconst cellElement = _.get(gridCell, 'element');\n\t\t\t\tlet rowSpan = 1;\n\n\t\t\t\tif (_.isNumber(_.get(cellElement, 'props.rowSpan'))) {\n\t\t\t\t\trowSpan = _.get(cellElement, 'props.rowSpan');\n\t\t\t\t}\n\n\t\t\t\tfor (\n\t\t\t\t\tlet currentRowSpan = 1;\n\t\t\t\t\tcurrentRowSpan < rowSpan;\n\t\t\t\t\tcurrentRowSpan++\n\t\t\t\t) {\n\t\t\t\t\tif (_.isNil(grid[canonicalRow + currentRowSpan])) {\n\t\t\t\t\t\tgrid[canonicalRow + currentRowSpan] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tgrid[canonicalRow + currentRowSpan][colIndex] = _.assign(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tgrid[canonicalRow + currentRowSpan - 1][colIndex],\n\t\t\t\t\t\t{ isOriginal: false }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// map new values to each cell in the final grid\n\tconst finalGrid: IFinalGridCell[][] = [];\n\tfor (let rowIndex = 0; rowIndex < grid.length; rowIndex++) {\n\t\tfinalGrid[rowIndex] = [];\n\t\tfor (let colIndex = 0; colIndex < grid[rowIndex].length; colIndex++) {\n\t\t\tfinalGrid[rowIndex][colIndex] = mapFn(\n\t\t\t\tgrid[rowIndex][colIndex],\n\t\t\t\t{ row: rowIndex, col: colIndex },\n\t\t\t\tfinalGrid\n\t\t\t);\n\t\t}\n\t}\n\n\treturn finalGrid;\n}\n\n/**\n * renderRowsWithIdentifiedEdges\n *\n * Returns an equivalent list of Tr's where each cell on the perimeter has props set for: `isFirstRow`, `isLastRow`, `isFirstCol`, `isLastCol`, and `isFirstSingle`\n */\n\nfunction renderRowsWithIdentifiedEdges(\n\ttrList: Array<{ props: StandardProps }>,\n\tcellType: Th | typeof Td = Td\n): React.ReactElement[] {\n\tconst duplicateReferences: Array<{ row: number; col: number }> = [];\n\tconst fullCellGrid: Array<Array<IFinalGridCell | null>> = mapToGrid(\n\t\ttrList,\n\t\tcellType,\n\t\t(\n\t\t\t{ element: { props }, isOriginal, canonicalPosition },\n\t\t\tcurrentPos,\n\t\t\tgrid\n\t\t) => {\n\t\t\tif (!isOriginal) {\n\t\t\t\t// if cell spans multiple positions\n\t\t\t\t// store current position and return original cell props reference\n\t\t\t\tduplicateReferences.push(currentPos);\n\t\t\t\treturn grid[canonicalPosition.row][canonicalPosition.col];\n\t\t\t}\n\t\t\treturn _.assign({}, props); // return a new props object based on old cell\n\t\t}\n\t);\n\n\tif (_.isEmpty(fullCellGrid)) {\n\t\treturn [];\n\t}\n\n\tconst firstRow = _.first(fullCellGrid);\n\n\tif (_.isUndefined(firstRow)) {\n\t\treturn [];\n\t}\n\n\tconst firstRowIndex = 0;\n\tconst lastRowIndex = fullCellGrid.length - 1;\n\tconst firstColIndex = 0;\n\tconst lastColIndex = firstRow.length - 1;\n\tconst firstSingleLookup = {};\n\n\t// decorate the props of each cell with props that indicate its role in the table\n\t_.forEach(fullCellGrid, (cellList, rowIndex) =>\n\t\t_.forEach(cellList, (cellProps, colIndex) => {\n\t\t\tif (!_.isNull(cellProps)) {\n\t\t\t\tif (rowIndex === firstRowIndex) {\n\t\t\t\t\tcellProps.isFirstRow = true;\n\t\t\t\t}\n\t\t\t\tif (rowIndex === lastRowIndex) {\n\t\t\t\t\tcellProps.isLastRow = true;\n\t\t\t\t}\n\t\t\t\tif (colIndex === firstColIndex) {\n\t\t\t\t\tcellProps.isFirstCol = true;\n\t\t\t\t}\n\t\t\t\tif (colIndex === lastColIndex) {\n\t\t\t\t\tcellProps.isLastCol = true;\n\t\t\t\t}\n\n\t\t\t\tif (!_.has(firstSingleLookup, rowIndex)) {\n\t\t\t\t\t_.set(firstSingleLookup, rowIndex, false);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!_.get(firstSingleLookup, rowIndex) &&\n\t\t\t\t\t_.get(cellProps, 'rowSpan', 1) === 1\n\t\t\t\t) {\n\t\t\t\t\t_.set(firstSingleLookup, rowIndex, true);\n\n\t\t\t\t\tcellProps.isFirstSingle = true;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n\n\t_.forEach(duplicateReferences, ({ row, col }) => {\n\t\tfullCellGrid[row][col] = null; // remove duplicate references from grid\n\t});\n\n\t// render the grid back to elements using the updated cell props\n\treturn _.map(trList, (trElement, rowIndex) => (\n\t\t<Tr {...trElement.props} key={rowIndex}>\n\t\t\t{_.reduce(\n\t\t\t\tfullCellGrid[rowIndex],\n\t\t\t\t(rowChildren, cellProps, colIndex) =>\n\t\t\t\t\trowChildren.concat(\n\t\t\t\t\t\t!_.isNull(cellProps)\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\tcellType as any,\n\t\t\t\t\t\t\t\t\t\t_.assign({}, cellProps, { key: colIndex })\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: []\n\t\t\t\t\t),\n\t\t\t\t[] as React.ReactElement[]\n\t\t\t)}\n\t\t</Tr>\n\t));\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}