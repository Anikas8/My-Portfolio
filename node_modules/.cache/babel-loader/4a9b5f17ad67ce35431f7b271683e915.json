{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes } from '../../util/component-types';\nimport Checkbox, { defaultProps as defaultPropsCheckbox } from '../Checkbox/Checkbox';\nconst cx = lucidClassNames.bind('&-CheckboxLabeled');\nconst {\n  any,\n  node,\n  object,\n  string,\n  bool,\n  func\n} = PropTypes;\nconst Label = props => null;\nLabel.displayName = 'CheckboxLabeled.Label';\nLabel.peek = {\n  description: `Renders a \\`Label\\` for the \\`Checkbox\\`.`,\n  categories: ['controls', 'toggles'],\n  madeFrom: ['Checkbox']\n};\nLabel.propName = 'Label';\nLabel.propTypes = {\n  /**\n      Used to identify the purpose of this checkbox to the user -- can be\n      any renderable content.\n  */\n  children: node\n};\n/** Checkbox Labeled */\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = ['isIndeterminate', 'isDisabled', 'isSelected', 'onSelect', 'className', 'style', 'Label', 'initialState'];\nexport const CheckboxLabeled = props => {\n  const {\n    className,\n    isIndeterminate,\n    isDisabled,\n    isSelected,\n    onSelect,\n    style,\n    ...passThroughs\n  } = props;\n  const labelChildProps = _.first(_.map(findTypes(props, CheckboxLabeled.Label), 'props'));\n  return React.createElement(\"label\", {\n    className: cx('&', {\n      '&-is-disabled': isDisabled,\n      '&-is-selected': isIndeterminate || isSelected\n    }, className),\n    style: style\n  }, React.createElement(Checkbox, {\n    className: cx('&-Checkbox', className),\n    isDisabled: isDisabled,\n    isIndeterminate: isIndeterminate,\n    isSelected: isSelected,\n    onSelect: onSelect,\n    ..._.omit(passThroughs, nonPassThroughs)\n  }), React.createElement(\"div\", {\n    ...labelChildProps,\n    className: cx('&-label', _.get(labelChildProps, 'className', null))\n  }));\n};\nCheckboxLabeled.displayName = 'CheckboxLabeled';\nCheckboxLabeled.peek = {\n  description: `A square two-state toggle with a \\`Label\\`.`,\n  notes: {\n    overview: `A square two-state toggle with a label that explains the action or selection. This is a composite of \\`Checkbox\\` and the native \\`label\\` element.`,\n    intendedUse: `Use checkboxes to allow users to select one or more items. Commonly used to select filters or settings. For interactions where users can only select one option, use \\`RadioButtonLabeled\\`.`,\n    technicalRecommendations: `\n\t\t\t- Use the styles on the \\`CheckboxLabeled\\` parent container to ensure only the checkboxes and their labels are clickable.\n\t\t\t- Use the Selected state when a filter or setting will be applied.\n\t\t\t- Use the Unselected state when a filter or setting will not be applied.\n\t\t\t- Use the Indeterminate state for parent checkboxes where some of the child checkboxes are Selected and some are Unselected. For example, the master checkbox in the header row of the interactive table example in \\`DataTable\\`.\n\t\t\t- You can have the label as a child or a prop depending on the needs of your application. \n\t\t`\n  },\n  categories: ['controls', 'toggles'],\n  madeFrom: ['Checkbox']\n};\nCheckboxLabeled.defaultProps = defaultPropsCheckbox;\n// Can't just `...Checkbox.propTypes` anymore because of the way we have to\n// handle default props. They are duplicated here on purpose which is okay\n// since in the future we'll be removing proptypes in favor of just typescript.\nCheckboxLabeled.propTypes = {\n  /**\n      Indicates whether the component should appear in an \"indeterminate\" or\n      \"partially checked\" state. This prop takes precedence over\n      \\`isSelected\\`.\n  */\n  isIndeterminate: bool,\n  /**\n      Indicates whether the component should appear and act disabled by having\n      a \"greyed out\" palette and ignoring user interactions.\n  */\n  isDisabled: bool,\n  /**\n      Indicates that the component is in the \"selected\" state when true and in\n      the \"unselected\" state when false. This props is ignored if\n      \\`isIndeterminate\\` is \\`true\\`.\n  */\n  isSelected: bool,\n  /**\n      Called when the user clicks on the component or when they press the space\n      key while the component is in focus.  Signature:\n      \\`(isSelected, { event, props }) => {}\\`\n  */\n  onSelect: func,\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Passed through to the root element.\n  */\n  style: object,\n  /**\n      Child element whose children are used to identify the purpose of this\n      checkbox to the user.\n  */\n  Label: any\n};\nCheckboxLabeled.Label = Label;\nexport default CheckboxLabeled;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","findTypes","Checkbox","defaultProps","defaultPropsCheckbox","cx","bind","any","node","object","string","bool","func","Label","props","displayName","peek","description","categories","madeFrom","propName","propTypes","children","nonPassThroughs","CheckboxLabeled","className","isIndeterminate","isDisabled","isSelected","onSelect","style","passThroughs","labelChildProps","first","map","omit","get","notes","overview","intendedUse","technicalRecommendations"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/CheckboxLabeled/CheckboxLabeled.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { findTypes, StandardProps } from '../../util/component-types';\nimport Checkbox, {\n\tICheckboxProps,\n\tdefaultProps as defaultPropsCheckbox,\n} from '../Checkbox/Checkbox';\n\nconst cx = lucidClassNames.bind('&-CheckboxLabeled');\nconst { any, node, object, string, bool, func } = PropTypes;\n\n/** Label */\nexport interface ILabelProps extends StandardProps {}\n\nconst Label = (props: ILabelProps): null => null;\n\nLabel.displayName = 'CheckboxLabeled.Label';\nLabel.peek = {\n\tdescription: `Renders a \\`Label\\` for the \\`Checkbox\\`.`,\n\tcategories: ['controls', 'toggles'],\n\tmadeFrom: ['Checkbox'],\n};\nLabel.propName = 'Label';\nLabel.propTypes = {\n\t/**\n\t\tUsed to identify the purpose of this checkbox to the user -- can be\n\t\tany renderable content.\n\t*/\n\tchildren: node,\n};\n\n/** Checkbox Labeled */\n/** TODO: Remove the nonPassThroughs when the component is converted to a functional component */\nconst nonPassThroughs = [\n\t'isIndeterminate',\n\t'isDisabled',\n\t'isSelected',\n\t'onSelect',\n\t'className',\n\t'style',\n\t'Label',\n\t'initialState',\n];\nexport interface ICheckboxLabeledProps extends ICheckboxProps {\n\t/** Child element whose children are used to identify the purpose of this  checkbox to the user. */\n\tLabel?:\n\t\t| string\n\t\t| string[]\n\t\t| Element[]\n\t\t| (React.ReactNode & { props: ILabelProps });\n}\n\nexport const CheckboxLabeled = (\n\tprops: ICheckboxLabeledProps\n): React.ReactElement => {\n\tconst {\n\t\tclassName,\n\t\tisIndeterminate,\n\t\tisDisabled,\n\t\tisSelected,\n\t\tonSelect,\n\t\tstyle,\n\t\t...passThroughs\n\t} = props;\n\n\tconst labelChildProps = _.first(\n\t\t_.map(findTypes(props, CheckboxLabeled.Label), 'props')\n\t);\n\n\treturn (\n\t\t<label\n\t\t\tclassName={cx(\n\t\t\t\t'&',\n\t\t\t\t{\n\t\t\t\t\t'&-is-disabled': isDisabled,\n\t\t\t\t\t'&-is-selected': isIndeterminate || isSelected,\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t<Checkbox\n\t\t\t\tclassName={cx('&-Checkbox', className)}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\tisIndeterminate={isIndeterminate}\n\t\t\t\tisSelected={isSelected}\n\t\t\t\tonSelect={onSelect}\n\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\t{...labelChildProps}\n\t\t\t\tclassName={cx('&-label', _.get(labelChildProps, 'className', null))}\n\t\t\t/>\n\t\t</label>\n\t);\n};\n\nCheckboxLabeled.displayName = 'CheckboxLabeled';\n\nCheckboxLabeled.peek = {\n\tdescription: `A square two-state toggle with a \\`Label\\`.`,\n\tnotes: {\n\t\toverview: `A square two-state toggle with a label that explains the action or selection. This is a composite of \\`Checkbox\\` and the native \\`label\\` element.`,\n\t\tintendedUse: `Use checkboxes to allow users to select one or more items. Commonly used to select filters or settings. For interactions where users can only select one option, use \\`RadioButtonLabeled\\`.`,\n\t\ttechnicalRecommendations: `\n\t\t\t- Use the styles on the \\`CheckboxLabeled\\` parent container to ensure only the checkboxes and their labels are clickable.\n\t\t\t- Use the Selected state when a filter or setting will be applied.\n\t\t\t- Use the Unselected state when a filter or setting will not be applied.\n\t\t\t- Use the Indeterminate state for parent checkboxes where some of the child checkboxes are Selected and some are Unselected. For example, the master checkbox in the header row of the interactive table example in \\`DataTable\\`.\n\t\t\t- You can have the label as a child or a prop depending on the needs of your application. \n\t\t`,\n\t},\n\tcategories: ['controls', 'toggles'],\n\tmadeFrom: ['Checkbox'],\n};\n\nCheckboxLabeled.defaultProps = defaultPropsCheckbox;\n\n// Can't just `...Checkbox.propTypes` anymore because of the way we have to\n// handle default props. They are duplicated here on purpose which is okay\n// since in the future we'll be removing proptypes in favor of just typescript.\nCheckboxLabeled.propTypes = {\n\t/**\n\t\tIndicates whether the component should appear in an \"indeterminate\" or\n\t\t\"partially checked\" state. This prop takes precedence over\n\t\t\\`isSelected\\`.\n\t*/\n\tisIndeterminate: bool,\n\n\t/**\n\t\tIndicates whether the component should appear and act disabled by having\n\t\ta \"greyed out\" palette and ignoring user interactions.\n\t*/\n\tisDisabled: bool,\n\n\t/**\n\t\tIndicates that the component is in the \"selected\" state when true and in\n\t\tthe \"unselected\" state when false. This props is ignored if\n\t\t\\`isIndeterminate\\` is \\`true\\`.\n\t*/\n\tisSelected: bool,\n\n\t/**\n\t\tCalled when the user clicks on the component or when they press the space\n\t\tkey while the component is in focus.  Signature:\n\t\t\\`(isSelected, { event, props }) => {}\\`\n\t*/\n\tonSelect: func,\n\n\t/**\n\t\tAppended to the component-specific class names set on the root element.\n\t*/\n\tclassName: string,\n\n\t/**\n\t\tPassed through to the root element.\n\t*/\n\tstyle: object,\n\n\t/**\n\t\tChild element whose children are used to identify the purpose of this\n\t\tcheckbox to the user.\n\t*/\n\tLabel: any,\n};\n\nCheckboxLabeled.Label = Label;\n\nexport default CheckboxLabeled;\n"]},"metadata":{},"sourceType":"module"}