{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Portal from '../Portal/Portal';\nimport { CSSTransition } from 'react-transition-group';\nimport { lucidClassNames, uniqueName } from '../../util/style-helpers';\nconst cx = lucidClassNames.bind('&-Overlay');\nconst {\n  string,\n  bool,\n  func,\n  node\n} = PropTypes;\nexport const overlayPropTypes = ['children', 'className', 'isShown', 'isAnimated', 'isModal', 'portalId', 'onEscape', 'onBackgroundClick'];\nconst nonPassThroughs = [...overlayPropTypes, 'initialState', 'callbackId'];\nexport const defaultProps = {\n  isAnimated: true,\n  isModal: true,\n  isShown: false,\n  onBackgroundClick: _.noop,\n  onEscape: _.noop\n};\nclass Overlay extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.rootHTMLDivElement = React.createRef();\n    this.state = {\n      // This must be in state because getDefaultProps only runs once per\n      // component import which causes collisions\n      portalId: this.props.portalId || uniqueName('Overlay-Portal-')\n    };\n    this.handleDocumentKeyDown = event => {\n      // If the user hits the \"escape\" key, then fire an `onEscape`\n      // TODO: use key helpers\n      if (event.keyCode === 27) {\n        this.props.onEscape({\n          event,\n          props: this.props\n        });\n      }\n    };\n    this.handleBackgroundClick = event => {\n      // Use the reference we previously stored from the `ref` to check what\n      // element was clicked on.\n      if (this.rootHTMLDivElement.current && event.target === this.rootHTMLDivElement.current) {\n        this.props.onBackgroundClick({\n          event,\n          props: this.props\n        });\n      }\n    };\n  }\n  componentDidMount() {\n    if (window && window.document) {\n      window.document.addEventListener('keydown', this.handleDocumentKeyDown);\n    }\n  }\n  componentWillUnmount() {\n    if (window && window.document) {\n      window.document.removeEventListener('keydown', this.handleDocumentKeyDown);\n    }\n  }\n  render() {\n    const {\n      className,\n      isShown,\n      isModal,\n      isAnimated,\n      children,\n      ...passThroughs\n    } = this.props;\n    const {\n      portalId\n    } = this.state;\n    const overlayElement = React.createElement(\"div\", {\n      ..._.omit(passThroughs, nonPassThroughs),\n      className: cx(className, '&', {\n        '&-is-not-modal': !isModal,\n        '&-is-animated': isAnimated\n      }),\n      onClick: this.handleBackgroundClick,\n      ref: this.rootHTMLDivElement\n    }, children);\n    return React.createElement(Portal, {\n      portalId: portalId\n    }, isAnimated ? React.createElement(CSSTransition, {\n      in: isShown,\n      classNames: cx('&'),\n      timeout: 300,\n      unmountOnExit: true\n    }, overlayElement) : isShown ? overlayElement : null);\n  }\n}\nOverlay.displayName = 'Overlay';\nOverlay.peek = {\n  description: `\\`Overlay\\` is used to block user interaction with the rest of the app until something has been completed.`,\n  categories: ['utility'],\n  madeFrom: ['Portal']\n};\nOverlay.propTypes = {\n  /**\n      Appended to the component-specific class names set on the root element.\n  */\n  className: string,\n  /**\n      Generally you should only have a single child element so the centering\n      works correctly.\n  */\n  children: node,\n  /**\n      Controls visibility.\n  */\n  isShown: bool,\n  /**\n      Enables animated transitions during expansion and collapse.\n   */\n  isAnimated: bool,\n  /**\n      Determines if it shows with a gray background. If \\`false\\`, the\n      background will be rendered but will be invisible, except for the\n      contents, and it won't capture any of the user click events.\n  */\n  isModal: bool,\n  /**\n      Set your own id for the \\`Portal\\` is that is opened up to contain the\n      contents. In practice you should never need to set this manually.\n  */\n  portalId: string,\n  /**\n      Fired when the user hits escape.  Signature: \\`({ event, props }) => {}\\`\n  */\n  onEscape: func,\n  /**\n      Fired when the user clicks on the background, this may or may not be\n      visible depending on \\`isModal\\`.  Signature: \\`({ event, props }) => {}\\`\n  */\n  onBackgroundClick: func\n};\nOverlay.defaultProps = defaultProps;\nexport default Overlay;","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","Portal","CSSTransition","lucidClassNames","uniqueName","cx","bind","string","bool","func","node","overlayPropTypes","nonPassThroughs","defaultProps","isAnimated","isModal","isShown","onBackgroundClick","noop","onEscape","Overlay","Component","constructor","createRef","portalId","props","event","keyCode","rootHTMLDivElement","current","target","componentDidMount","window","document","addEventListener","handleDocumentKeyDown","componentWillUnmount","removeEventListener","render","className","children","passThroughs","state","overlayElement","omit","onClick","handleBackgroundClick","ref","in","classNames","timeout","unmountOnExit","description","categories","madeFrom"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Overlay/Overlay.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Portal from '../Portal/Portal';\nimport { CSSTransition } from 'react-transition-group';\nimport { lucidClassNames, uniqueName } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\n\nconst cx = lucidClassNames.bind('&-Overlay');\n\nconst { string, bool, func, node } = PropTypes;\n\nexport interface IOverlayProps extends StandardProps {\n\t/** Controls visibility. */\n\tisShown: boolean;\n\n\t/** Enables animated transitions during expansion and collapse. */\n\tisAnimated: boolean;\n\n\t/** Determines if it shows with a gray background. If `false`, the\n\t\tbackground will be rendered but will be invisible, except for the\n\t\tcontents, and it won't capture any of the user click events. */\n\tisModal: boolean;\n\n\t/** Set your own id for the \\`Portal\\` is that is opened up to contain the\n\t\tcontents. In practice you should never need to set this manually. */\n\tportalId?: string;\n\n\t/** Fired when the user hits escape. */\n\tonEscape: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: KeyboardEvent;\n\t\tprops: IOverlayProps;\n\t}) => void;\n\n\t/** Fired when the user clicks on the background, this may or may not be\n\t\tvisible depending on \\`isModal\\`. */\n\tonBackgroundClick: ({\n\t\tevent,\n\t\tprops,\n\t}: {\n\t\tevent: React.MouseEvent;\n\t\tprops: IOverlayProps;\n\t}) => void;\n}\n\nexport const overlayPropTypes = [\n\t'children',\n\t'className',\n\t'isShown',\n\t'isAnimated',\n\t'isModal',\n\t'portalId',\n\t'onEscape',\n\t'onBackgroundClick',\n];\n\nconst nonPassThroughs = [...overlayPropTypes, 'initialState', 'callbackId'];\n\ninterface IOverlayState {\n\tportalId: string;\n}\n\nexport const defaultProps = {\n\tisAnimated: true,\n\tisModal: true,\n\tisShown: false,\n\tonBackgroundClick: _.noop,\n\tonEscape: _.noop,\n};\n\nclass Overlay extends React.Component<IOverlayProps, IOverlayState, {}> {\n\tstatic displayName = 'Overlay';\n\n\tstatic peek = {\n\t\tdescription: `\\`Overlay\\` is used to block user interaction with the rest of the app until something has been completed.`,\n\t\tcategories: ['utility'],\n\t\tmadeFrom: ['Portal'],\n\t};\n\n\tstatic propTypes = {\n\t\t/**\n\t\t\tAppended to the component-specific class names set on the root element.\n\t\t*/\n\t\tclassName: string,\n\n\t\t/**\n\t\t\tGenerally you should only have a single child element so the centering\n\t\t\tworks correctly.\n\t\t*/\n\t\tchildren: node,\n\n\t\t/**\n\t\t\tControls visibility.\n\t\t*/\n\t\tisShown: bool,\n\n\t\t/**\n\t\t\tEnables animated transitions during expansion and collapse.\n\t\t */\n\t\tisAnimated: bool,\n\n\t\t/**\n\t\t\tDetermines if it shows with a gray background. If \\`false\\`, the\n\t\t\tbackground will be rendered but will be invisible, except for the\n\t\t\tcontents, and it won't capture any of the user click events.\n\t\t*/\n\t\tisModal: bool,\n\n\t\t/**\n\t\t\tSet your own id for the \\`Portal\\` is that is opened up to contain the\n\t\t\tcontents. In practice you should never need to set this manually.\n\t\t*/\n\t\tportalId: string,\n\n\t\t/**\n\t\t\tFired when the user hits escape.  Signature: \\`({ event, props }) => {}\\`\n\t\t*/\n\t\tonEscape: func,\n\n\t\t/**\n\t\t\tFired when the user clicks on the background, this may or may not be\n\t\t\tvisible depending on \\`isModal\\`.  Signature: \\`({ event, props }) => {}\\`\n\t\t*/\n\t\tonBackgroundClick: func,\n\t};\n\n\tprivate rootHTMLDivElement = React.createRef<HTMLDivElement>();\n\n\tstatic defaultProps = defaultProps;\n\n\tstate = {\n\t\t// This must be in state because getDefaultProps only runs once per\n\t\t// component import which causes collisions\n\t\tportalId: this.props.portalId || uniqueName('Overlay-Portal-'),\n\t};\n\n\tcomponentDidMount(): void {\n\t\tif (window && window.document) {\n\t\t\twindow.document.addEventListener('keydown', this.handleDocumentKeyDown);\n\t\t}\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (window && window.document) {\n\t\t\twindow.document.removeEventListener(\n\t\t\t\t'keydown',\n\t\t\t\tthis.handleDocumentKeyDown\n\t\t\t);\n\t\t}\n\t}\n\n\thandleDocumentKeyDown = (event: KeyboardEvent): void => {\n\t\t// If the user hits the \"escape\" key, then fire an `onEscape`\n\t\t// TODO: use key helpers\n\t\tif (event.keyCode === 27) {\n\t\t\tthis.props.onEscape({ event, props: this.props });\n\t\t}\n\t};\n\n\thandleBackgroundClick = (event: React.MouseEvent): void => {\n\t\t// Use the reference we previously stored from the `ref` to check what\n\t\t// element was clicked on.\n\t\tif (\n\t\t\tthis.rootHTMLDivElement.current &&\n\t\t\tevent.target === this.rootHTMLDivElement.current\n\t\t) {\n\t\t\tthis.props.onBackgroundClick({ event, props: this.props });\n\t\t}\n\t};\n\n\trender(): React.ReactNode {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tisShown,\n\t\t\tisModal,\n\t\t\tisAnimated,\n\t\t\tchildren,\n\t\t\t...passThroughs\n\t\t} = this.props;\n\n\t\tconst { portalId } = this.state;\n\n\t\tconst overlayElement = (\n\t\t\t<div\n\t\t\t\t{..._.omit(passThroughs, nonPassThroughs)}\n\t\t\t\tclassName={cx(className, '&', {\n\t\t\t\t\t'&-is-not-modal': !isModal,\n\t\t\t\t\t'&-is-animated': isAnimated,\n\t\t\t\t})}\n\t\t\t\tonClick={this.handleBackgroundClick}\n\t\t\t\tref={this.rootHTMLDivElement}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t);\n\n\t\treturn (\n\t\t\t<Portal portalId={portalId}>\n\t\t\t\t{isAnimated ? (\n\t\t\t\t\t<CSSTransition\n\t\t\t\t\t\tin={isShown}\n\t\t\t\t\t\tclassNames={cx('&')}\n\t\t\t\t\t\ttimeout={300}\n\t\t\t\t\t\tunmountOnExit\n\t\t\t\t\t>\n\t\t\t\t\t\t{overlayElement}\n\t\t\t\t\t</CSSTransition>\n\t\t\t\t) : isShown ? (\n\t\t\t\t\toverlayElement\n\t\t\t\t) : null}\n\t\t\t</Portal>\n\t\t);\n\t}\n}\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}