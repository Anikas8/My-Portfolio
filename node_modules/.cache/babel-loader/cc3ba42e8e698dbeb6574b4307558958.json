{"ast":null,"code":"import _ from 'lodash';\nimport * as d3Array from 'd3-array';\nimport ReactDOM from 'react-dom';\nconst getGroup = (selection, className) => {\n  const xAxisGroup = selection.select(`.${className}`);\n  if (xAxisGroup.empty()) {\n    return selection.append('g').classed(className, true);\n  }\n  return xAxisGroup;\n};\nconst getGroups = (selection, className, dataset) => {\n  const selectionGroup = selection.selectAll(`.${className}`);\n  if (selectionGroup.empty()) {\n    const xAxisGroup = selectionGroup.data(dataset).order();\n    return xAxisGroup.enter().append('g').classed(className, true);\n  }\n  return selectionGroup;\n};\nconst getTickObj = selection => {\n  let data = selection.selectAll('.innerDiv');\n  if (data.empty()) {\n    data = selection.selectAll('foreignObject').append('xhtml:div').attr('tabindex', 0).style('position', 'fixed').style('transform', 'translate(0px, -50px)').classed('innerDiv', true);\n  }\n  return data;\n};\nconst getTickRender = (selection, containerWidth) => {\n  const tickRender = selection.selectAll('.tickRender');\n  if (!tickRender.empty()) {\n    tickRender.remove();\n  }\n  return selection.append('xhtml:div').style('width', `${containerWidth}px`).attr('id', d => d).classed('tickRender', true);\n};\nconst getLines = (selection, xScale, tickSize) => {\n  const lines = selection.selectAll('line');\n  if (lines.empty()) {\n    return selection.append('line').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', -tickSize || 5);\n  }\n  return lines;\n};\nconst getForeignObject = selection => {\n  const fO = selection.selectAll('foreignObject');\n  if (fO.empty()) {\n    return selection.append('foreignObject').style('overflow', 'visible').style('display', 'flex').attr('x', 0).attr('y', 0).attr('height', 1).attr('width', 1);\n  }\n  return fO;\n};\nconst lucidXAxis = (selection, _ref) => {\n  let {\n    xScale,\n    tickSize,\n    xAxisRenderProp,\n    dataIsCentered,\n    data\n  } = _ref;\n  const range = xScale.range();\n  const domain = xScale.domain();\n  const rMin = Number(d3Array.min(range)) || 0;\n  const rMax = Number(d3Array.max(range)) || 0;\n  const domainLength = dataIsCentered ? domain.length - 1 : domain.length;\n  const axisGroup = getGroup(selection, 'axis');\n  axisGroup.append('line').attr('stroke', 'black').attr('x1', rMin).attr('x2', rMax).attr('y1', 0).attr('y2', 0);\n  axisGroup.append('line').attr('stroke', 'black').attr('x1', rMin).attr('x2', rMax).attr('y1', -tickSize).attr('y2', -tickSize);\n  const xLines = getGroups(axisGroup, 'xLines', domain);\n  const xLine = xLines.attr('transform', d => `translate( ${xScale(d)}, 0)`);\n  getLines(xLine, xScale, tickSize);\n  getForeignObject(xLine);\n  if (!xAxisRenderProp) {\n    xLine.append('text').text(d => d);\n  } else {\n    const tickObj = getTickObj(xLine);\n    const tickRender = getTickRender(tickObj, (rMax - rMin) / domainLength);\n    tickRender.html((xValue, num, node) => {\n      if (xValue !== '' && !_.isNil(xValue)) {\n        const subData = _.find(data, {\n          x: xValue\n        }) || {\n          y: 0,\n          ref: undefined\n        };\n        ReactDOM.render(xAxisRenderProp({\n          x: xValue,\n          y: subData.y,\n          ref: subData.ref\n        }), node[0]);\n      } else return xValue;\n    });\n  }\n};\nexport { lucidXAxis, getGroup };","map":{"version":3,"mappings":"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","names":["_","d3Array","ReactDOM","getGroup","selection","className","xAxisGroup","select","empty","append","classed","getGroups","dataset","selectionGroup","selectAll","data","order","enter","getTickObj","attr","style","getTickRender","containerWidth","tickRender","remove","d","getLines","xScale","tickSize","lines","getForeignObject","fO","lucidXAxis","xAxisRenderProp","dataIsCentered","range","domain","rMin","Number","min","rMax","max","domainLength","length","axisGroup","xLines","xLine","text","tickObj","html","xValue","num","node","isNil","subData","find","x","y","ref","undefined","render"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/DraggableLineChart/d3-helpers.ts"],"sourcesContent":["import { Selection } from 'd3-selection';\nimport _ from 'lodash';\nimport * as d3Array from 'd3-array';\nimport ReactDOM from 'react-dom';\nimport { IData } from './DraggableLineChartD3';\n\nexport type IXAxisRenderProp = ({\n\tx,\n\ty,\n\tref,\n}: {\n\tx: string;\n\ty: number;\n\tref?: any;\n}) => JSX.Element;\n\nexport type ISelection = Selection<SVGElement | any, {} | any, null, undefined>;\n\nconst getGroup = (selection: ISelection, className: string): ISelection => {\n\tconst xAxisGroup = selection.select(`.${className}`);\n\tif (xAxisGroup.empty()) {\n\t\treturn selection.append('g').classed(className, true);\n\t}\n\treturn xAxisGroup;\n};\nconst getGroups = (\n\tselection: ISelection,\n\tclassName: string,\n\tdataset: any\n): ISelection => {\n\tconst selectionGroup = selection.selectAll(`.${className}`);\n\tif (selectionGroup.empty()) {\n\t\tconst xAxisGroup = selectionGroup.data(dataset).order();\n\t\treturn xAxisGroup.enter().append('g').classed(className, true);\n\t}\n\treturn selectionGroup;\n};\n\nconst getTickObj = (selection: ISelection): ISelection => {\n\tlet data = selection.selectAll('.innerDiv');\n\tif (data.empty()) {\n\t\tdata = selection\n\t\t\t.selectAll('foreignObject')\n\t\t\t.append('xhtml:div')\n\t\t\t.attr('tabindex', 0)\n\t\t\t.style('position', 'fixed')\n\t\t\t.style('transform', 'translate(0px, -50px)')\n\t\t\t.classed('innerDiv', true);\n\t}\n\treturn data;\n};\n\nconst getTickRender = (\n\tselection: ISelection,\n\tcontainerWidth: number\n): ISelection => {\n\tconst tickRender = selection.selectAll('.tickRender');\n\tif (!tickRender.empty()) {\n\t\ttickRender.remove();\n\t}\n\treturn selection\n\t\t.append('xhtml:div')\n\t\t.style('width', `${containerWidth}px`)\n\t\t.attr('id', (d: any) => d)\n\t\t.classed('tickRender', true);\n};\n\nconst getLines = (\n\tselection: ISelection,\n\txScale: any,\n\ttickSize: number\n): ISelection => {\n\tconst lines = selection.selectAll('line');\n\tif (lines.empty()) {\n\t\treturn selection\n\t\t\t.append('line')\n\t\t\t.attr('x1', 0)\n\t\t\t.attr('x2', 0)\n\t\t\t.attr('y1', 0)\n\t\t\t.attr('y2', -tickSize || 5);\n\t}\n\treturn lines;\n};\n\nconst getForeignObject = (selection: ISelection): ISelection => {\n\tconst fO = selection.selectAll('foreignObject');\n\tif (fO.empty()) {\n\t\treturn selection\n\t\t\t.append('foreignObject')\n\t\t\t.style('overflow', 'visible')\n\t\t\t.style('display', 'flex')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('height', 1)\n\t\t\t.attr('width', 1);\n\t}\n\treturn fO;\n};\nconst lucidXAxis = (\n\tselection: ISelection,\n\t{\n\t\txScale,\n\t\ttickSize,\n\t\txAxisRenderProp,\n\t\tdataIsCentered,\n\t\tdata,\n\t}: {\n\t\txScale: any;\n\t\ttickSize: number;\n\t\txAxisRenderProp?: IXAxisRenderProp;\n\t\tdataIsCentered?: boolean;\n\t\tdata: IData;\n\t}\n): void => {\n\tconst range = xScale.range();\n\tconst domain = xScale.domain();\n\tconst rMin = Number(d3Array.min(range)) || 0;\n\tconst rMax = Number(d3Array.max(range)) || 0;\n\tconst domainLength = dataIsCentered ? domain.length - 1 : domain.length;\n\tconst axisGroup = getGroup(selection, 'axis');\n\taxisGroup\n\t\t.append('line')\n\t\t.attr('stroke', 'black')\n\t\t.attr('x1', rMin)\n\t\t.attr('x2', rMax)\n\t\t.attr('y1', 0)\n\t\t.attr('y2', 0);\n\taxisGroup\n\t\t.append('line')\n\t\t.attr('stroke', 'black')\n\t\t.attr('x1', rMin)\n\t\t.attr('x2', rMax)\n\t\t.attr('y1', -tickSize)\n\t\t.attr('y2', -tickSize);\n\n\tconst xLines = getGroups(axisGroup, 'xLines', domain);\n\tconst xLine = xLines.attr(\n\t\t'transform',\n\t\t(d: any) => `translate( ${xScale(d)}, 0)`\n\t);\n\tgetLines(xLine, xScale, tickSize);\n\tgetForeignObject(xLine);\n\tif (!xAxisRenderProp) {\n\t\txLine.append('text').text((d: any) => d);\n\t} else {\n\t\tconst tickObj = getTickObj(xLine);\n\t\tconst tickRender = getTickRender(tickObj, (rMax - rMin) / domainLength);\n\t\ttickRender.html((xValue: any, num: any, node: any) => {\n\t\t\tif (xValue !== '' && !_.isNil(xValue)) {\n\t\t\t\tconst subData = _.find(data, { x: xValue }) || { y: 0, ref: undefined };\n\t\t\t\tReactDOM.render(\n\t\t\t\t\txAxisRenderProp({ x: xValue, y: subData.y, ref: subData.ref }),\n\t\t\t\t\tnode[0]\n\t\t\t\t);\n\t\t\t} else return xValue;\n\t\t});\n\t}\n};\n\nexport { lucidXAxis, getGroup };\n"]},"metadata":{},"sourceType":"module"}