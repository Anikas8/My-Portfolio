{"ast":null,"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { lucidClassNames } from '../../util/style-helpers';\nimport * as reducers from './Paginator.reducers';\nimport selectors from './Paginator.selectors';\nimport { SingleSelectDumb as SingleSelect } from '../SingleSelect/SingleSelect';\nimport TextField from '../TextField/TextField';\nimport { Button } from '../Button/Button';\nimport ArrowIcon from '../Icon/ArrowIcon/ArrowIcon';\nimport { buildModernHybridComponent } from '../../util/state-management';\nconst cx = lucidClassNames.bind('&-Paginator');\nconst {\n  arrayOf,\n  bool,\n  func,\n  number,\n  object,\n  oneOfType,\n  shape,\n  string\n} = PropTypes;\nconst {\n  Option\n} = SingleSelect;\nconst defaultProps = {\n  hasPageSizeSelector: false,\n  isDisabled: false,\n  objectLabel: 'Object',\n  onPageSelect: _.noop,\n  selectedPageIndex: 0,\n  selectedPageSizeIndex: 0,\n  showTotalObjects: false,\n  totalCount: null,\n  totalPages: undefined,\n  pageSizeOptions: [10, 50, 100],\n  SingleSelect: {\n    ...SingleSelect.defaultProps,\n    selectedIndex: 0\n  },\n  TextField: TextField.defaultProps\n};\nconst Paginator = props => {\n  const {\n    className,\n    hasPageSizeSelector,\n    isDisabled,\n    objectLabel,\n    objectLabelPlural,\n    onPageSelect = defaultProps.onPageSelect,\n    onPageSizeSelect,\n    pageSizeOptions,\n    selectedPageIndex = defaultProps.selectedPageIndex,\n    selectedPageSizeIndex,\n    showTotalObjects,\n    totalPages = defaultProps.totalPages,\n    totalCount,\n    style,\n    SingleSelect: singleSelectProps,\n    TextField: textFieldProps\n  } = props;\n  const handleTextFieldChange = (pageNum, _ref) => {\n    let {\n      props,\n      event\n    } = _ref;\n    const parsedPageNum = _.parseInt(pageNum);\n    if (_.isNaN(parsedPageNum)) {\n      return onPageSelect && onPageSelect(selectedPageIndex, totalPages, {\n        props,\n        event\n      });\n    }\n    return onPageSelect && onPageSelect(parsedPageNum - 1, totalPages, {\n      props,\n      event\n    });\n  };\n  const isTextFieldDisabled = isDisabled || totalPages === 1;\n  return React.createElement(\"div\", {\n    style: style,\n    className: cx('&', className)\n  }, showTotalObjects && _.isNumber(totalCount) && React.createElement(\"div\", {\n    className: cx('&-total-count')\n  }, _.isFunction(showTotalObjects) ? showTotalObjects(totalCount) : totalCount.toLocaleString(), ' ', totalCount === 1 ? objectLabel : objectLabelPlural || `${objectLabel}s`), hasPageSizeSelector ? React.createElement(\"div\", {\n    className: cx('&-page-size-container')\n  }, React.createElement(\"span\", {\n    className: cx('&-rows-per-page-label')\n  }, \"Rows per page:\"), React.createElement(SingleSelect, {\n    ...singleSelectProps,\n    hasReset: false,\n    isInvisible: true,\n    isSelectionHighlighted: false,\n    isDisabled: isDisabled,\n    selectedIndex: selectedPageSizeIndex,\n    onSelect: onPageSizeSelect\n  }, _.map(pageSizeOptions, option => React.createElement(Option, {\n    key: option\n  }, option)))) : null, React.createElement(Button, {\n    onClick: _.partial(onPageSelect, selectedPageIndex - 1, totalPages),\n    isDisabled: isDisabled || selectedPageIndex === 0,\n    kind: 'invisible',\n    hasOnlyIcon: true\n  }, React.createElement(ArrowIcon, {\n    direction: 'left'\n  })), React.createElement(TextField, {\n    lazyLevel: 100,\n    ...textFieldProps,\n    onBlur: handleTextFieldChange,\n    onSubmit: handleTextFieldChange,\n    isDisabled: isTextFieldDisabled,\n    value: selectedPageIndex + 1\n  }), !_.isNil(totalPages) && React.createElement(\"span\", null, \"of \", totalPages.toLocaleString()), React.createElement(Button, {\n    kind: 'invisible',\n    onClick: _.partial(onPageSelect, selectedPageIndex + 1, totalPages),\n    isDisabled: isDisabled || selectedPageIndex === (totalPages || 0) - 1,\n    hasOnlyIcon: true\n  }, React.createElement(ArrowIcon, {\n    direction: 'right'\n  })));\n};\nPaginator.displayName = 'Paginator';\nPaginator.description = `A paginator that has an optional page size selector.`;\nPaginator.categories = ['navigation'];\nPaginator.madeFrom = ['ArrowIcon', 'TextField', 'Button', 'SingleSelect'];\nPaginator.reducers = reducers;\nPaginator.selectors = selectors;\nPaginator.defaultProps = defaultProps;\nexport default buildModernHybridComponent(Paginator, {\n  reducers,\n  selectors\n});\nexport { Paginator as PaginatorDumb };","map":{"version":3,"mappings":"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","names":["_","React","PropTypes","lucidClassNames","reducers","selectors","SingleSelectDumb","SingleSelect","TextField","Button","ArrowIcon","buildModernHybridComponent","cx","bind","arrayOf","bool","func","number","object","oneOfType","shape","string","Option","defaultProps","hasPageSizeSelector","isDisabled","objectLabel","onPageSelect","noop","selectedPageIndex","selectedPageSizeIndex","showTotalObjects","totalCount","totalPages","undefined","pageSizeOptions","selectedIndex","Paginator","props","className","objectLabelPlural","onPageSizeSelect","style","singleSelectProps","textFieldProps","handleTextFieldChange","pageNum","event","parsedPageNum","parseInt","isNaN","isTextFieldDisabled","isNumber","isFunction","toLocaleString","hasReset","isInvisible","isSelectionHighlighted","onSelect","map","option","key","onClick","partial","kind","hasOnlyIcon","direction","lazyLevel","onBlur","onSubmit","value","isNil","displayName","description","categories","madeFrom","PaginatorDumb"],"sources":["/home/skanda/node_modules/lucid-ui/src/components/Paginator/Paginator.tsx"],"sourcesContent":["import _ from 'lodash';\nimport React, { FC } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { lucidClassNames } from '../../util/style-helpers';\nimport { StandardProps } from '../../util/component-types';\nimport * as reducers from './Paginator.reducers';\nimport selectors from './Paginator.selectors';\nimport {\n\tISingleSelectOptionProps,\n\tISingleSelectProps,\n\tSingleSelectDumb as SingleSelect,\n\tISingleSelectState,\n} from '../SingleSelect/SingleSelect';\nimport TextField, { ITextFieldProps } from '../TextField/TextField';\nimport { IButtonProps, Button } from '../Button/Button';\nimport ArrowIcon from '../Icon/ArrowIcon/ArrowIcon';\nimport { buildModernHybridComponent } from '../../util/state-management';\n\nconst cx = lucidClassNames.bind('&-Paginator');\n\nconst { arrayOf, bool, func, number, object, oneOfType, shape, string } =\n\tPropTypes;\n\nconst { Option } = SingleSelect;\n\ntype IPaginatorSingleSelectProps = Partial<ISingleSelectProps>;\n\ntype ShowTotalObjects = (count: number) => string;\n\nexport interface IPaginatorProps\n\textends StandardProps,\n\t\tReact.DetailedHTMLProps<\n\t\t\tReact.HTMLAttributes<HTMLDivElement>,\n\t\t\tHTMLDivElement\n\t\t> {\n\t/**\n\t * Appended to the component-specific class names set on the root elements.\n\t */\n\tclassName?: string;\n\n\t/**\n\t * Whether or not to show the page size selector.\n\t */\n\thasPageSizeSelector?: boolean;\n\n\t/**\n\t * Disables the Paginator from being clicked or focused.\n\t */\n\tisDisabled?: boolean;\n\n\t/**\n\t * Label when showTotalObjects is true with 1 or fewer objects.\n\t */\n\tobjectLabel?: string;\n\n\t/**\n\t * Label when showTotalObjects is true with more than 1 objects.\n\t */\n\tobjectLabelPlural?: string;\n\n\t/**\n\t * Called when a page is selected.\n\t */\n\tonPageSelect?: (\n\t\tpageIndex: number,\n\t\ttotalPages: number,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: IButtonProps | ITextFieldProps;\n\t\t\tevent: React.MouseEvent | React.FormEvent | React.FocusEvent;\n\t\t}\n\t) => void;\n\n\t/**\n\t * Called when a page size is selected.\n\t */\n\tonPageSizeSelect?: (\n\t\tpageSizeIndex: number | null,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: ISingleSelectOptionProps | undefined;\n\t\t\tevent: React.MouseEvent | React.KeyboardEvent;\n\t\t}\n\t) => void;\n\n\t/**\n\t * 0-indexed currently selected page number.\n\t */\n\tselectedPageIndex?: number;\n\n\t/**\n\t * Currently selected page size option index.\n\t */\n\tselectedPageSizeIndex?: number;\n\n\t/**\n\t * Show total count of objects.\n\t */\n\tshowTotalObjects?: boolean | ShowTotalObjects;\n\n\t/**\n\t * Number to display in \\`of \\${totalPages}\\`, calculated from\n\t * \\`totalPages\\` and selected page size by default.\n\t */\n\ttotalPages?: number;\n\n\t/**\n\t * Total number of items across all pages.\n\t */\n\ttotalCount?: number | null;\n\n\t/**\n\t * Array of numbers representing page size options.\n\t */\n\tpageSizeOptions?: number[];\n\n\t/**\n\t * Object of SingleSelect props which are passed thru to the underlying SingleSelect component for the page size selector.\n\t */\n\tSingleSelect?: IPaginatorSingleSelectProps;\n\n\t/**\n\t * Object of TextField props which are passed thru to the underlying TextField component.\n\t */\n\tTextField?: ITextFieldProps;\n}\n\nconst defaultProps = {\n\thasPageSizeSelector: false,\n\tisDisabled: false,\n\tobjectLabel: 'Object',\n\tonPageSelect: _.noop,\n\tselectedPageIndex: 0,\n\tselectedPageSizeIndex: 0,\n\tshowTotalObjects: false,\n\ttotalCount: null,\n\ttotalPages: undefined,\n\tpageSizeOptions: [10, 50, 100],\n\tSingleSelect: {\n\t\t...SingleSelect.defaultProps,\n\t\tselectedIndex: 0,\n\t},\n\tTextField: TextField.defaultProps,\n};\nexport interface IPaginatorState {\n\tpageIndex: number;\n\ttotalPages: number;\n\ttotalCount: number;\n\tselectedPageIndex: number;\n\tselectedPageSizeIndex: number;\n\tpageSizeOptions: number[];\n\tSingleSelect: ISingleSelectState;\n}\n\nconst Paginator: FC<IPaginatorProps> & ILucidComponent = (\n\tprops: IPaginatorProps\n) => {\n\tconst {\n\t\tclassName,\n\t\thasPageSizeSelector,\n\t\tisDisabled,\n\t\tobjectLabel,\n\t\tobjectLabelPlural,\n\t\tonPageSelect = defaultProps.onPageSelect,\n\t\tonPageSizeSelect,\n\t\tpageSizeOptions,\n\t\tselectedPageIndex = defaultProps.selectedPageIndex,\n\t\tselectedPageSizeIndex,\n\t\tshowTotalObjects,\n\t\ttotalPages = defaultProps.totalPages,\n\t\ttotalCount,\n\t\tstyle,\n\t\tSingleSelect: singleSelectProps,\n\t\tTextField: textFieldProps,\n\t} = props;\n\n\tconst handleTextFieldChange = (\n\t\tpageNum: string,\n\t\t{\n\t\t\tprops,\n\t\t\tevent,\n\t\t}: {\n\t\t\tprops: ITextFieldProps;\n\t\t\tevent: React.FocusEvent | React.FormEvent;\n\t\t}\n\t): void => {\n\t\tconst parsedPageNum = _.parseInt(pageNum);\n\t\tif (_.isNaN(parsedPageNum)) {\n\t\t\treturn (\n\t\t\t\tonPageSelect &&\n\t\t\t\tonPageSelect(selectedPageIndex, totalPages, { props, event })\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\tonPageSelect &&\n\t\t\tonPageSelect(parsedPageNum - 1, totalPages, { props, event })\n\t\t);\n\t};\n\n\tconst isTextFieldDisabled = isDisabled || totalPages === 1;\n\n\treturn (\n\t\t<div style={style} className={cx('&', className)}>\n\t\t\t{showTotalObjects && _.isNumber(totalCount) && (\n\t\t\t\t<div className={cx('&-total-count')}>\n\t\t\t\t\t{_.isFunction(showTotalObjects)\n\t\t\t\t\t\t? showTotalObjects(totalCount)\n\t\t\t\t\t\t: totalCount.toLocaleString()}{' '}\n\t\t\t\t\t{totalCount === 1\n\t\t\t\t\t\t? objectLabel\n\t\t\t\t\t\t: objectLabelPlural || `${objectLabel}s`}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{hasPageSizeSelector ? (\n\t\t\t\t<div className={cx('&-page-size-container')}>\n\t\t\t\t\t<span className={cx('&-rows-per-page-label')}>Rows per page:</span>\n\t\t\t\t\t<SingleSelect\n\t\t\t\t\t\t{...singleSelectProps}\n\t\t\t\t\t\thasReset={false}\n\t\t\t\t\t\tisInvisible={true}\n\t\t\t\t\t\tisSelectionHighlighted={false}\n\t\t\t\t\t\tisDisabled={isDisabled}\n\t\t\t\t\t\tselectedIndex={selectedPageSizeIndex}\n\t\t\t\t\t\tonSelect={onPageSizeSelect}\n\t\t\t\t\t>\n\t\t\t\t\t\t{_.map(pageSizeOptions, (option) => (\n\t\t\t\t\t\t\t<Option key={option}>{option}</Option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</SingleSelect>\n\t\t\t\t</div>\n\t\t\t) : null}\n\n\t\t\t<Button\n\t\t\t\tonClick={_.partial(onPageSelect, selectedPageIndex - 1, totalPages)}\n\t\t\t\tisDisabled={isDisabled || selectedPageIndex === 0}\n\t\t\t\tkind='invisible'\n\t\t\t\thasOnlyIcon\n\t\t\t>\n\t\t\t\t<ArrowIcon direction='left' />\n\t\t\t</Button>\n\t\t\t<TextField\n\t\t\t\tlazyLevel={100}\n\t\t\t\t{...textFieldProps}\n\t\t\t\tonBlur={handleTextFieldChange}\n\t\t\t\tonSubmit={handleTextFieldChange}\n\t\t\t\tisDisabled={isTextFieldDisabled}\n\t\t\t\tvalue={selectedPageIndex + 1}\n\t\t\t/>\n\t\t\t{!_.isNil(totalPages) && <span>of {totalPages.toLocaleString()}</span>}\n\t\t\t<Button\n\t\t\t\tkind='invisible'\n\t\t\t\tonClick={_.partial(onPageSelect, selectedPageIndex + 1, totalPages)}\n\t\t\t\tisDisabled={isDisabled || selectedPageIndex === (totalPages || 0) - 1}\n\t\t\t\thasOnlyIcon\n\t\t\t>\n\t\t\t\t<ArrowIcon direction='right' />\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nPaginator.displayName = 'Paginator';\nPaginator.description = `A paginator that has an optional page size selector.`;\nPaginator.categories = ['navigation'];\nPaginator.madeFrom = ['ArrowIcon', 'TextField', 'Button', 'SingleSelect'];\nPaginator.reducers = reducers;\nPaginator.selectors = selectors;\n\nPaginator.defaultProps = defaultProps;\n\nexport default buildModernHybridComponent<\n\tIPaginatorProps,\n\tIPaginatorState,\n\ttypeof Paginator\n>(Paginator, { reducers, selectors });\n\nexport { Paginator as PaginatorDumb };\n"]},"metadata":{},"sourceType":"module"}